
Quadro02.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005eac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00005eac  00005f40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000706  008000a0  008000a0  00005f80  2**0
                  ALLOC
  3 .stab         00003a98  00000000  00000000  00005f80  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011cc  00000000  00000000  00009a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000abe4  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000668  00000000  00000000  0000ac13  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000979a  00000000  00000000  0000b27b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000027ea  00000000  00000000  00014a15  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002b64  00000000  00000000  000171ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001244  00000000  00000000  00019d64  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001cd3  00000000  00000000  0001afa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000054e0  00000000  00000000  0001cc7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000498  00000000  00000000  0002215b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__dtors_end>
       4:	0c 94 49 0c 	jmp	0x1892	; 0x1892 <__vector_1>
       8:	0c 94 8b 01 	jmp	0x316	; 0x316 <__bad_interrupt>
       c:	0c 94 8b 01 	jmp	0x316	; 0x316 <__bad_interrupt>
      10:	0c 94 7b 1f 	jmp	0x3ef6	; 0x3ef6 <__vector_4>
      14:	0c 94 8b 01 	jmp	0x316	; 0x316 <__bad_interrupt>
      18:	0c 94 8b 01 	jmp	0x316	; 0x316 <__bad_interrupt>
      1c:	0c 94 63 16 	jmp	0x2cc6	; 0x2cc6 <__vector_7>
      20:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <__vector_8>
      24:	0c 94 8b 01 	jmp	0x316	; 0x316 <__bad_interrupt>
      28:	0c 94 8b 01 	jmp	0x316	; 0x316 <__bad_interrupt>
      2c:	0c 94 a4 2a 	jmp	0x5548	; 0x5548 <__vector_11>
      30:	0c 94 8b 01 	jmp	0x316	; 0x316 <__bad_interrupt>
      34:	0c 94 1e 1f 	jmp	0x3e3c	; 0x3e3c <__vector_13>
      38:	0c 94 f7 1e 	jmp	0x3dee	; 0x3dee <__vector_14>
      3c:	0c 94 8b 01 	jmp	0x316	; 0x316 <__bad_interrupt>
      40:	0c 94 8d 01 	jmp	0x31a	; 0x31a <__vector_16>
      44:	0c 94 8b 01 	jmp	0x316	; 0x316 <__bad_interrupt>
      48:	0c 94 8b 01 	jmp	0x316	; 0x316 <__bad_interrupt>
      4c:	0c 94 8b 01 	jmp	0x316	; 0x316 <__bad_interrupt>
      50:	0c 94 8b 01 	jmp	0x316	; 0x316 <__bad_interrupt>
      54:	08 4a       	sbci	r16, 0xA8	; 168
      56:	d7 3b       	cpi	r29, 0xB7	; 183
      58:	3b ce       	rjmp	.-906    	; 0xfffffcd0 <__eeprom_end+0xff7efcd0>
      5a:	01 6e       	ori	r16, 0xE1	; 225
      5c:	84 bc       	out	0x24, r8	; 36
      5e:	bf fd       	.word	0xfdbf	; ????
      60:	c1 2f       	mov	r28, r17
      62:	3d 6c       	ori	r19, 0xCD	; 205
      64:	74 31       	cpi	r23, 0x14	; 20
      66:	9a bd       	out	0x2a, r25	; 42
      68:	56 83       	std	Z+6, r21	; 0x06
      6a:	3d da       	rcall	.-2950   	; 0xfffff4e6 <__eeprom_end+0xff7ef4e6>
      6c:	3d 00       	.word	0x003d	; ????
      6e:	c7 7f       	andi	r28, 0xF7	; 247
      70:	11 be       	out	0x31, r1	; 49
      72:	d9 e4       	ldi	r29, 0x49	; 73
      74:	bb 4c       	sbci	r27, 0xCB	; 203
      76:	3e 91       	ld	r19, -X
      78:	6b aa       	std	Y+51, r6	; 0x33
      7a:	aa be       	out	0x3a, r10	; 58
      7c:	00 00       	nop
      7e:	00 80       	ld	r0, Z
      80:	3f 05       	cpc	r19, r15
      82:	a8 4c       	sbci	r26, 0xC8	; 200
      84:	cd b2       	in	r12, 0x1d	; 29
      86:	d4 4e       	sbci	r29, 0xE4	; 228
      88:	b9 38       	cpi	r27, 0x89	; 137
      8a:	36 a9       	ldd	r19, Z+54	; 0x36
      8c:	02 0c       	add	r0, r2
      8e:	50 b9       	out	0x00, r21	; 0
      90:	91 86       	std	Z+9, r9	; 0x09
      92:	88 08       	sbc	r8, r8
      94:	3c a6       	std	Y+44, r3	; 0x2c
      96:	aa aa       	std	Y+50, r10	; 0x32
      98:	2a be       	out	0x3a, r2	; 58
      9a:	00 00       	nop
      9c:	00 80       	ld	r0, Z
      9e:	3f 06       	cpc	r3, r31
      a0:	64 ec       	ldi	r22, 0xC4	; 196
      a2:	1b 3c       	cpi	r17, 0xCB	; 203
      a4:	04 bc       	out	0x24, r0	; 36
      a6:	16 3e       	cpi	r17, 0xE6	; 230
      a8:	3b e5       	ldi	r19, 0x5B	; 91
      aa:	b9 3c       	cpi	r27, 0xC9	; 201
      ac:	c9 3c       	cpi	r28, 0xC9	; 201
      ae:	37 c2       	rjmp	.+1134   	; 0x51e <_Z12ADXL345_Pollv+0x16a>
      b0:	9e 5a       	subi	r25, 0xAE	; 174
      b2:	3d 66       	ori	r19, 0x6D	; 109
      b4:	04 98       	cbi	0x00, 4	; 0
      b6:	08 3e       	cpi	r16, 0xE8	; 232
      b8:	ea 69       	ori	r30, 0x9A	; 154
      ba:	aa aa       	std	Y+50, r10	; 0x32
      bc:	3e 00       	.word	0x003e	; ????
      be:	00 00       	nop
      c0:	80 3f       	cpi	r24, 0xF0	; 240

000000c2 <aucCRCHi>:
      c2:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@
      d2:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
      e2:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
      f2:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@
     102:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
     112:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@
     122:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@
     132:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
     142:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
     152:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@
     162:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@
     172:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
     182:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@
     192:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
     1a2:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
     1b2:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@

000001c2 <aucCRCLo>:
     1c2:	00 c0 c1 01 c3 03 02 c2 c6 06 07 c7 05 c5 c4 04     ................
     1d2:	cc 0c 0d cd 0f cf ce 0e 0a ca cb 0b c9 09 08 c8     ................
     1e2:	d8 18 19 d9 1b db da 1a 1e de df 1f dd 1d 1c dc     ................
     1f2:	14 d4 d5 15 d7 17 16 d6 d2 12 13 d3 11 d1 d0 10     ................
     202:	f0 30 31 f1 33 f3 f2 32 36 f6 f7 37 f5 35 34 f4     .01.3..26..7.54.
     212:	3c fc fd 3d ff 3f 3e fe fa 3a 3b fb 39 f9 f8 38     <..=.?>..:;.9..8
     222:	28 e8 e9 29 eb 2b 2a ea ee 2e 2f ef 2d ed ec 2c     (..).+*.../.-..,
     232:	e4 24 25 e5 27 e7 e6 26 22 e2 e3 23 e1 21 20 e0     .$%.'..&"..#.! .
     242:	a0 60 61 a1 63 a3 a2 62 66 a6 a7 67 a5 65 64 a4     .`a.c..bf..g.ed.
     252:	6c ac ad 6d af 6f 6e ae aa 6a 6b ab 69 a9 a8 68     l..m.on..jk.i..h
     262:	78 b8 b9 79 bb 7b 7a ba be 7e 7f bf 7d bd bc 7c     x..y.{z..~..}..|
     272:	b4 74 75 b5 77 b7 b6 76 72 b2 b3 73 b1 71 70 b0     .tu.w..vr..s.qp.
     282:	50 90 91 51 93 53 52 92 96 56 57 97 55 95 94 54     P..Q.SR..VW.U..T
     292:	9c 5c 5d 9d 5f 9f 9e 5e 5a 9a 9b 5b 99 59 58 98     .\]._..^Z..[.YX.
     2a2:	88 48 49 89 4b 8b 8a 4a 4e 8e 8f 4f 8d 4d 4c 8c     .HI.K..JN..O.ML.
     2b2:	44 84 85 45 87 47 46 86 82 42 43 83 41 81 80 40     D..E.GF..BC.A..@

000002c2 <__ctors_start>:
     2c2:	3b 0c       	add	r3, r11

000002c4 <__ctors_end>:
     2c4:	42 0c       	add	r4, r2

000002c6 <__dtors_end>:
     2c6:	11 24       	eor	r1, r1
     2c8:	1f be       	out	0x3f, r1	; 63
     2ca:	cf e5       	ldi	r28, 0x5F	; 95
     2cc:	d8 e0       	ldi	r29, 0x08	; 8
     2ce:	de bf       	out	0x3e, r29	; 62
     2d0:	cd bf       	out	0x3d, r28	; 61

000002d2 <__do_copy_data>:
     2d2:	10 e0       	ldi	r17, 0x00	; 0
     2d4:	a0 e6       	ldi	r26, 0x60	; 96
     2d6:	b0 e0       	ldi	r27, 0x00	; 0
     2d8:	ec ea       	ldi	r30, 0xAC	; 172
     2da:	fe e5       	ldi	r31, 0x5E	; 94
     2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <__do_copy_data+0x10>
     2de:	05 90       	lpm	r0, Z+
     2e0:	0d 92       	st	X+, r0
     2e2:	a0 3a       	cpi	r26, 0xA0	; 160
     2e4:	b1 07       	cpc	r27, r17
     2e6:	d9 f7       	brne	.-10     	; 0x2de <__do_copy_data+0xc>

000002e8 <__do_clear_bss>:
     2e8:	27 e0       	ldi	r18, 0x07	; 7
     2ea:	a0 ea       	ldi	r26, 0xA0	; 160
     2ec:	b0 e0       	ldi	r27, 0x00	; 0
     2ee:	01 c0       	rjmp	.+2      	; 0x2f2 <.do_clear_bss_start>

000002f0 <.do_clear_bss_loop>:
     2f0:	1d 92       	st	X+, r1

000002f2 <.do_clear_bss_start>:
     2f2:	a6 3a       	cpi	r26, 0xA6	; 166
     2f4:	b2 07       	cpc	r27, r18
     2f6:	e1 f7       	brne	.-8      	; 0x2f0 <.do_clear_bss_loop>

000002f8 <__do_global_ctors>:
     2f8:	12 e0       	ldi	r17, 0x02	; 2
     2fa:	c4 ec       	ldi	r28, 0xC4	; 196
     2fc:	d2 e0       	ldi	r29, 0x02	; 2
     2fe:	04 c0       	rjmp	.+8      	; 0x308 <__do_global_ctors+0x10>
     300:	22 97       	sbiw	r28, 0x02	; 2
     302:	fe 01       	movw	r30, r28
     304:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <__tablejump__>
     308:	c2 3c       	cpi	r28, 0xC2	; 194
     30a:	d1 07       	cpc	r29, r17
     30c:	c9 f7       	brne	.-14     	; 0x300 <__do_global_ctors+0x8>
     30e:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <main>
     312:	0c 94 49 2f 	jmp	0x5e92	; 0x5e92 <__do_global_dtors>

00000316 <__bad_interrupt>:
     316:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000031a <__vector_16>:
 */ 

#include "ADC.h"

ISR(ADC_vect)
{
     31a:	1f 92       	push	r1
     31c:	0f 92       	push	r0
     31e:	0f b6       	in	r0, 0x3f	; 63
     320:	0f 92       	push	r0
     322:	11 24       	eor	r1, r1
     324:	2f 93       	push	r18
     326:	3f 93       	push	r19
     328:	4f 93       	push	r20
     32a:	5f 93       	push	r21
     32c:	6f 93       	push	r22
     32e:	7f 93       	push	r23
     330:	8f 93       	push	r24
     332:	9f 93       	push	r25
     334:	af 93       	push	r26
     336:	bf 93       	push	r27
     338:	ef 93       	push	r30
     33a:	ff 93       	push	r31
	U_Batt.value = (ADC * 35.45) / 1024.0 + D4_offset;
     33c:	64 b1       	in	r22, 0x04	; 4
     33e:	75 b1       	in	r23, 0x05	; 5
     340:	80 e0       	ldi	r24, 0x00	; 0
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	0e 94 8e 2c 	call	0x591c	; 0x591c <__floatunsisf>
     348:	2d ec       	ldi	r18, 0xCD	; 205
     34a:	3c ec       	ldi	r19, 0xCC	; 204
     34c:	4d e0       	ldi	r20, 0x0D	; 13
     34e:	52 e4       	ldi	r21, 0x42	; 66
     350:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
     354:	20 e0       	ldi	r18, 0x00	; 0
     356:	30 e0       	ldi	r19, 0x00	; 0
     358:	40 e8       	ldi	r20, 0x80	; 128
     35a:	5a e3       	ldi	r21, 0x3A	; 58
     35c:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
     360:	20 91 91 00 	lds	r18, 0x0091
     364:	30 91 92 00 	lds	r19, 0x0092
     368:	40 91 93 00 	lds	r20, 0x0093
     36c:	50 91 94 00 	lds	r21, 0x0094
     370:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
     374:	60 93 67 06 	sts	0x0667, r22
     378:	70 93 68 06 	sts	0x0668, r23
     37c:	80 93 69 06 	sts	0x0669, r24
     380:	90 93 6a 06 	sts	0x066A, r25
	//U_Batt.array[0] = ADCH<<8 | ADCL;
	ADCSRA=1<<ADEN|1<<ADSC|0<<ADATE|0<<ADIF|1<<ADIE|1<<ADPS2|1<<ADPS1|1<<ADPS0;
     384:	8f ec       	ldi	r24, 0xCF	; 207
     386:	86 b9       	out	0x06, r24	; 6
}
     388:	ff 91       	pop	r31
     38a:	ef 91       	pop	r30
     38c:	bf 91       	pop	r27
     38e:	af 91       	pop	r26
     390:	9f 91       	pop	r25
     392:	8f 91       	pop	r24
     394:	7f 91       	pop	r23
     396:	6f 91       	pop	r22
     398:	5f 91       	pop	r21
     39a:	4f 91       	pop	r20
     39c:	3f 91       	pop	r19
     39e:	2f 91       	pop	r18
     3a0:	0f 90       	pop	r0
     3a2:	0f be       	out	0x3f, r0	; 63
     3a4:	0f 90       	pop	r0
     3a6:	1f 90       	pop	r1
     3a8:	18 95       	reti

000003aa <_Z8ADC_Initv>:

void ADC_Init()
{
	ADCSRA=1<<ADEN|1<<ADSC|0<<ADATE|0<<ADIF|1<<ADIE|1<<ADPS2|1<<ADPS1|1<<ADPS0;
     3aa:	8f ec       	ldi	r24, 0xCF	; 207
     3ac:	86 b9       	out	0x06, r24	; 6
	SFIOR = 0<<ADTS2 | 0<<ADTS1 | 0<<ADTS0;
     3ae:	10 be       	out	0x30, r1	; 48
	ADMUX=0;	
     3b0:	17 b8       	out	0x07, r1	; 7
     3b2:	08 95       	ret

000003b4 <_Z12ADXL345_Pollv>:
#include "main.h"



uint8_t ADXL345_Poll()
{
     3b4:	0f 93       	push	r16
     3b6:	1f 93       	push	r17
     3b8:	cf 93       	push	r28
     3ba:	df 93       	push	r29
	uint8_t LSB, MSB;
	
	twi(TWI_START);
     3bc:	80 e0       	ldi	r24, 0x00	; 0
     3be:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=ADXL345_ADDR|I2C_WRITE;
     3c2:	86 ea       	ldi	r24, 0xA6	; 166
     3c4:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     3c6:	83 e0       	ldi	r24, 0x03	; 3
     3c8:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=0x32;
     3cc:	82 e3       	ldi	r24, 0x32	; 50
     3ce:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     3d0:	83 e0       	ldi	r24, 0x03	; 3
     3d2:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	twi(TWI_RESTART);
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=ADXL345_ADDR|I2C_READ;
     3dc:	87 ea       	ldi	r24, 0xA7	; 167
     3de:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     3e0:	83 e0       	ldi	r24, 0x03	; 3
     3e2:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	twi(TWI_RECEIVE_ACK);
     3e6:	84 e0       	ldi	r24, 0x04	; 4
     3e8:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	LSB=TWDR;
     3ec:	13 b1       	in	r17, 0x03	; 3
	twi(TWI_RECEIVE_ACK);
     3ee:	84 e0       	ldi	r24, 0x04	; 4
     3f0:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	MSB=TWDR;
     3f4:	23 b1       	in	r18, 0x03	; 3
	p_k_y.value = k_y.value;
     3f6:	c7 ee       	ldi	r28, 0xE7	; 231
     3f8:	d5 e0       	ldi	r29, 0x05	; 5
     3fa:	88 81       	ld	r24, Y
     3fc:	99 81       	ldd	r25, Y+1	; 0x01
     3fe:	aa 81       	ldd	r26, Y+2	; 0x02
     400:	bb 81       	ldd	r27, Y+3	; 0x03
     402:	80 93 f3 05 	sts	0x05F3, r24
     406:	90 93 f4 05 	sts	0x05F4, r25
     40a:	a0 93 f5 05 	sts	0x05F5, r26
     40e:	b0 93 f6 05 	sts	0x05F6, r27
	k_y.value = LowPassFilter((-0.0032) * (float)(MSB << 8 | LSB), 1);
     412:	72 2f       	mov	r23, r18
     414:	60 e0       	ldi	r22, 0x00	; 0
     416:	61 2b       	or	r22, r17
     418:	88 27       	eor	r24, r24
     41a:	77 fd       	sbrc	r23, 7
     41c:	80 95       	com	r24
     41e:	98 2f       	mov	r25, r24
     420:	0e 94 90 2c 	call	0x5920	; 0x5920 <__floatsisf>
     424:	27 e1       	ldi	r18, 0x17	; 23
     426:	37 eb       	ldi	r19, 0xB7	; 183
     428:	41 e5       	ldi	r20, 0x51	; 81
     42a:	5b eb       	ldi	r21, 0xBB	; 187
     42c:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
     430:	41 e0       	ldi	r20, 0x01	; 1
     432:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <_Z13LowPassFilterfh>
	k_y.value += coeffs[ADXL345_OFFY].value;
     436:	20 91 33 05 	lds	r18, 0x0533
     43a:	30 91 34 05 	lds	r19, 0x0534
     43e:	40 91 35 05 	lds	r20, 0x0535
     442:	50 91 36 05 	lds	r21, 0x0536
     446:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
	k_y.value *= coeffs[ADXL345_SCY].value;
     44a:	20 91 af 05 	lds	r18, 0x05AF
     44e:	30 91 b0 05 	lds	r19, 0x05B0
     452:	40 91 b1 05 	lds	r20, 0x05B1
     456:	50 91 b2 05 	lds	r21, 0x05B2
     45a:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
     45e:	68 83       	st	Y, r22
     460:	79 83       	std	Y+1, r23	; 0x01
     462:	8a 83       	std	Y+2, r24	; 0x02
     464:	9b 83       	std	Y+3, r25	; 0x03
	
	twi(TWI_RECEIVE_ACK);
     466:	84 e0       	ldi	r24, 0x04	; 4
     468:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	LSB=TWDR;
     46c:	13 b1       	in	r17, 0x03	; 3
	twi(TWI_RECEIVE_ACK);
     46e:	84 e0       	ldi	r24, 0x04	; 4
     470:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	MSB=TWDR;
     474:	23 b1       	in	r18, 0x03	; 3
	p_k_x.value = k_x.value;
     476:	c3 ee       	ldi	r28, 0xE3	; 227
     478:	d5 e0       	ldi	r29, 0x05	; 5
     47a:	88 81       	ld	r24, Y
     47c:	99 81       	ldd	r25, Y+1	; 0x01
     47e:	aa 81       	ldd	r26, Y+2	; 0x02
     480:	bb 81       	ldd	r27, Y+3	; 0x03
     482:	80 93 ef 05 	sts	0x05EF, r24
     486:	90 93 f0 05 	sts	0x05F0, r25
     48a:	a0 93 f1 05 	sts	0x05F1, r26
     48e:	b0 93 f2 05 	sts	0x05F2, r27
	k_x.value = LowPassFilter((-0.0032) * (float)(MSB << 8 | LSB), 2);
     492:	72 2f       	mov	r23, r18
     494:	60 e0       	ldi	r22, 0x00	; 0
     496:	61 2b       	or	r22, r17
     498:	88 27       	eor	r24, r24
     49a:	77 fd       	sbrc	r23, 7
     49c:	80 95       	com	r24
     49e:	98 2f       	mov	r25, r24
     4a0:	0e 94 90 2c 	call	0x5920	; 0x5920 <__floatsisf>
     4a4:	27 e1       	ldi	r18, 0x17	; 23
     4a6:	37 eb       	ldi	r19, 0xB7	; 183
     4a8:	41 e5       	ldi	r20, 0x51	; 81
     4aa:	5b eb       	ldi	r21, 0xBB	; 187
     4ac:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
     4b0:	42 e0       	ldi	r20, 0x02	; 2
     4b2:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <_Z13LowPassFilterfh>
	k_x.value += coeffs[ADXL345_OFFX].value;
     4b6:	20 91 2f 05 	lds	r18, 0x052F
     4ba:	30 91 30 05 	lds	r19, 0x0530
     4be:	40 91 31 05 	lds	r20, 0x0531
     4c2:	50 91 32 05 	lds	r21, 0x0532
     4c6:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
	k_x.value *= coeffs[ADXL345_SCX].value;
     4ca:	20 91 ab 05 	lds	r18, 0x05AB
     4ce:	30 91 ac 05 	lds	r19, 0x05AC
     4d2:	40 91 ad 05 	lds	r20, 0x05AD
     4d6:	50 91 ae 05 	lds	r21, 0x05AE
     4da:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
     4de:	68 83       	st	Y, r22
     4e0:	79 83       	std	Y+1, r23	; 0x01
     4e2:	8a 83       	std	Y+2, r24	; 0x02
     4e4:	9b 83       	std	Y+3, r25	; 0x03
	
	twi(TWI_RECEIVE_ACK);
     4e6:	84 e0       	ldi	r24, 0x04	; 4
     4e8:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	LSB=TWDR;
     4ec:	13 b1       	in	r17, 0x03	; 3
	twi(TWI_RECEIVE_NACK);
     4ee:	85 e0       	ldi	r24, 0x05	; 5
     4f0:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	MSB=TWDR;
     4f4:	03 b1       	in	r16, 0x03	; 3
	twi(TWI_STOP);
     4f6:	82 e0       	ldi	r24, 0x02	; 2
     4f8:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	p_k_z.value = k_z.value;
     4fc:	cb ee       	ldi	r28, 0xEB	; 235
     4fe:	d5 e0       	ldi	r29, 0x05	; 5
     500:	88 81       	ld	r24, Y
     502:	99 81       	ldd	r25, Y+1	; 0x01
     504:	aa 81       	ldd	r26, Y+2	; 0x02
     506:	bb 81       	ldd	r27, Y+3	; 0x03
     508:	80 93 f7 05 	sts	0x05F7, r24
     50c:	90 93 f8 05 	sts	0x05F8, r25
     510:	a0 93 f9 05 	sts	0x05F9, r26
     514:	b0 93 fa 05 	sts	0x05FA, r27
	k_z.value = LowPassFilter((0.0032) * (float)(MSB << 8 | LSB), 3);
     518:	70 2f       	mov	r23, r16
     51a:	60 e0       	ldi	r22, 0x00	; 0
     51c:	61 2b       	or	r22, r17
     51e:	88 27       	eor	r24, r24
     520:	77 fd       	sbrc	r23, 7
     522:	80 95       	com	r24
     524:	98 2f       	mov	r25, r24
     526:	0e 94 90 2c 	call	0x5920	; 0x5920 <__floatsisf>
     52a:	27 e1       	ldi	r18, 0x17	; 23
     52c:	37 eb       	ldi	r19, 0xB7	; 183
     52e:	41 e5       	ldi	r20, 0x51	; 81
     530:	5b e3       	ldi	r21, 0x3B	; 59
     532:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
     536:	43 e0       	ldi	r20, 0x03	; 3
     538:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <_Z13LowPassFilterfh>
	k_z.value += coeffs[ADXL345_OFFZ].value;
     53c:	20 91 37 05 	lds	r18, 0x0537
     540:	30 91 38 05 	lds	r19, 0x0538
     544:	40 91 39 05 	lds	r20, 0x0539
     548:	50 91 3a 05 	lds	r21, 0x053A
     54c:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
	k_z.value *= coeffs[ADXL345_SCZ].value;
     550:	20 91 b3 05 	lds	r18, 0x05B3
     554:	30 91 b4 05 	lds	r19, 0x05B4
     558:	40 91 b5 05 	lds	r20, 0x05B5
     55c:	50 91 b6 05 	lds	r21, 0x05B6
     560:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
     564:	68 83       	st	Y, r22
     566:	79 83       	std	Y+1, r23	; 0x01
     568:	8a 83       	std	Y+2, r24	; 0x02
     56a:	9b 83       	std	Y+3, r25	; 0x03
	
	return 0;
}
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	df 91       	pop	r29
     570:	cf 91       	pop	r28
     572:	1f 91       	pop	r17
     574:	0f 91       	pop	r16
     576:	08 95       	ret

00000578 <_Z12ADXL345_Initv>:

uint8_t ADXL345_Init()
{
     578:	cf 93       	push	r28
	twi(TWI_START);
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=ADXL345_ADDR|I2C_WRITE;
     580:	c6 ea       	ldi	r28, 0xA6	; 166
     582:	c3 b9       	out	0x03, r28	; 3
	twi(TWI_TRANSMIT);
     584:	83 e0       	ldi	r24, 0x03	; 3
     586:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=0x31;	//DATA_FORMAT
     58a:	81 e3       	ldi	r24, 0x31	; 49
     58c:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     58e:	83 e0       	ldi	r24, 0x03	; 3
     590:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=0b00001011;
     594:	8b e0       	ldi	r24, 0x0B	; 11
     596:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     598:	83 e0       	ldi	r24, 0x03	; 3
     59a:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	twi(TWI_STOP);
     59e:	82 e0       	ldi	r24, 0x02	; 2
     5a0:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	
	twi(TWI_START);
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=ADXL345_ADDR|I2C_WRITE;
     5aa:	c3 b9       	out	0x03, r28	; 3
	twi(TWI_TRANSMIT);
     5ac:	83 e0       	ldi	r24, 0x03	; 3
     5ae:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=0x2C;	//BW_RATE
     5b2:	8c e2       	ldi	r24, 0x2C	; 44
     5b4:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     5b6:	83 e0       	ldi	r24, 0x03	; 3
     5b8:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=0b00000111;	//0x09; //0b00001111 rate=50hz, bw=20hz 
     5bc:	87 e0       	ldi	r24, 0x07	; 7
     5be:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     5c0:	83 e0       	ldi	r24, 0x03	; 3
     5c2:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	twi(TWI_STOP);
     5c6:	82 e0       	ldi	r24, 0x02	; 2
     5c8:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	
	twi(TWI_START);
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=ADXL345_ADDR|I2C_WRITE;
     5d2:	c3 b9       	out	0x03, r28	; 3
	twi(TWI_TRANSMIT);
     5d4:	83 e0       	ldi	r24, 0x03	; 3
     5d6:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=0x2D;	//POWER_CTL 
     5da:	8d e2       	ldi	r24, 0x2D	; 45
     5dc:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     5de:	83 e0       	ldi	r24, 0x03	; 3
     5e0:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=0x08;
     5e4:	88 e0       	ldi	r24, 0x08	; 8
     5e6:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     5e8:	83 e0       	ldi	r24, 0x03	; 3
     5ea:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	twi(TWI_STOP);
     5ee:	82 e0       	ldi	r24, 0x02	; 2
     5f0:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	return 0;
}
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	cf 91       	pop	r28
     5f8:	08 95       	ret

000005fa <_Z17ADXL345_Calibratev>:

void ADXL345_Calibrate()
{
     5fa:	af 92       	push	r10
     5fc:	bf 92       	push	r11
     5fe:	cf 92       	push	r12
     600:	df 92       	push	r13
     602:	ef 92       	push	r14
     604:	ff 92       	push	r15
     606:	0f 93       	push	r16
     608:	1f 93       	push	r17
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
	coeffs[ADXL345_OFFX].value = coeffs[ADXL345_OFFX].value - k_x.value;
     60e:	cf e2       	ldi	r28, 0x2F	; 47
     610:	d5 e0       	ldi	r29, 0x05	; 5
     612:	20 91 e3 05 	lds	r18, 0x05E3
     616:	30 91 e4 05 	lds	r19, 0x05E4
     61a:	40 91 e5 05 	lds	r20, 0x05E5
     61e:	50 91 e6 05 	lds	r21, 0x05E6
     622:	68 81       	ld	r22, Y
     624:	79 81       	ldd	r23, Y+1	; 0x01
     626:	8a 81       	ldd	r24, Y+2	; 0x02
     628:	9b 81       	ldd	r25, Y+3	; 0x03
     62a:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__subsf3>
     62e:	c6 2e       	mov	r12, r22
     630:	d7 2e       	mov	r13, r23
     632:	68 83       	st	Y, r22
     634:	79 83       	std	Y+1, r23	; 0x01
     636:	8a 83       	std	Y+2, r24	; 0x02
     638:	9b 83       	std	Y+3, r25	; 0x03
	coeffs[ADXL345_OFFY].value = coeffs[ADXL345_OFFY].value - k_y.value;
     63a:	03 e3       	ldi	r16, 0x33	; 51
     63c:	15 e0       	ldi	r17, 0x05	; 5
     63e:	20 91 e7 05 	lds	r18, 0x05E7
     642:	30 91 e8 05 	lds	r19, 0x05E8
     646:	40 91 e9 05 	lds	r20, 0x05E9
     64a:	50 91 ea 05 	lds	r21, 0x05EA
     64e:	f8 01       	movw	r30, r16
     650:	60 81       	ld	r22, Z
     652:	71 81       	ldd	r23, Z+1	; 0x01
     654:	82 81       	ldd	r24, Z+2	; 0x02
     656:	93 81       	ldd	r25, Z+3	; 0x03
     658:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__subsf3>
     65c:	a6 2e       	mov	r10, r22
     65e:	b7 2e       	mov	r11, r23
     660:	f8 01       	movw	r30, r16
     662:	60 83       	st	Z, r22
     664:	71 83       	std	Z+1, r23	; 0x01
     666:	82 83       	std	Z+2, r24	; 0x02
     668:	93 83       	std	Z+3, r25	; 0x03
	coeffs[ADXL345_OFFZ].value = coeffs[ADXL345_OFFZ].value - k_z.value + 1.0;
     66a:	0f 2e       	mov	r0, r31
     66c:	f7 e3       	ldi	r31, 0x37	; 55
     66e:	ef 2e       	mov	r14, r31
     670:	f5 e0       	ldi	r31, 0x05	; 5
     672:	ff 2e       	mov	r15, r31
     674:	f0 2d       	mov	r31, r0
     676:	20 91 eb 05 	lds	r18, 0x05EB
     67a:	30 91 ec 05 	lds	r19, 0x05EC
     67e:	40 91 ed 05 	lds	r20, 0x05ED
     682:	50 91 ee 05 	lds	r21, 0x05EE
     686:	f7 01       	movw	r30, r14
     688:	60 81       	ld	r22, Z
     68a:	71 81       	ldd	r23, Z+1	; 0x01
     68c:	82 81       	ldd	r24, Z+2	; 0x02
     68e:	93 81       	ldd	r25, Z+3	; 0x03
     690:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__subsf3>
     694:	20 e0       	ldi	r18, 0x00	; 0
     696:	30 e0       	ldi	r19, 0x00	; 0
     698:	40 e8       	ldi	r20, 0x80	; 128
     69a:	5f e3       	ldi	r21, 0x3F	; 63
     69c:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
     6a0:	9b 01       	movw	r18, r22
     6a2:	f7 01       	movw	r30, r14
     6a4:	60 83       	st	Z, r22
     6a6:	71 83       	std	Z+1, r23	; 0x01
     6a8:	82 83       	std	Z+2, r24	; 0x02
     6aa:	93 83       	std	Z+3, r25	; 0x03
	usRegHoldingBuf[MB_OFFSET + MB_ADXL345_OFFX] = coeffs[ADXL345_OFFX].array[0];
     6ac:	c0 92 df 01 	sts	0x01DF, r12
     6b0:	d0 92 e0 01 	sts	0x01E0, r13
	usRegHoldingBuf[MB_OFFSET + MB_ADXL345_OFFX + 1] = coeffs[ADXL345_OFFX].array[1];
     6b4:	80 91 31 05 	lds	r24, 0x0531
     6b8:	90 91 32 05 	lds	r25, 0x0532
     6bc:	90 93 e2 01 	sts	0x01E2, r25
     6c0:	80 93 e1 01 	sts	0x01E1, r24
	usRegHoldingBuf[MB_OFFSET + MB_ADXL345_OFFY] = coeffs[ADXL345_OFFY].array[0];
     6c4:	a0 92 e3 01 	sts	0x01E3, r10
     6c8:	b0 92 e4 01 	sts	0x01E4, r11
	usRegHoldingBuf[MB_OFFSET + MB_ADXL345_OFFY + 1] = coeffs[ADXL345_OFFY].array[1];
     6cc:	80 91 35 05 	lds	r24, 0x0535
     6d0:	90 91 36 05 	lds	r25, 0x0536
     6d4:	90 93 e6 01 	sts	0x01E6, r25
     6d8:	80 93 e5 01 	sts	0x01E5, r24
	usRegHoldingBuf[MB_OFFSET + MB_ADXL345_OFFZ] = coeffs[ADXL345_OFFZ].array[0];
     6dc:	30 93 e8 01 	sts	0x01E8, r19
     6e0:	20 93 e7 01 	sts	0x01E7, r18
	usRegHoldingBuf[MB_OFFSET + MB_ADXL345_OFFZ + 1] = coeffs[ADXL345_OFFZ].array[1];
     6e4:	80 91 39 05 	lds	r24, 0x0539
     6e8:	90 91 3a 05 	lds	r25, 0x053A
     6ec:	90 93 ea 01 	sts	0x01EA, r25
     6f0:	80 93 e9 01 	sts	0x01E9, r24
	coeffs[ADXL345_OFFX].value = 0.0;
     6f4:	18 82       	st	Y, r1
     6f6:	19 82       	std	Y+1, r1	; 0x01
     6f8:	1a 82       	std	Y+2, r1	; 0x02
     6fa:	1b 82       	std	Y+3, r1	; 0x03
	coeffs[ADXL345_OFFY].value = 0.0;
     6fc:	f8 01       	movw	r30, r16
     6fe:	10 82       	st	Z, r1
     700:	11 82       	std	Z+1, r1	; 0x01
     702:	12 82       	std	Z+2, r1	; 0x02
     704:	13 82       	std	Z+3, r1	; 0x03
	coeffs[ADXL345_OFFZ].value = 0.0;
     706:	f7 01       	movw	r30, r14
     708:	10 82       	st	Z, r1
     70a:	11 82       	std	Z+1, r1	; 0x01
     70c:	12 82       	std	Z+2, r1	; 0x02
     70e:	13 82       	std	Z+3, r1	; 0x03
	//Здесь надо добавить обнуление интегральных сумм гироскопа
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	1f 91       	pop	r17
     716:	0f 91       	pop	r16
     718:	ff 90       	pop	r15
     71a:	ef 90       	pop	r14
     71c:	df 90       	pop	r13
     71e:	cf 90       	pop	r12
     720:	bf 90       	pop	r11
     722:	af 90       	pop	r10
     724:	08 95       	ret

00000726 <_Z18BMP085_StartMeasUTv>:

void BMP085_Calculate();

uint8_t BMP085_StartMeasUT()
{
	twi(TWI_START);
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=BMP085_ADDR|I2C_WRITE;
     72c:	8e ee       	ldi	r24, 0xEE	; 238
     72e:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     730:	83 e0       	ldi	r24, 0x03	; 3
     732:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=0xF4;
     736:	84 ef       	ldi	r24, 0xF4	; 244
     738:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     73a:	83 e0       	ldi	r24, 0x03	; 3
     73c:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=0x2E;	//temperature
     740:	8e e2       	ldi	r24, 0x2E	; 46
     742:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     744:	83 e0       	ldi	r24, 0x03	; 3
     746:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	twi(TWI_STOP);
     74a:	82 e0       	ldi	r24, 0x02	; 2
     74c:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	return 0; 
}
     750:	80 e0       	ldi	r24, 0x00	; 0
     752:	08 95       	ret

00000754 <_Z18BMP085_StartMeasUPv>:

uint8_t BMP085_StartMeasUP()
{
	twi(TWI_START);
     754:	80 e0       	ldi	r24, 0x00	; 0
     756:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=BMP085_ADDR|I2C_WRITE;
     75a:	8e ee       	ldi	r24, 0xEE	; 238
     75c:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     75e:	83 e0       	ldi	r24, 0x03	; 3
     760:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=0x34;
     764:	84 e3       	ldi	r24, 0x34	; 52
     766:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     768:	83 e0       	ldi	r24, 0x03	; 3
     76a:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR = 0x34 + oss * 0x40;	//pressure	
     76e:	84 ef       	ldi	r24, 0xF4	; 244
     770:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     772:	83 e0       	ldi	r24, 0x03	; 3
     774:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	twi(TWI_STOP);
     778:	82 e0       	ldi	r24, 0x02	; 2
     77a:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	return 0;
}
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	08 95       	ret

00000782 <_Z15BMP085_Get_Coefv>:
	BMP085_Calculate();
	return 0;
}

uint8_t BMP085_Get_Coef()
{
     782:	0f 93       	push	r16
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
	uint16_t LSB, MSB;
	
	twi(TWI_START);
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=BMP085_ADDR|I2C_WRITE;
     790:	de ee       	ldi	r29, 0xEE	; 238
     792:	d3 b9       	out	0x03, r29	; 3
	twi(TWI_TRANSMIT);
     794:	83 e0       	ldi	r24, 0x03	; 3
     796:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=0xAA;
     79a:	8a ea       	ldi	r24, 0xAA	; 170
     79c:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     79e:	83 e0       	ldi	r24, 0x03	; 3
     7a0:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	twi(TWI_RESTART);
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=BMP085_ADDR|I2C_READ;
     7aa:	cf ee       	ldi	r28, 0xEF	; 239
     7ac:	c3 b9       	out	0x03, r28	; 3
	twi(TWI_TRANSMIT);
     7ae:	83 e0       	ldi	r24, 0x03	; 3
     7b0:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	twi(TWI_RECEIVE_ACK);
     7b4:	84 e0       	ldi	r24, 0x04	; 4
     7b6:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	MSB=TWDR;
     7ba:	03 b1       	in	r16, 0x03	; 3
	twi(TWI_RECEIVE_NACK);
     7bc:	85 e0       	ldi	r24, 0x05	; 5
     7be:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	LSB=TWDR;
     7c2:	13 b1       	in	r17, 0x03	; 3
	twi(TWI_STOP);
     7c4:	82 e0       	ldi	r24, 0x02	; 2
     7c6:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	
	AC1 = MSB<<8 | LSB;
     7ca:	90 2f       	mov	r25, r16
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	81 2b       	or	r24, r17
     7d0:	90 93 a9 00 	sts	0x00A9, r25
     7d4:	80 93 a8 00 	sts	0x00A8, r24
	
	twi(TWI_START);
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=BMP085_ADDR|I2C_WRITE;
     7de:	d3 b9       	out	0x03, r29	; 3
	twi(TWI_TRANSMIT);
     7e0:	83 e0       	ldi	r24, 0x03	; 3
     7e2:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=0xAC;
     7e6:	8c ea       	ldi	r24, 0xAC	; 172
     7e8:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     7ea:	83 e0       	ldi	r24, 0x03	; 3
     7ec:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	twi(TWI_RESTART);
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=BMP085_ADDR|I2C_READ;
     7f6:	c3 b9       	out	0x03, r28	; 3
	twi(TWI_TRANSMIT);
     7f8:	83 e0       	ldi	r24, 0x03	; 3
     7fa:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	twi(TWI_RECEIVE_ACK);
     7fe:	84 e0       	ldi	r24, 0x04	; 4
     800:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	MSB=TWDR;
     804:	03 b1       	in	r16, 0x03	; 3
	twi(TWI_RECEIVE_NACK);
     806:	85 e0       	ldi	r24, 0x05	; 5
     808:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	LSB=TWDR;
     80c:	13 b1       	in	r17, 0x03	; 3
	twi(TWI_STOP);
     80e:	82 e0       	ldi	r24, 0x02	; 2
     810:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	
	AC2 = MSB<<8 | LSB;
     814:	90 2f       	mov	r25, r16
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	81 2b       	or	r24, r17
     81a:	90 93 ab 00 	sts	0x00AB, r25
     81e:	80 93 aa 00 	sts	0x00AA, r24
	
	twi(TWI_START);
     822:	80 e0       	ldi	r24, 0x00	; 0
     824:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=BMP085_ADDR|I2C_WRITE;
     828:	d3 b9       	out	0x03, r29	; 3
	twi(TWI_TRANSMIT);
     82a:	83 e0       	ldi	r24, 0x03	; 3
     82c:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=0xAE;
     830:	8e ea       	ldi	r24, 0xAE	; 174
     832:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     834:	83 e0       	ldi	r24, 0x03	; 3
     836:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	twi(TWI_RESTART);
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=BMP085_ADDR|I2C_READ;
     840:	c3 b9       	out	0x03, r28	; 3
	twi(TWI_TRANSMIT);
     842:	83 e0       	ldi	r24, 0x03	; 3
     844:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	twi(TWI_RECEIVE_ACK);
     848:	84 e0       	ldi	r24, 0x04	; 4
     84a:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	MSB=TWDR;
     84e:	03 b1       	in	r16, 0x03	; 3
	twi(TWI_RECEIVE_NACK);
     850:	85 e0       	ldi	r24, 0x05	; 5
     852:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	LSB=TWDR;
     856:	13 b1       	in	r17, 0x03	; 3
	twi(TWI_STOP);
     858:	82 e0       	ldi	r24, 0x02	; 2
     85a:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	
	AC3 = MSB<<8 | LSB;
     85e:	90 2f       	mov	r25, r16
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	81 2b       	or	r24, r17
     864:	90 93 ad 00 	sts	0x00AD, r25
     868:	80 93 ac 00 	sts	0x00AC, r24
	
	twi(TWI_START);
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=BMP085_ADDR|I2C_WRITE;
     872:	d3 b9       	out	0x03, r29	; 3
	twi(TWI_TRANSMIT);
     874:	83 e0       	ldi	r24, 0x03	; 3
     876:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=0xB0;
     87a:	80 eb       	ldi	r24, 0xB0	; 176
     87c:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     87e:	83 e0       	ldi	r24, 0x03	; 3
     880:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	twi(TWI_RESTART);
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=BMP085_ADDR|I2C_READ;
     88a:	c3 b9       	out	0x03, r28	; 3
	twi(TWI_TRANSMIT);
     88c:	83 e0       	ldi	r24, 0x03	; 3
     88e:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	twi(TWI_RECEIVE_ACK);
     892:	84 e0       	ldi	r24, 0x04	; 4
     894:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	MSB=TWDR;
     898:	03 b1       	in	r16, 0x03	; 3
	twi(TWI_RECEIVE_NACK);
     89a:	85 e0       	ldi	r24, 0x05	; 5
     89c:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	LSB=TWDR;
     8a0:	13 b1       	in	r17, 0x03	; 3
	twi(TWI_STOP);
     8a2:	82 e0       	ldi	r24, 0x02	; 2
     8a4:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	
	AC4 = MSB<<8 | LSB;
     8a8:	90 2f       	mov	r25, r16
     8aa:	80 e0       	ldi	r24, 0x00	; 0
     8ac:	81 2b       	or	r24, r17
     8ae:	90 93 af 00 	sts	0x00AF, r25
     8b2:	80 93 ae 00 	sts	0x00AE, r24
	
	twi(TWI_START);
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=BMP085_ADDR|I2C_WRITE;
     8bc:	d3 b9       	out	0x03, r29	; 3
	twi(TWI_TRANSMIT);
     8be:	83 e0       	ldi	r24, 0x03	; 3
     8c0:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=0xB2;
     8c4:	82 eb       	ldi	r24, 0xB2	; 178
     8c6:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     8c8:	83 e0       	ldi	r24, 0x03	; 3
     8ca:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	twi(TWI_RESTART);
     8ce:	81 e0       	ldi	r24, 0x01	; 1
     8d0:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=BMP085_ADDR|I2C_READ;
     8d4:	c3 b9       	out	0x03, r28	; 3
	twi(TWI_TRANSMIT);
     8d6:	83 e0       	ldi	r24, 0x03	; 3
     8d8:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	twi(TWI_RECEIVE_ACK);
     8dc:	84 e0       	ldi	r24, 0x04	; 4
     8de:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	MSB=TWDR;
     8e2:	03 b1       	in	r16, 0x03	; 3
	twi(TWI_RECEIVE_NACK);
     8e4:	85 e0       	ldi	r24, 0x05	; 5
     8e6:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	LSB=TWDR;
     8ea:	13 b1       	in	r17, 0x03	; 3
	twi(TWI_STOP);
     8ec:	82 e0       	ldi	r24, 0x02	; 2
     8ee:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	
	AC5 = MSB<<8 | LSB;
     8f2:	90 2f       	mov	r25, r16
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	81 2b       	or	r24, r17
     8f8:	90 93 b1 00 	sts	0x00B1, r25
     8fc:	80 93 b0 00 	sts	0x00B0, r24
	
	twi(TWI_START);
     900:	80 e0       	ldi	r24, 0x00	; 0
     902:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=BMP085_ADDR|I2C_WRITE;
     906:	d3 b9       	out	0x03, r29	; 3
	twi(TWI_TRANSMIT);
     908:	83 e0       	ldi	r24, 0x03	; 3
     90a:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=0xB4;
     90e:	84 eb       	ldi	r24, 0xB4	; 180
     910:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     912:	83 e0       	ldi	r24, 0x03	; 3
     914:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	twi(TWI_RESTART);
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=BMP085_ADDR|I2C_READ;
     91e:	c3 b9       	out	0x03, r28	; 3
	twi(TWI_TRANSMIT);
     920:	83 e0       	ldi	r24, 0x03	; 3
     922:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	twi(TWI_RECEIVE_ACK);
     926:	84 e0       	ldi	r24, 0x04	; 4
     928:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	MSB=TWDR;
     92c:	03 b1       	in	r16, 0x03	; 3
	twi(TWI_RECEIVE_NACK);
     92e:	85 e0       	ldi	r24, 0x05	; 5
     930:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	LSB=TWDR;
     934:	13 b1       	in	r17, 0x03	; 3
	twi(TWI_STOP);
     936:	82 e0       	ldi	r24, 0x02	; 2
     938:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	
	AC6 = MSB<<8 | LSB;
     93c:	90 2f       	mov	r25, r16
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	81 2b       	or	r24, r17
     942:	90 93 b3 00 	sts	0x00B3, r25
     946:	80 93 b2 00 	sts	0x00B2, r24
	
	twi(TWI_START);
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=BMP085_ADDR|I2C_WRITE;
     950:	d3 b9       	out	0x03, r29	; 3
	twi(TWI_TRANSMIT);
     952:	83 e0       	ldi	r24, 0x03	; 3
     954:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=0xB6;
     958:	86 eb       	ldi	r24, 0xB6	; 182
     95a:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     95c:	83 e0       	ldi	r24, 0x03	; 3
     95e:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	twi(TWI_RESTART);
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=BMP085_ADDR|I2C_READ;
     968:	c3 b9       	out	0x03, r28	; 3
	twi(TWI_TRANSMIT);
     96a:	83 e0       	ldi	r24, 0x03	; 3
     96c:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	twi(TWI_RECEIVE_ACK);
     970:	84 e0       	ldi	r24, 0x04	; 4
     972:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	MSB=TWDR;
     976:	03 b1       	in	r16, 0x03	; 3
	twi(TWI_RECEIVE_NACK);
     978:	85 e0       	ldi	r24, 0x05	; 5
     97a:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	LSB=TWDR;
     97e:	13 b1       	in	r17, 0x03	; 3
	twi(TWI_STOP);
     980:	82 e0       	ldi	r24, 0x02	; 2
     982:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	
	B1 = MSB<<8 | LSB;
     986:	90 2f       	mov	r25, r16
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	81 2b       	or	r24, r17
     98c:	90 93 b5 00 	sts	0x00B5, r25
     990:	80 93 b4 00 	sts	0x00B4, r24
	
	twi(TWI_START);
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=BMP085_ADDR|I2C_WRITE;
     99a:	d3 b9       	out	0x03, r29	; 3
	twi(TWI_TRANSMIT);
     99c:	83 e0       	ldi	r24, 0x03	; 3
     99e:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=0xB8;
     9a2:	88 eb       	ldi	r24, 0xB8	; 184
     9a4:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     9a6:	83 e0       	ldi	r24, 0x03	; 3
     9a8:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	twi(TWI_RESTART);
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=BMP085_ADDR|I2C_READ;
     9b2:	c3 b9       	out	0x03, r28	; 3
	twi(TWI_TRANSMIT);
     9b4:	83 e0       	ldi	r24, 0x03	; 3
     9b6:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	twi(TWI_RECEIVE_ACK);
     9ba:	84 e0       	ldi	r24, 0x04	; 4
     9bc:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	MSB=TWDR;
     9c0:	03 b1       	in	r16, 0x03	; 3
	twi(TWI_RECEIVE_NACK);
     9c2:	85 e0       	ldi	r24, 0x05	; 5
     9c4:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	LSB=TWDR;
     9c8:	13 b1       	in	r17, 0x03	; 3
	twi(TWI_STOP);
     9ca:	82 e0       	ldi	r24, 0x02	; 2
     9cc:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	
	B2 = MSB<<8 | LSB;
     9d0:	90 2f       	mov	r25, r16
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	81 2b       	or	r24, r17
     9d6:	90 93 b7 00 	sts	0x00B7, r25
     9da:	80 93 b6 00 	sts	0x00B6, r24
	
	twi(TWI_START);
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=BMP085_ADDR|I2C_WRITE;
     9e4:	d3 b9       	out	0x03, r29	; 3
	twi(TWI_TRANSMIT);
     9e6:	83 e0       	ldi	r24, 0x03	; 3
     9e8:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=0xBA;
     9ec:	8a eb       	ldi	r24, 0xBA	; 186
     9ee:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     9f0:	83 e0       	ldi	r24, 0x03	; 3
     9f2:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	twi(TWI_RESTART);
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=BMP085_ADDR|I2C_READ;
     9fc:	c3 b9       	out	0x03, r28	; 3
	twi(TWI_TRANSMIT);
     9fe:	83 e0       	ldi	r24, 0x03	; 3
     a00:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	twi(TWI_RECEIVE_ACK);
     a04:	84 e0       	ldi	r24, 0x04	; 4
     a06:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	MSB=TWDR;
     a0a:	03 b1       	in	r16, 0x03	; 3
	twi(TWI_RECEIVE_NACK);
     a0c:	85 e0       	ldi	r24, 0x05	; 5
     a0e:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	LSB=TWDR;
     a12:	13 b1       	in	r17, 0x03	; 3
	twi(TWI_STOP);
     a14:	82 e0       	ldi	r24, 0x02	; 2
     a16:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	
	MB = MSB<<8 | LSB;
     a1a:	90 2f       	mov	r25, r16
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	81 2b       	or	r24, r17
     a20:	90 93 b9 00 	sts	0x00B9, r25
     a24:	80 93 b8 00 	sts	0x00B8, r24
	
	twi(TWI_START);
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=BMP085_ADDR|I2C_WRITE;
     a2e:	d3 b9       	out	0x03, r29	; 3
	twi(TWI_TRANSMIT);
     a30:	83 e0       	ldi	r24, 0x03	; 3
     a32:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=0xBC;
     a36:	8c eb       	ldi	r24, 0xBC	; 188
     a38:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     a3a:	83 e0       	ldi	r24, 0x03	; 3
     a3c:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	twi(TWI_RESTART);
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=BMP085_ADDR|I2C_READ;
     a46:	c3 b9       	out	0x03, r28	; 3
	twi(TWI_TRANSMIT);
     a48:	83 e0       	ldi	r24, 0x03	; 3
     a4a:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	twi(TWI_RECEIVE_ACK);
     a4e:	84 e0       	ldi	r24, 0x04	; 4
     a50:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	MSB=TWDR;
     a54:	03 b1       	in	r16, 0x03	; 3
	twi(TWI_RECEIVE_NACK);
     a56:	85 e0       	ldi	r24, 0x05	; 5
     a58:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	LSB=TWDR;
     a5c:	13 b1       	in	r17, 0x03	; 3
	twi(TWI_STOP);
     a5e:	82 e0       	ldi	r24, 0x02	; 2
     a60:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	
	MC = MSB<<8 | LSB;
     a64:	90 2f       	mov	r25, r16
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	81 2b       	or	r24, r17
     a6a:	90 93 bb 00 	sts	0x00BB, r25
     a6e:	80 93 ba 00 	sts	0x00BA, r24
	
	twi(TWI_START);
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=BMP085_ADDR|I2C_WRITE;
     a78:	d3 b9       	out	0x03, r29	; 3
	twi(TWI_TRANSMIT);
     a7a:	83 e0       	ldi	r24, 0x03	; 3
     a7c:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=0xBE;
     a80:	8e eb       	ldi	r24, 0xBE	; 190
     a82:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     a84:	83 e0       	ldi	r24, 0x03	; 3
     a86:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	twi(TWI_RESTART);
     a8a:	81 e0       	ldi	r24, 0x01	; 1
     a8c:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=BMP085_ADDR|I2C_READ;
     a90:	c3 b9       	out	0x03, r28	; 3
	twi(TWI_TRANSMIT);
     a92:	83 e0       	ldi	r24, 0x03	; 3
     a94:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	twi(TWI_RECEIVE_ACK);
     a98:	84 e0       	ldi	r24, 0x04	; 4
     a9a:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	MSB=TWDR;
     a9e:	d3 b1       	in	r29, 0x03	; 3
	twi(TWI_RECEIVE_NACK);
     aa0:	85 e0       	ldi	r24, 0x05	; 5
     aa2:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	LSB=TWDR;
     aa6:	c3 b1       	in	r28, 0x03	; 3
	twi(TWI_STOP);
     aa8:	82 e0       	ldi	r24, 0x02	; 2
     aaa:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	
	MD = MSB<<8 | LSB;
     aae:	9d 2f       	mov	r25, r29
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	8c 2b       	or	r24, r28
     ab4:	90 93 bd 00 	sts	0x00BD, r25
     ab8:	80 93 bc 00 	sts	0x00BC, r24
		
	return 0;
}
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	df 91       	pop	r29
     ac0:	cf 91       	pop	r28
     ac2:	1f 91       	pop	r17
     ac4:	0f 91       	pop	r16
     ac6:	08 95       	ret

00000ac8 <_Z16BMP085_Calculatev>:

void BMP085_Calculate()
{
     ac8:	cf 92       	push	r12
     aca:	df 92       	push	r13
     acc:	ef 92       	push	r14
     ace:	ff 92       	push	r15
     ad0:	0f 93       	push	r16
     ad2:	1f 93       	push	r17
     ad4:	cf 93       	push	r28
     ad6:	df 93       	push	r29
     ad8:	cd b7       	in	r28, 0x3d	; 61
     ada:	de b7       	in	r29, 0x3e	; 62
     adc:	a8 97       	sbiw	r28, 0x28	; 40
     ade:	0f b6       	in	r0, 0x3f	; 63
     ae0:	f8 94       	cli
     ae2:	de bf       	out	0x3e, r29	; 62
     ae4:	0f be       	out	0x3f, r0	; 63
     ae6:	cd bf       	out	0x3d, r28	; 61
	volatile int32_t X1, X2, X3, B3, B5, B6, p, tmp;
	volatile uint32_t B4, B7;
	
	X1 = ((int32_t)UT - AC6) * AC5 >> 15;
     ae8:	80 91 b2 00 	lds	r24, 0x00B2
     aec:	90 91 b3 00 	lds	r25, 0x00B3
     af0:	40 91 a0 00 	lds	r20, 0x00A0
     af4:	50 91 a1 00 	lds	r21, 0x00A1
     af8:	60 91 a2 00 	lds	r22, 0x00A2
     afc:	70 91 a3 00 	lds	r23, 0x00A3
     b00:	9a 01       	movw	r18, r20
     b02:	ab 01       	movw	r20, r22
     b04:	28 1b       	sub	r18, r24
     b06:	39 0b       	sbc	r19, r25
     b08:	41 09       	sbc	r20, r1
     b0a:	51 09       	sbc	r21, r1
     b0c:	a0 91 b0 00 	lds	r26, 0x00B0
     b10:	b0 91 b1 00 	lds	r27, 0x00B1
     b14:	0e 94 f7 2e 	call	0x5dee	; 0x5dee <__muluhisi3>
     b18:	dc 01       	movw	r26, r24
     b1a:	cb 01       	movw	r24, r22
     b1c:	07 2e       	mov	r0, r23
     b1e:	7f e0       	ldi	r23, 0x0F	; 15
     b20:	b5 95       	asr	r27
     b22:	a7 95       	ror	r26
     b24:	97 95       	ror	r25
     b26:	87 95       	ror	r24
     b28:	7a 95       	dec	r23
     b2a:	d1 f7       	brne	.-12     	; 0xb20 <_Z16BMP085_Calculatev+0x58>
     b2c:	70 2d       	mov	r23, r0
     b2e:	8d a3       	std	Y+37, r24	; 0x25
     b30:	9e a3       	std	Y+38, r25	; 0x26
     b32:	af a3       	std	Y+39, r26	; 0x27
     b34:	b8 a7       	std	Y+40, r27	; 0x28
	X2 = ((int32_t)MC << 11) / (X1 + MD);
     b36:	0d a1       	ldd	r16, Y+37	; 0x25
     b38:	1e a1       	ldd	r17, Y+38	; 0x26
     b3a:	2f a1       	ldd	r18, Y+39	; 0x27
     b3c:	38 a5       	ldd	r19, Y+40	; 0x28
     b3e:	60 91 ba 00 	lds	r22, 0x00BA
     b42:	70 91 bb 00 	lds	r23, 0x00BB
     b46:	cb 01       	movw	r24, r22
     b48:	aa 27       	eor	r26, r26
     b4a:	97 fd       	sbrc	r25, 7
     b4c:	a0 95       	com	r26
     b4e:	ba 2f       	mov	r27, r26
     b50:	bc 01       	movw	r22, r24
     b52:	cd 01       	movw	r24, r26
     b54:	05 2e       	mov	r0, r21
     b56:	5b e0       	ldi	r21, 0x0B	; 11
     b58:	66 0f       	add	r22, r22
     b5a:	77 1f       	adc	r23, r23
     b5c:	88 1f       	adc	r24, r24
     b5e:	99 1f       	adc	r25, r25
     b60:	5a 95       	dec	r21
     b62:	d1 f7       	brne	.-12     	; 0xb58 <_Z16BMP085_Calculatev+0x90>
     b64:	50 2d       	mov	r21, r0
     b66:	c0 90 bc 00 	lds	r12, 0x00BC
     b6a:	d0 90 bd 00 	lds	r13, 0x00BD
     b6e:	ee 24       	eor	r14, r14
     b70:	d7 fc       	sbrc	r13, 7
     b72:	e0 94       	com	r14
     b74:	fe 2c       	mov	r15, r14
     b76:	a9 01       	movw	r20, r18
     b78:	98 01       	movw	r18, r16
     b7a:	2c 0d       	add	r18, r12
     b7c:	3d 1d       	adc	r19, r13
     b7e:	4e 1d       	adc	r20, r14
     b80:	5f 1d       	adc	r21, r15
     b82:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <__divmodsi4>
     b86:	29 a3       	std	Y+33, r18	; 0x21
     b88:	3a a3       	std	Y+34, r19	; 0x22
     b8a:	4b a3       	std	Y+35, r20	; 0x23
     b8c:	5c a3       	std	Y+36, r21	; 0x24
	B5 = X1 + X2;
     b8e:	4d a1       	ldd	r20, Y+37	; 0x25
     b90:	5e a1       	ldd	r21, Y+38	; 0x26
     b92:	6f a1       	ldd	r22, Y+39	; 0x27
     b94:	78 a5       	ldd	r23, Y+40	; 0x28
     b96:	89 a1       	ldd	r24, Y+33	; 0x21
     b98:	9a a1       	ldd	r25, Y+34	; 0x22
     b9a:	ab a1       	ldd	r26, Y+35	; 0x23
     b9c:	bc a1       	ldd	r27, Y+36	; 0x24
     b9e:	84 0f       	add	r24, r20
     ba0:	95 1f       	adc	r25, r21
     ba2:	a6 1f       	adc	r26, r22
     ba4:	b7 1f       	adc	r27, r23
     ba6:	8d 8b       	std	Y+21, r24	; 0x15
     ba8:	9e 8b       	std	Y+22, r25	; 0x16
     baa:	af 8b       	std	Y+23, r26	; 0x17
     bac:	b8 8f       	std	Y+24, r27	; 0x18
	
	T.value = (float)(0.1 * ((B5 + 8) >> 4));
     bae:	8d 89       	ldd	r24, Y+21	; 0x15
     bb0:	9e 89       	ldd	r25, Y+22	; 0x16
     bb2:	af 89       	ldd	r26, Y+23	; 0x17
     bb4:	b8 8d       	ldd	r27, Y+24	; 0x18
     bb6:	08 96       	adiw	r24, 0x08	; 8
     bb8:	a1 1d       	adc	r26, r1
     bba:	b1 1d       	adc	r27, r1
     bbc:	bc 01       	movw	r22, r24
     bbe:	cd 01       	movw	r24, r26
     bc0:	68 94       	set
     bc2:	13 f8       	bld	r1, 3
     bc4:	95 95       	asr	r25
     bc6:	87 95       	ror	r24
     bc8:	77 95       	ror	r23
     bca:	67 95       	ror	r22
     bcc:	16 94       	lsr	r1
     bce:	d1 f7       	brne	.-12     	; 0xbc4 <_Z16BMP085_Calculatev+0xfc>
     bd0:	0e 94 90 2c 	call	0x5920	; 0x5920 <__floatsisf>
     bd4:	2d ec       	ldi	r18, 0xCD	; 205
     bd6:	3c ec       	ldi	r19, 0xCC	; 204
     bd8:	4c ec       	ldi	r20, 0xCC	; 204
     bda:	5d e3       	ldi	r21, 0x3D	; 61
     bdc:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
     be0:	60 93 bb 05 	sts	0x05BB, r22
     be4:	70 93 bc 05 	sts	0x05BC, r23
     be8:	80 93 bd 05 	sts	0x05BD, r24
     bec:	90 93 be 05 	sts	0x05BE, r25
	
	B6 = B5 - 4000;
     bf0:	8d 89       	ldd	r24, Y+21	; 0x15
     bf2:	9e 89       	ldd	r25, Y+22	; 0x16
     bf4:	af 89       	ldd	r26, Y+23	; 0x17
     bf6:	b8 8d       	ldd	r27, Y+24	; 0x18
     bf8:	80 5a       	subi	r24, 0xA0	; 160
     bfa:	9f 40       	sbci	r25, 0x0F	; 15
     bfc:	a1 09       	sbc	r26, r1
     bfe:	b1 09       	sbc	r27, r1
     c00:	89 8b       	std	Y+17, r24	; 0x11
     c02:	9a 8b       	std	Y+18, r25	; 0x12
     c04:	ab 8b       	std	Y+19, r26	; 0x13
     c06:	bc 8b       	std	Y+20, r27	; 0x14
	X1 = (B2 * (B6 * B6 >> 12)) >> 11;
     c08:	29 89       	ldd	r18, Y+17	; 0x11
     c0a:	3a 89       	ldd	r19, Y+18	; 0x12
     c0c:	4b 89       	ldd	r20, Y+19	; 0x13
     c0e:	5c 89       	ldd	r21, Y+20	; 0x14
     c10:	69 89       	ldd	r22, Y+17	; 0x11
     c12:	7a 89       	ldd	r23, Y+18	; 0x12
     c14:	8b 89       	ldd	r24, Y+19	; 0x13
     c16:	9c 89       	ldd	r25, Y+20	; 0x14
     c18:	e0 91 b6 00 	lds	r30, 0x00B6
     c1c:	f0 91 b7 00 	lds	r31, 0x00B7
     c20:	0e 94 9d 2e 	call	0x5d3a	; 0x5d3a <__mulsi3>
     c24:	9b 01       	movw	r18, r22
     c26:	ac 01       	movw	r20, r24
     c28:	01 2e       	mov	r0, r17
     c2a:	1c e0       	ldi	r17, 0x0C	; 12
     c2c:	55 95       	asr	r21
     c2e:	47 95       	ror	r20
     c30:	37 95       	ror	r19
     c32:	27 95       	ror	r18
     c34:	1a 95       	dec	r17
     c36:	d1 f7       	brne	.-12     	; 0xc2c <_Z16BMP085_Calculatev+0x164>
     c38:	10 2d       	mov	r17, r0
     c3a:	df 01       	movw	r26, r30
     c3c:	0e 94 02 2f 	call	0x5e04	; 0x5e04 <__mulshisi3>
     c40:	dc 01       	movw	r26, r24
     c42:	cb 01       	movw	r24, r22
     c44:	07 2e       	mov	r0, r23
     c46:	7b e0       	ldi	r23, 0x0B	; 11
     c48:	b5 95       	asr	r27
     c4a:	a7 95       	ror	r26
     c4c:	97 95       	ror	r25
     c4e:	87 95       	ror	r24
     c50:	7a 95       	dec	r23
     c52:	d1 f7       	brne	.-12     	; 0xc48 <_Z16BMP085_Calculatev+0x180>
     c54:	70 2d       	mov	r23, r0
     c56:	8d a3       	std	Y+37, r24	; 0x25
     c58:	9e a3       	std	Y+38, r25	; 0x26
     c5a:	af a3       	std	Y+39, r26	; 0x27
     c5c:	b8 a7       	std	Y+40, r27	; 0x28
	X2 = AC2 * B6 >> 11;
     c5e:	29 89       	ldd	r18, Y+17	; 0x11
     c60:	3a 89       	ldd	r19, Y+18	; 0x12
     c62:	4b 89       	ldd	r20, Y+19	; 0x13
     c64:	5c 89       	ldd	r21, Y+20	; 0x14
     c66:	a0 91 aa 00 	lds	r26, 0x00AA
     c6a:	b0 91 ab 00 	lds	r27, 0x00AB
     c6e:	0e 94 02 2f 	call	0x5e04	; 0x5e04 <__mulshisi3>
     c72:	dc 01       	movw	r26, r24
     c74:	cb 01       	movw	r24, r22
     c76:	07 2e       	mov	r0, r23
     c78:	7b e0       	ldi	r23, 0x0B	; 11
     c7a:	b5 95       	asr	r27
     c7c:	a7 95       	ror	r26
     c7e:	97 95       	ror	r25
     c80:	87 95       	ror	r24
     c82:	7a 95       	dec	r23
     c84:	d1 f7       	brne	.-12     	; 0xc7a <_Z16BMP085_Calculatev+0x1b2>
     c86:	70 2d       	mov	r23, r0
     c88:	89 a3       	std	Y+33, r24	; 0x21
     c8a:	9a a3       	std	Y+34, r25	; 0x22
     c8c:	ab a3       	std	Y+35, r26	; 0x23
     c8e:	bc a3       	std	Y+36, r27	; 0x24
	X3 = X1 + X2;
     c90:	4d a1       	ldd	r20, Y+37	; 0x25
     c92:	5e a1       	ldd	r21, Y+38	; 0x26
     c94:	6f a1       	ldd	r22, Y+39	; 0x27
     c96:	78 a5       	ldd	r23, Y+40	; 0x28
     c98:	89 a1       	ldd	r24, Y+33	; 0x21
     c9a:	9a a1       	ldd	r25, Y+34	; 0x22
     c9c:	ab a1       	ldd	r26, Y+35	; 0x23
     c9e:	bc a1       	ldd	r27, Y+36	; 0x24
     ca0:	84 0f       	add	r24, r20
     ca2:	95 1f       	adc	r25, r21
     ca4:	a6 1f       	adc	r26, r22
     ca6:	b7 1f       	adc	r27, r23
     ca8:	8d 8f       	std	Y+29, r24	; 0x1d
     caa:	9e 8f       	std	Y+30, r25	; 0x1e
     cac:	af 8f       	std	Y+31, r26	; 0x1f
     cae:	b8 a3       	std	Y+32, r27	; 0x20
	tmp = AC1;
     cb0:	80 91 a8 00 	lds	r24, 0x00A8
     cb4:	90 91 a9 00 	lds	r25, 0x00A9
     cb8:	aa 27       	eor	r26, r26
     cba:	97 fd       	sbrc	r25, 7
     cbc:	a0 95       	com	r26
     cbe:	ba 2f       	mov	r27, r26
     cc0:	89 87       	std	Y+9, r24	; 0x09
     cc2:	9a 87       	std	Y+10, r25	; 0x0a
     cc4:	ab 87       	std	Y+11, r26	; 0x0b
     cc6:	bc 87       	std	Y+12, r27	; 0x0c
	tmp = (tmp * 4 + X3) << oss;
     cc8:	89 85       	ldd	r24, Y+9	; 0x09
     cca:	9a 85       	ldd	r25, Y+10	; 0x0a
     ccc:	ab 85       	ldd	r26, Y+11	; 0x0b
     cce:	bc 85       	ldd	r27, Y+12	; 0x0c
     cd0:	4d 8d       	ldd	r20, Y+29	; 0x1d
     cd2:	5e 8d       	ldd	r21, Y+30	; 0x1e
     cd4:	6f 8d       	ldd	r22, Y+31	; 0x1f
     cd6:	78 a1       	ldd	r23, Y+32	; 0x20
     cd8:	88 0f       	add	r24, r24
     cda:	99 1f       	adc	r25, r25
     cdc:	aa 1f       	adc	r26, r26
     cde:	bb 1f       	adc	r27, r27
     ce0:	88 0f       	add	r24, r24
     ce2:	99 1f       	adc	r25, r25
     ce4:	aa 1f       	adc	r26, r26
     ce6:	bb 1f       	adc	r27, r27
     ce8:	84 0f       	add	r24, r20
     cea:	95 1f       	adc	r25, r21
     cec:	a6 1f       	adc	r26, r22
     cee:	b7 1f       	adc	r27, r23
     cf0:	88 0f       	add	r24, r24
     cf2:	99 1f       	adc	r25, r25
     cf4:	aa 1f       	adc	r26, r26
     cf6:	bb 1f       	adc	r27, r27
     cf8:	88 0f       	add	r24, r24
     cfa:	99 1f       	adc	r25, r25
     cfc:	aa 1f       	adc	r26, r26
     cfe:	bb 1f       	adc	r27, r27
     d00:	88 0f       	add	r24, r24
     d02:	99 1f       	adc	r25, r25
     d04:	aa 1f       	adc	r26, r26
     d06:	bb 1f       	adc	r27, r27
     d08:	89 87       	std	Y+9, r24	; 0x09
     d0a:	9a 87       	std	Y+10, r25	; 0x0a
     d0c:	ab 87       	std	Y+11, r26	; 0x0b
     d0e:	bc 87       	std	Y+12, r27	; 0x0c
	B3 = (tmp + 2) / 4;
     d10:	49 85       	ldd	r20, Y+9	; 0x09
     d12:	5a 85       	ldd	r21, Y+10	; 0x0a
     d14:	6b 85       	ldd	r22, Y+11	; 0x0b
     d16:	7c 85       	ldd	r23, Y+12	; 0x0c
     d18:	4e 5f       	subi	r20, 0xFE	; 254
     d1a:	5f 4f       	sbci	r21, 0xFF	; 255
     d1c:	6f 4f       	sbci	r22, 0xFF	; 255
     d1e:	7f 4f       	sbci	r23, 0xFF	; 255
     d20:	db 01       	movw	r26, r22
     d22:	ca 01       	movw	r24, r20
     d24:	1a f4       	brpl	.+6      	; 0xd2c <_Z16BMP085_Calculatev+0x264>
     d26:	03 96       	adiw	r24, 0x03	; 3
     d28:	a1 1d       	adc	r26, r1
     d2a:	b1 1d       	adc	r27, r1
     d2c:	b5 95       	asr	r27
     d2e:	a7 95       	ror	r26
     d30:	97 95       	ror	r25
     d32:	87 95       	ror	r24
     d34:	b5 95       	asr	r27
     d36:	a7 95       	ror	r26
     d38:	97 95       	ror	r25
     d3a:	87 95       	ror	r24
     d3c:	89 8f       	std	Y+25, r24	; 0x19
     d3e:	9a 8f       	std	Y+26, r25	; 0x1a
     d40:	ab 8f       	std	Y+27, r26	; 0x1b
     d42:	bc 8f       	std	Y+28, r27	; 0x1c
	X1 = AC3 * B6 >> 13;
     d44:	29 89       	ldd	r18, Y+17	; 0x11
     d46:	3a 89       	ldd	r19, Y+18	; 0x12
     d48:	4b 89       	ldd	r20, Y+19	; 0x13
     d4a:	5c 89       	ldd	r21, Y+20	; 0x14
     d4c:	a0 91 ac 00 	lds	r26, 0x00AC
     d50:	b0 91 ad 00 	lds	r27, 0x00AD
     d54:	0e 94 02 2f 	call	0x5e04	; 0x5e04 <__mulshisi3>
     d58:	dc 01       	movw	r26, r24
     d5a:	cb 01       	movw	r24, r22
     d5c:	07 2e       	mov	r0, r23
     d5e:	7d e0       	ldi	r23, 0x0D	; 13
     d60:	b5 95       	asr	r27
     d62:	a7 95       	ror	r26
     d64:	97 95       	ror	r25
     d66:	87 95       	ror	r24
     d68:	7a 95       	dec	r23
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <_Z16BMP085_Calculatev+0x298>
     d6c:	70 2d       	mov	r23, r0
     d6e:	8d a3       	std	Y+37, r24	; 0x25
     d70:	9e a3       	std	Y+38, r25	; 0x26
     d72:	af a3       	std	Y+39, r26	; 0x27
     d74:	b8 a7       	std	Y+40, r27	; 0x28
	X2 = (B1 * (B6 * B6 >> 12)) >> 16;
     d76:	29 89       	ldd	r18, Y+17	; 0x11
     d78:	3a 89       	ldd	r19, Y+18	; 0x12
     d7a:	4b 89       	ldd	r20, Y+19	; 0x13
     d7c:	5c 89       	ldd	r21, Y+20	; 0x14
     d7e:	69 89       	ldd	r22, Y+17	; 0x11
     d80:	7a 89       	ldd	r23, Y+18	; 0x12
     d82:	8b 89       	ldd	r24, Y+19	; 0x13
     d84:	9c 89       	ldd	r25, Y+20	; 0x14
     d86:	e0 91 b4 00 	lds	r30, 0x00B4
     d8a:	f0 91 b5 00 	lds	r31, 0x00B5
     d8e:	0e 94 9d 2e 	call	0x5d3a	; 0x5d3a <__mulsi3>
     d92:	9b 01       	movw	r18, r22
     d94:	ac 01       	movw	r20, r24
     d96:	01 2e       	mov	r0, r17
     d98:	1c e0       	ldi	r17, 0x0C	; 12
     d9a:	55 95       	asr	r21
     d9c:	47 95       	ror	r20
     d9e:	37 95       	ror	r19
     da0:	27 95       	ror	r18
     da2:	1a 95       	dec	r17
     da4:	d1 f7       	brne	.-12     	; 0xd9a <_Z16BMP085_Calculatev+0x2d2>
     da6:	10 2d       	mov	r17, r0
     da8:	df 01       	movw	r26, r30
     daa:	0e 94 02 2f 	call	0x5e04	; 0x5e04 <__mulshisi3>
     dae:	bb 27       	eor	r27, r27
     db0:	97 fd       	sbrc	r25, 7
     db2:	b0 95       	com	r27
     db4:	ab 2f       	mov	r26, r27
     db6:	89 a3       	std	Y+33, r24	; 0x21
     db8:	9a a3       	std	Y+34, r25	; 0x22
     dba:	ab a3       	std	Y+35, r26	; 0x23
     dbc:	bc a3       	std	Y+36, r27	; 0x24
	X3 = ((X1 + X2) + 2) >> 2;
     dbe:	4d a1       	ldd	r20, Y+37	; 0x25
     dc0:	5e a1       	ldd	r21, Y+38	; 0x26
     dc2:	6f a1       	ldd	r22, Y+39	; 0x27
     dc4:	78 a5       	ldd	r23, Y+40	; 0x28
     dc6:	89 a1       	ldd	r24, Y+33	; 0x21
     dc8:	9a a1       	ldd	r25, Y+34	; 0x22
     dca:	ab a1       	ldd	r26, Y+35	; 0x23
     dcc:	bc a1       	ldd	r27, Y+36	; 0x24
     dce:	84 0f       	add	r24, r20
     dd0:	95 1f       	adc	r25, r21
     dd2:	a6 1f       	adc	r26, r22
     dd4:	b7 1f       	adc	r27, r23
     dd6:	02 96       	adiw	r24, 0x02	; 2
     dd8:	a1 1d       	adc	r26, r1
     dda:	b1 1d       	adc	r27, r1
     ddc:	b5 95       	asr	r27
     dde:	a7 95       	ror	r26
     de0:	97 95       	ror	r25
     de2:	87 95       	ror	r24
     de4:	b5 95       	asr	r27
     de6:	a7 95       	ror	r26
     de8:	97 95       	ror	r25
     dea:	87 95       	ror	r24
     dec:	8d 8f       	std	Y+29, r24	; 0x1d
     dee:	9e 8f       	std	Y+30, r25	; 0x1e
     df0:	af 8f       	std	Y+31, r26	; 0x1f
     df2:	b8 a3       	std	Y+32, r27	; 0x20
	B4 = (AC4 * (uint32_t)(X3 + 32768)) >> 15;
     df4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     df6:	9e 8d       	ldd	r25, Y+30	; 0x1e
     df8:	af 8d       	ldd	r26, Y+31	; 0x1f
     dfa:	b8 a1       	ldd	r27, Y+32	; 0x20
     dfc:	9c 01       	movw	r18, r24
     dfe:	ad 01       	movw	r20, r26
     e00:	30 58       	subi	r19, 0x80	; 128
     e02:	4f 4f       	sbci	r20, 0xFF	; 255
     e04:	5f 4f       	sbci	r21, 0xFF	; 255
     e06:	a0 91 ae 00 	lds	r26, 0x00AE
     e0a:	b0 91 af 00 	lds	r27, 0x00AF
     e0e:	0e 94 f7 2e 	call	0x5dee	; 0x5dee <__muluhisi3>
     e12:	dc 01       	movw	r26, r24
     e14:	cb 01       	movw	r24, r22
     e16:	07 2e       	mov	r0, r23
     e18:	7f e0       	ldi	r23, 0x0F	; 15
     e1a:	b6 95       	lsr	r27
     e1c:	a7 95       	ror	r26
     e1e:	97 95       	ror	r25
     e20:	87 95       	ror	r24
     e22:	7a 95       	dec	r23
     e24:	d1 f7       	brne	.-12     	; 0xe1a <_Z16BMP085_Calculatev+0x352>
     e26:	70 2d       	mov	r23, r0
     e28:	8d 83       	std	Y+5, r24	; 0x05
     e2a:	9e 83       	std	Y+6, r25	; 0x06
     e2c:	af 83       	std	Y+7, r26	; 0x07
     e2e:	b8 87       	std	Y+8, r27	; 0x08
	//B7 = ((uint32_t)(UP >> (8 - oss)) - B3) * (50000 >> oss);
	B7 = ((uint32_t) (UP - B3) * (50000 >> oss));
     e30:	89 8d       	ldd	r24, Y+25	; 0x19
     e32:	9a 8d       	ldd	r25, Y+26	; 0x1a
     e34:	ab 8d       	ldd	r26, Y+27	; 0x1b
     e36:	bc 8d       	ldd	r27, Y+28	; 0x1c
     e38:	40 91 a4 00 	lds	r20, 0x00A4
     e3c:	50 91 a5 00 	lds	r21, 0x00A5
     e40:	60 91 a6 00 	lds	r22, 0x00A6
     e44:	70 91 a7 00 	lds	r23, 0x00A7
     e48:	9a 01       	movw	r18, r20
     e4a:	ab 01       	movw	r20, r22
     e4c:	28 1b       	sub	r18, r24
     e4e:	39 0b       	sbc	r19, r25
     e50:	4a 0b       	sbc	r20, r26
     e52:	5b 0b       	sbc	r21, r27
     e54:	aa e6       	ldi	r26, 0x6A	; 106
     e56:	b8 e1       	ldi	r27, 0x18	; 24
     e58:	0e 94 f7 2e 	call	0x5dee	; 0x5dee <__muluhisi3>
     e5c:	69 83       	std	Y+1, r22	; 0x01
     e5e:	7a 83       	std	Y+2, r23	; 0x02
     e60:	8b 83       	std	Y+3, r24	; 0x03
     e62:	9c 83       	std	Y+4, r25	; 0x04
	p = B7 < 0x80000000 ? (B7 * 2) / B4 : (B7 / B4) * 2;	
     e64:	89 81       	ldd	r24, Y+1	; 0x01
     e66:	9a 81       	ldd	r25, Y+2	; 0x02
     e68:	ab 81       	ldd	r26, Y+3	; 0x03
     e6a:	bc 81       	ldd	r27, Y+4	; 0x04
     e6c:	bb 23       	and	r27, r27
     e6e:	8c f0       	brlt	.+34     	; 0xe92 <_Z16BMP085_Calculatev+0x3ca>
     e70:	89 81       	ldd	r24, Y+1	; 0x01
     e72:	9a 81       	ldd	r25, Y+2	; 0x02
     e74:	ab 81       	ldd	r26, Y+3	; 0x03
     e76:	bc 81       	ldd	r27, Y+4	; 0x04
     e78:	2d 81       	ldd	r18, Y+5	; 0x05
     e7a:	3e 81       	ldd	r19, Y+6	; 0x06
     e7c:	4f 81       	ldd	r20, Y+7	; 0x07
     e7e:	58 85       	ldd	r21, Y+8	; 0x08
     e80:	bc 01       	movw	r22, r24
     e82:	cd 01       	movw	r24, r26
     e84:	66 0f       	add	r22, r22
     e86:	77 1f       	adc	r23, r23
     e88:	88 1f       	adc	r24, r24
     e8a:	99 1f       	adc	r25, r25
     e8c:	0e 94 ad 2e 	call	0x5d5a	; 0x5d5a <__udivmodsi4>
     e90:	0e c0       	rjmp	.+28     	; 0xeae <_Z16BMP085_Calculatev+0x3e6>
     e92:	69 81       	ldd	r22, Y+1	; 0x01
     e94:	7a 81       	ldd	r23, Y+2	; 0x02
     e96:	8b 81       	ldd	r24, Y+3	; 0x03
     e98:	9c 81       	ldd	r25, Y+4	; 0x04
     e9a:	2d 81       	ldd	r18, Y+5	; 0x05
     e9c:	3e 81       	ldd	r19, Y+6	; 0x06
     e9e:	4f 81       	ldd	r20, Y+7	; 0x07
     ea0:	58 85       	ldd	r21, Y+8	; 0x08
     ea2:	0e 94 ad 2e 	call	0x5d5a	; 0x5d5a <__udivmodsi4>
     ea6:	22 0f       	add	r18, r18
     ea8:	33 1f       	adc	r19, r19
     eaa:	44 1f       	adc	r20, r20
     eac:	55 1f       	adc	r21, r21
     eae:	2d 87       	std	Y+13, r18	; 0x0d
     eb0:	3e 87       	std	Y+14, r19	; 0x0e
     eb2:	4f 87       	std	Y+15, r20	; 0x0f
     eb4:	58 8b       	std	Y+16, r21	; 0x10
	X1 = (p >> 8) * (p >> 8);
     eb6:	4d 85       	ldd	r20, Y+13	; 0x0d
     eb8:	5e 85       	ldd	r21, Y+14	; 0x0e
     eba:	6f 85       	ldd	r22, Y+15	; 0x0f
     ebc:	78 89       	ldd	r23, Y+16	; 0x10
     ebe:	8d 85       	ldd	r24, Y+13	; 0x0d
     ec0:	9e 85       	ldd	r25, Y+14	; 0x0e
     ec2:	af 85       	ldd	r26, Y+15	; 0x0f
     ec4:	b8 89       	ldd	r27, Y+16	; 0x10
     ec6:	25 2f       	mov	r18, r21
     ec8:	36 2f       	mov	r19, r22
     eca:	47 2f       	mov	r20, r23
     ecc:	55 27       	eor	r21, r21
     ece:	47 fd       	sbrc	r20, 7
     ed0:	5a 95       	dec	r21
     ed2:	69 2f       	mov	r22, r25
     ed4:	7a 2f       	mov	r23, r26
     ed6:	8b 2f       	mov	r24, r27
     ed8:	99 27       	eor	r25, r25
     eda:	87 fd       	sbrc	r24, 7
     edc:	9a 95       	dec	r25
     ede:	0e 94 9d 2e 	call	0x5d3a	; 0x5d3a <__mulsi3>
     ee2:	6d a3       	std	Y+37, r22	; 0x25
     ee4:	7e a3       	std	Y+38, r23	; 0x26
     ee6:	8f a3       	std	Y+39, r24	; 0x27
     ee8:	98 a7       	std	Y+40, r25	; 0x28
	X1 = (X1 * 3038) >> 16;
     eea:	2d a1       	ldd	r18, Y+37	; 0x25
     eec:	3e a1       	ldd	r19, Y+38	; 0x26
     eee:	4f a1       	ldd	r20, Y+39	; 0x27
     ef0:	58 a5       	ldd	r21, Y+40	; 0x28
     ef2:	ae ed       	ldi	r26, 0xDE	; 222
     ef4:	bb e0       	ldi	r27, 0x0B	; 11
     ef6:	0e 94 f7 2e 	call	0x5dee	; 0x5dee <__muluhisi3>
     efa:	bb 27       	eor	r27, r27
     efc:	97 fd       	sbrc	r25, 7
     efe:	b0 95       	com	r27
     f00:	ab 2f       	mov	r26, r27
     f02:	8d a3       	std	Y+37, r24	; 0x25
     f04:	9e a3       	std	Y+38, r25	; 0x26
     f06:	af a3       	std	Y+39, r26	; 0x27
     f08:	b8 a7       	std	Y+40, r27	; 0x28
	X2 = (-7357 * p) >> 16;
     f0a:	2d 85       	ldd	r18, Y+13	; 0x0d
     f0c:	3e 85       	ldd	r19, Y+14	; 0x0e
     f0e:	4f 85       	ldd	r20, Y+15	; 0x0f
     f10:	58 89       	ldd	r21, Y+16	; 0x10
     f12:	a3 e4       	ldi	r26, 0x43	; 67
     f14:	b3 ee       	ldi	r27, 0xE3	; 227
     f16:	0e 94 05 2f 	call	0x5e0a	; 0x5e0a <__mulohisi3>
     f1a:	bb 27       	eor	r27, r27
     f1c:	97 fd       	sbrc	r25, 7
     f1e:	b0 95       	com	r27
     f20:	ab 2f       	mov	r26, r27
     f22:	89 a3       	std	Y+33, r24	; 0x21
     f24:	9a a3       	std	Y+34, r25	; 0x22
     f26:	ab a3       	std	Y+35, r26	; 0x23
     f28:	bc a3       	std	Y+36, r27	; 0x24
				
	P.value = Pa2mmHg * (float)(p + ((X1 + X2 + 3791) >> 4));
     f2a:	0d a1       	ldd	r16, Y+37	; 0x25
     f2c:	1e a1       	ldd	r17, Y+38	; 0x26
     f2e:	2f a1       	ldd	r18, Y+39	; 0x27
     f30:	38 a5       	ldd	r19, Y+40	; 0x28
     f32:	49 a1       	ldd	r20, Y+33	; 0x21
     f34:	5a a1       	ldd	r21, Y+34	; 0x22
     f36:	6b a1       	ldd	r22, Y+35	; 0x23
     f38:	7c a1       	ldd	r23, Y+36	; 0x24
     f3a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f3c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f3e:	af 85       	ldd	r26, Y+15	; 0x0f
     f40:	b8 89       	ldd	r27, Y+16	; 0x10
     f42:	40 0f       	add	r20, r16
     f44:	51 1f       	adc	r21, r17
     f46:	62 1f       	adc	r22, r18
     f48:	73 1f       	adc	r23, r19
     f4a:	41 53       	subi	r20, 0x31	; 49
     f4c:	51 4f       	sbci	r21, 0xF1	; 241
     f4e:	6f 4f       	sbci	r22, 0xFF	; 255
     f50:	7f 4f       	sbci	r23, 0xFF	; 255
     f52:	68 94       	set
     f54:	13 f8       	bld	r1, 3
     f56:	75 95       	asr	r23
     f58:	67 95       	ror	r22
     f5a:	57 95       	ror	r21
     f5c:	47 95       	ror	r20
     f5e:	16 94       	lsr	r1
     f60:	d1 f7       	brne	.-12     	; 0xf56 <_Z16BMP085_Calculatev+0x48e>
     f62:	8a 01       	movw	r16, r20
     f64:	9b 01       	movw	r18, r22
     f66:	08 0f       	add	r16, r24
     f68:	19 1f       	adc	r17, r25
     f6a:	2a 1f       	adc	r18, r26
     f6c:	3b 1f       	adc	r19, r27
     f6e:	c9 01       	movw	r24, r18
     f70:	b8 01       	movw	r22, r16
     f72:	0e 94 90 2c 	call	0x5920	; 0x5920 <__floatsisf>
     f76:	20 91 95 00 	lds	r18, 0x0095
     f7a:	30 91 96 00 	lds	r19, 0x0096
     f7e:	40 91 97 00 	lds	r20, 0x0097
     f82:	50 91 98 00 	lds	r21, 0x0098
     f86:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
     f8a:	60 93 bf 05 	sts	0x05BF, r22
     f8e:	70 93 c0 05 	sts	0x05C0, r23
     f92:	80 93 c1 05 	sts	0x05C1, r24
     f96:	90 93 c2 05 	sts	0x05C2, r25
}
     f9a:	a8 96       	adiw	r28, 0x28	; 40
     f9c:	0f b6       	in	r0, 0x3f	; 63
     f9e:	f8 94       	cli
     fa0:	de bf       	out	0x3e, r29	; 62
     fa2:	0f be       	out	0x3f, r0	; 63
     fa4:	cd bf       	out	0x3d, r28	; 61
     fa6:	df 91       	pop	r29
     fa8:	cf 91       	pop	r28
     faa:	1f 91       	pop	r17
     fac:	0f 91       	pop	r16
     fae:	ff 90       	pop	r15
     fb0:	ef 90       	pop	r14
     fb2:	df 90       	pop	r13
     fb4:	cf 90       	pop	r12
     fb6:	08 95       	ret

00000fb8 <_Z12BMP085_GetUPv>:
	BMP085_Calculate();
	return 0;
}

uint8_t BMP085_GetUP()
{
     fb8:	0f 93       	push	r16
     fba:	1f 93       	push	r17
     fbc:	cf 93       	push	r28
     fbe:	df 93       	push	r29
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
     fc4:	2c 97       	sbiw	r28, 0x0c	; 12
     fc6:	0f b6       	in	r0, 0x3f	; 63
     fc8:	f8 94       	cli
     fca:	de bf       	out	0x3e, r29	; 62
     fcc:	0f be       	out	0x3f, r0	; 63
     fce:	cd bf       	out	0x3d, r28	; 61
	volatile int32_t LSB, MSB, XLSB;
	
	twi(TWI_START);
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=BMP085_ADDR|I2C_WRITE;
     fd6:	8e ee       	ldi	r24, 0xEE	; 238
     fd8:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     fda:	83 e0       	ldi	r24, 0x03	; 3
     fdc:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=0xF6;
     fe0:	86 ef       	ldi	r24, 0xF6	; 246
     fe2:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     fe4:	83 e0       	ldi	r24, 0x03	; 3
     fe6:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	twi(TWI_RESTART);
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=BMP085_ADDR|I2C_READ;
     ff0:	8f ee       	ldi	r24, 0xEF	; 239
     ff2:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     ff4:	83 e0       	ldi	r24, 0x03	; 3
     ff6:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	twi(TWI_RECEIVE_ACK);
     ffa:	84 e0       	ldi	r24, 0x04	; 4
     ffc:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	MSB=TWDR;
    1000:	83 b1       	in	r24, 0x03	; 3
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	a0 e0       	ldi	r26, 0x00	; 0
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	8d 83       	std	Y+5, r24	; 0x05
    100a:	9e 83       	std	Y+6, r25	; 0x06
    100c:	af 83       	std	Y+7, r26	; 0x07
    100e:	b8 87       	std	Y+8, r27	; 0x08
	twi(TWI_RECEIVE_ACK);
    1010:	84 e0       	ldi	r24, 0x04	; 4
    1012:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	LSB=TWDR;
    1016:	83 b1       	in	r24, 0x03	; 3
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	a0 e0       	ldi	r26, 0x00	; 0
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	89 87       	std	Y+9, r24	; 0x09
    1020:	9a 87       	std	Y+10, r25	; 0x0a
    1022:	ab 87       	std	Y+11, r26	; 0x0b
    1024:	bc 87       	std	Y+12, r27	; 0x0c
	twi(TWI_RECEIVE_NACK);
    1026:	85 e0       	ldi	r24, 0x05	; 5
    1028:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	XLSB=TWDR;
    102c:	83 b1       	in	r24, 0x03	; 3
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	a0 e0       	ldi	r26, 0x00	; 0
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	9a 83       	std	Y+2, r25	; 0x02
    1038:	ab 83       	std	Y+3, r26	; 0x03
    103a:	bc 83       	std	Y+4, r27	; 0x04
	twi(TWI_STOP);
    103c:	82 e0       	ldi	r24, 0x02	; 2
    103e:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	UP = (MSB<<16 | LSB<<8 | XLSB) >> (8 - oss);
    1042:	0d 81       	ldd	r16, Y+5	; 0x05
    1044:	1e 81       	ldd	r17, Y+6	; 0x06
    1046:	2f 81       	ldd	r18, Y+7	; 0x07
    1048:	38 85       	ldd	r19, Y+8	; 0x08
    104a:	89 85       	ldd	r24, Y+9	; 0x09
    104c:	9a 85       	ldd	r25, Y+10	; 0x0a
    104e:	ab 85       	ldd	r26, Y+11	; 0x0b
    1050:	bc 85       	ldd	r27, Y+12	; 0x0c
    1052:	49 81       	ldd	r20, Y+1	; 0x01
    1054:	5a 81       	ldd	r21, Y+2	; 0x02
    1056:	6b 81       	ldd	r22, Y+3	; 0x03
    1058:	7c 81       	ldd	r23, Y+4	; 0x04
    105a:	98 01       	movw	r18, r16
    105c:	11 27       	eor	r17, r17
    105e:	00 27       	eor	r16, r16
    1060:	ba 2f       	mov	r27, r26
    1062:	a9 2f       	mov	r26, r25
    1064:	98 2f       	mov	r25, r24
    1066:	88 27       	eor	r24, r24
    1068:	80 2b       	or	r24, r16
    106a:	91 2b       	or	r25, r17
    106c:	a2 2b       	or	r26, r18
    106e:	b3 2b       	or	r27, r19
    1070:	84 2b       	or	r24, r20
    1072:	95 2b       	or	r25, r21
    1074:	a6 2b       	or	r26, r22
    1076:	b7 2b       	or	r27, r23
    1078:	68 94       	set
    107a:	14 f8       	bld	r1, 4
    107c:	b5 95       	asr	r27
    107e:	a7 95       	ror	r26
    1080:	97 95       	ror	r25
    1082:	87 95       	ror	r24
    1084:	16 94       	lsr	r1
    1086:	d1 f7       	brne	.-12     	; 0x107c <_Z12BMP085_GetUPv+0xc4>
    1088:	80 93 a4 00 	sts	0x00A4, r24
    108c:	90 93 a5 00 	sts	0x00A5, r25
    1090:	a0 93 a6 00 	sts	0x00A6, r26
    1094:	b0 93 a7 00 	sts	0x00A7, r27
	BMP085_Calculate();
    1098:	0e 94 64 05 	call	0xac8	; 0xac8 <_Z16BMP085_Calculatev>
	return 0;
}
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	2c 96       	adiw	r28, 0x0c	; 12
    10a0:	0f b6       	in	r0, 0x3f	; 63
    10a2:	f8 94       	cli
    10a4:	de bf       	out	0x3e, r29	; 62
    10a6:	0f be       	out	0x3f, r0	; 63
    10a8:	cd bf       	out	0x3d, r28	; 61
    10aa:	df 91       	pop	r29
    10ac:	cf 91       	pop	r28
    10ae:	1f 91       	pop	r17
    10b0:	0f 91       	pop	r16
    10b2:	08 95       	ret

000010b4 <_Z12BMP085_GetUTv>:
	twi(TWI_STOP);
	return 0;
}

uint8_t BMP085_GetUT()
{
    10b4:	cf 93       	push	r28
    10b6:	df 93       	push	r29
	uint8_t LSB, MSB;	
	//_delay_ms(20);
	
	twi(TWI_START);
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=BMP085_ADDR|I2C_WRITE;
    10be:	8e ee       	ldi	r24, 0xEE	; 238
    10c0:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
    10c2:	83 e0       	ldi	r24, 0x03	; 3
    10c4:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=0xF6;
    10c8:	86 ef       	ldi	r24, 0xF6	; 246
    10ca:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
    10cc:	83 e0       	ldi	r24, 0x03	; 3
    10ce:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	twi(TWI_RESTART);
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR=BMP085_ADDR|I2C_READ;
    10d8:	8f ee       	ldi	r24, 0xEF	; 239
    10da:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
    10dc:	83 e0       	ldi	r24, 0x03	; 3
    10de:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	twi(TWI_RECEIVE_ACK);
    10e2:	84 e0       	ldi	r24, 0x04	; 4
    10e4:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	MSB=TWDR;
    10e8:	d3 b1       	in	r29, 0x03	; 3
	twi(TWI_RECEIVE_NACK);
    10ea:	85 e0       	ldi	r24, 0x05	; 5
    10ec:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	LSB=TWDR;
    10f0:	c3 b1       	in	r28, 0x03	; 3
	twi(TWI_STOP);
    10f2:	82 e0       	ldi	r24, 0x02	; 2
    10f4:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	UT = (int32_t)(MSB<<8 | LSB);	
    10f8:	9d 2f       	mov	r25, r29
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	8c 2b       	or	r24, r28
    10fe:	aa 27       	eor	r26, r26
    1100:	97 fd       	sbrc	r25, 7
    1102:	a0 95       	com	r26
    1104:	ba 2f       	mov	r27, r26
    1106:	80 93 a0 00 	sts	0x00A0, r24
    110a:	90 93 a1 00 	sts	0x00A1, r25
    110e:	a0 93 a2 00 	sts	0x00A2, r26
    1112:	b0 93 a3 00 	sts	0x00A3, r27
	BMP085_Calculate();
    1116:	0e 94 64 05 	call	0xac8	; 0xac8 <_Z16BMP085_Calculatev>
	return 0;
}
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	df 91       	pop	r29
    111e:	cf 91       	pop	r28
    1120:	08 95       	ret

00001122 <_ZN11ButterworthC1Eff>:
Butterworth::Butterworth()
{
	Butterworth(1.0, 4.0);
} //Butterworth

Butterworth::Butterworth(float _fc, float _fs)
    1122:	6f 92       	push	r6
    1124:	7f 92       	push	r7
    1126:	8f 92       	push	r8
    1128:	9f 92       	push	r9
    112a:	af 92       	push	r10
    112c:	bf 92       	push	r11
    112e:	cf 92       	push	r12
    1130:	df 92       	push	r13
    1132:	ef 92       	push	r14
    1134:	ff 92       	push	r15
    1136:	0f 93       	push	r16
    1138:	1f 93       	push	r17
    113a:	cf 93       	push	r28
    113c:	df 93       	push	r29
    113e:	ec 01       	movw	r28, r24
    1140:	cb 01       	movw	r24, r22
    1142:	ba 01       	movw	r22, r20
    1144:	68 01       	movw	r12, r16
    1146:	79 01       	movw	r14, r18
{
	this->fc = _fc;
    1148:	68 8b       	std	Y+16, r22	; 0x10
    114a:	79 8b       	std	Y+17, r23	; 0x11
    114c:	8a 8b       	std	Y+18, r24	; 0x12
    114e:	9b 8b       	std	Y+19, r25	; 0x13
	this->fs = _fs;
    1150:	0c 8b       	std	Y+20, r16	; 0x14
    1152:	1d 8b       	std	Y+21, r17	; 0x15
    1154:	2e 8b       	std	Y+22, r18	; 0x16
    1156:	3f 8b       	std	Y+23, r19	; 0x17
	
	x_prev = 0.0;
    1158:	18 82       	st	Y, r1
    115a:	19 82       	std	Y+1, r1	; 0x01
    115c:	1a 82       	std	Y+2, r1	; 0x02
    115e:	1b 82       	std	Y+3, r1	; 0x03
	x_pprev = 0.0;
    1160:	1c 82       	std	Y+4, r1	; 0x04
    1162:	1d 82       	std	Y+5, r1	; 0x05
    1164:	1e 82       	std	Y+6, r1	; 0x06
    1166:	1f 82       	std	Y+7, r1	; 0x07
	y_prev = 0.0;
    1168:	18 86       	std	Y+8, r1	; 0x08
    116a:	19 86       	std	Y+9, r1	; 0x09
    116c:	1a 86       	std	Y+10, r1	; 0x0a
    116e:	1b 86       	std	Y+11, r1	; 0x0b
	y_pprev = 0.0;
    1170:	1c 86       	std	Y+12, r1	; 0x0c
    1172:	1d 86       	std	Y+13, r1	; 0x0d
    1174:	1e 86       	std	Y+14, r1	; 0x0e
    1176:	1f 86       	std	Y+15, r1	; 0x0f
	
	this->w = tan((M_PI * fc) / fs);
    1178:	2b ed       	ldi	r18, 0xDB	; 219
    117a:	3f e0       	ldi	r19, 0x0F	; 15
    117c:	49 e4       	ldi	r20, 0x49	; 73
    117e:	50 e4       	ldi	r21, 0x40	; 64
    1180:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    1184:	a7 01       	movw	r20, r14
    1186:	96 01       	movw	r18, r12
    1188:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <__divsf3>
    118c:	0e 94 57 2e 	call	0x5cae	; 0x5cae <tan>
    1190:	6b 01       	movw	r12, r22
    1192:	7c 01       	movw	r14, r24
    1194:	68 8f       	std	Y+24, r22	; 0x18
    1196:	79 8f       	std	Y+25, r23	; 0x19
    1198:	8a 8f       	std	Y+26, r24	; 0x1a
    119a:	9b 8f       	std	Y+27, r25	; 0x1b
	this->c = 1 + 2 * cos(M_PI_4) * w + w * w;
    119c:	23 ef       	ldi	r18, 0xF3	; 243
    119e:	34 e0       	ldi	r19, 0x04	; 4
    11a0:	45 eb       	ldi	r20, 0xB5	; 181
    11a2:	5f e3       	ldi	r21, 0x3F	; 63
    11a4:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    11a8:	66 2e       	mov	r6, r22
    11aa:	77 2e       	mov	r7, r23
    11ac:	88 2e       	mov	r8, r24
    11ae:	99 2e       	mov	r9, r25
    11b0:	a7 01       	movw	r20, r14
    11b2:	96 01       	movw	r18, r12
    11b4:	c7 01       	movw	r24, r14
    11b6:	b6 01       	movw	r22, r12
    11b8:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    11bc:	e6 2e       	mov	r14, r22
    11be:	f7 2e       	mov	r15, r23
    11c0:	08 2f       	mov	r16, r24
    11c2:	19 2f       	mov	r17, r25
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	40 e8       	ldi	r20, 0x80	; 128
    11ca:	5f e3       	ldi	r21, 0x3F	; 63
    11cc:	66 2d       	mov	r22, r6
    11ce:	77 2d       	mov	r23, r7
    11d0:	88 2d       	mov	r24, r8
    11d2:	99 2d       	mov	r25, r9
    11d4:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    11d8:	2e 2d       	mov	r18, r14
    11da:	3f 2d       	mov	r19, r15
    11dc:	40 2f       	mov	r20, r16
    11de:	51 2f       	mov	r21, r17
    11e0:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    11e4:	a6 2e       	mov	r10, r22
    11e6:	b7 2e       	mov	r11, r23
    11e8:	c8 2e       	mov	r12, r24
    11ea:	d9 2e       	mov	r13, r25
    11ec:	86 2f       	mov	r24, r22
    11ee:	9b 2d       	mov	r25, r11
    11f0:	ac 2d       	mov	r26, r12
    11f2:	bd 2d       	mov	r27, r13
    11f4:	8c 8f       	std	Y+28, r24	; 0x1c
    11f6:	9d 8f       	std	Y+29, r25	; 0x1d
    11f8:	ae 8f       	std	Y+30, r26	; 0x1e
    11fa:	bf 8f       	std	Y+31, r27	; 0x1f
	this->b2 = (1 - 2 * cos(M_PI_4) * w + w * w) / c;
    11fc:	26 2d       	mov	r18, r6
    11fe:	37 2d       	mov	r19, r7
    1200:	48 2d       	mov	r20, r8
    1202:	59 2d       	mov	r21, r9
    1204:	60 e0       	ldi	r22, 0x00	; 0
    1206:	70 e0       	ldi	r23, 0x00	; 0
    1208:	80 e8       	ldi	r24, 0x80	; 128
    120a:	9f e3       	ldi	r25, 0x3F	; 63
    120c:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__subsf3>
    1210:	9b 01       	movw	r18, r22
    1212:	ac 01       	movw	r20, r24
    1214:	6e 2d       	mov	r22, r14
    1216:	7f 2d       	mov	r23, r15
    1218:	80 2f       	mov	r24, r16
    121a:	91 2f       	mov	r25, r17
    121c:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    1220:	2a 2d       	mov	r18, r10
    1222:	3b 2d       	mov	r19, r11
    1224:	4c 2d       	mov	r20, r12
    1226:	5d 2d       	mov	r21, r13
    1228:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <__divsf3>
    122c:	68 ab       	std	Y+48, r22	; 0x30
    122e:	79 ab       	std	Y+49, r23	; 0x31
    1230:	8a ab       	std	Y+50, r24	; 0x32
    1232:	9b ab       	std	Y+51, r25	; 0x33
	this->b1 = (2 * (w * w - 1)) / c;
    1234:	20 e0       	ldi	r18, 0x00	; 0
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	40 e8       	ldi	r20, 0x80	; 128
    123a:	5f e3       	ldi	r21, 0x3F	; 63
    123c:	6e 2d       	mov	r22, r14
    123e:	7f 2d       	mov	r23, r15
    1240:	80 2f       	mov	r24, r16
    1242:	91 2f       	mov	r25, r17
    1244:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__subsf3>
    1248:	9b 01       	movw	r18, r22
    124a:	ac 01       	movw	r20, r24
    124c:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    1250:	2a 2d       	mov	r18, r10
    1252:	3b 2d       	mov	r19, r11
    1254:	4c 2d       	mov	r20, r12
    1256:	5d 2d       	mov	r21, r13
    1258:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <__divsf3>
    125c:	6c a7       	std	Y+44, r22	; 0x2c
    125e:	7d a7       	std	Y+45, r23	; 0x2d
    1260:	8e a7       	std	Y+46, r24	; 0x2e
    1262:	9f a7       	std	Y+47, r25	; 0x2f
	this->a2 = (w * w) / c;
    1264:	2a 2d       	mov	r18, r10
    1266:	3b 2d       	mov	r19, r11
    1268:	4c 2d       	mov	r20, r12
    126a:	5d 2d       	mov	r21, r13
    126c:	6e 2d       	mov	r22, r14
    126e:	7f 2d       	mov	r23, r15
    1270:	80 2f       	mov	r24, r16
    1272:	91 2f       	mov	r25, r17
    1274:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <__divsf3>
    1278:	e6 2f       	mov	r30, r22
    127a:	f7 2f       	mov	r31, r23
    127c:	46 2f       	mov	r20, r22
    127e:	57 2f       	mov	r21, r23
    1280:	68 2f       	mov	r22, r24
    1282:	79 2f       	mov	r23, r25
    1284:	48 a7       	std	Y+40, r20	; 0x28
    1286:	59 a7       	std	Y+41, r21	; 0x29
    1288:	6a a7       	std	Y+42, r22	; 0x2a
    128a:	7b a7       	std	Y+43, r23	; 0x2b
	this->a0 = a2;
    128c:	48 a3       	std	Y+32, r20	; 0x20
    128e:	59 a3       	std	Y+33, r21	; 0x21
    1290:	6a a3       	std	Y+34, r22	; 0x22
    1292:	7b a3       	std	Y+35, r23	; 0x23
	this->a1 = 2 * a0;	
    1294:	2e 2f       	mov	r18, r30
    1296:	3f 2f       	mov	r19, r31
    1298:	48 2f       	mov	r20, r24
    129a:	59 2f       	mov	r21, r25
    129c:	62 2f       	mov	r22, r18
    129e:	73 2f       	mov	r23, r19
    12a0:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    12a4:	6c a3       	std	Y+36, r22	; 0x24
    12a6:	7d a3       	std	Y+37, r23	; 0x25
    12a8:	8e a3       	std	Y+38, r24	; 0x26
    12aa:	9f a3       	std	Y+39, r25	; 0x27
}
    12ac:	df 91       	pop	r29
    12ae:	cf 91       	pop	r28
    12b0:	1f 91       	pop	r17
    12b2:	0f 91       	pop	r16
    12b4:	ff 90       	pop	r15
    12b6:	ef 90       	pop	r14
    12b8:	df 90       	pop	r13
    12ba:	cf 90       	pop	r12
    12bc:	bf 90       	pop	r11
    12be:	af 90       	pop	r10
    12c0:	9f 90       	pop	r9
    12c2:	8f 90       	pop	r8
    12c4:	7f 90       	pop	r7
    12c6:	6f 90       	pop	r6
    12c8:	08 95       	ret

000012ca <_ZN11ButterworthC1Ev>:

#include "Butterworth.h"
#include <math.h>

// default constructor
Butterworth::Butterworth()
    12ca:	0f 93       	push	r16
    12cc:	1f 93       	push	r17
    12ce:	cf 93       	push	r28
    12d0:	df 93       	push	r29
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62
    12d6:	e4 97       	sbiw	r28, 0x34	; 52
    12d8:	0f b6       	in	r0, 0x3f	; 63
    12da:	f8 94       	cli
    12dc:	de bf       	out	0x3e, r29	; 62
    12de:	0f be       	out	0x3f, r0	; 63
    12e0:	cd bf       	out	0x3d, r28	; 61
{
	Butterworth(1.0, 4.0);
    12e2:	00 e0       	ldi	r16, 0x00	; 0
    12e4:	10 e0       	ldi	r17, 0x00	; 0
    12e6:	20 e8       	ldi	r18, 0x80	; 128
    12e8:	30 e4       	ldi	r19, 0x40	; 64
    12ea:	40 e0       	ldi	r20, 0x00	; 0
    12ec:	50 e0       	ldi	r21, 0x00	; 0
    12ee:	60 e8       	ldi	r22, 0x80	; 128
    12f0:	7f e3       	ldi	r23, 0x3F	; 63
    12f2:	ce 01       	movw	r24, r28
    12f4:	01 96       	adiw	r24, 0x01	; 1
    12f6:	0e 94 91 08 	call	0x1122	; 0x1122 <_ZN11ButterworthC1Eff>
} //Butterworth
    12fa:	e4 96       	adiw	r28, 0x34	; 52
    12fc:	0f b6       	in	r0, 0x3f	; 63
    12fe:	f8 94       	cli
    1300:	de bf       	out	0x3e, r29	; 62
    1302:	0f be       	out	0x3f, r0	; 63
    1304:	cd bf       	out	0x3d, r28	; 61
    1306:	df 91       	pop	r29
    1308:	cf 91       	pop	r28
    130a:	1f 91       	pop	r17
    130c:	0f 91       	pop	r16
    130e:	08 95       	ret

00001310 <_ZN11ButterworthD1Ev>:
	this->a0 = a2;
	this->a1 = 2 * a0;	
}

// default destructor
Butterworth::~Butterworth()
    1310:	08 95       	ret

00001312 <_ZN11Butterworth7getNextEf>:
{
} //~Butterworth

float Butterworth::getNext(float x)
{
    1312:	4f 92       	push	r4
    1314:	5f 92       	push	r5
    1316:	6f 92       	push	r6
    1318:	7f 92       	push	r7
    131a:	8f 92       	push	r8
    131c:	9f 92       	push	r9
    131e:	af 92       	push	r10
    1320:	bf 92       	push	r11
    1322:	cf 92       	push	r12
    1324:	df 92       	push	r13
    1326:	ef 92       	push	r14
    1328:	ff 92       	push	r15
    132a:	cf 93       	push	r28
    132c:	df 93       	push	r29
    132e:	ec 01       	movw	r28, r24
    1330:	6a 01       	movw	r12, r20
    1332:	7b 01       	movw	r14, r22
	float result = a0 * x + a1 * x_prev + a2 * x_pprev - b1 * y_prev - b2 * y_pprev;
    1334:	88 80       	ld	r8, Y
    1336:	99 80       	ldd	r9, Y+1	; 0x01
    1338:	aa 80       	ldd	r10, Y+2	; 0x02
    133a:	bb 80       	ldd	r11, Y+3	; 0x03
    133c:	28 a1       	ldd	r18, Y+32	; 0x20
    133e:	39 a1       	ldd	r19, Y+33	; 0x21
    1340:	4a a1       	ldd	r20, Y+34	; 0x22
    1342:	5b a1       	ldd	r21, Y+35	; 0x23
    1344:	c7 01       	movw	r24, r14
    1346:	b6 01       	movw	r22, r12
    1348:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    134c:	2b 01       	movw	r4, r22
    134e:	3c 01       	movw	r6, r24
    1350:	2c a1       	ldd	r18, Y+36	; 0x24
    1352:	3d a1       	ldd	r19, Y+37	; 0x25
    1354:	4e a1       	ldd	r20, Y+38	; 0x26
    1356:	5f a1       	ldd	r21, Y+39	; 0x27
    1358:	c5 01       	movw	r24, r10
    135a:	b4 01       	movw	r22, r8
    135c:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    1360:	9b 01       	movw	r18, r22
    1362:	ac 01       	movw	r20, r24
    1364:	c3 01       	movw	r24, r6
    1366:	b2 01       	movw	r22, r4
    1368:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    136c:	2b 01       	movw	r4, r22
    136e:	3c 01       	movw	r6, r24
    1370:	2c 81       	ldd	r18, Y+4	; 0x04
    1372:	3d 81       	ldd	r19, Y+5	; 0x05
    1374:	4e 81       	ldd	r20, Y+6	; 0x06
    1376:	5f 81       	ldd	r21, Y+7	; 0x07
    1378:	68 a5       	ldd	r22, Y+40	; 0x28
    137a:	79 a5       	ldd	r23, Y+41	; 0x29
    137c:	8a a5       	ldd	r24, Y+42	; 0x2a
    137e:	9b a5       	ldd	r25, Y+43	; 0x2b
    1380:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    1384:	9b 01       	movw	r18, r22
    1386:	ac 01       	movw	r20, r24
    1388:	c3 01       	movw	r24, r6
    138a:	b2 01       	movw	r22, r4
    138c:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    1390:	2b 01       	movw	r4, r22
    1392:	3c 01       	movw	r6, r24
    1394:	28 85       	ldd	r18, Y+8	; 0x08
    1396:	39 85       	ldd	r19, Y+9	; 0x09
    1398:	4a 85       	ldd	r20, Y+10	; 0x0a
    139a:	5b 85       	ldd	r21, Y+11	; 0x0b
    139c:	6c a5       	ldd	r22, Y+44	; 0x2c
    139e:	7d a5       	ldd	r23, Y+45	; 0x2d
    13a0:	8e a5       	ldd	r24, Y+46	; 0x2e
    13a2:	9f a5       	ldd	r25, Y+47	; 0x2f
    13a4:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    13a8:	9b 01       	movw	r18, r22
    13aa:	ac 01       	movw	r20, r24
    13ac:	c3 01       	movw	r24, r6
    13ae:	b2 01       	movw	r22, r4
    13b0:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__subsf3>
    13b4:	2b 01       	movw	r4, r22
    13b6:	3c 01       	movw	r6, r24
    13b8:	2c 85       	ldd	r18, Y+12	; 0x0c
    13ba:	3d 85       	ldd	r19, Y+13	; 0x0d
    13bc:	4e 85       	ldd	r20, Y+14	; 0x0e
    13be:	5f 85       	ldd	r21, Y+15	; 0x0f
    13c0:	68 a9       	ldd	r22, Y+48	; 0x30
    13c2:	79 a9       	ldd	r23, Y+49	; 0x31
    13c4:	8a a9       	ldd	r24, Y+50	; 0x32
    13c6:	9b a9       	ldd	r25, Y+51	; 0x33
    13c8:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    13cc:	9b 01       	movw	r18, r22
    13ce:	ac 01       	movw	r20, r24
    13d0:	c3 01       	movw	r24, r6
    13d2:	b2 01       	movw	r22, r4
    13d4:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__subsf3>
    13d8:	26 2f       	mov	r18, r22
    13da:	37 2f       	mov	r19, r23
	x_pprev = x_prev;
    13dc:	8c 82       	std	Y+4, r8	; 0x04
    13de:	9d 82       	std	Y+5, r9	; 0x05
    13e0:	ae 82       	std	Y+6, r10	; 0x06
    13e2:	bf 82       	std	Y+7, r11	; 0x07
	x_prev = x;
    13e4:	c8 82       	st	Y, r12
    13e6:	d9 82       	std	Y+1, r13	; 0x01
    13e8:	ea 82       	std	Y+2, r14	; 0x02
    13ea:	fb 82       	std	Y+3, r15	; 0x03
	y_pprev = x_prev;
    13ec:	cc 86       	std	Y+12, r12	; 0x0c
    13ee:	dd 86       	std	Y+13, r13	; 0x0d
    13f0:	ee 86       	std	Y+14, r14	; 0x0e
    13f2:	ff 86       	std	Y+15, r15	; 0x0f
	y_prev = result;
    13f4:	46 2f       	mov	r20, r22
    13f6:	57 2f       	mov	r21, r23
    13f8:	68 2f       	mov	r22, r24
    13fa:	79 2f       	mov	r23, r25
    13fc:	48 87       	std	Y+8, r20	; 0x08
    13fe:	59 87       	std	Y+9, r21	; 0x09
    1400:	6a 87       	std	Y+10, r22	; 0x0a
    1402:	7b 87       	std	Y+11, r23	; 0x0b
	
	return result;
}
    1404:	62 2f       	mov	r22, r18
    1406:	73 2f       	mov	r23, r19
    1408:	df 91       	pop	r29
    140a:	cf 91       	pop	r28
    140c:	ff 90       	pop	r15
    140e:	ef 90       	pop	r14
    1410:	df 90       	pop	r13
    1412:	cf 90       	pop	r12
    1414:	bf 90       	pop	r11
    1416:	af 90       	pop	r10
    1418:	9f 90       	pop	r9
    141a:	8f 90       	pop	r8
    141c:	7f 90       	pop	r7
    141e:	6f 90       	pop	r6
    1420:	5f 90       	pop	r5
    1422:	4f 90       	pop	r4
    1424:	08 95       	ret

00001426 <_ZN11Butterworth14setFrequenciesEff>:

void Butterworth::setFrequencies(float fc, float fs)
{
    1426:	6f 92       	push	r6
    1428:	7f 92       	push	r7
    142a:	8f 92       	push	r8
    142c:	9f 92       	push	r9
    142e:	af 92       	push	r10
    1430:	bf 92       	push	r11
    1432:	cf 92       	push	r12
    1434:	df 92       	push	r13
    1436:	ef 92       	push	r14
    1438:	ff 92       	push	r15
    143a:	0f 93       	push	r16
    143c:	1f 93       	push	r17
    143e:	cf 93       	push	r28
    1440:	df 93       	push	r29
    1442:	ec 01       	movw	r28, r24
    1444:	cb 01       	movw	r24, r22
    1446:	ba 01       	movw	r22, r20
    1448:	68 01       	movw	r12, r16
    144a:	79 01       	movw	r14, r18
	this->fc = fc;
    144c:	68 8b       	std	Y+16, r22	; 0x10
    144e:	79 8b       	std	Y+17, r23	; 0x11
    1450:	8a 8b       	std	Y+18, r24	; 0x12
    1452:	9b 8b       	std	Y+19, r25	; 0x13
	this->fs = fs;
    1454:	0c 8b       	std	Y+20, r16	; 0x14
    1456:	1d 8b       	std	Y+21, r17	; 0x15
    1458:	2e 8b       	std	Y+22, r18	; 0x16
    145a:	3f 8b       	std	Y+23, r19	; 0x17
	
	x_prev = 0.0;
    145c:	18 82       	st	Y, r1
    145e:	19 82       	std	Y+1, r1	; 0x01
    1460:	1a 82       	std	Y+2, r1	; 0x02
    1462:	1b 82       	std	Y+3, r1	; 0x03
	x_pprev = 0.0;
    1464:	1c 82       	std	Y+4, r1	; 0x04
    1466:	1d 82       	std	Y+5, r1	; 0x05
    1468:	1e 82       	std	Y+6, r1	; 0x06
    146a:	1f 82       	std	Y+7, r1	; 0x07
	y_prev = 0.0;
    146c:	18 86       	std	Y+8, r1	; 0x08
    146e:	19 86       	std	Y+9, r1	; 0x09
    1470:	1a 86       	std	Y+10, r1	; 0x0a
    1472:	1b 86       	std	Y+11, r1	; 0x0b
	y_pprev = 0.0;
    1474:	1c 86       	std	Y+12, r1	; 0x0c
    1476:	1d 86       	std	Y+13, r1	; 0x0d
    1478:	1e 86       	std	Y+14, r1	; 0x0e
    147a:	1f 86       	std	Y+15, r1	; 0x0f
	
	w = tan((M_PI * fc) / fs);
    147c:	2b ed       	ldi	r18, 0xDB	; 219
    147e:	3f e0       	ldi	r19, 0x0F	; 15
    1480:	49 e4       	ldi	r20, 0x49	; 73
    1482:	50 e4       	ldi	r21, 0x40	; 64
    1484:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    1488:	a7 01       	movw	r20, r14
    148a:	96 01       	movw	r18, r12
    148c:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <__divsf3>
    1490:	0e 94 57 2e 	call	0x5cae	; 0x5cae <tan>
    1494:	6b 01       	movw	r12, r22
    1496:	7c 01       	movw	r14, r24
    1498:	68 8f       	std	Y+24, r22	; 0x18
    149a:	79 8f       	std	Y+25, r23	; 0x19
    149c:	8a 8f       	std	Y+26, r24	; 0x1a
    149e:	9b 8f       	std	Y+27, r25	; 0x1b
	c = 1 + 2 * cos(M_PI_4) * w + w * w;
    14a0:	23 ef       	ldi	r18, 0xF3	; 243
    14a2:	34 e0       	ldi	r19, 0x04	; 4
    14a4:	45 eb       	ldi	r20, 0xB5	; 181
    14a6:	5f e3       	ldi	r21, 0x3F	; 63
    14a8:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    14ac:	66 2e       	mov	r6, r22
    14ae:	77 2e       	mov	r7, r23
    14b0:	88 2e       	mov	r8, r24
    14b2:	99 2e       	mov	r9, r25
    14b4:	a7 01       	movw	r20, r14
    14b6:	96 01       	movw	r18, r12
    14b8:	c7 01       	movw	r24, r14
    14ba:	b6 01       	movw	r22, r12
    14bc:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    14c0:	e6 2e       	mov	r14, r22
    14c2:	f7 2e       	mov	r15, r23
    14c4:	08 2f       	mov	r16, r24
    14c6:	19 2f       	mov	r17, r25
    14c8:	20 e0       	ldi	r18, 0x00	; 0
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	40 e8       	ldi	r20, 0x80	; 128
    14ce:	5f e3       	ldi	r21, 0x3F	; 63
    14d0:	66 2d       	mov	r22, r6
    14d2:	77 2d       	mov	r23, r7
    14d4:	88 2d       	mov	r24, r8
    14d6:	99 2d       	mov	r25, r9
    14d8:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    14dc:	2e 2d       	mov	r18, r14
    14de:	3f 2d       	mov	r19, r15
    14e0:	40 2f       	mov	r20, r16
    14e2:	51 2f       	mov	r21, r17
    14e4:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    14e8:	a6 2e       	mov	r10, r22
    14ea:	b7 2e       	mov	r11, r23
    14ec:	c8 2e       	mov	r12, r24
    14ee:	d9 2e       	mov	r13, r25
    14f0:	86 2f       	mov	r24, r22
    14f2:	9b 2d       	mov	r25, r11
    14f4:	ac 2d       	mov	r26, r12
    14f6:	bd 2d       	mov	r27, r13
    14f8:	8c 8f       	std	Y+28, r24	; 0x1c
    14fa:	9d 8f       	std	Y+29, r25	; 0x1d
    14fc:	ae 8f       	std	Y+30, r26	; 0x1e
    14fe:	bf 8f       	std	Y+31, r27	; 0x1f
	b2 = (1 - 2 * cos(M_PI_4) * w + w * w) / c;
    1500:	26 2d       	mov	r18, r6
    1502:	37 2d       	mov	r19, r7
    1504:	48 2d       	mov	r20, r8
    1506:	59 2d       	mov	r21, r9
    1508:	60 e0       	ldi	r22, 0x00	; 0
    150a:	70 e0       	ldi	r23, 0x00	; 0
    150c:	80 e8       	ldi	r24, 0x80	; 128
    150e:	9f e3       	ldi	r25, 0x3F	; 63
    1510:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__subsf3>
    1514:	9b 01       	movw	r18, r22
    1516:	ac 01       	movw	r20, r24
    1518:	6e 2d       	mov	r22, r14
    151a:	7f 2d       	mov	r23, r15
    151c:	80 2f       	mov	r24, r16
    151e:	91 2f       	mov	r25, r17
    1520:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    1524:	2a 2d       	mov	r18, r10
    1526:	3b 2d       	mov	r19, r11
    1528:	4c 2d       	mov	r20, r12
    152a:	5d 2d       	mov	r21, r13
    152c:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <__divsf3>
    1530:	68 ab       	std	Y+48, r22	; 0x30
    1532:	79 ab       	std	Y+49, r23	; 0x31
    1534:	8a ab       	std	Y+50, r24	; 0x32
    1536:	9b ab       	std	Y+51, r25	; 0x33
	b1 = (2 * (w * w - 1)) / c;
    1538:	20 e0       	ldi	r18, 0x00	; 0
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	40 e8       	ldi	r20, 0x80	; 128
    153e:	5f e3       	ldi	r21, 0x3F	; 63
    1540:	6e 2d       	mov	r22, r14
    1542:	7f 2d       	mov	r23, r15
    1544:	80 2f       	mov	r24, r16
    1546:	91 2f       	mov	r25, r17
    1548:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__subsf3>
    154c:	9b 01       	movw	r18, r22
    154e:	ac 01       	movw	r20, r24
    1550:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    1554:	2a 2d       	mov	r18, r10
    1556:	3b 2d       	mov	r19, r11
    1558:	4c 2d       	mov	r20, r12
    155a:	5d 2d       	mov	r21, r13
    155c:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <__divsf3>
    1560:	6c a7       	std	Y+44, r22	; 0x2c
    1562:	7d a7       	std	Y+45, r23	; 0x2d
    1564:	8e a7       	std	Y+46, r24	; 0x2e
    1566:	9f a7       	std	Y+47, r25	; 0x2f
	a2 = (w * w) / c;
    1568:	2a 2d       	mov	r18, r10
    156a:	3b 2d       	mov	r19, r11
    156c:	4c 2d       	mov	r20, r12
    156e:	5d 2d       	mov	r21, r13
    1570:	6e 2d       	mov	r22, r14
    1572:	7f 2d       	mov	r23, r15
    1574:	80 2f       	mov	r24, r16
    1576:	91 2f       	mov	r25, r17
    1578:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <__divsf3>
    157c:	e6 2f       	mov	r30, r22
    157e:	f7 2f       	mov	r31, r23
    1580:	46 2f       	mov	r20, r22
    1582:	57 2f       	mov	r21, r23
    1584:	68 2f       	mov	r22, r24
    1586:	79 2f       	mov	r23, r25
    1588:	48 a7       	std	Y+40, r20	; 0x28
    158a:	59 a7       	std	Y+41, r21	; 0x29
    158c:	6a a7       	std	Y+42, r22	; 0x2a
    158e:	7b a7       	std	Y+43, r23	; 0x2b
	a0 = a2;
    1590:	48 a3       	std	Y+32, r20	; 0x20
    1592:	59 a3       	std	Y+33, r21	; 0x21
    1594:	6a a3       	std	Y+34, r22	; 0x22
    1596:	7b a3       	std	Y+35, r23	; 0x23
	a1 = 2 * a0;
    1598:	2e 2f       	mov	r18, r30
    159a:	3f 2f       	mov	r19, r31
    159c:	48 2f       	mov	r20, r24
    159e:	59 2f       	mov	r21, r25
    15a0:	62 2f       	mov	r22, r18
    15a2:	73 2f       	mov	r23, r19
    15a4:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    15a8:	6c a3       	std	Y+36, r22	; 0x24
    15aa:	7d a3       	std	Y+37, r23	; 0x25
    15ac:	8e a3       	std	Y+38, r24	; 0x26
    15ae:	9f a3       	std	Y+39, r25	; 0x27
    15b0:	df 91       	pop	r29
    15b2:	cf 91       	pop	r28
    15b4:	1f 91       	pop	r17
    15b6:	0f 91       	pop	r16
    15b8:	ff 90       	pop	r15
    15ba:	ef 90       	pop	r14
    15bc:	df 90       	pop	r13
    15be:	cf 90       	pop	r12
    15c0:	bf 90       	pop	r11
    15c2:	af 90       	pop	r10
    15c4:	9f 90       	pop	r9
    15c6:	8f 90       	pop	r8
    15c8:	7f 90       	pop	r7
    15ca:	6f 90       	pop	r6
    15cc:	08 95       	ret

000015ce <_Z41__static_initialization_and_destruction_0ii>:
}

float ComplemetaryFilter(float alpha, float beta, float factor)
{
	return factor * alpha + (1.0 - factor) * beta;
}
    15ce:	81 30       	cpi	r24, 0x01	; 1
    15d0:	91 05       	cpc	r25, r1
    15d2:	a1 f4       	brne	.+40     	; 0x15fc <_Z41__static_initialization_and_destruction_0ii+0x2e>
    15d4:	6f 3f       	cpi	r22, 0xFF	; 255
    15d6:	7f 4f       	sbci	r23, 0xFF	; 255
    15d8:	31 f5       	brne	.+76     	; 0x1626 <_Z41__static_initialization_and_destruction_0ii+0x58>
#include "Filters.h"
#include "GlobalConstants.h"
#include "Butterworth.h"
#include "Params.h"

Butterworth but1, but2, but3, but4;
    15da:	8a e5       	ldi	r24, 0x5A	; 90
    15dc:	91 e0       	ldi	r25, 0x01	; 1
    15de:	0e 94 65 09 	call	0x12ca	; 0x12ca <_ZN11ButterworthC1Ev>
    15e2:	86 e2       	ldi	r24, 0x26	; 38
    15e4:	91 e0       	ldi	r25, 0x01	; 1
    15e6:	0e 94 65 09 	call	0x12ca	; 0x12ca <_ZN11ButterworthC1Ev>
    15ea:	82 ef       	ldi	r24, 0xF2	; 242
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	0e 94 65 09 	call	0x12ca	; 0x12ca <_ZN11ButterworthC1Ev>
    15f2:	8e eb       	ldi	r24, 0xBE	; 190
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	0e 94 65 09 	call	0x12ca	; 0x12ca <_ZN11ButterworthC1Ev>
    15fa:	08 95       	ret
    15fc:	89 2b       	or	r24, r25
    15fe:	99 f4       	brne	.+38     	; 0x1626 <_Z41__static_initialization_and_destruction_0ii+0x58>
    1600:	6f 3f       	cpi	r22, 0xFF	; 255
    1602:	7f 4f       	sbci	r23, 0xFF	; 255
    1604:	81 f4       	brne	.+32     	; 0x1626 <_Z41__static_initialization_and_destruction_0ii+0x58>
    1606:	8e eb       	ldi	r24, 0xBE	; 190
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	0e 94 88 09 	call	0x1310	; 0x1310 <_ZN11ButterworthD1Ev>
    160e:	82 ef       	ldi	r24, 0xF2	; 242
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	0e 94 88 09 	call	0x1310	; 0x1310 <_ZN11ButterworthD1Ev>
    1616:	86 e2       	ldi	r24, 0x26	; 38
    1618:	91 e0       	ldi	r25, 0x01	; 1
    161a:	0e 94 88 09 	call	0x1310	; 0x1310 <_ZN11ButterworthD1Ev>
    161e:	8a e5       	ldi	r24, 0x5A	; 90
    1620:	91 e0       	ldi	r25, 0x01	; 1
    1622:	0e 94 88 09 	call	0x1310	; 0x1310 <_ZN11ButterworthD1Ev>
    1626:	08 95       	ret

00001628 <_Z10filterInitv>:

void filterInit()
{
    1628:	ef 92       	push	r14
    162a:	ff 92       	push	r15
    162c:	0f 93       	push	r16
    162e:	1f 93       	push	r17
    1630:	cf 93       	push	r28
    1632:	df 93       	push	r29
    1634:	cd b7       	in	r28, 0x3d	; 61
    1636:	de b7       	in	r29, 0x3e	; 62
    1638:	c0 5d       	subi	r28, 0xD0	; 208
    163a:	d1 09       	sbc	r29, r1
    163c:	0f b6       	in	r0, 0x3f	; 63
    163e:	f8 94       	cli
    1640:	de bf       	out	0x3e, r29	; 62
    1642:	0f be       	out	0x3f, r0	; 63
    1644:	cd bf       	out	0x3d, r28	; 61
	but1 = Butterworth(coeffs[FC_BUTTER].value, 244.0);
    1646:	0f 2e       	mov	r0, r31
    1648:	f7 eb       	ldi	r31, 0xB7	; 183
    164a:	ef 2e       	mov	r14, r31
    164c:	f5 e0       	ldi	r31, 0x05	; 5
    164e:	ff 2e       	mov	r15, r31
    1650:	f0 2d       	mov	r31, r0
    1652:	f7 01       	movw	r30, r14
    1654:	40 81       	ld	r20, Z
    1656:	51 81       	ldd	r21, Z+1	; 0x01
    1658:	62 81       	ldd	r22, Z+2	; 0x02
    165a:	73 81       	ldd	r23, Z+3	; 0x03
    165c:	00 e0       	ldi	r16, 0x00	; 0
    165e:	10 e0       	ldi	r17, 0x00	; 0
    1660:	24 e7       	ldi	r18, 0x74	; 116
    1662:	33 e4       	ldi	r19, 0x43	; 67
    1664:	ce 01       	movw	r24, r28
    1666:	83 56       	subi	r24, 0x63	; 99
    1668:	9f 4f       	sbci	r25, 0xFF	; 255
    166a:	0e 94 91 08 	call	0x1122	; 0x1122 <_ZN11ButterworthC1Eff>
    166e:	84 e3       	ldi	r24, 0x34	; 52
    1670:	fe 01       	movw	r30, r28
    1672:	e3 56       	subi	r30, 0x63	; 99
    1674:	ff 4f       	sbci	r31, 0xFF	; 255
    1676:	aa e5       	ldi	r26, 0x5A	; 90
    1678:	b1 e0       	ldi	r27, 0x01	; 1
    167a:	01 90       	ld	r0, Z+
    167c:	0d 92       	st	X+, r0
    167e:	8a 95       	dec	r24
    1680:	e1 f7       	brne	.-8      	; 0x167a <_Z10filterInitv+0x52>
    1682:	ce 01       	movw	r24, r28
    1684:	83 56       	subi	r24, 0x63	; 99
    1686:	9f 4f       	sbci	r25, 0xFF	; 255
    1688:	0e 94 88 09 	call	0x1310	; 0x1310 <_ZN11ButterworthD1Ev>
	but2 = Butterworth(coeffs[FC_BUTTER].value, 244.0);
    168c:	f7 01       	movw	r30, r14
    168e:	40 81       	ld	r20, Z
    1690:	51 81       	ldd	r21, Z+1	; 0x01
    1692:	62 81       	ldd	r22, Z+2	; 0x02
    1694:	73 81       	ldd	r23, Z+3	; 0x03
    1696:	00 e0       	ldi	r16, 0x00	; 0
    1698:	10 e0       	ldi	r17, 0x00	; 0
    169a:	24 e7       	ldi	r18, 0x74	; 116
    169c:	33 e4       	ldi	r19, 0x43	; 67
    169e:	ce 01       	movw	r24, r28
    16a0:	87 59       	subi	r24, 0x97	; 151
    16a2:	9f 4f       	sbci	r25, 0xFF	; 255
    16a4:	0e 94 91 08 	call	0x1122	; 0x1122 <_ZN11ButterworthC1Eff>
    16a8:	84 e3       	ldi	r24, 0x34	; 52
    16aa:	fe 01       	movw	r30, r28
    16ac:	e7 59       	subi	r30, 0x97	; 151
    16ae:	ff 4f       	sbci	r31, 0xFF	; 255
    16b0:	a6 e2       	ldi	r26, 0x26	; 38
    16b2:	b1 e0       	ldi	r27, 0x01	; 1
    16b4:	01 90       	ld	r0, Z+
    16b6:	0d 92       	st	X+, r0
    16b8:	8a 95       	dec	r24
    16ba:	e1 f7       	brne	.-8      	; 0x16b4 <_Z10filterInitv+0x8c>
    16bc:	ce 01       	movw	r24, r28
    16be:	87 59       	subi	r24, 0x97	; 151
    16c0:	9f 4f       	sbci	r25, 0xFF	; 255
    16c2:	0e 94 88 09 	call	0x1310	; 0x1310 <_ZN11ButterworthD1Ev>
	but3 = Butterworth(coeffs[FC_BUTTER].value, 244.0);
    16c6:	f7 01       	movw	r30, r14
    16c8:	40 81       	ld	r20, Z
    16ca:	51 81       	ldd	r21, Z+1	; 0x01
    16cc:	62 81       	ldd	r22, Z+2	; 0x02
    16ce:	73 81       	ldd	r23, Z+3	; 0x03
    16d0:	00 e0       	ldi	r16, 0x00	; 0
    16d2:	10 e0       	ldi	r17, 0x00	; 0
    16d4:	24 e7       	ldi	r18, 0x74	; 116
    16d6:	33 e4       	ldi	r19, 0x43	; 67
    16d8:	ce 01       	movw	r24, r28
    16da:	c5 96       	adiw	r24, 0x35	; 53
    16dc:	0e 94 91 08 	call	0x1122	; 0x1122 <_ZN11ButterworthC1Eff>
    16e0:	84 e3       	ldi	r24, 0x34	; 52
    16e2:	fe 01       	movw	r30, r28
    16e4:	f5 96       	adiw	r30, 0x35	; 53
    16e6:	a2 ef       	ldi	r26, 0xF2	; 242
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	01 90       	ld	r0, Z+
    16ec:	0d 92       	st	X+, r0
    16ee:	8a 95       	dec	r24
    16f0:	e1 f7       	brne	.-8      	; 0x16ea <_Z10filterInitv+0xc2>
    16f2:	ce 01       	movw	r24, r28
    16f4:	c5 96       	adiw	r24, 0x35	; 53
    16f6:	0e 94 88 09 	call	0x1310	; 0x1310 <_ZN11ButterworthD1Ev>
	but4 = Butterworth(coeffs[FC_BUTTER].value, 244.0);
    16fa:	f7 01       	movw	r30, r14
    16fc:	40 81       	ld	r20, Z
    16fe:	51 81       	ldd	r21, Z+1	; 0x01
    1700:	62 81       	ldd	r22, Z+2	; 0x02
    1702:	73 81       	ldd	r23, Z+3	; 0x03
    1704:	00 e0       	ldi	r16, 0x00	; 0
    1706:	10 e0       	ldi	r17, 0x00	; 0
    1708:	24 e7       	ldi	r18, 0x74	; 116
    170a:	33 e4       	ldi	r19, 0x43	; 67
    170c:	ce 01       	movw	r24, r28
    170e:	01 96       	adiw	r24, 0x01	; 1
    1710:	0e 94 91 08 	call	0x1122	; 0x1122 <_ZN11ButterworthC1Eff>
    1714:	84 e3       	ldi	r24, 0x34	; 52
    1716:	fe 01       	movw	r30, r28
    1718:	31 96       	adiw	r30, 0x01	; 1
    171a:	ae eb       	ldi	r26, 0xBE	; 190
    171c:	b0 e0       	ldi	r27, 0x00	; 0
    171e:	01 90       	ld	r0, Z+
    1720:	0d 92       	st	X+, r0
    1722:	8a 95       	dec	r24
    1724:	e1 f7       	brne	.-8      	; 0x171e <_Z10filterInitv+0xf6>
    1726:	ce 01       	movw	r24, r28
    1728:	01 96       	adiw	r24, 0x01	; 1
    172a:	0e 94 88 09 	call	0x1310	; 0x1310 <_ZN11ButterworthD1Ev>
}
    172e:	c0 53       	subi	r28, 0x30	; 48
    1730:	df 4f       	sbci	r29, 0xFF	; 255
    1732:	0f b6       	in	r0, 0x3f	; 63
    1734:	f8 94       	cli
    1736:	de bf       	out	0x3e, r29	; 62
    1738:	0f be       	out	0x3f, r0	; 63
    173a:	cd bf       	out	0x3d, r28	; 61
    173c:	df 91       	pop	r29
    173e:	cf 91       	pop	r28
    1740:	1f 91       	pop	r17
    1742:	0f 91       	pop	r16
    1744:	ff 90       	pop	r15
    1746:	ef 90       	pop	r14
    1748:	08 95       	ret

0000174a <_Z12filterUpdatev>:

void filterUpdate()
{
    174a:	0f 93       	push	r16
    174c:	1f 93       	push	r17
    174e:	cf 93       	push	r28
    1750:	df 93       	push	r29
	but1.setFrequencies(coeffs[FC_BUTTER].value, 244.0);
    1752:	c7 eb       	ldi	r28, 0xB7	; 183
    1754:	d5 e0       	ldi	r29, 0x05	; 5
    1756:	48 81       	ld	r20, Y
    1758:	59 81       	ldd	r21, Y+1	; 0x01
    175a:	6a 81       	ldd	r22, Y+2	; 0x02
    175c:	7b 81       	ldd	r23, Y+3	; 0x03
    175e:	00 e0       	ldi	r16, 0x00	; 0
    1760:	10 e0       	ldi	r17, 0x00	; 0
    1762:	24 e7       	ldi	r18, 0x74	; 116
    1764:	33 e4       	ldi	r19, 0x43	; 67
    1766:	8a e5       	ldi	r24, 0x5A	; 90
    1768:	91 e0       	ldi	r25, 0x01	; 1
    176a:	0e 94 13 0a 	call	0x1426	; 0x1426 <_ZN11Butterworth14setFrequenciesEff>
	but2.setFrequencies(coeffs[FC_BUTTER].value, 244.0);
    176e:	48 81       	ld	r20, Y
    1770:	59 81       	ldd	r21, Y+1	; 0x01
    1772:	6a 81       	ldd	r22, Y+2	; 0x02
    1774:	7b 81       	ldd	r23, Y+3	; 0x03
    1776:	00 e0       	ldi	r16, 0x00	; 0
    1778:	10 e0       	ldi	r17, 0x00	; 0
    177a:	24 e7       	ldi	r18, 0x74	; 116
    177c:	33 e4       	ldi	r19, 0x43	; 67
    177e:	86 e2       	ldi	r24, 0x26	; 38
    1780:	91 e0       	ldi	r25, 0x01	; 1
    1782:	0e 94 13 0a 	call	0x1426	; 0x1426 <_ZN11Butterworth14setFrequenciesEff>
	but3.setFrequencies(coeffs[FC_BUTTER].value, 244.0);
    1786:	48 81       	ld	r20, Y
    1788:	59 81       	ldd	r21, Y+1	; 0x01
    178a:	6a 81       	ldd	r22, Y+2	; 0x02
    178c:	7b 81       	ldd	r23, Y+3	; 0x03
    178e:	00 e0       	ldi	r16, 0x00	; 0
    1790:	10 e0       	ldi	r17, 0x00	; 0
    1792:	24 e7       	ldi	r18, 0x74	; 116
    1794:	33 e4       	ldi	r19, 0x43	; 67
    1796:	82 ef       	ldi	r24, 0xF2	; 242
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	0e 94 13 0a 	call	0x1426	; 0x1426 <_ZN11Butterworth14setFrequenciesEff>
	but4.setFrequencies(coeffs[FC_BUTTER].value, 244.0);
    179e:	48 81       	ld	r20, Y
    17a0:	59 81       	ldd	r21, Y+1	; 0x01
    17a2:	6a 81       	ldd	r22, Y+2	; 0x02
    17a4:	7b 81       	ldd	r23, Y+3	; 0x03
    17a6:	00 e0       	ldi	r16, 0x00	; 0
    17a8:	10 e0       	ldi	r17, 0x00	; 0
    17aa:	24 e7       	ldi	r18, 0x74	; 116
    17ac:	33 e4       	ldi	r19, 0x43	; 67
    17ae:	8e eb       	ldi	r24, 0xBE	; 190
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	0e 94 13 0a 	call	0x1426	; 0x1426 <_ZN11Butterworth14setFrequenciesEff>
}
    17b6:	df 91       	pop	r29
    17b8:	cf 91       	pop	r28
    17ba:	1f 91       	pop	r17
    17bc:	0f 91       	pop	r16
    17be:	08 95       	ret

000017c0 <_Z13LowPassFilterfh>:

float LowPassFilter(float new_data, uint8_t filter)
{
	switch (filter)
    17c0:	42 30       	cpi	r20, 0x02	; 2
    17c2:	59 f0       	breq	.+22     	; 0x17da <_Z13LowPassFilterfh+0x1a>
    17c4:	43 30       	cpi	r20, 0x03	; 3
    17c6:	81 f0       	breq	.+32     	; 0x17e8 <_Z13LowPassFilterfh+0x28>
    17c8:	41 30       	cpi	r20, 0x01	; 1
    17ca:	a9 f4       	brne	.+42     	; 0x17f6 <_Z13LowPassFilterfh+0x36>
	{
		case 1: return but1.getNext(new_data);
    17cc:	ab 01       	movw	r20, r22
    17ce:	bc 01       	movw	r22, r24
    17d0:	8a e5       	ldi	r24, 0x5A	; 90
    17d2:	91 e0       	ldi	r25, 0x01	; 1
    17d4:	0e 94 89 09 	call	0x1312	; 0x1312 <_ZN11Butterworth7getNextEf>
    17d8:	12 c0       	rjmp	.+36     	; 0x17fe <_Z13LowPassFilterfh+0x3e>
		case 2: return but2.getNext(new_data);
    17da:	ab 01       	movw	r20, r22
    17dc:	bc 01       	movw	r22, r24
    17de:	86 e2       	ldi	r24, 0x26	; 38
    17e0:	91 e0       	ldi	r25, 0x01	; 1
    17e2:	0e 94 89 09 	call	0x1312	; 0x1312 <_ZN11Butterworth7getNextEf>
    17e6:	0b c0       	rjmp	.+22     	; 0x17fe <_Z13LowPassFilterfh+0x3e>
		case 3: return but3.getNext(new_data);
    17e8:	ab 01       	movw	r20, r22
    17ea:	bc 01       	movw	r22, r24
    17ec:	82 ef       	ldi	r24, 0xF2	; 242
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	0e 94 89 09 	call	0x1312	; 0x1312 <_ZN11Butterworth7getNextEf>
    17f4:	04 c0       	rjmp	.+8      	; 0x17fe <_Z13LowPassFilterfh+0x3e>
		default: return 0.0;
    17f6:	60 e0       	ldi	r22, 0x00	; 0
    17f8:	70 e0       	ldi	r23, 0x00	; 0
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	90 e0       	ldi	r25, 0x00	; 0
	}
}
    17fe:	08 95       	ret

00001800 <_Z18ComplemetaryFilterfff>:

float ComplemetaryFilter(float alpha, float beta, float factor)
{
    1800:	4f 92       	push	r4
    1802:	5f 92       	push	r5
    1804:	6f 92       	push	r6
    1806:	7f 92       	push	r7
    1808:	8f 92       	push	r8
    180a:	9f 92       	push	r9
    180c:	af 92       	push	r10
    180e:	bf 92       	push	r11
    1810:	cf 92       	push	r12
    1812:	df 92       	push	r13
    1814:	ef 92       	push	r14
    1816:	ff 92       	push	r15
    1818:	0f 93       	push	r16
    181a:	1f 93       	push	r17
    181c:	49 01       	movw	r8, r18
    181e:	5a 01       	movw	r10, r20
    1820:	67 01       	movw	r12, r14
    1822:	78 01       	movw	r14, r16
	return factor * alpha + (1.0 - factor) * beta;
    1824:	9b 01       	movw	r18, r22
    1826:	ac 01       	movw	r20, r24
    1828:	c7 01       	movw	r24, r14
    182a:	b6 01       	movw	r22, r12
    182c:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    1830:	2b 01       	movw	r4, r22
    1832:	3c 01       	movw	r6, r24
    1834:	a7 01       	movw	r20, r14
    1836:	96 01       	movw	r18, r12
    1838:	60 e0       	ldi	r22, 0x00	; 0
    183a:	70 e0       	ldi	r23, 0x00	; 0
    183c:	80 e8       	ldi	r24, 0x80	; 128
    183e:	9f e3       	ldi	r25, 0x3F	; 63
    1840:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__subsf3>
    1844:	a5 01       	movw	r20, r10
    1846:	94 01       	movw	r18, r8
    1848:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    184c:	9b 01       	movw	r18, r22
    184e:	ac 01       	movw	r20, r24
    1850:	c3 01       	movw	r24, r6
    1852:	b2 01       	movw	r22, r4
    1854:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
}
    1858:	1f 91       	pop	r17
    185a:	0f 91       	pop	r16
    185c:	ff 90       	pop	r15
    185e:	ef 90       	pop	r14
    1860:	df 90       	pop	r13
    1862:	cf 90       	pop	r12
    1864:	bf 90       	pop	r11
    1866:	af 90       	pop	r10
    1868:	9f 90       	pop	r9
    186a:	8f 90       	pop	r8
    186c:	7f 90       	pop	r7
    186e:	6f 90       	pop	r6
    1870:	5f 90       	pop	r5
    1872:	4f 90       	pop	r4
    1874:	08 95       	ret

00001876 <_GLOBAL__sub_I_but1>:
    1876:	6f ef       	ldi	r22, 0xFF	; 255
    1878:	7f ef       	ldi	r23, 0xFF	; 255
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <_Z41__static_initialization_and_destruction_0ii>
    1882:	08 95       	ret

00001884 <_GLOBAL__sub_D_but1>:
    1884:	6f ef       	ldi	r22, 0xFF	; 255
    1886:	7f ef       	ldi	r23, 0xFF	; 255
    1888:	80 e0       	ldi	r24, 0x00	; 0
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <_Z41__static_initialization_and_destruction_0ii>
    1890:	08 95       	ret

00001892 <__vector_1>:
uint8_t HCSR04_Timer_Prescaller;
uint16_t timer0OverflowCount;
uint16_t timer0PrevValue;

ISR(INT0_vect)
{
    1892:	1f 92       	push	r1
    1894:	0f 92       	push	r0
    1896:	0f b6       	in	r0, 0x3f	; 63
    1898:	0f 92       	push	r0
    189a:	11 24       	eor	r1, r1
    189c:	2f 93       	push	r18
    189e:	3f 93       	push	r19
    18a0:	4f 93       	push	r20
    18a2:	5f 93       	push	r21
    18a4:	6f 93       	push	r22
    18a6:	7f 93       	push	r23
    18a8:	8f 93       	push	r24
    18aa:	9f 93       	push	r25
    18ac:	af 93       	push	r26
    18ae:	bf 93       	push	r27
    18b0:	ef 93       	push	r30
    18b2:	ff 93       	push	r31
	if (bit_is_clear(MCUCR, ISC00))
    18b4:	05 b6       	in	r0, 0x35	; 53
    18b6:	00 fc       	sbrc	r0, 0
    18b8:	27 c0       	rjmp	.+78     	; 0x1908 <__vector_1+0x76>
	{
		H.value = (TCNT0 + timer0OverflowCount * 256 - timer0PrevValue) * 16 / 5600.0;
    18ba:	82 b7       	in	r24, 0x32	; 50
    18bc:	70 91 90 01 	lds	r23, 0x0190
    18c0:	60 e0       	ldi	r22, 0x00	; 0
    18c2:	68 0f       	add	r22, r24
    18c4:	71 1d       	adc	r23, r1
    18c6:	80 91 8e 01 	lds	r24, 0x018E
    18ca:	90 91 8f 01 	lds	r25, 0x018F
    18ce:	68 1b       	sub	r22, r24
    18d0:	79 0b       	sbc	r23, r25
    18d2:	62 95       	swap	r22
    18d4:	72 95       	swap	r23
    18d6:	70 7f       	andi	r23, 0xF0	; 240
    18d8:	76 27       	eor	r23, r22
    18da:	60 7f       	andi	r22, 0xF0	; 240
    18dc:	76 27       	eor	r23, r22
    18de:	80 e0       	ldi	r24, 0x00	; 0
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	0e 94 8e 2c 	call	0x591c	; 0x591c <__floatunsisf>
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	4f ea       	ldi	r20, 0xAF	; 175
    18ec:	55 e4       	ldi	r21, 0x45	; 69
    18ee:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <__divsf3>
    18f2:	60 93 c3 05 	sts	0x05C3, r22
    18f6:	70 93 c4 05 	sts	0x05C4, r23
    18fa:	80 93 c5 05 	sts	0x05C5, r24
    18fe:	90 93 c6 05 	sts	0x05C6, r25
		MCUCR = 1<<ISC01 | 1<<ISC00; //растущий фронт
    1902:	83 e0       	ldi	r24, 0x03	; 3
    1904:	85 bf       	out	0x35, r24	; 53
    1906:	0c c0       	rjmp	.+24     	; 0x1920 <__vector_1+0x8e>
	} 
	else
	{
		timer0PrevValue = TCNT0 + timer0OverflowCount * 256;
    1908:	22 b7       	in	r18, 0x32	; 50
    190a:	90 91 90 01 	lds	r25, 0x0190
    190e:	80 e0       	ldi	r24, 0x00	; 0
    1910:	82 0f       	add	r24, r18
    1912:	91 1d       	adc	r25, r1
    1914:	90 93 8f 01 	sts	0x018F, r25
    1918:	80 93 8e 01 	sts	0x018E, r24
		MCUCR = 1<<ISC01 | 0<<ISC00; //спадающий фронт
    191c:	82 e0       	ldi	r24, 0x02	; 2
    191e:	85 bf       	out	0x35, r24	; 53
	}
}
    1920:	ff 91       	pop	r31
    1922:	ef 91       	pop	r30
    1924:	bf 91       	pop	r27
    1926:	af 91       	pop	r26
    1928:	9f 91       	pop	r25
    192a:	8f 91       	pop	r24
    192c:	7f 91       	pop	r23
    192e:	6f 91       	pop	r22
    1930:	5f 91       	pop	r21
    1932:	4f 91       	pop	r20
    1934:	3f 91       	pop	r19
    1936:	2f 91       	pop	r18
    1938:	0f 90       	pop	r0
    193a:	0f be       	out	0x3f, r0	; 63
    193c:	0f 90       	pop	r0
    193e:	1f 90       	pop	r1
    1940:	18 95       	reti

00001942 <_Z9INT0_Initv>:

void INT0_Init()
{
	MCUCR = 1<<ISC01 | 1<<ISC00; //растущий фронт
    1942:	83 e0       	ldi	r24, 0x03	; 3
    1944:	85 bf       	out	0x35, r24	; 53
	GICR = 1<<INT0; 
    1946:	80 e4       	ldi	r24, 0x40	; 64
    1948:	8b bf       	out	0x3b, r24	; 59
    194a:	08 95       	ret

0000194c <_Z13HMC5883L_Initv>:
 *	Магнитометр
 */ 
#include "HMC5883L.h"

uint8_t HMC5883L_Init()
{
    194c:	cf 93       	push	r28
	twi(TWI_START);
    194e:	80 e0       	ldi	r24, 0x00	; 0
    1950:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR = HMC5883L_ADDR | I2C_WRITE;
    1954:	cc e3       	ldi	r28, 0x3C	; 60
    1956:	c3 b9       	out	0x03, r28	; 3
	twi(TWI_TRANSMIT);
    1958:	83 e0       	ldi	r24, 0x03	; 3
    195a:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR = 0x00;	//CRA
    195e:	13 b8       	out	0x03, r1	; 3
	twi(TWI_TRANSMIT);
    1960:	83 e0       	ldi	r24, 0x03	; 3
    1962:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR = 0b01110000;	//8-average, 15 Hz default, normal measurement
    1966:	80 e7       	ldi	r24, 0x70	; 112
    1968:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
    196a:	83 e0       	ldi	r24, 0x03	; 3
    196c:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	twi(TWI_STOP);
    1970:	82 e0       	ldi	r24, 0x02	; 2
    1972:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	
	twi(TWI_START);
    1976:	80 e0       	ldi	r24, 0x00	; 0
    1978:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR = HMC5883L_ADDR | I2C_WRITE;
    197c:	c3 b9       	out	0x03, r28	; 3
	twi(TWI_TRANSMIT);
    197e:	83 e0       	ldi	r24, 0x03	; 3
    1980:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR = 0x01;	//CRB
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
    1988:	83 e0       	ldi	r24, 0x03	; 3
    198a:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR = 0b00100000;	//Gain=5, or any other desired gain
    198e:	80 e2       	ldi	r24, 0x20	; 32
    1990:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
    1992:	83 e0       	ldi	r24, 0x03	; 3
    1994:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	twi(TWI_STOP);
    1998:	82 e0       	ldi	r24, 0x02	; 2
    199a:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	
	twi(TWI_START);
    199e:	80 e0       	ldi	r24, 0x00	; 0
    19a0:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR = HMC5883L_ADDR | I2C_WRITE;
    19a4:	c3 b9       	out	0x03, r28	; 3
	twi(TWI_TRANSMIT);
    19a6:	83 e0       	ldi	r24, 0x03	; 3
    19a8:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR = 0x02;	//Mode
    19ac:	82 e0       	ldi	r24, 0x02	; 2
    19ae:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
    19b0:	83 e0       	ldi	r24, 0x03	; 3
    19b2:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR = 0b10000000;	//Continuous-measurement mode
    19b6:	80 e8       	ldi	r24, 0x80	; 128
    19b8:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
    19ba:	83 e0       	ldi	r24, 0x03	; 3
    19bc:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	twi(TWI_STOP);
    19c0:	82 e0       	ldi	r24, 0x02	; 2
    19c2:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	
	return 0;
}
    19c6:	80 e0       	ldi	r24, 0x00	; 0
    19c8:	cf 91       	pop	r28
    19ca:	08 95       	ret

000019cc <_Z13HMC5883L_Pollv>:

uint8_t HMC5883L_Poll()
{
    19cc:	ef 92       	push	r14
    19ce:	ff 92       	push	r15
    19d0:	0f 93       	push	r16
    19d2:	1f 93       	push	r17
    19d4:	cf 93       	push	r28
    19d6:	df 93       	push	r29
	uint8_t MSBX, MSBY, MSBZ, LSBX, LSBY, LSBZ;

	twi(TWI_START);
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR = HMC5883L_ADDR | I2C_WRITE;
    19de:	8c e3       	ldi	r24, 0x3C	; 60
    19e0:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
    19e2:	83 e0       	ldi	r24, 0x03	; 3
    19e4:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR = 0x03;
    19e8:	83 e0       	ldi	r24, 0x03	; 3
    19ea:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
    19ec:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	twi(TWI_RESTART);
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR = HMC5883L_ADDR | I2C_READ;
    19f6:	8d e3       	ldi	r24, 0x3D	; 61
    19f8:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
    19fa:	83 e0       	ldi	r24, 0x03	; 3
    19fc:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	twi(TWI_RECEIVE_ACK);	
    1a00:	84 e0       	ldi	r24, 0x04	; 4
    1a02:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	MSBY = TWDR;
    1a06:	03 b1       	in	r16, 0x03	; 3
	twi(TWI_RECEIVE_ACK);
    1a08:	84 e0       	ldi	r24, 0x04	; 4
    1a0a:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	LSBY = TWDR;
    1a0e:	13 b1       	in	r17, 0x03	; 3
	twi(TWI_RECEIVE_ACK);
    1a10:	84 e0       	ldi	r24, 0x04	; 4
    1a12:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	MSBZ = TWDR;
    1a16:	d3 b1       	in	r29, 0x03	; 3
	twi(TWI_RECEIVE_ACK);	
    1a18:	84 e0       	ldi	r24, 0x04	; 4
    1a1a:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	LSBZ = TWDR;
    1a1e:	c3 b1       	in	r28, 0x03	; 3
	twi(TWI_RECEIVE_ACK);
    1a20:	84 e0       	ldi	r24, 0x04	; 4
    1a22:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	MSBX =TWDR;
    1a26:	e3 b0       	in	r14, 0x03	; 3
	twi(TWI_RECEIVE_NACK);
    1a28:	85 e0       	ldi	r24, 0x05	; 5
    1a2a:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	LSBX = TWDR;
    1a2e:	f3 b0       	in	r15, 0x03	; 3
	twi(TWI_STOP);
    1a30:	82 e0       	ldi	r24, 0x02	; 2
    1a32:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	
	B_x.value = (float)(MSBX << 8 | LSBX) / 1370.0 + coeffs[MAG_OffsetX].value;
    1a36:	7e 2d       	mov	r23, r14
    1a38:	60 e0       	ldi	r22, 0x00	; 0
    1a3a:	6f 29       	or	r22, r15
    1a3c:	88 27       	eor	r24, r24
    1a3e:	77 fd       	sbrc	r23, 7
    1a40:	80 95       	com	r24
    1a42:	98 2f       	mov	r25, r24
    1a44:	0e 94 90 2c 	call	0x5920	; 0x5920 <__floatsisf>
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	30 e4       	ldi	r19, 0x40	; 64
    1a4c:	4b ea       	ldi	r20, 0xAB	; 171
    1a4e:	54 e4       	ldi	r21, 0x44	; 68
    1a50:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <__divsf3>
    1a54:	20 91 8f 05 	lds	r18, 0x058F
    1a58:	30 91 90 05 	lds	r19, 0x0590
    1a5c:	40 91 91 05 	lds	r20, 0x0591
    1a60:	50 91 92 05 	lds	r21, 0x0592
    1a64:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    1a68:	60 93 1f 06 	sts	0x061F, r22
    1a6c:	70 93 20 06 	sts	0x0620, r23
    1a70:	80 93 21 06 	sts	0x0621, r24
    1a74:	90 93 22 06 	sts	0x0622, r25
	B_y.value = (float)(MSBY << 8 | LSBY) / 1370.0 + coeffs[MAG_OffsetY].value;
    1a78:	70 2f       	mov	r23, r16
    1a7a:	60 e0       	ldi	r22, 0x00	; 0
    1a7c:	61 2b       	or	r22, r17
    1a7e:	88 27       	eor	r24, r24
    1a80:	77 fd       	sbrc	r23, 7
    1a82:	80 95       	com	r24
    1a84:	98 2f       	mov	r25, r24
    1a86:	0e 94 90 2c 	call	0x5920	; 0x5920 <__floatsisf>
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	30 e4       	ldi	r19, 0x40	; 64
    1a8e:	4b ea       	ldi	r20, 0xAB	; 171
    1a90:	54 e4       	ldi	r21, 0x44	; 68
    1a92:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <__divsf3>
    1a96:	20 91 93 05 	lds	r18, 0x0593
    1a9a:	30 91 94 05 	lds	r19, 0x0594
    1a9e:	40 91 95 05 	lds	r20, 0x0595
    1aa2:	50 91 96 05 	lds	r21, 0x0596
    1aa6:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    1aaa:	60 93 23 06 	sts	0x0623, r22
    1aae:	70 93 24 06 	sts	0x0624, r23
    1ab2:	80 93 25 06 	sts	0x0625, r24
    1ab6:	90 93 26 06 	sts	0x0626, r25
	B_z.value = (float)(MSBZ << 8 | LSBZ) / 1370.0	+ coeffs[MAG_OffsetZ].value;
    1aba:	7d 2f       	mov	r23, r29
    1abc:	60 e0       	ldi	r22, 0x00	; 0
    1abe:	6c 2b       	or	r22, r28
    1ac0:	88 27       	eor	r24, r24
    1ac2:	77 fd       	sbrc	r23, 7
    1ac4:	80 95       	com	r24
    1ac6:	98 2f       	mov	r25, r24
    1ac8:	0e 94 90 2c 	call	0x5920	; 0x5920 <__floatsisf>
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	30 e4       	ldi	r19, 0x40	; 64
    1ad0:	4b ea       	ldi	r20, 0xAB	; 171
    1ad2:	54 e4       	ldi	r21, 0x44	; 68
    1ad4:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <__divsf3>
    1ad8:	20 91 97 05 	lds	r18, 0x0597
    1adc:	30 91 98 05 	lds	r19, 0x0598
    1ae0:	40 91 99 05 	lds	r20, 0x0599
    1ae4:	50 91 9a 05 	lds	r21, 0x059A
    1ae8:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    1aec:	60 93 27 06 	sts	0x0627, r22
    1af0:	70 93 28 06 	sts	0x0628, r23
    1af4:	80 93 29 06 	sts	0x0629, r24
    1af8:	90 93 2a 06 	sts	0x062A, r25
	
	return 0;
}
    1afc:	80 e0       	ldi	r24, 0x00	; 0
    1afe:	df 91       	pop	r29
    1b00:	cf 91       	pop	r28
    1b02:	1f 91       	pop	r17
    1b04:	0f 91       	pop	r16
    1b06:	ff 90       	pop	r15
    1b08:	ef 90       	pop	r14
    1b0a:	08 95       	ret

00001b0c <_Z13Correction360f>:

float Correction360(float arg)
{
    1b0c:	0f 93       	push	r16
    1b0e:	1f 93       	push	r17
    1b10:	cf 93       	push	r28
    1b12:	df 93       	push	r29
    1b14:	06 2f       	mov	r16, r22
    1b16:	17 2f       	mov	r17, r23
    1b18:	d8 2f       	mov	r29, r24
    1b1a:	c9 2f       	mov	r28, r25
	while(arg >= 360)
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	44 eb       	ldi	r20, 0xB4	; 180
    1b22:	53 e4       	ldi	r21, 0x43	; 67
    1b24:	0e 94 9e 2d 	call	0x5b3c	; 0x5b3c <__gesf2>
    1b28:	88 23       	and	r24, r24
    1b2a:	b4 f0       	brlt	.+44     	; 0x1b58 <_Z13Correction360f+0x4c>
	{
		arg -= 360;
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	44 eb       	ldi	r20, 0xB4	; 180
    1b32:	53 e4       	ldi	r21, 0x43	; 67
    1b34:	60 2f       	mov	r22, r16
    1b36:	71 2f       	mov	r23, r17
    1b38:	8d 2f       	mov	r24, r29
    1b3a:	9c 2f       	mov	r25, r28
    1b3c:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__subsf3>
    1b40:	06 2f       	mov	r16, r22
    1b42:	17 2f       	mov	r17, r23
    1b44:	d8 2f       	mov	r29, r24
    1b46:	c9 2f       	mov	r28, r25
	return 0;
}

float Correction360(float arg)
{
	while(arg >= 360)
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	44 eb       	ldi	r20, 0xB4	; 180
    1b4e:	53 e4       	ldi	r21, 0x43	; 67
    1b50:	0e 94 9e 2d 	call	0x5b3c	; 0x5b3c <__gesf2>
    1b54:	88 23       	and	r24, r24
    1b56:	54 f7       	brge	.-44     	; 0x1b2c <_Z13Correction360f+0x20>
	{
		arg -= 360;
	}
	
	while(arg < 0)
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	a9 01       	movw	r20, r18
    1b5e:	60 2f       	mov	r22, r16
    1b60:	71 2f       	mov	r23, r17
    1b62:	8d 2f       	mov	r24, r29
    1b64:	9c 2f       	mov	r25, r28
    1b66:	0e 94 f3 2b 	call	0x57e6	; 0x57e6 <__cmpsf2>
    1b6a:	88 23       	and	r24, r24
    1b6c:	ac f4       	brge	.+42     	; 0x1b98 <_Z13Correction360f+0x8c>
	{
		arg += 360;
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	44 eb       	ldi	r20, 0xB4	; 180
    1b74:	53 e4       	ldi	r21, 0x43	; 67
    1b76:	60 2f       	mov	r22, r16
    1b78:	71 2f       	mov	r23, r17
    1b7a:	8d 2f       	mov	r24, r29
    1b7c:	9c 2f       	mov	r25, r28
    1b7e:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    1b82:	06 2f       	mov	r16, r22
    1b84:	17 2f       	mov	r17, r23
    1b86:	d8 2f       	mov	r29, r24
    1b88:	c9 2f       	mov	r28, r25
	while(arg >= 360)
	{
		arg -= 360;
	}
	
	while(arg < 0)
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	a9 01       	movw	r20, r18
    1b90:	0e 94 f3 2b 	call	0x57e6	; 0x57e6 <__cmpsf2>
    1b94:	88 23       	and	r24, r24
    1b96:	5c f3       	brlt	.-42     	; 0x1b6e <_Z13Correction360f+0x62>
	{
		arg += 360;
	}
	
	return arg;
}
    1b98:	60 2f       	mov	r22, r16
    1b9a:	71 2f       	mov	r23, r17
    1b9c:	8d 2f       	mov	r24, r29
    1b9e:	9c 2f       	mov	r25, r28
    1ba0:	df 91       	pop	r29
    1ba2:	cf 91       	pop	r28
    1ba4:	1f 91       	pop	r17
    1ba6:	0f 91       	pop	r16
    1ba8:	08 95       	ret

00001baa <_Z11Course_Calcv>:

uint8_t Course_Calc()
{
    1baa:	4f 92       	push	r4
    1bac:	5f 92       	push	r5
    1bae:	6f 92       	push	r6
    1bb0:	7f 92       	push	r7
    1bb2:	8f 92       	push	r8
    1bb4:	9f 92       	push	r9
    1bb6:	af 92       	push	r10
    1bb8:	bf 92       	push	r11
    1bba:	cf 92       	push	r12
    1bbc:	df 92       	push	r13
    1bbe:	ef 92       	push	r14
    1bc0:	ff 92       	push	r15
    1bc2:	cf 93       	push	r28
    1bc4:	df 93       	push	r29
    1bc6:	cd b7       	in	r28, 0x3d	; 61
    1bc8:	de b7       	in	r29, 0x3e	; 62
    1bca:	c0 56       	subi	r28, 0x60	; 96
    1bcc:	d1 09       	sbc	r29, r1
    1bce:	0f b6       	in	r0, 0x3f	; 63
    1bd0:	f8 94       	cli
    1bd2:	de bf       	out	0x3e, r29	; 62
    1bd4:	0f be       	out	0x3f, r0	; 63
    1bd6:	cd bf       	out	0x3d, r28	; 61
		float Y;
		float Z;	
	}vector;
	
	//Угол отклонения от вертикали в радианах
	Q = (1.0) * atan2(sqrt(k_x.value * k_x.value + k_y.value * k_y.value), (k_z.value));
    1bd8:	c0 90 e3 05 	lds	r12, 0x05E3
    1bdc:	d0 90 e4 05 	lds	r13, 0x05E4
    1be0:	e0 90 e5 05 	lds	r14, 0x05E5
    1be4:	f0 90 e6 05 	lds	r15, 0x05E6
    1be8:	80 90 e7 05 	lds	r8, 0x05E7
    1bec:	90 90 e8 05 	lds	r9, 0x05E8
    1bf0:	a0 90 e9 05 	lds	r10, 0x05E9
    1bf4:	b0 90 ea 05 	lds	r11, 0x05EA
    1bf8:	a7 01       	movw	r20, r14
    1bfa:	96 01       	movw	r18, r12
    1bfc:	c7 01       	movw	r24, r14
    1bfe:	b6 01       	movw	r22, r12
    1c00:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    1c04:	2b 01       	movw	r4, r22
    1c06:	3c 01       	movw	r6, r24
    1c08:	a5 01       	movw	r20, r10
    1c0a:	94 01       	movw	r18, r8
    1c0c:	c5 01       	movw	r24, r10
    1c0e:	b4 01       	movw	r22, r8
    1c10:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    1c14:	9b 01       	movw	r18, r22
    1c16:	ac 01       	movw	r20, r24
    1c18:	c3 01       	movw	r24, r6
    1c1a:	b2 01       	movw	r22, r4
    1c1c:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    1c20:	0e 94 16 2e 	call	0x5c2c	; 0x5c2c <sqrt>
    1c24:	20 91 eb 05 	lds	r18, 0x05EB
    1c28:	30 91 ec 05 	lds	r19, 0x05EC
    1c2c:	40 91 ed 05 	lds	r20, 0x05ED
    1c30:	50 91 ee 05 	lds	r21, 0x05EE
    1c34:	0e 94 a0 2b 	call	0x5740	; 0x5740 <atan2>
    1c38:	69 8f       	std	Y+25, r22	; 0x19
    1c3a:	7a 8f       	std	Y+26, r23	; 0x1a
    1c3c:	8b 8f       	std	Y+27, r24	; 0x1b
    1c3e:	9c 8f       	std	Y+28, r25	; 0x1c
	//int_Oz.value = Q * 180.0 / M_PI; //УБРАТЬ!!!!!!!!!!!!	
	//Нормаль к вектору (kx, ky, 0) - ось вращения
	volatile vector n;
	
	n.X = k_y.value;
    1c40:	89 82       	std	Y+1, r8	; 0x01
    1c42:	9a 82       	std	Y+2, r9	; 0x02
    1c44:	ab 82       	std	Y+3, r10	; 0x03
    1c46:	bc 82       	std	Y+4, r11	; 0x04
	n.Y = (-1.0) * k_x.value;
    1c48:	f7 fa       	bst	r15, 7
    1c4a:	f0 94       	com	r15
    1c4c:	f7 f8       	bld	r15, 7
    1c4e:	f0 94       	com	r15
    1c50:	cd 82       	std	Y+5, r12	; 0x05
    1c52:	de 82       	std	Y+6, r13	; 0x06
    1c54:	ef 82       	std	Y+7, r14	; 0x07
    1c56:	f8 86       	std	Y+8, r15	; 0x08
	n.Z = 0.0;	
    1c58:	19 86       	std	Y+9, r1	; 0x09
    1c5a:	1a 86       	std	Y+10, r1	; 0x0a
    1c5c:	1b 86       	std	Y+11, r1	; 0x0b
    1c5e:	1c 86       	std	Y+12, r1	; 0x0c
	//Нормализуем вектор нормали
	//float n_L = sqrt(n.X*n.X+n.Y*n.Y);
	//n.X /= n_L;
	//n.Y /= n_L;
	
	B_x_read = B_x.value;
    1c60:	80 91 1f 06 	lds	r24, 0x061F
    1c64:	90 91 20 06 	lds	r25, 0x0620
    1c68:	a0 91 21 06 	lds	r26, 0x0621
    1c6c:	b0 91 22 06 	lds	r27, 0x0622
    1c70:	8d 8b       	std	Y+21, r24	; 0x15
    1c72:	9e 8b       	std	Y+22, r25	; 0x16
    1c74:	af 8b       	std	Y+23, r26	; 0x17
    1c76:	b8 8f       	std	Y+24, r27	; 0x18
	B_y_read = B_y.value;
    1c78:	80 91 23 06 	lds	r24, 0x0623
    1c7c:	90 91 24 06 	lds	r25, 0x0624
    1c80:	a0 91 25 06 	lds	r26, 0x0625
    1c84:	b0 91 26 06 	lds	r27, 0x0626
    1c88:	89 8b       	std	Y+17, r24	; 0x11
    1c8a:	9a 8b       	std	Y+18, r25	; 0x12
    1c8c:	ab 8b       	std	Y+19, r26	; 0x13
    1c8e:	bc 8b       	std	Y+20, r27	; 0x14
	B_z_read = B_z.value;       
    1c90:	80 91 27 06 	lds	r24, 0x0627
    1c94:	90 91 28 06 	lds	r25, 0x0628
    1c98:	a0 91 29 06 	lds	r26, 0x0629
    1c9c:	b0 91 2a 06 	lds	r27, 0x062A
    1ca0:	8d 87       	std	Y+13, r24	; 0x0d
    1ca2:	9e 87       	std	Y+14, r25	; 0x0e
    1ca4:	af 87       	std	Y+15, r26	; 0x0f
    1ca6:	b8 8b       	std	Y+16, r27	; 0x10

	//Поворот вектора В вокруг оси n. Компенсация отклонения магнетометра от вертикали
	Bx = B_x_read * (cos(Q) + (1.0 - cos(Q)) * (n.X * n.X)) + B_y_read * ((1.0 - cos(Q)) * n.X * n.Y - (sin(Q)) * n.Z) + B_z_read * ((1.0 - cos(Q)) * n.X * n.Z + sin(Q) * n.Y);
    1ca8:	69 8d       	ldd	r22, Y+25	; 0x19
    1caa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cb0:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <cos>
    1cb4:	4b 01       	movw	r8, r22
    1cb6:	5c 01       	movw	r10, r24
    1cb8:	69 8d       	ldd	r22, Y+25	; 0x19
    1cba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cbc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cbe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cc0:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <cos>
    1cc4:	6b 01       	movw	r12, r22
    1cc6:	7c 01       	movw	r14, r24
    1cc8:	89 81       	ldd	r24, Y+1	; 0x01
    1cca:	9a 81       	ldd	r25, Y+2	; 0x02
    1ccc:	ab 81       	ldd	r26, Y+3	; 0x03
    1cce:	bc 81       	ldd	r27, Y+4	; 0x04
    1cd0:	89 a7       	std	Y+41, r24	; 0x29
    1cd2:	9a a7       	std	Y+42, r25	; 0x2a
    1cd4:	ab a7       	std	Y+43, r26	; 0x2b
    1cd6:	bc a7       	std	Y+44, r27	; 0x2c
    1cd8:	49 80       	ldd	r4, Y+1	; 0x01
    1cda:	5a 80       	ldd	r5, Y+2	; 0x02
    1cdc:	6b 80       	ldd	r6, Y+3	; 0x03
    1cde:	7c 80       	ldd	r7, Y+4	; 0x04
    1ce0:	8d 89       	ldd	r24, Y+21	; 0x15
    1ce2:	9e 89       	ldd	r25, Y+22	; 0x16
    1ce4:	af 89       	ldd	r26, Y+23	; 0x17
    1ce6:	b8 8d       	ldd	r27, Y+24	; 0x18
    1ce8:	8d a7       	std	Y+45, r24	; 0x2d
    1cea:	9e a7       	std	Y+46, r25	; 0x2e
    1cec:	af a7       	std	Y+47, r26	; 0x2f
    1cee:	b8 ab       	std	Y+48, r27	; 0x30
    1cf0:	69 8d       	ldd	r22, Y+25	; 0x19
    1cf2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cf4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cf6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cf8:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <cos>
    1cfc:	69 ab       	std	Y+49, r22	; 0x31
    1cfe:	7a ab       	std	Y+50, r23	; 0x32
    1d00:	8b ab       	std	Y+51, r24	; 0x33
    1d02:	9c ab       	std	Y+52, r25	; 0x34
    1d04:	89 81       	ldd	r24, Y+1	; 0x01
    1d06:	9a 81       	ldd	r25, Y+2	; 0x02
    1d08:	ab 81       	ldd	r26, Y+3	; 0x03
    1d0a:	bc 81       	ldd	r27, Y+4	; 0x04
    1d0c:	8d ab       	std	Y+53, r24	; 0x35
    1d0e:	9e ab       	std	Y+54, r25	; 0x36
    1d10:	af ab       	std	Y+55, r26	; 0x37
    1d12:	b8 af       	std	Y+56, r27	; 0x38
    1d14:	8d 81       	ldd	r24, Y+5	; 0x05
    1d16:	9e 81       	ldd	r25, Y+6	; 0x06
    1d18:	af 81       	ldd	r26, Y+7	; 0x07
    1d1a:	b8 85       	ldd	r27, Y+8	; 0x08
    1d1c:	89 af       	std	Y+57, r24	; 0x39
    1d1e:	9a af       	std	Y+58, r25	; 0x3a
    1d20:	ab af       	std	Y+59, r26	; 0x3b
    1d22:	bc af       	std	Y+60, r27	; 0x3c
    1d24:	69 8d       	ldd	r22, Y+25	; 0x19
    1d26:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d2c:	0e 94 0c 2e 	call	0x5c18	; 0x5c18 <sin>
    1d30:	21 96       	adiw	r28, 0x01	; 1
    1d32:	6c af       	std	Y+60, r22	; 0x3c
    1d34:	7d af       	std	Y+61, r23	; 0x3d
    1d36:	8e af       	std	Y+62, r24	; 0x3e
    1d38:	9f af       	std	Y+63, r25	; 0x3f
    1d3a:	21 97       	sbiw	r28, 0x01	; 1
    1d3c:	89 85       	ldd	r24, Y+9	; 0x09
    1d3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d40:	ab 85       	ldd	r26, Y+11	; 0x0b
    1d42:	bc 85       	ldd	r27, Y+12	; 0x0c
    1d44:	25 96       	adiw	r28, 0x05	; 5
    1d46:	8c af       	std	Y+60, r24	; 0x3c
    1d48:	9d af       	std	Y+61, r25	; 0x3d
    1d4a:	ae af       	std	Y+62, r26	; 0x3e
    1d4c:	bf af       	std	Y+63, r27	; 0x3f
    1d4e:	25 97       	sbiw	r28, 0x05	; 5
    1d50:	89 89       	ldd	r24, Y+17	; 0x11
    1d52:	9a 89       	ldd	r25, Y+18	; 0x12
    1d54:	ab 89       	ldd	r26, Y+19	; 0x13
    1d56:	bc 89       	ldd	r27, Y+20	; 0x14
    1d58:	29 96       	adiw	r28, 0x09	; 9
    1d5a:	8c af       	std	Y+60, r24	; 0x3c
    1d5c:	9d af       	std	Y+61, r25	; 0x3d
    1d5e:	ae af       	std	Y+62, r26	; 0x3e
    1d60:	bf af       	std	Y+63, r27	; 0x3f
    1d62:	29 97       	sbiw	r28, 0x09	; 9
    1d64:	69 8d       	ldd	r22, Y+25	; 0x19
    1d66:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d68:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d6c:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <cos>
    1d70:	2d 96       	adiw	r28, 0x0d	; 13
    1d72:	6c af       	std	Y+60, r22	; 0x3c
    1d74:	7d af       	std	Y+61, r23	; 0x3d
    1d76:	8e af       	std	Y+62, r24	; 0x3e
    1d78:	9f af       	std	Y+63, r25	; 0x3f
    1d7a:	2d 97       	sbiw	r28, 0x0d	; 13
    1d7c:	89 81       	ldd	r24, Y+1	; 0x01
    1d7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d80:	ab 81       	ldd	r26, Y+3	; 0x03
    1d82:	bc 81       	ldd	r27, Y+4	; 0x04
    1d84:	61 96       	adiw	r28, 0x11	; 17
    1d86:	8c af       	std	Y+60, r24	; 0x3c
    1d88:	9d af       	std	Y+61, r25	; 0x3d
    1d8a:	ae af       	std	Y+62, r26	; 0x3e
    1d8c:	bf af       	std	Y+63, r27	; 0x3f
    1d8e:	61 97       	sbiw	r28, 0x11	; 17
    1d90:	89 85       	ldd	r24, Y+9	; 0x09
    1d92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d94:	ab 85       	ldd	r26, Y+11	; 0x0b
    1d96:	bc 85       	ldd	r27, Y+12	; 0x0c
    1d98:	65 96       	adiw	r28, 0x15	; 21
    1d9a:	8c af       	std	Y+60, r24	; 0x3c
    1d9c:	9d af       	std	Y+61, r25	; 0x3d
    1d9e:	ae af       	std	Y+62, r26	; 0x3e
    1da0:	bf af       	std	Y+63, r27	; 0x3f
    1da2:	65 97       	sbiw	r28, 0x15	; 21
    1da4:	69 8d       	ldd	r22, Y+25	; 0x19
    1da6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1da8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1daa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dac:	0e 94 0c 2e 	call	0x5c18	; 0x5c18 <sin>
    1db0:	69 96       	adiw	r28, 0x19	; 25
    1db2:	6c af       	std	Y+60, r22	; 0x3c
    1db4:	7d af       	std	Y+61, r23	; 0x3d
    1db6:	8e af       	std	Y+62, r24	; 0x3e
    1db8:	9f af       	std	Y+63, r25	; 0x3f
    1dba:	69 97       	sbiw	r28, 0x19	; 25
    1dbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc0:	af 81       	ldd	r26, Y+7	; 0x07
    1dc2:	b8 85       	ldd	r27, Y+8	; 0x08
    1dc4:	6d 96       	adiw	r28, 0x1d	; 29
    1dc6:	8c af       	std	Y+60, r24	; 0x3c
    1dc8:	9d af       	std	Y+61, r25	; 0x3d
    1dca:	ae af       	std	Y+62, r26	; 0x3e
    1dcc:	bf af       	std	Y+63, r27	; 0x3f
    1dce:	6d 97       	sbiw	r28, 0x1d	; 29
    1dd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dd4:	af 85       	ldd	r26, Y+15	; 0x0f
    1dd6:	b8 89       	ldd	r27, Y+16	; 0x10
    1dd8:	a1 96       	adiw	r28, 0x21	; 33
    1dda:	8c af       	std	Y+60, r24	; 0x3c
    1ddc:	9d af       	std	Y+61, r25	; 0x3d
    1dde:	ae af       	std	Y+62, r26	; 0x3e
    1de0:	bf af       	std	Y+63, r27	; 0x3f
    1de2:	a1 97       	sbiw	r28, 0x21	; 33
    1de4:	a7 01       	movw	r20, r14
    1de6:	96 01       	movw	r18, r12
    1de8:	60 e0       	ldi	r22, 0x00	; 0
    1dea:	70 e0       	ldi	r23, 0x00	; 0
    1dec:	80 e8       	ldi	r24, 0x80	; 128
    1dee:	9f e3       	ldi	r25, 0x3F	; 63
    1df0:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__subsf3>
    1df4:	6b 01       	movw	r12, r22
    1df6:	7c 01       	movw	r14, r24
    1df8:	a3 01       	movw	r20, r6
    1dfa:	92 01       	movw	r18, r4
    1dfc:	69 a5       	ldd	r22, Y+41	; 0x29
    1dfe:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e00:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e02:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e04:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    1e08:	9b 01       	movw	r18, r22
    1e0a:	ac 01       	movw	r20, r24
    1e0c:	c7 01       	movw	r24, r14
    1e0e:	b6 01       	movw	r22, r12
    1e10:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    1e14:	9b 01       	movw	r18, r22
    1e16:	ac 01       	movw	r20, r24
    1e18:	c5 01       	movw	r24, r10
    1e1a:	b4 01       	movw	r22, r8
    1e1c:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    1e20:	2d a5       	ldd	r18, Y+45	; 0x2d
    1e22:	3e a5       	ldd	r19, Y+46	; 0x2e
    1e24:	4f a5       	ldd	r20, Y+47	; 0x2f
    1e26:	58 a9       	ldd	r21, Y+48	; 0x30
    1e28:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    1e2c:	6b 01       	movw	r12, r22
    1e2e:	7c 01       	movw	r14, r24
    1e30:	29 a9       	ldd	r18, Y+49	; 0x31
    1e32:	3a a9       	ldd	r19, Y+50	; 0x32
    1e34:	4b a9       	ldd	r20, Y+51	; 0x33
    1e36:	5c a9       	ldd	r21, Y+52	; 0x34
    1e38:	60 e0       	ldi	r22, 0x00	; 0
    1e3a:	70 e0       	ldi	r23, 0x00	; 0
    1e3c:	80 e8       	ldi	r24, 0x80	; 128
    1e3e:	9f e3       	ldi	r25, 0x3F	; 63
    1e40:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__subsf3>
    1e44:	2d a9       	ldd	r18, Y+53	; 0x35
    1e46:	3e a9       	ldd	r19, Y+54	; 0x36
    1e48:	4f a9       	ldd	r20, Y+55	; 0x37
    1e4a:	58 ad       	ldd	r21, Y+56	; 0x38
    1e4c:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    1e50:	29 ad       	ldd	r18, Y+57	; 0x39
    1e52:	3a ad       	ldd	r19, Y+58	; 0x3a
    1e54:	4b ad       	ldd	r20, Y+59	; 0x3b
    1e56:	5c ad       	ldd	r21, Y+60	; 0x3c
    1e58:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    1e5c:	4b 01       	movw	r8, r22
    1e5e:	5c 01       	movw	r10, r24
    1e60:	25 96       	adiw	r28, 0x05	; 5
    1e62:	2c ad       	ldd	r18, Y+60	; 0x3c
    1e64:	3d ad       	ldd	r19, Y+61	; 0x3d
    1e66:	4e ad       	ldd	r20, Y+62	; 0x3e
    1e68:	5f ad       	ldd	r21, Y+63	; 0x3f
    1e6a:	25 97       	sbiw	r28, 0x05	; 5
    1e6c:	21 96       	adiw	r28, 0x01	; 1
    1e6e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1e70:	7d ad       	ldd	r23, Y+61	; 0x3d
    1e72:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e74:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e76:	21 97       	sbiw	r28, 0x01	; 1
    1e78:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    1e7c:	9b 01       	movw	r18, r22
    1e7e:	ac 01       	movw	r20, r24
    1e80:	c5 01       	movw	r24, r10
    1e82:	b4 01       	movw	r22, r8
    1e84:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__subsf3>
    1e88:	29 96       	adiw	r28, 0x09	; 9
    1e8a:	2c ad       	ldd	r18, Y+60	; 0x3c
    1e8c:	3d ad       	ldd	r19, Y+61	; 0x3d
    1e8e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1e90:	5f ad       	ldd	r21, Y+63	; 0x3f
    1e92:	29 97       	sbiw	r28, 0x09	; 9
    1e94:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    1e98:	9b 01       	movw	r18, r22
    1e9a:	ac 01       	movw	r20, r24
    1e9c:	c7 01       	movw	r24, r14
    1e9e:	b6 01       	movw	r22, r12
    1ea0:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    1ea4:	6b 01       	movw	r12, r22
    1ea6:	7c 01       	movw	r14, r24
    1ea8:	2d 96       	adiw	r28, 0x0d	; 13
    1eaa:	2c ad       	ldd	r18, Y+60	; 0x3c
    1eac:	3d ad       	ldd	r19, Y+61	; 0x3d
    1eae:	4e ad       	ldd	r20, Y+62	; 0x3e
    1eb0:	5f ad       	ldd	r21, Y+63	; 0x3f
    1eb2:	2d 97       	sbiw	r28, 0x0d	; 13
    1eb4:	60 e0       	ldi	r22, 0x00	; 0
    1eb6:	70 e0       	ldi	r23, 0x00	; 0
    1eb8:	80 e8       	ldi	r24, 0x80	; 128
    1eba:	9f e3       	ldi	r25, 0x3F	; 63
    1ebc:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__subsf3>
    1ec0:	61 96       	adiw	r28, 0x11	; 17
    1ec2:	2c ad       	ldd	r18, Y+60	; 0x3c
    1ec4:	3d ad       	ldd	r19, Y+61	; 0x3d
    1ec6:	4e ad       	ldd	r20, Y+62	; 0x3e
    1ec8:	5f ad       	ldd	r21, Y+63	; 0x3f
    1eca:	61 97       	sbiw	r28, 0x11	; 17
    1ecc:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    1ed0:	65 96       	adiw	r28, 0x15	; 21
    1ed2:	2c ad       	ldd	r18, Y+60	; 0x3c
    1ed4:	3d ad       	ldd	r19, Y+61	; 0x3d
    1ed6:	4e ad       	ldd	r20, Y+62	; 0x3e
    1ed8:	5f ad       	ldd	r21, Y+63	; 0x3f
    1eda:	65 97       	sbiw	r28, 0x15	; 21
    1edc:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    1ee0:	4b 01       	movw	r8, r22
    1ee2:	5c 01       	movw	r10, r24
    1ee4:	6d 96       	adiw	r28, 0x1d	; 29
    1ee6:	2c ad       	ldd	r18, Y+60	; 0x3c
    1ee8:	3d ad       	ldd	r19, Y+61	; 0x3d
    1eea:	4e ad       	ldd	r20, Y+62	; 0x3e
    1eec:	5f ad       	ldd	r21, Y+63	; 0x3f
    1eee:	6d 97       	sbiw	r28, 0x1d	; 29
    1ef0:	69 96       	adiw	r28, 0x19	; 25
    1ef2:	6c ad       	ldd	r22, Y+60	; 0x3c
    1ef4:	7d ad       	ldd	r23, Y+61	; 0x3d
    1ef6:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ef8:	9f ad       	ldd	r25, Y+63	; 0x3f
    1efa:	69 97       	sbiw	r28, 0x19	; 25
    1efc:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    1f00:	9b 01       	movw	r18, r22
    1f02:	ac 01       	movw	r20, r24
    1f04:	c5 01       	movw	r24, r10
    1f06:	b4 01       	movw	r22, r8
    1f08:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    1f0c:	a1 96       	adiw	r28, 0x21	; 33
    1f0e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1f10:	3d ad       	ldd	r19, Y+61	; 0x3d
    1f12:	4e ad       	ldd	r20, Y+62	; 0x3e
    1f14:	5f ad       	ldd	r21, Y+63	; 0x3f
    1f16:	a1 97       	sbiw	r28, 0x21	; 33
    1f18:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    1f1c:	9b 01       	movw	r18, r22
    1f1e:	ac 01       	movw	r20, r24
    1f20:	c7 01       	movw	r24, r14
    1f22:	b6 01       	movw	r22, r12
    1f24:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    1f28:	46 2f       	mov	r20, r22
    1f2a:	57 2f       	mov	r21, r23
    1f2c:	68 2f       	mov	r22, r24
    1f2e:	79 2f       	mov	r23, r25
    1f30:	4d a3       	std	Y+37, r20	; 0x25
    1f32:	5e a3       	std	Y+38, r21	; 0x26
    1f34:	6f a3       	std	Y+39, r22	; 0x27
    1f36:	78 a7       	std	Y+40, r23	; 0x28
	By = B_x_read * ((1.0 - cos(Q)) * n.Y * n.X + sin(Q) * n.Z) + B_y_read * (cos(Q) + (1 - cos(Q)) * n.Y * n.Y) + B_z_read * ((1 - cos(Q)) * n.Y * n.Z - sin(Q) * n.X);
    1f38:	69 8d       	ldd	r22, Y+25	; 0x19
    1f3a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f40:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <cos>
    1f44:	6b 01       	movw	r12, r22
    1f46:	7c 01       	movw	r14, r24
    1f48:	4d 80       	ldd	r4, Y+5	; 0x05
    1f4a:	5e 80       	ldd	r5, Y+6	; 0x06
    1f4c:	6f 80       	ldd	r6, Y+7	; 0x07
    1f4e:	78 84       	ldd	r7, Y+8	; 0x08
    1f50:	89 81       	ldd	r24, Y+1	; 0x01
    1f52:	9a 81       	ldd	r25, Y+2	; 0x02
    1f54:	ab 81       	ldd	r26, Y+3	; 0x03
    1f56:	bc 81       	ldd	r27, Y+4	; 0x04
    1f58:	89 a7       	std	Y+41, r24	; 0x29
    1f5a:	9a a7       	std	Y+42, r25	; 0x2a
    1f5c:	ab a7       	std	Y+43, r26	; 0x2b
    1f5e:	bc a7       	std	Y+44, r27	; 0x2c
    1f60:	69 8d       	ldd	r22, Y+25	; 0x19
    1f62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f68:	0e 94 0c 2e 	call	0x5c18	; 0x5c18 <sin>
    1f6c:	4b 01       	movw	r8, r22
    1f6e:	5c 01       	movw	r10, r24
    1f70:	89 85       	ldd	r24, Y+9	; 0x09
    1f72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f74:	ab 85       	ldd	r26, Y+11	; 0x0b
    1f76:	bc 85       	ldd	r27, Y+12	; 0x0c
    1f78:	8d a7       	std	Y+45, r24	; 0x2d
    1f7a:	9e a7       	std	Y+46, r25	; 0x2e
    1f7c:	af a7       	std	Y+47, r26	; 0x2f
    1f7e:	b8 ab       	std	Y+48, r27	; 0x30
    1f80:	8d 89       	ldd	r24, Y+21	; 0x15
    1f82:	9e 89       	ldd	r25, Y+22	; 0x16
    1f84:	af 89       	ldd	r26, Y+23	; 0x17
    1f86:	b8 8d       	ldd	r27, Y+24	; 0x18
    1f88:	89 ab       	std	Y+49, r24	; 0x31
    1f8a:	9a ab       	std	Y+50, r25	; 0x32
    1f8c:	ab ab       	std	Y+51, r26	; 0x33
    1f8e:	bc ab       	std	Y+52, r27	; 0x34
    1f90:	69 8d       	ldd	r22, Y+25	; 0x19
    1f92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f98:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <cos>
    1f9c:	6d ab       	std	Y+53, r22	; 0x35
    1f9e:	7e ab       	std	Y+54, r23	; 0x36
    1fa0:	8f ab       	std	Y+55, r24	; 0x37
    1fa2:	98 af       	std	Y+56, r25	; 0x38
    1fa4:	69 8d       	ldd	r22, Y+25	; 0x19
    1fa6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fa8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1faa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fac:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <cos>
    1fb0:	69 af       	std	Y+57, r22	; 0x39
    1fb2:	7a af       	std	Y+58, r23	; 0x3a
    1fb4:	8b af       	std	Y+59, r24	; 0x3b
    1fb6:	9c af       	std	Y+60, r25	; 0x3c
    1fb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fba:	9e 81       	ldd	r25, Y+6	; 0x06
    1fbc:	af 81       	ldd	r26, Y+7	; 0x07
    1fbe:	b8 85       	ldd	r27, Y+8	; 0x08
    1fc0:	21 96       	adiw	r28, 0x01	; 1
    1fc2:	8c af       	std	Y+60, r24	; 0x3c
    1fc4:	9d af       	std	Y+61, r25	; 0x3d
    1fc6:	ae af       	std	Y+62, r26	; 0x3e
    1fc8:	bf af       	std	Y+63, r27	; 0x3f
    1fca:	21 97       	sbiw	r28, 0x01	; 1
    1fcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fce:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd0:	af 81       	ldd	r26, Y+7	; 0x07
    1fd2:	b8 85       	ldd	r27, Y+8	; 0x08
    1fd4:	25 96       	adiw	r28, 0x05	; 5
    1fd6:	8c af       	std	Y+60, r24	; 0x3c
    1fd8:	9d af       	std	Y+61, r25	; 0x3d
    1fda:	ae af       	std	Y+62, r26	; 0x3e
    1fdc:	bf af       	std	Y+63, r27	; 0x3f
    1fde:	25 97       	sbiw	r28, 0x05	; 5
    1fe0:	89 89       	ldd	r24, Y+17	; 0x11
    1fe2:	9a 89       	ldd	r25, Y+18	; 0x12
    1fe4:	ab 89       	ldd	r26, Y+19	; 0x13
    1fe6:	bc 89       	ldd	r27, Y+20	; 0x14
    1fe8:	29 96       	adiw	r28, 0x09	; 9
    1fea:	8c af       	std	Y+60, r24	; 0x3c
    1fec:	9d af       	std	Y+61, r25	; 0x3d
    1fee:	ae af       	std	Y+62, r26	; 0x3e
    1ff0:	bf af       	std	Y+63, r27	; 0x3f
    1ff2:	29 97       	sbiw	r28, 0x09	; 9
    1ff4:	69 8d       	ldd	r22, Y+25	; 0x19
    1ff6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ff8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ffa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ffc:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <cos>
    2000:	2d 96       	adiw	r28, 0x0d	; 13
    2002:	6c af       	std	Y+60, r22	; 0x3c
    2004:	7d af       	std	Y+61, r23	; 0x3d
    2006:	8e af       	std	Y+62, r24	; 0x3e
    2008:	9f af       	std	Y+63, r25	; 0x3f
    200a:	2d 97       	sbiw	r28, 0x0d	; 13
    200c:	8d 81       	ldd	r24, Y+5	; 0x05
    200e:	9e 81       	ldd	r25, Y+6	; 0x06
    2010:	af 81       	ldd	r26, Y+7	; 0x07
    2012:	b8 85       	ldd	r27, Y+8	; 0x08
    2014:	61 96       	adiw	r28, 0x11	; 17
    2016:	8c af       	std	Y+60, r24	; 0x3c
    2018:	9d af       	std	Y+61, r25	; 0x3d
    201a:	ae af       	std	Y+62, r26	; 0x3e
    201c:	bf af       	std	Y+63, r27	; 0x3f
    201e:	61 97       	sbiw	r28, 0x11	; 17
    2020:	89 85       	ldd	r24, Y+9	; 0x09
    2022:	9a 85       	ldd	r25, Y+10	; 0x0a
    2024:	ab 85       	ldd	r26, Y+11	; 0x0b
    2026:	bc 85       	ldd	r27, Y+12	; 0x0c
    2028:	65 96       	adiw	r28, 0x15	; 21
    202a:	8c af       	std	Y+60, r24	; 0x3c
    202c:	9d af       	std	Y+61, r25	; 0x3d
    202e:	ae af       	std	Y+62, r26	; 0x3e
    2030:	bf af       	std	Y+63, r27	; 0x3f
    2032:	65 97       	sbiw	r28, 0x15	; 21
    2034:	69 8d       	ldd	r22, Y+25	; 0x19
    2036:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2038:	8b 8d       	ldd	r24, Y+27	; 0x1b
    203a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    203c:	0e 94 0c 2e 	call	0x5c18	; 0x5c18 <sin>
    2040:	69 96       	adiw	r28, 0x19	; 25
    2042:	6c af       	std	Y+60, r22	; 0x3c
    2044:	7d af       	std	Y+61, r23	; 0x3d
    2046:	8e af       	std	Y+62, r24	; 0x3e
    2048:	9f af       	std	Y+63, r25	; 0x3f
    204a:	69 97       	sbiw	r28, 0x19	; 25
    204c:	89 81       	ldd	r24, Y+1	; 0x01
    204e:	9a 81       	ldd	r25, Y+2	; 0x02
    2050:	ab 81       	ldd	r26, Y+3	; 0x03
    2052:	bc 81       	ldd	r27, Y+4	; 0x04
    2054:	6d 96       	adiw	r28, 0x1d	; 29
    2056:	8c af       	std	Y+60, r24	; 0x3c
    2058:	9d af       	std	Y+61, r25	; 0x3d
    205a:	ae af       	std	Y+62, r26	; 0x3e
    205c:	bf af       	std	Y+63, r27	; 0x3f
    205e:	6d 97       	sbiw	r28, 0x1d	; 29
    2060:	8d 85       	ldd	r24, Y+13	; 0x0d
    2062:	9e 85       	ldd	r25, Y+14	; 0x0e
    2064:	af 85       	ldd	r26, Y+15	; 0x0f
    2066:	b8 89       	ldd	r27, Y+16	; 0x10
    2068:	a1 96       	adiw	r28, 0x21	; 33
    206a:	8c af       	std	Y+60, r24	; 0x3c
    206c:	9d af       	std	Y+61, r25	; 0x3d
    206e:	ae af       	std	Y+62, r26	; 0x3e
    2070:	bf af       	std	Y+63, r27	; 0x3f
    2072:	a1 97       	sbiw	r28, 0x21	; 33
    2074:	a7 01       	movw	r20, r14
    2076:	96 01       	movw	r18, r12
    2078:	60 e0       	ldi	r22, 0x00	; 0
    207a:	70 e0       	ldi	r23, 0x00	; 0
    207c:	80 e8       	ldi	r24, 0x80	; 128
    207e:	9f e3       	ldi	r25, 0x3F	; 63
    2080:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__subsf3>
    2084:	a3 01       	movw	r20, r6
    2086:	92 01       	movw	r18, r4
    2088:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    208c:	29 a5       	ldd	r18, Y+41	; 0x29
    208e:	3a a5       	ldd	r19, Y+42	; 0x2a
    2090:	4b a5       	ldd	r20, Y+43	; 0x2b
    2092:	5c a5       	ldd	r21, Y+44	; 0x2c
    2094:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    2098:	6b 01       	movw	r12, r22
    209a:	7c 01       	movw	r14, r24
    209c:	2d a5       	ldd	r18, Y+45	; 0x2d
    209e:	3e a5       	ldd	r19, Y+46	; 0x2e
    20a0:	4f a5       	ldd	r20, Y+47	; 0x2f
    20a2:	58 a9       	ldd	r21, Y+48	; 0x30
    20a4:	c5 01       	movw	r24, r10
    20a6:	b4 01       	movw	r22, r8
    20a8:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    20ac:	9b 01       	movw	r18, r22
    20ae:	ac 01       	movw	r20, r24
    20b0:	c7 01       	movw	r24, r14
    20b2:	b6 01       	movw	r22, r12
    20b4:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    20b8:	29 a9       	ldd	r18, Y+49	; 0x31
    20ba:	3a a9       	ldd	r19, Y+50	; 0x32
    20bc:	4b a9       	ldd	r20, Y+51	; 0x33
    20be:	5c a9       	ldd	r21, Y+52	; 0x34
    20c0:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    20c4:	6b 01       	movw	r12, r22
    20c6:	7c 01       	movw	r14, r24
    20c8:	29 ad       	ldd	r18, Y+57	; 0x39
    20ca:	3a ad       	ldd	r19, Y+58	; 0x3a
    20cc:	4b ad       	ldd	r20, Y+59	; 0x3b
    20ce:	5c ad       	ldd	r21, Y+60	; 0x3c
    20d0:	60 e0       	ldi	r22, 0x00	; 0
    20d2:	70 e0       	ldi	r23, 0x00	; 0
    20d4:	80 e8       	ldi	r24, 0x80	; 128
    20d6:	9f e3       	ldi	r25, 0x3F	; 63
    20d8:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__subsf3>
    20dc:	21 96       	adiw	r28, 0x01	; 1
    20de:	2c ad       	ldd	r18, Y+60	; 0x3c
    20e0:	3d ad       	ldd	r19, Y+61	; 0x3d
    20e2:	4e ad       	ldd	r20, Y+62	; 0x3e
    20e4:	5f ad       	ldd	r21, Y+63	; 0x3f
    20e6:	21 97       	sbiw	r28, 0x01	; 1
    20e8:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    20ec:	25 96       	adiw	r28, 0x05	; 5
    20ee:	2c ad       	ldd	r18, Y+60	; 0x3c
    20f0:	3d ad       	ldd	r19, Y+61	; 0x3d
    20f2:	4e ad       	ldd	r20, Y+62	; 0x3e
    20f4:	5f ad       	ldd	r21, Y+63	; 0x3f
    20f6:	25 97       	sbiw	r28, 0x05	; 5
    20f8:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    20fc:	9b 01       	movw	r18, r22
    20fe:	ac 01       	movw	r20, r24
    2100:	6d a9       	ldd	r22, Y+53	; 0x35
    2102:	7e a9       	ldd	r23, Y+54	; 0x36
    2104:	8f a9       	ldd	r24, Y+55	; 0x37
    2106:	98 ad       	ldd	r25, Y+56	; 0x38
    2108:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    210c:	29 96       	adiw	r28, 0x09	; 9
    210e:	2c ad       	ldd	r18, Y+60	; 0x3c
    2110:	3d ad       	ldd	r19, Y+61	; 0x3d
    2112:	4e ad       	ldd	r20, Y+62	; 0x3e
    2114:	5f ad       	ldd	r21, Y+63	; 0x3f
    2116:	29 97       	sbiw	r28, 0x09	; 9
    2118:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    211c:	9b 01       	movw	r18, r22
    211e:	ac 01       	movw	r20, r24
    2120:	c7 01       	movw	r24, r14
    2122:	b6 01       	movw	r22, r12
    2124:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    2128:	6b 01       	movw	r12, r22
    212a:	7c 01       	movw	r14, r24
    212c:	2d 96       	adiw	r28, 0x0d	; 13
    212e:	2c ad       	ldd	r18, Y+60	; 0x3c
    2130:	3d ad       	ldd	r19, Y+61	; 0x3d
    2132:	4e ad       	ldd	r20, Y+62	; 0x3e
    2134:	5f ad       	ldd	r21, Y+63	; 0x3f
    2136:	2d 97       	sbiw	r28, 0x0d	; 13
    2138:	60 e0       	ldi	r22, 0x00	; 0
    213a:	70 e0       	ldi	r23, 0x00	; 0
    213c:	80 e8       	ldi	r24, 0x80	; 128
    213e:	9f e3       	ldi	r25, 0x3F	; 63
    2140:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__subsf3>
    2144:	61 96       	adiw	r28, 0x11	; 17
    2146:	2c ad       	ldd	r18, Y+60	; 0x3c
    2148:	3d ad       	ldd	r19, Y+61	; 0x3d
    214a:	4e ad       	ldd	r20, Y+62	; 0x3e
    214c:	5f ad       	ldd	r21, Y+63	; 0x3f
    214e:	61 97       	sbiw	r28, 0x11	; 17
    2150:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    2154:	65 96       	adiw	r28, 0x15	; 21
    2156:	2c ad       	ldd	r18, Y+60	; 0x3c
    2158:	3d ad       	ldd	r19, Y+61	; 0x3d
    215a:	4e ad       	ldd	r20, Y+62	; 0x3e
    215c:	5f ad       	ldd	r21, Y+63	; 0x3f
    215e:	65 97       	sbiw	r28, 0x15	; 21
    2160:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    2164:	4b 01       	movw	r8, r22
    2166:	5c 01       	movw	r10, r24
    2168:	6d 96       	adiw	r28, 0x1d	; 29
    216a:	2c ad       	ldd	r18, Y+60	; 0x3c
    216c:	3d ad       	ldd	r19, Y+61	; 0x3d
    216e:	4e ad       	ldd	r20, Y+62	; 0x3e
    2170:	5f ad       	ldd	r21, Y+63	; 0x3f
    2172:	6d 97       	sbiw	r28, 0x1d	; 29
    2174:	69 96       	adiw	r28, 0x19	; 25
    2176:	6c ad       	ldd	r22, Y+60	; 0x3c
    2178:	7d ad       	ldd	r23, Y+61	; 0x3d
    217a:	8e ad       	ldd	r24, Y+62	; 0x3e
    217c:	9f ad       	ldd	r25, Y+63	; 0x3f
    217e:	69 97       	sbiw	r28, 0x19	; 25
    2180:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    2184:	9b 01       	movw	r18, r22
    2186:	ac 01       	movw	r20, r24
    2188:	c5 01       	movw	r24, r10
    218a:	b4 01       	movw	r22, r8
    218c:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__subsf3>
    2190:	a1 96       	adiw	r28, 0x21	; 33
    2192:	2c ad       	ldd	r18, Y+60	; 0x3c
    2194:	3d ad       	ldd	r19, Y+61	; 0x3d
    2196:	4e ad       	ldd	r20, Y+62	; 0x3e
    2198:	5f ad       	ldd	r21, Y+63	; 0x3f
    219a:	a1 97       	sbiw	r28, 0x21	; 33
    219c:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    21a0:	9b 01       	movw	r18, r22
    21a2:	ac 01       	movw	r20, r24
    21a4:	c7 01       	movw	r24, r14
    21a6:	b6 01       	movw	r22, r12
    21a8:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    21ac:	46 2f       	mov	r20, r22
    21ae:	57 2f       	mov	r21, r23
    21b0:	68 2f       	mov	r22, r24
    21b2:	79 2f       	mov	r23, r25
    21b4:	49 a3       	std	Y+33, r20	; 0x21
    21b6:	5a a3       	std	Y+34, r21	; 0x22
    21b8:	6b a3       	std	Y+35, r22	; 0x23
    21ba:	7c a3       	std	Y+36, r23	; 0x24
	Bz = B_x_read * ((1.0 - cos(Q)) * n.Z * n.X - sin(Q) * n.Y) + B_y_read * ((1 - cos(Q)) * n.Z * n.Y + sin(Q) * n.X) + B_z_read * (cos(Q) + (1.0 - cos(Q)) * (n.Z * n.Z));
    21bc:	69 8d       	ldd	r22, Y+25	; 0x19
    21be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21c4:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <cos>
    21c8:	6b 01       	movw	r12, r22
    21ca:	7c 01       	movw	r14, r24
    21cc:	49 84       	ldd	r4, Y+9	; 0x09
    21ce:	5a 84       	ldd	r5, Y+10	; 0x0a
    21d0:	6b 84       	ldd	r6, Y+11	; 0x0b
    21d2:	7c 84       	ldd	r7, Y+12	; 0x0c
    21d4:	89 81       	ldd	r24, Y+1	; 0x01
    21d6:	9a 81       	ldd	r25, Y+2	; 0x02
    21d8:	ab 81       	ldd	r26, Y+3	; 0x03
    21da:	bc 81       	ldd	r27, Y+4	; 0x04
    21dc:	89 a7       	std	Y+41, r24	; 0x29
    21de:	9a a7       	std	Y+42, r25	; 0x2a
    21e0:	ab a7       	std	Y+43, r26	; 0x2b
    21e2:	bc a7       	std	Y+44, r27	; 0x2c
    21e4:	69 8d       	ldd	r22, Y+25	; 0x19
    21e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21ec:	0e 94 0c 2e 	call	0x5c18	; 0x5c18 <sin>
    21f0:	4b 01       	movw	r8, r22
    21f2:	5c 01       	movw	r10, r24
    21f4:	8d 81       	ldd	r24, Y+5	; 0x05
    21f6:	9e 81       	ldd	r25, Y+6	; 0x06
    21f8:	af 81       	ldd	r26, Y+7	; 0x07
    21fa:	b8 85       	ldd	r27, Y+8	; 0x08
    21fc:	8d a7       	std	Y+45, r24	; 0x2d
    21fe:	9e a7       	std	Y+46, r25	; 0x2e
    2200:	af a7       	std	Y+47, r26	; 0x2f
    2202:	b8 ab       	std	Y+48, r27	; 0x30
    2204:	8d 89       	ldd	r24, Y+21	; 0x15
    2206:	9e 89       	ldd	r25, Y+22	; 0x16
    2208:	af 89       	ldd	r26, Y+23	; 0x17
    220a:	b8 8d       	ldd	r27, Y+24	; 0x18
    220c:	89 ab       	std	Y+49, r24	; 0x31
    220e:	9a ab       	std	Y+50, r25	; 0x32
    2210:	ab ab       	std	Y+51, r26	; 0x33
    2212:	bc ab       	std	Y+52, r27	; 0x34
    2214:	69 8d       	ldd	r22, Y+25	; 0x19
    2216:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2218:	8b 8d       	ldd	r24, Y+27	; 0x1b
    221a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    221c:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <cos>
    2220:	6d ab       	std	Y+53, r22	; 0x35
    2222:	7e ab       	std	Y+54, r23	; 0x36
    2224:	8f ab       	std	Y+55, r24	; 0x37
    2226:	98 af       	std	Y+56, r25	; 0x38
    2228:	89 85       	ldd	r24, Y+9	; 0x09
    222a:	9a 85       	ldd	r25, Y+10	; 0x0a
    222c:	ab 85       	ldd	r26, Y+11	; 0x0b
    222e:	bc 85       	ldd	r27, Y+12	; 0x0c
    2230:	89 af       	std	Y+57, r24	; 0x39
    2232:	9a af       	std	Y+58, r25	; 0x3a
    2234:	ab af       	std	Y+59, r26	; 0x3b
    2236:	bc af       	std	Y+60, r27	; 0x3c
    2238:	8d 81       	ldd	r24, Y+5	; 0x05
    223a:	9e 81       	ldd	r25, Y+6	; 0x06
    223c:	af 81       	ldd	r26, Y+7	; 0x07
    223e:	b8 85       	ldd	r27, Y+8	; 0x08
    2240:	21 96       	adiw	r28, 0x01	; 1
    2242:	8c af       	std	Y+60, r24	; 0x3c
    2244:	9d af       	std	Y+61, r25	; 0x3d
    2246:	ae af       	std	Y+62, r26	; 0x3e
    2248:	bf af       	std	Y+63, r27	; 0x3f
    224a:	21 97       	sbiw	r28, 0x01	; 1
    224c:	69 8d       	ldd	r22, Y+25	; 0x19
    224e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2250:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2252:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2254:	0e 94 0c 2e 	call	0x5c18	; 0x5c18 <sin>
    2258:	25 96       	adiw	r28, 0x05	; 5
    225a:	6c af       	std	Y+60, r22	; 0x3c
    225c:	7d af       	std	Y+61, r23	; 0x3d
    225e:	8e af       	std	Y+62, r24	; 0x3e
    2260:	9f af       	std	Y+63, r25	; 0x3f
    2262:	25 97       	sbiw	r28, 0x05	; 5
    2264:	89 81       	ldd	r24, Y+1	; 0x01
    2266:	9a 81       	ldd	r25, Y+2	; 0x02
    2268:	ab 81       	ldd	r26, Y+3	; 0x03
    226a:	bc 81       	ldd	r27, Y+4	; 0x04
    226c:	29 96       	adiw	r28, 0x09	; 9
    226e:	8c af       	std	Y+60, r24	; 0x3c
    2270:	9d af       	std	Y+61, r25	; 0x3d
    2272:	ae af       	std	Y+62, r26	; 0x3e
    2274:	bf af       	std	Y+63, r27	; 0x3f
    2276:	29 97       	sbiw	r28, 0x09	; 9
    2278:	89 89       	ldd	r24, Y+17	; 0x11
    227a:	9a 89       	ldd	r25, Y+18	; 0x12
    227c:	ab 89       	ldd	r26, Y+19	; 0x13
    227e:	bc 89       	ldd	r27, Y+20	; 0x14
    2280:	2d 96       	adiw	r28, 0x0d	; 13
    2282:	8c af       	std	Y+60, r24	; 0x3c
    2284:	9d af       	std	Y+61, r25	; 0x3d
    2286:	ae af       	std	Y+62, r26	; 0x3e
    2288:	bf af       	std	Y+63, r27	; 0x3f
    228a:	2d 97       	sbiw	r28, 0x0d	; 13
    228c:	69 8d       	ldd	r22, Y+25	; 0x19
    228e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2290:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2292:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2294:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <cos>
    2298:	61 96       	adiw	r28, 0x11	; 17
    229a:	6c af       	std	Y+60, r22	; 0x3c
    229c:	7d af       	std	Y+61, r23	; 0x3d
    229e:	8e af       	std	Y+62, r24	; 0x3e
    22a0:	9f af       	std	Y+63, r25	; 0x3f
    22a2:	61 97       	sbiw	r28, 0x11	; 17
    22a4:	69 8d       	ldd	r22, Y+25	; 0x19
    22a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22ac:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <cos>
    22b0:	65 96       	adiw	r28, 0x15	; 21
    22b2:	6c af       	std	Y+60, r22	; 0x3c
    22b4:	7d af       	std	Y+61, r23	; 0x3d
    22b6:	8e af       	std	Y+62, r24	; 0x3e
    22b8:	9f af       	std	Y+63, r25	; 0x3f
    22ba:	65 97       	sbiw	r28, 0x15	; 21
    22bc:	89 85       	ldd	r24, Y+9	; 0x09
    22be:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c0:	ab 85       	ldd	r26, Y+11	; 0x0b
    22c2:	bc 85       	ldd	r27, Y+12	; 0x0c
    22c4:	69 96       	adiw	r28, 0x19	; 25
    22c6:	8c af       	std	Y+60, r24	; 0x3c
    22c8:	9d af       	std	Y+61, r25	; 0x3d
    22ca:	ae af       	std	Y+62, r26	; 0x3e
    22cc:	bf af       	std	Y+63, r27	; 0x3f
    22ce:	69 97       	sbiw	r28, 0x19	; 25
    22d0:	89 85       	ldd	r24, Y+9	; 0x09
    22d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22d4:	ab 85       	ldd	r26, Y+11	; 0x0b
    22d6:	bc 85       	ldd	r27, Y+12	; 0x0c
    22d8:	6d 96       	adiw	r28, 0x1d	; 29
    22da:	8c af       	std	Y+60, r24	; 0x3c
    22dc:	9d af       	std	Y+61, r25	; 0x3d
    22de:	ae af       	std	Y+62, r26	; 0x3e
    22e0:	bf af       	std	Y+63, r27	; 0x3f
    22e2:	6d 97       	sbiw	r28, 0x1d	; 29
    22e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    22e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    22e8:	af 85       	ldd	r26, Y+15	; 0x0f
    22ea:	b8 89       	ldd	r27, Y+16	; 0x10
    22ec:	a1 96       	adiw	r28, 0x21	; 33
    22ee:	8c af       	std	Y+60, r24	; 0x3c
    22f0:	9d af       	std	Y+61, r25	; 0x3d
    22f2:	ae af       	std	Y+62, r26	; 0x3e
    22f4:	bf af       	std	Y+63, r27	; 0x3f
    22f6:	a1 97       	sbiw	r28, 0x21	; 33
    22f8:	a7 01       	movw	r20, r14
    22fa:	96 01       	movw	r18, r12
    22fc:	60 e0       	ldi	r22, 0x00	; 0
    22fe:	70 e0       	ldi	r23, 0x00	; 0
    2300:	80 e8       	ldi	r24, 0x80	; 128
    2302:	9f e3       	ldi	r25, 0x3F	; 63
    2304:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__subsf3>
    2308:	a3 01       	movw	r20, r6
    230a:	92 01       	movw	r18, r4
    230c:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    2310:	29 a5       	ldd	r18, Y+41	; 0x29
    2312:	3a a5       	ldd	r19, Y+42	; 0x2a
    2314:	4b a5       	ldd	r20, Y+43	; 0x2b
    2316:	5c a5       	ldd	r21, Y+44	; 0x2c
    2318:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    231c:	6b 01       	movw	r12, r22
    231e:	7c 01       	movw	r14, r24
    2320:	2d a5       	ldd	r18, Y+45	; 0x2d
    2322:	3e a5       	ldd	r19, Y+46	; 0x2e
    2324:	4f a5       	ldd	r20, Y+47	; 0x2f
    2326:	58 a9       	ldd	r21, Y+48	; 0x30
    2328:	c5 01       	movw	r24, r10
    232a:	b4 01       	movw	r22, r8
    232c:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    2330:	9b 01       	movw	r18, r22
    2332:	ac 01       	movw	r20, r24
    2334:	c7 01       	movw	r24, r14
    2336:	b6 01       	movw	r22, r12
    2338:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__subsf3>
    233c:	29 a9       	ldd	r18, Y+49	; 0x31
    233e:	3a a9       	ldd	r19, Y+50	; 0x32
    2340:	4b a9       	ldd	r20, Y+51	; 0x33
    2342:	5c a9       	ldd	r21, Y+52	; 0x34
    2344:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    2348:	6b 01       	movw	r12, r22
    234a:	7c 01       	movw	r14, r24
    234c:	2d a9       	ldd	r18, Y+53	; 0x35
    234e:	3e a9       	ldd	r19, Y+54	; 0x36
    2350:	4f a9       	ldd	r20, Y+55	; 0x37
    2352:	58 ad       	ldd	r21, Y+56	; 0x38
    2354:	60 e0       	ldi	r22, 0x00	; 0
    2356:	70 e0       	ldi	r23, 0x00	; 0
    2358:	80 e8       	ldi	r24, 0x80	; 128
    235a:	9f e3       	ldi	r25, 0x3F	; 63
    235c:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__subsf3>
    2360:	29 ad       	ldd	r18, Y+57	; 0x39
    2362:	3a ad       	ldd	r19, Y+58	; 0x3a
    2364:	4b ad       	ldd	r20, Y+59	; 0x3b
    2366:	5c ad       	ldd	r21, Y+60	; 0x3c
    2368:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    236c:	21 96       	adiw	r28, 0x01	; 1
    236e:	2c ad       	ldd	r18, Y+60	; 0x3c
    2370:	3d ad       	ldd	r19, Y+61	; 0x3d
    2372:	4e ad       	ldd	r20, Y+62	; 0x3e
    2374:	5f ad       	ldd	r21, Y+63	; 0x3f
    2376:	21 97       	sbiw	r28, 0x01	; 1
    2378:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    237c:	4b 01       	movw	r8, r22
    237e:	5c 01       	movw	r10, r24
    2380:	29 96       	adiw	r28, 0x09	; 9
    2382:	2c ad       	ldd	r18, Y+60	; 0x3c
    2384:	3d ad       	ldd	r19, Y+61	; 0x3d
    2386:	4e ad       	ldd	r20, Y+62	; 0x3e
    2388:	5f ad       	ldd	r21, Y+63	; 0x3f
    238a:	29 97       	sbiw	r28, 0x09	; 9
    238c:	25 96       	adiw	r28, 0x05	; 5
    238e:	6c ad       	ldd	r22, Y+60	; 0x3c
    2390:	7d ad       	ldd	r23, Y+61	; 0x3d
    2392:	8e ad       	ldd	r24, Y+62	; 0x3e
    2394:	9f ad       	ldd	r25, Y+63	; 0x3f
    2396:	25 97       	sbiw	r28, 0x05	; 5
    2398:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    239c:	9b 01       	movw	r18, r22
    239e:	ac 01       	movw	r20, r24
    23a0:	c5 01       	movw	r24, r10
    23a2:	b4 01       	movw	r22, r8
    23a4:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    23a8:	2d 96       	adiw	r28, 0x0d	; 13
    23aa:	2c ad       	ldd	r18, Y+60	; 0x3c
    23ac:	3d ad       	ldd	r19, Y+61	; 0x3d
    23ae:	4e ad       	ldd	r20, Y+62	; 0x3e
    23b0:	5f ad       	ldd	r21, Y+63	; 0x3f
    23b2:	2d 97       	sbiw	r28, 0x0d	; 13
    23b4:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    23b8:	9b 01       	movw	r18, r22
    23ba:	ac 01       	movw	r20, r24
    23bc:	c7 01       	movw	r24, r14
    23be:	b6 01       	movw	r22, r12
    23c0:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    23c4:	6b 01       	movw	r12, r22
    23c6:	7c 01       	movw	r14, r24
    23c8:	65 96       	adiw	r28, 0x15	; 21
    23ca:	2c ad       	ldd	r18, Y+60	; 0x3c
    23cc:	3d ad       	ldd	r19, Y+61	; 0x3d
    23ce:	4e ad       	ldd	r20, Y+62	; 0x3e
    23d0:	5f ad       	ldd	r21, Y+63	; 0x3f
    23d2:	65 97       	sbiw	r28, 0x15	; 21
    23d4:	60 e0       	ldi	r22, 0x00	; 0
    23d6:	70 e0       	ldi	r23, 0x00	; 0
    23d8:	80 e8       	ldi	r24, 0x80	; 128
    23da:	9f e3       	ldi	r25, 0x3F	; 63
    23dc:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__subsf3>
    23e0:	4b 01       	movw	r8, r22
    23e2:	5c 01       	movw	r10, r24
    23e4:	6d 96       	adiw	r28, 0x1d	; 29
    23e6:	2c ad       	ldd	r18, Y+60	; 0x3c
    23e8:	3d ad       	ldd	r19, Y+61	; 0x3d
    23ea:	4e ad       	ldd	r20, Y+62	; 0x3e
    23ec:	5f ad       	ldd	r21, Y+63	; 0x3f
    23ee:	6d 97       	sbiw	r28, 0x1d	; 29
    23f0:	69 96       	adiw	r28, 0x19	; 25
    23f2:	6c ad       	ldd	r22, Y+60	; 0x3c
    23f4:	7d ad       	ldd	r23, Y+61	; 0x3d
    23f6:	8e ad       	ldd	r24, Y+62	; 0x3e
    23f8:	9f ad       	ldd	r25, Y+63	; 0x3f
    23fa:	69 97       	sbiw	r28, 0x19	; 25
    23fc:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    2400:	9b 01       	movw	r18, r22
    2402:	ac 01       	movw	r20, r24
    2404:	c5 01       	movw	r24, r10
    2406:	b4 01       	movw	r22, r8
    2408:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    240c:	9b 01       	movw	r18, r22
    240e:	ac 01       	movw	r20, r24
    2410:	61 96       	adiw	r28, 0x11	; 17
    2412:	6c ad       	ldd	r22, Y+60	; 0x3c
    2414:	7d ad       	ldd	r23, Y+61	; 0x3d
    2416:	8e ad       	ldd	r24, Y+62	; 0x3e
    2418:	9f ad       	ldd	r25, Y+63	; 0x3f
    241a:	61 97       	sbiw	r28, 0x11	; 17
    241c:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    2420:	a1 96       	adiw	r28, 0x21	; 33
    2422:	2c ad       	ldd	r18, Y+60	; 0x3c
    2424:	3d ad       	ldd	r19, Y+61	; 0x3d
    2426:	4e ad       	ldd	r20, Y+62	; 0x3e
    2428:	5f ad       	ldd	r21, Y+63	; 0x3f
    242a:	a1 97       	sbiw	r28, 0x21	; 33
    242c:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    2430:	9b 01       	movw	r18, r22
    2432:	ac 01       	movw	r20, r24
    2434:	c7 01       	movw	r24, r14
    2436:	b6 01       	movw	r22, r12
    2438:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    243c:	46 2f       	mov	r20, r22
    243e:	57 2f       	mov	r21, r23
    2440:	68 2f       	mov	r22, r24
    2442:	79 2f       	mov	r23, r25
    2444:	4d 8f       	std	Y+29, r20	; 0x1d
    2446:	5e 8f       	std	Y+30, r21	; 0x1e
    2448:	6f 8f       	std	Y+31, r22	; 0x1f
    244a:	78 a3       	std	Y+32, r23	; 0x20
	
	//Расчет магнитного курса в радианах
	A = atan2(Bx, By);
    244c:	29 a1       	ldd	r18, Y+33	; 0x21
    244e:	3a a1       	ldd	r19, Y+34	; 0x22
    2450:	4b a1       	ldd	r20, Y+35	; 0x23
    2452:	5c a1       	ldd	r21, Y+36	; 0x24
    2454:	6d a1       	ldd	r22, Y+37	; 0x25
    2456:	7e a1       	ldd	r23, Y+38	; 0x26
    2458:	8f a1       	ldd	r24, Y+39	; 0x27
    245a:	98 a5       	ldd	r25, Y+40	; 0x28
    245c:	0e 94 a0 2b 	call	0x5740	; 0x5740 <atan2>
    2460:	c6 2e       	mov	r12, r22
    2462:	d7 2e       	mov	r13, r23
    2464:	e8 2e       	mov	r14, r24
    2466:	f9 2e       	mov	r15, r25
	//A = atan2(B_y.value, B_x.value);
	
	//Коррекция на 0-2Пи
	if (A < 0.0)
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	a9 01       	movw	r20, r18
    246e:	0e 94 f3 2b 	call	0x57e6	; 0x57e6 <__cmpsf2>
    2472:	88 23       	and	r24, r24
    2474:	7c f4       	brge	.+30     	; 0x2494 <_Z11Course_Calcv+0x8ea>
	{
		A += 2 * M_PI;
    2476:	2b ed       	ldi	r18, 0xDB	; 219
    2478:	3f e0       	ldi	r19, 0x0F	; 15
    247a:	49 ec       	ldi	r20, 0xC9	; 201
    247c:	50 e4       	ldi	r21, 0x40	; 64
    247e:	6c 2d       	mov	r22, r12
    2480:	7d 2d       	mov	r23, r13
    2482:	8e 2d       	mov	r24, r14
    2484:	9f 2d       	mov	r25, r15
    2486:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    248a:	c6 2e       	mov	r12, r22
    248c:	d7 2e       	mov	r13, r23
    248e:	e8 2e       	mov	r14, r24
    2490:	f9 2e       	mov	r15, r25
    2492:	1a c0       	rjmp	.+52     	; 0x24c8 <_Z11Course_Calcv+0x91e>
	}
	else if (A > 2 * M_PI)
    2494:	2b ed       	ldi	r18, 0xDB	; 219
    2496:	3f e0       	ldi	r19, 0x0F	; 15
    2498:	49 ec       	ldi	r20, 0xC9	; 201
    249a:	50 e4       	ldi	r21, 0x40	; 64
    249c:	6c 2d       	mov	r22, r12
    249e:	7d 2d       	mov	r23, r13
    24a0:	8e 2d       	mov	r24, r14
    24a2:	9f 2d       	mov	r25, r15
    24a4:	0e 94 9e 2d 	call	0x5b3c	; 0x5b3c <__gesf2>
    24a8:	18 16       	cp	r1, r24
    24aa:	74 f4       	brge	.+28     	; 0x24c8 <_Z11Course_Calcv+0x91e>
	{
		A -= 2 * M_PI;
    24ac:	2b ed       	ldi	r18, 0xDB	; 219
    24ae:	3f e0       	ldi	r19, 0x0F	; 15
    24b0:	49 ec       	ldi	r20, 0xC9	; 201
    24b2:	50 e4       	ldi	r21, 0x40	; 64
    24b4:	6c 2d       	mov	r22, r12
    24b6:	7d 2d       	mov	r23, r13
    24b8:	8e 2d       	mov	r24, r14
    24ba:	9f 2d       	mov	r25, r15
    24bc:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__subsf3>
    24c0:	c6 2e       	mov	r12, r22
    24c2:	d7 2e       	mov	r13, r23
    24c4:	e8 2e       	mov	r14, r24
    24c6:	f9 2e       	mov	r15, r25
	}
	
	//Перевод в градусы + повернутый магнитометр + магнитная девиация
	//magOz.value = A * 180.0 / M_PI;
	A = A * 180.0 / M_PI + coeffs[Mag_deviat].value;
    24c8:	20 e0       	ldi	r18, 0x00	; 0
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	44 e3       	ldi	r20, 0x34	; 52
    24ce:	53 e4       	ldi	r21, 0x43	; 67
    24d0:	6c 2d       	mov	r22, r12
    24d2:	7d 2d       	mov	r23, r13
    24d4:	8e 2d       	mov	r24, r14
    24d6:	9f 2d       	mov	r25, r15
    24d8:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    24dc:	2b ed       	ldi	r18, 0xDB	; 219
    24de:	3f e0       	ldi	r19, 0x0F	; 15
    24e0:	49 e4       	ldi	r20, 0x49	; 73
    24e2:	50 e4       	ldi	r21, 0x40	; 64
    24e4:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <__divsf3>
    24e8:	20 91 8b 05 	lds	r18, 0x058B
    24ec:	30 91 8c 05 	lds	r19, 0x058C
    24f0:	40 91 8d 05 	lds	r20, 0x058D
    24f4:	50 91 8e 05 	lds	r21, 0x058E
    24f8:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    24fc:	86 2e       	mov	r8, r22
    24fe:	97 2e       	mov	r9, r23
    2500:	a8 2e       	mov	r10, r24
    2502:	b9 2e       	mov	r11, r25
    2504:	c6 2e       	mov	r12, r22
    2506:	d7 2e       	mov	r13, r23
    2508:	e8 2e       	mov	r14, r24
    250a:	f9 2e       	mov	r15, r25
	
	if (A >= 360.0)
    250c:	20 e0       	ldi	r18, 0x00	; 0
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	44 eb       	ldi	r20, 0xB4	; 180
    2512:	53 e4       	ldi	r21, 0x43	; 67
    2514:	0e 94 9e 2d 	call	0x5b3c	; 0x5b3c <__gesf2>
    2518:	88 23       	and	r24, r24
    251a:	7c f0       	brlt	.+30     	; 0x253a <_Z11Course_Calcv+0x990>
	{
		A -= 360.0;
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	44 eb       	ldi	r20, 0xB4	; 180
    2522:	53 e4       	ldi	r21, 0x43	; 67
    2524:	68 2d       	mov	r22, r8
    2526:	79 2d       	mov	r23, r9
    2528:	8a 2d       	mov	r24, r10
    252a:	9b 2d       	mov	r25, r11
    252c:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__subsf3>
    2530:	c6 2e       	mov	r12, r22
    2532:	d7 2e       	mov	r13, r23
    2534:	e8 2e       	mov	r14, r24
    2536:	f9 2e       	mov	r15, r25
    2538:	19 c0       	rjmp	.+50     	; 0x256c <_Z11Course_Calcv+0x9c2>
	}
	else if (A < 0)
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	a9 01       	movw	r20, r18
    2540:	68 2d       	mov	r22, r8
    2542:	79 2d       	mov	r23, r9
    2544:	8a 2d       	mov	r24, r10
    2546:	9b 2d       	mov	r25, r11
    2548:	0e 94 f3 2b 	call	0x57e6	; 0x57e6 <__cmpsf2>
    254c:	88 23       	and	r24, r24
    254e:	74 f4       	brge	.+28     	; 0x256c <_Z11Course_Calcv+0x9c2>
	{
		A = 360.0 + A;
    2550:	20 e0       	ldi	r18, 0x00	; 0
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	44 eb       	ldi	r20, 0xB4	; 180
    2556:	53 e4       	ldi	r21, 0x43	; 67
    2558:	68 2d       	mov	r22, r8
    255a:	79 2d       	mov	r23, r9
    255c:	8a 2d       	mov	r24, r10
    255e:	9b 2d       	mov	r25, r11
    2560:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    2564:	c6 2e       	mov	r12, r22
    2566:	d7 2e       	mov	r13, r23
    2568:	e8 2e       	mov	r14, r24
    256a:	f9 2e       	mov	r15, r25
	}
	
	magOz.value = A;
    256c:	4c 2d       	mov	r20, r12
    256e:	5d 2d       	mov	r21, r13
    2570:	6e 2d       	mov	r22, r14
    2572:	7f 2d       	mov	r23, r15
    2574:	40 93 7f 06 	sts	0x067F, r20
    2578:	50 93 80 06 	sts	0x0680, r21
    257c:	60 93 81 06 	sts	0x0681, r22
    2580:	70 93 82 06 	sts	0x0682, r23
	
	if (fabs(Q * 180.0 / M_PI) < coeffs[INCL_TRUE_HEAD].value)
    2584:	69 8d       	ldd	r22, Y+25	; 0x19
    2586:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2588:	8b 8d       	ldd	r24, Y+27	; 0x1b
    258a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    258c:	20 e0       	ldi	r18, 0x00	; 0
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	44 e3       	ldi	r20, 0x34	; 52
    2592:	53 e4       	ldi	r21, 0x43	; 67
    2594:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    2598:	2b ed       	ldi	r18, 0xDB	; 219
    259a:	3f e0       	ldi	r19, 0x0F	; 15
    259c:	49 e4       	ldi	r20, 0x49	; 73
    259e:	50 e4       	ldi	r21, 0x40	; 64
    25a0:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <__divsf3>
    25a4:	9f 77       	andi	r25, 0x7F	; 127
    25a6:	20 91 a3 05 	lds	r18, 0x05A3
    25aa:	30 91 a4 05 	lds	r19, 0x05A4
    25ae:	40 91 a5 05 	lds	r20, 0x05A5
    25b2:	50 91 a6 05 	lds	r21, 0x05A6
    25b6:	0e 94 f3 2b 	call	0x57e6	; 0x57e6 <__cmpsf2>
    25ba:	88 23       	and	r24, r24
    25bc:	64 f4       	brge	.+24     	; 0x25d6 <_Z11Course_Calcv+0xa2c>
	{
		int_w_z.value = magOz.value;
    25be:	8c 2d       	mov	r24, r12
    25c0:	9d 2d       	mov	r25, r13
    25c2:	ae 2d       	mov	r26, r14
    25c4:	bf 2d       	mov	r27, r15
    25c6:	80 93 7b 06 	sts	0x067B, r24
    25ca:	90 93 7c 06 	sts	0x067C, r25
    25ce:	a0 93 7d 06 	sts	0x067D, r26
    25d2:	b0 93 7e 06 	sts	0x067E, r27
	}
	
	return 0;
}
    25d6:	80 e0       	ldi	r24, 0x00	; 0
    25d8:	c0 5a       	subi	r28, 0xA0	; 160
    25da:	df 4f       	sbci	r29, 0xFF	; 255
    25dc:	0f b6       	in	r0, 0x3f	; 63
    25de:	f8 94       	cli
    25e0:	de bf       	out	0x3e, r29	; 62
    25e2:	0f be       	out	0x3f, r0	; 63
    25e4:	cd bf       	out	0x3d, r28	; 61
    25e6:	df 91       	pop	r29
    25e8:	cf 91       	pop	r28
    25ea:	ff 90       	pop	r15
    25ec:	ef 90       	pop	r14
    25ee:	df 90       	pop	r13
    25f0:	cf 90       	pop	r12
    25f2:	bf 90       	pop	r11
    25f4:	af 90       	pop	r10
    25f6:	9f 90       	pop	r9
    25f8:	8f 90       	pop	r8
    25fa:	7f 90       	pop	r7
    25fc:	6f 90       	pop	r6
    25fe:	5f 90       	pop	r5
    2600:	4f 90       	pop	r4
    2602:	08 95       	ret

00002604 <_Z13HMC5883L_Testh>:

uint8_t HMC5883L_Test(uint8_t mode)
{
    2604:	cf 93       	push	r28
    2606:	c8 2f       	mov	r28, r24
	twi(TWI_START);
    2608:	80 e0       	ldi	r24, 0x00	; 0
    260a:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR = HMC5883L_ADDR | I2C_WRITE;
    260e:	8c e3       	ldi	r24, 0x3C	; 60
    2610:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
    2612:	83 e0       	ldi	r24, 0x03	; 3
    2614:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR = 0x00;	//CRA
    2618:	13 b8       	out	0x03, r1	; 3
	twi(TWI_TRANSMIT);
    261a:	83 e0       	ldi	r24, 0x03	; 3
    261c:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	
	switch (mode)
    2620:	c1 30       	cpi	r28, 0x01	; 1
    2622:	39 f0       	breq	.+14     	; 0x2632 <_Z13HMC5883L_Testh+0x2e>
    2624:	18 f0       	brcs	.+6      	; 0x262c <_Z13HMC5883L_Testh+0x28>
    2626:	c2 30       	cpi	r28, 0x02	; 2
    2628:	51 f4       	brne	.+20     	; 0x263e <_Z13HMC5883L_Testh+0x3a>
    262a:	06 c0       	rjmp	.+12     	; 0x2638 <_Z13HMC5883L_Testh+0x34>
	{
		case 0:
		{
			TWDR = 0b01111000;	//8-average, 15 Hz default, normal measurement
    262c:	88 e7       	ldi	r24, 0x78	; 120
    262e:	83 b9       	out	0x03, r24	; 3
			break;
    2630:	08 c0       	rjmp	.+16     	; 0x2642 <_Z13HMC5883L_Testh+0x3e>
		}
		case 1:
		{
			TWDR = 0b01111001;	//8-average, 15 Hz default, normal measurement. Positive bias configuration for X, Y, and Z axes. 
    2632:	89 e7       	ldi	r24, 0x79	; 121
    2634:	83 b9       	out	0x03, r24	; 3
			break;
    2636:	05 c0       	rjmp	.+10     	; 0x2642 <_Z13HMC5883L_Testh+0x3e>
		}
		case 2:
		{
			TWDR = 0b01111010;	//8-average, 15 Hz default, normal measurement. Negative bias configuration for X, Y and Z axes.
    2638:	8a e7       	ldi	r24, 0x7A	; 122
    263a:	83 b9       	out	0x03, r24	; 3
			break;
    263c:	02 c0       	rjmp	.+4      	; 0x2642 <_Z13HMC5883L_Testh+0x3e>
		}
		default:
		{
			TWDR = 0b01111000;	//8-average, 15 Hz default, normal measurement
    263e:	88 e7       	ldi	r24, 0x78	; 120
    2640:	83 b9       	out	0x03, r24	; 3
		}
	}
	
	twi(TWI_TRANSMIT);
    2642:	83 e0       	ldi	r24, 0x03	; 3
    2644:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	twi(TWI_STOP);
    2648:	82 e0       	ldi	r24, 0x02	; 2
    264a:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	
	return 0;	
    264e:	80 e0       	ldi	r24, 0x00	; 0
    2650:	cf 91       	pop	r28
    2652:	08 95       	ret

00002654 <_Z3twih>:

#include "i2c.h"

uint8_t twi(uint8_t action)
{
	switch(action)
    2654:	82 30       	cpi	r24, 0x02	; 2
    2656:	51 f0       	breq	.+20     	; 0x266c <_Z3twih+0x18>
    2658:	30 f0       	brcs	.+12     	; 0x2666 <_Z3twih+0x12>
    265a:	84 30       	cpi	r24, 0x04	; 4
    265c:	69 f0       	breq	.+26     	; 0x2678 <_Z3twih+0x24>
    265e:	48 f0       	brcs	.+18     	; 0x2672 <_Z3twih+0x1e>
    2660:	85 30       	cpi	r24, 0x05	; 5
    2662:	81 f4       	brne	.+32     	; 0x2684 <_Z3twih+0x30>
    2664:	0c c0       	rjmp	.+24     	; 0x267e <_Z3twih+0x2a>
	{
		case TWI_START:
		case TWI_RESTART:
		TWCR = _BV(TWSTA) | _BV(TWEN) | _BV(TWINT);// Если нужно прерывание | _BV(TWIE);
    2666:	94 ea       	ldi	r25, 0xA4	; 164
    2668:	96 bf       	out	0x36, r25	; 54
		break;
    266a:	0c c0       	rjmp	.+24     	; 0x2684 <_Z3twih+0x30>
		case TWI_STOP:
		TWCR = _BV(TWSTO) | _BV(TWEN) | _BV(TWINT);// | _BV(TWIE);
    266c:	84 e9       	ldi	r24, 0x94	; 148
    266e:	86 bf       	out	0x36, r24	; 54
    2670:	0e c0       	rjmp	.+28     	; 0x268e <_Z3twih+0x3a>
		break;
		case TWI_TRANSMIT:
		TWCR = _BV(TWEN) | _BV(TWINT);// | _BV(TWIE);
    2672:	84 e8       	ldi	r24, 0x84	; 132
    2674:	86 bf       	out	0x36, r24	; 54
		break;
    2676:	08 c0       	rjmp	.+16     	; 0x2688 <_Z3twih+0x34>
		case TWI_RECEIVE_ACK:
		TWCR = _BV(TWEN) | _BV(TWINT) | _BV(TWEA);//| _BV(TWIE);
    2678:	84 ec       	ldi	r24, 0xC4	; 196
    267a:	86 bf       	out	0x36, r24	; 54
		break;
    267c:	05 c0       	rjmp	.+10     	; 0x2688 <_Z3twih+0x34>
		case TWI_RECEIVE_NACK:
		TWCR = _BV(TWEN) | _BV(TWINT);// | _BV(TWIE);
    267e:	84 e8       	ldi	r24, 0x84	; 132
    2680:	86 bf       	out	0x36, r24	; 54
		break;
    2682:	02 c0       	rjmp	.+4      	; 0x2688 <_Z3twih+0x34>
	}
	if(action != TWI_STOP)
    2684:	82 30       	cpi	r24, 0x02	; 2
    2686:	19 f0       	breq	.+6      	; 0x268e <_Z3twih+0x3a>
		while (!(TWCR & _BV(TWINT)));
    2688:	06 b6       	in	r0, 0x36	; 54
    268a:	07 fe       	sbrs	r0, 7
    268c:	fd cf       	rjmp	.-6      	; 0x2688 <_Z3twih+0x34>
	return (TWSR & 0xF8);
    268e:	81 b1       	in	r24, 0x01	; 1
    2690:	88 7f       	andi	r24, 0xF8	; 248
    2692:	08 95       	ret

00002694 <_Z13L3G4200D_Initv>:
 *  Author: Слава
 */ 
#include "L3G4200D.h"

uint8_t L3G4200D_Init()
{
    2694:	cf 93       	push	r28
	twi(TWI_START);
    2696:	80 e0       	ldi	r24, 0x00	; 0
    2698:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR = L3G4200D_ADDR | I2C_WRITE;
    269c:	c2 ed       	ldi	r28, 0xD2	; 210
    269e:	c3 b9       	out	0x03, r28	; 3
	twi(TWI_TRANSMIT);
    26a0:	83 e0       	ldi	r24, 0x03	; 3
    26a2:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR = 0x20; //CTRL_REG1
    26a6:	80 e2       	ldi	r24, 0x20	; 32
    26a8:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
    26aa:	83 e0       	ldi	r24, 0x03	; 3
    26ac:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR = 0<<DR1 | 1<<DR0 | 0<<BW1 | 0<<BW0 | 1<<PD | 1<<Zen | 1<<Yen | 1<<Xen;	
    26b0:	8f e4       	ldi	r24, 0x4F	; 79
    26b2:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
    26b4:	83 e0       	ldi	r24, 0x03	; 3
    26b6:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	twi(TWI_STOP);
    26ba:	82 e0       	ldi	r24, 0x02	; 2
    26bc:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	
	twi(TWI_START);
    26c0:	80 e0       	ldi	r24, 0x00	; 0
    26c2:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR = L3G4200D_ADDR | I2C_WRITE;
    26c6:	c3 b9       	out	0x03, r28	; 3
	twi(TWI_TRANSMIT);
    26c8:	83 e0       	ldi	r24, 0x03	; 3
    26ca:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR = 0x21; //CTRL_REG2
    26ce:	81 e2       	ldi	r24, 0x21	; 33
    26d0:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
    26d2:	83 e0       	ldi	r24, 0x03	; 3
    26d4:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR = 0;
    26d8:	13 b8       	out	0x03, r1	; 3
	twi(TWI_TRANSMIT);
    26da:	83 e0       	ldi	r24, 0x03	; 3
    26dc:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	twi(TWI_STOP);
    26e0:	82 e0       	ldi	r24, 0x02	; 2
    26e2:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	
	twi(TWI_START);
    26e6:	80 e0       	ldi	r24, 0x00	; 0
    26e8:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR = L3G4200D_ADDR | I2C_WRITE;
    26ec:	c3 b9       	out	0x03, r28	; 3
	twi(TWI_TRANSMIT);
    26ee:	83 e0       	ldi	r24, 0x03	; 3
    26f0:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR = 0x22; //CTRL_REG3
    26f4:	82 e2       	ldi	r24, 0x22	; 34
    26f6:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
    26f8:	83 e0       	ldi	r24, 0x03	; 3
    26fa:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR = 0;
    26fe:	13 b8       	out	0x03, r1	; 3
	twi(TWI_TRANSMIT);
    2700:	83 e0       	ldi	r24, 0x03	; 3
    2702:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	twi(TWI_STOP);
    2706:	82 e0       	ldi	r24, 0x02	; 2
    2708:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	
	twi(TWI_START);
    270c:	80 e0       	ldi	r24, 0x00	; 0
    270e:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR = L3G4200D_ADDR | I2C_WRITE;
    2712:	c3 b9       	out	0x03, r28	; 3
	twi(TWI_TRANSMIT);
    2714:	83 e0       	ldi	r24, 0x03	; 3
    2716:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR = 0x23; //CTRL_REG4
    271a:	83 e2       	ldi	r24, 0x23	; 35
    271c:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
    271e:	83 e0       	ldi	r24, 0x03	; 3
    2720:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR = 0<<BDU | 0<<BLE | 1<<FS1 | 1<<FS0 | 0<<ST1 | 0<<ST0 | 0<<SIM;	//TWDR = 1<<BDU | 0<<BLE | 0<<FS1 | 0<<FS0 | 0<<ST1 | 0<<ST0 | 0<<SIM;
    2724:	80 e3       	ldi	r24, 0x30	; 48
    2726:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
    2728:	83 e0       	ldi	r24, 0x03	; 3
    272a:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	twi(TWI_STOP);
    272e:	82 e0       	ldi	r24, 0x02	; 2
    2730:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	
	twi(TWI_START);
    2734:	80 e0       	ldi	r24, 0x00	; 0
    2736:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR = L3G4200D_ADDR | I2C_WRITE;
    273a:	c3 b9       	out	0x03, r28	; 3
	twi(TWI_TRANSMIT);
    273c:	83 e0       	ldi	r24, 0x03	; 3
    273e:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR = 0x24; //CTRL_REG5
    2742:	84 e2       	ldi	r24, 0x24	; 36
    2744:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
    2746:	83 e0       	ldi	r24, 0x03	; 3
    2748:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR = 0<<BOOT | 0<<FIFO_EN | 0<<HPen | 0<<INT1_Sel1 | 0<<INT1_Sel0 | 1<<Out_Sel1 | 0<<Out_Sel0;	//TWDR = 0<<BOOT | 0<<FIFO_EN | 0<<HPen | 0<<INT1_Sel1 | 0<<INT1_Sel0 | 0<<Out_Sel1 | 0<<Out_Sel0;
    274c:	82 e0       	ldi	r24, 0x02	; 2
    274e:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
    2750:	83 e0       	ldi	r24, 0x03	; 3
    2752:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	twi(TWI_STOP);		
    2756:	82 e0       	ldi	r24, 0x02	; 2
    2758:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	
	twi(TWI_START);
    275c:	80 e0       	ldi	r24, 0x00	; 0
    275e:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR = L3G4200D_ADDR | I2C_WRITE;
    2762:	c3 b9       	out	0x03, r28	; 3
	twi(TWI_TRANSMIT);
    2764:	83 e0       	ldi	r24, 0x03	; 3
    2766:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR = 0x2E; //FIFO_CTRL_REG
    276a:	8e e2       	ldi	r24, 0x2E	; 46
    276c:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
    276e:	83 e0       	ldi	r24, 0x03	; 3
    2770:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR = 0<<FM2 | 0<<FM1 | 0<<FM0 | 0<<WTM4 | 0<<WTM3 | 0<<WTM2 | 0<<WTM1 | 0<<WTM0;
    2774:	13 b8       	out	0x03, r1	; 3
	twi(TWI_TRANSMIT);
    2776:	83 e0       	ldi	r24, 0x03	; 3
    2778:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	twi(TWI_STOP);
    277c:	82 e0       	ldi	r24, 0x02	; 2
    277e:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	return 0;
	
}
    2782:	80 e0       	ldi	r24, 0x00	; 0
    2784:	cf 91       	pop	r28
    2786:	08 95       	ret

00002788 <_Z13L3G4200D_Pollv>:

uint8_t L3G4200D_Poll()
{
    2788:	8f 92       	push	r8
    278a:	9f 92       	push	r9
    278c:	af 92       	push	r10
    278e:	bf 92       	push	r11
    2790:	cf 92       	push	r12
    2792:	df 92       	push	r13
    2794:	ef 92       	push	r14
    2796:	ff 92       	push	r15
    2798:	cf 93       	push	r28
    279a:	df 93       	push	r29
	uint8_t MSB, LSB;
	
	
	
	twi(TWI_START);
    279c:	80 e0       	ldi	r24, 0x00	; 0
    279e:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR = L3G4200D_ADDR | I2C_WRITE;
    27a2:	d2 ed       	ldi	r29, 0xD2	; 210
    27a4:	d3 b9       	out	0x03, r29	; 3
	twi(TWI_TRANSMIT);
    27a6:	83 e0       	ldi	r24, 0x03	; 3
    27a8:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR = 0x26; //OUT_TEMP
    27ac:	86 e2       	ldi	r24, 0x26	; 38
    27ae:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
    27b0:	83 e0       	ldi	r24, 0x03	; 3
    27b2:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	twi(TWI_RESTART);
    27b6:	81 e0       	ldi	r24, 0x01	; 1
    27b8:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR = L3G4200D_ADDR | I2C_READ;
    27bc:	c3 ed       	ldi	r28, 0xD3	; 211
    27be:	c3 b9       	out	0x03, r28	; 3
	twi(TWI_TRANSMIT);
    27c0:	83 e0       	ldi	r24, 0x03	; 3
    27c2:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	twi(TWI_RECEIVE_NACK);
    27c6:	85 e0       	ldi	r24, 0x05	; 5
    27c8:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	LSB = TWDR;
    27cc:	f3 b0       	in	r15, 0x03	; 3
	twi(TWI_STOP);	
    27ce:	82 e0       	ldi	r24, 0x02	; 2
    27d0:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	
	Talt.value = (int8_t)LSB;
    27d4:	6f 2d       	mov	r22, r15
    27d6:	77 27       	eor	r23, r23
    27d8:	67 fd       	sbrc	r22, 7
    27da:	70 95       	com	r23
    27dc:	87 2f       	mov	r24, r23
    27de:	97 2f       	mov	r25, r23
    27e0:	0e 94 90 2c 	call	0x5920	; 0x5920 <__floatsisf>
    27e4:	60 93 3f 06 	sts	0x063F, r22
    27e8:	70 93 40 06 	sts	0x0640, r23
    27ec:	80 93 41 06 	sts	0x0641, r24
    27f0:	90 93 42 06 	sts	0x0642, r25
	
	twi(TWI_START);
    27f4:	80 e0       	ldi	r24, 0x00	; 0
    27f6:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR = L3G4200D_ADDR | I2C_WRITE;
    27fa:	d3 b9       	out	0x03, r29	; 3
	twi(TWI_TRANSMIT);
    27fc:	83 e0       	ldi	r24, 0x03	; 3
    27fe:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR = 0x28 | 0b10000000; //OUT_X_L
    2802:	88 ea       	ldi	r24, 0xA8	; 168
    2804:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
    2806:	83 e0       	ldi	r24, 0x03	; 3
    2808:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	twi(TWI_RESTART);
    280c:	81 e0       	ldi	r24, 0x01	; 1
    280e:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR = L3G4200D_ADDR | I2C_READ;
    2812:	c3 b9       	out	0x03, r28	; 3
	twi(TWI_TRANSMIT);
    2814:	83 e0       	ldi	r24, 0x03	; 3
    2816:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	twi(TWI_RECEIVE_ACK);
    281a:	84 e0       	ldi	r24, 0x04	; 4
    281c:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	LSB = TWDR;
    2820:	c3 b1       	in	r28, 0x03	; 3
	twi(TWI_RECEIVE_ACK);
    2822:	84 e0       	ldi	r24, 0x04	; 4
    2824:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	MSB = TWDR;	
    2828:	83 b1       	in	r24, 0x03	; 3
	p_w_y.value = w_y.value;
    282a:	c0 90 0b 06 	lds	r12, 0x060B
    282e:	d0 90 0c 06 	lds	r13, 0x060C
    2832:	e0 90 0d 06 	lds	r14, 0x060D
    2836:	f0 90 0e 06 	lds	r15, 0x060E
    283a:	c0 92 17 06 	sts	0x0617, r12
    283e:	d0 92 18 06 	sts	0x0618, r13
    2842:	e0 92 19 06 	sts	0x0619, r14
    2846:	f0 92 1a 06 	sts	0x061A, r15
	if(fabs((MSB << 8 | LSB) * 0.00875 - p_w_y.value) > coeffs[L3G4200D_OFFY].value)
    284a:	78 2f       	mov	r23, r24
    284c:	60 e0       	ldi	r22, 0x00	; 0
    284e:	6c 2b       	or	r22, r28
    2850:	88 27       	eor	r24, r24
    2852:	77 fd       	sbrc	r23, 7
    2854:	80 95       	com	r24
    2856:	98 2f       	mov	r25, r24
    2858:	0e 94 90 2c 	call	0x5920	; 0x5920 <__floatsisf>
    285c:	29 e2       	ldi	r18, 0x29	; 41
    285e:	3c e5       	ldi	r19, 0x5C	; 92
    2860:	4f e0       	ldi	r20, 0x0F	; 15
    2862:	5c e3       	ldi	r21, 0x3C	; 60
    2864:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    2868:	86 2e       	mov	r8, r22
    286a:	97 2e       	mov	r9, r23
    286c:	a8 2e       	mov	r10, r24
    286e:	b9 2e       	mov	r11, r25
    2870:	a7 01       	movw	r20, r14
    2872:	96 01       	movw	r18, r12
    2874:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__subsf3>
    2878:	9f 77       	andi	r25, 0x7F	; 127
    287a:	20 91 4b 05 	lds	r18, 0x054B
    287e:	30 91 4c 05 	lds	r19, 0x054C
    2882:	40 91 4d 05 	lds	r20, 0x054D
    2886:	50 91 4e 05 	lds	r21, 0x054E
    288a:	0e 94 9e 2d 	call	0x5b3c	; 0x5b3c <__gesf2>
    288e:	18 16       	cp	r1, r24
    2890:	64 f4       	brge	.+24     	; 0x28aa <_Z13L3G4200D_Pollv+0x122>
	{
		w_y.value = (MSB << 8 | LSB) * 0.00875;
    2892:	88 2d       	mov	r24, r8
    2894:	99 2d       	mov	r25, r9
    2896:	aa 2d       	mov	r26, r10
    2898:	bb 2d       	mov	r27, r11
    289a:	80 93 0b 06 	sts	0x060B, r24
    289e:	90 93 0c 06 	sts	0x060C, r25
    28a2:	a0 93 0d 06 	sts	0x060D, r26
    28a6:	b0 93 0e 06 	sts	0x060E, r27
	}
	
	//Measure_Push((MSB << 8 | LSB) * 0.00875, WY);
	//Measure_Push((MSB << 8 | LSB), WY);
	
	twi(TWI_RECEIVE_ACK);
    28aa:	84 e0       	ldi	r24, 0x04	; 4
    28ac:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	LSB = TWDR;
    28b0:	c3 b1       	in	r28, 0x03	; 3
	twi(TWI_RECEIVE_ACK);
    28b2:	84 e0       	ldi	r24, 0x04	; 4
    28b4:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	MSB = TWDR;
    28b8:	83 b1       	in	r24, 0x03	; 3
	
	p_w_x.value = w_x.value;
    28ba:	c0 90 07 06 	lds	r12, 0x0607
    28be:	d0 90 08 06 	lds	r13, 0x0608
    28c2:	e0 90 09 06 	lds	r14, 0x0609
    28c6:	f0 90 0a 06 	lds	r15, 0x060A
    28ca:	c0 92 13 06 	sts	0x0613, r12
    28ce:	d0 92 14 06 	sts	0x0614, r13
    28d2:	e0 92 15 06 	sts	0x0615, r14
    28d6:	f0 92 16 06 	sts	0x0616, r15
	if(fabs((MSB << 8 | LSB) * 0.00875 - p_w_x.value) > coeffs[L3G4200D_OFFX].value)
    28da:	78 2f       	mov	r23, r24
    28dc:	60 e0       	ldi	r22, 0x00	; 0
    28de:	6c 2b       	or	r22, r28
    28e0:	88 27       	eor	r24, r24
    28e2:	77 fd       	sbrc	r23, 7
    28e4:	80 95       	com	r24
    28e6:	98 2f       	mov	r25, r24
    28e8:	0e 94 90 2c 	call	0x5920	; 0x5920 <__floatsisf>
    28ec:	29 e2       	ldi	r18, 0x29	; 41
    28ee:	3c e5       	ldi	r19, 0x5C	; 92
    28f0:	4f e0       	ldi	r20, 0x0F	; 15
    28f2:	5c e3       	ldi	r21, 0x3C	; 60
    28f4:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    28f8:	86 2e       	mov	r8, r22
    28fa:	97 2e       	mov	r9, r23
    28fc:	a8 2e       	mov	r10, r24
    28fe:	b9 2e       	mov	r11, r25
    2900:	a7 01       	movw	r20, r14
    2902:	96 01       	movw	r18, r12
    2904:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__subsf3>
    2908:	9f 77       	andi	r25, 0x7F	; 127
    290a:	20 91 47 05 	lds	r18, 0x0547
    290e:	30 91 48 05 	lds	r19, 0x0548
    2912:	40 91 49 05 	lds	r20, 0x0549
    2916:	50 91 4a 05 	lds	r21, 0x054A
    291a:	0e 94 9e 2d 	call	0x5b3c	; 0x5b3c <__gesf2>
    291e:	18 16       	cp	r1, r24
    2920:	64 f4       	brge	.+24     	; 0x293a <_Z13L3G4200D_Pollv+0x1b2>
	{
		w_x.value = (MSB << 8 | LSB) * 0.00875;
    2922:	88 2d       	mov	r24, r8
    2924:	99 2d       	mov	r25, r9
    2926:	aa 2d       	mov	r26, r10
    2928:	bb 2d       	mov	r27, r11
    292a:	80 93 07 06 	sts	0x0607, r24
    292e:	90 93 08 06 	sts	0x0608, r25
    2932:	a0 93 09 06 	sts	0x0609, r26
    2936:	b0 93 0a 06 	sts	0x060A, r27
	}
	
	//Measure_Push((MSB << 8 | LSB) * 0.00875, WX);
	//Measure_Push((MSB << 8 | LSB), WX);
	
	twi(TWI_RECEIVE_ACK);
    293a:	84 e0       	ldi	r24, 0x04	; 4
    293c:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	LSB = TWDR;
    2940:	c3 b1       	in	r28, 0x03	; 3
	twi(TWI_RECEIVE_NACK);
    2942:	85 e0       	ldi	r24, 0x05	; 5
    2944:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	MSB = TWDR;
    2948:	83 b1       	in	r24, 0x03	; 3
	
	p_w_z.value = w_z.value;
    294a:	c0 90 0f 06 	lds	r12, 0x060F
    294e:	d0 90 10 06 	lds	r13, 0x0610
    2952:	e0 90 11 06 	lds	r14, 0x0611
    2956:	f0 90 12 06 	lds	r15, 0x0612
    295a:	c0 92 1b 06 	sts	0x061B, r12
    295e:	d0 92 1c 06 	sts	0x061C, r13
    2962:	e0 92 1d 06 	sts	0x061D, r14
    2966:	f0 92 1e 06 	sts	0x061E, r15
	if(fabs((MSB << 8 | LSB) * 0.00875 - p_w_z.value) > coeffs[L3G4200D_OFFZ].value)
    296a:	78 2f       	mov	r23, r24
    296c:	60 e0       	ldi	r22, 0x00	; 0
    296e:	6c 2b       	or	r22, r28
    2970:	88 27       	eor	r24, r24
    2972:	77 fd       	sbrc	r23, 7
    2974:	80 95       	com	r24
    2976:	98 2f       	mov	r25, r24
    2978:	0e 94 90 2c 	call	0x5920	; 0x5920 <__floatsisf>
    297c:	4b 01       	movw	r8, r22
    297e:	5c 01       	movw	r10, r24
    2980:	29 e2       	ldi	r18, 0x29	; 41
    2982:	3c e5       	ldi	r19, 0x5C	; 92
    2984:	4f e0       	ldi	r20, 0x0F	; 15
    2986:	5c e3       	ldi	r21, 0x3C	; 60
    2988:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    298c:	a7 01       	movw	r20, r14
    298e:	96 01       	movw	r18, r12
    2990:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__subsf3>
    2994:	9f 77       	andi	r25, 0x7F	; 127
    2996:	20 91 4f 05 	lds	r18, 0x054F
    299a:	30 91 50 05 	lds	r19, 0x0550
    299e:	40 91 51 05 	lds	r20, 0x0551
    29a2:	50 91 52 05 	lds	r21, 0x0552
    29a6:	0e 94 9e 2d 	call	0x5b3c	; 0x5b3c <__gesf2>
    29aa:	18 16       	cp	r1, r24
    29ac:	84 f4       	brge	.+32     	; 0x29ce <_Z13L3G4200D_Pollv+0x246>
	{
		w_z.value = (MSB << 8 | LSB) * -0.00875;
    29ae:	29 e2       	ldi	r18, 0x29	; 41
    29b0:	3c e5       	ldi	r19, 0x5C	; 92
    29b2:	4f e0       	ldi	r20, 0x0F	; 15
    29b4:	5c eb       	ldi	r21, 0xBC	; 188
    29b6:	c5 01       	movw	r24, r10
    29b8:	b4 01       	movw	r22, r8
    29ba:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    29be:	60 93 0f 06 	sts	0x060F, r22
    29c2:	70 93 10 06 	sts	0x0610, r23
    29c6:	80 93 11 06 	sts	0x0611, r24
    29ca:	90 93 12 06 	sts	0x0612, r25
	}
	
	//Measure_Push((MSB << 8 | LSB) * 0.00875, WZ);
	//Measure_Push((MSB << 8 | LSB), WZ);
	
	twi(TWI_STOP);
    29ce:	82 e0       	ldi	r24, 0x02	; 2
    29d0:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	return 0;
}
    29d4:	80 e0       	ldi	r24, 0x00	; 0
    29d6:	df 91       	pop	r29
    29d8:	cf 91       	pop	r28
    29da:	ff 90       	pop	r15
    29dc:	ef 90       	pop	r14
    29de:	df 90       	pop	r13
    29e0:	cf 90       	pop	r12
    29e2:	bf 90       	pop	r11
    29e4:	af 90       	pop	r10
    29e6:	9f 90       	pop	r9
    29e8:	8f 90       	pop	r8
    29ea:	08 95       	ret

000029ec <_Z13L3G4200D_Testh>:

uint8_t L3G4200D_Test(uint8_t mode)
{
    29ec:	cf 93       	push	r28
    29ee:	c8 2f       	mov	r28, r24
	twi(TWI_START);
    29f0:	80 e0       	ldi	r24, 0x00	; 0
    29f2:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR = L3G4200D_ADDR | I2C_WRITE;
    29f6:	82 ed       	ldi	r24, 0xD2	; 210
    29f8:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
    29fa:	83 e0       	ldi	r24, 0x03	; 3
    29fc:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	TWDR = 0x23; //CTRL_REG4
    2a00:	83 e2       	ldi	r24, 0x23	; 35
    2a02:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
    2a04:	83 e0       	ldi	r24, 0x03	; 3
    2a06:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	
	switch (mode)
    2a0a:	c1 30       	cpi	r28, 0x01	; 1
    2a0c:	39 f0       	breq	.+14     	; 0x2a1c <_Z13L3G4200D_Testh+0x30>
    2a0e:	18 f0       	brcs	.+6      	; 0x2a16 <_Z13L3G4200D_Testh+0x2a>
    2a10:	c2 30       	cpi	r28, 0x02	; 2
    2a12:	51 f4       	brne	.+20     	; 0x2a28 <_Z13L3G4200D_Testh+0x3c>
    2a14:	06 c0       	rjmp	.+12     	; 0x2a22 <_Z13L3G4200D_Testh+0x36>
	{
		case 0:
		{
			TWDR = 1<<BDU | 0<<BLE | 0<<FS1 | 0<<FS0 | 0<<ST1 | 0<<ST0 | 0<<SIM;
    2a16:	80 e8       	ldi	r24, 0x80	; 128
    2a18:	83 b9       	out	0x03, r24	; 3
			break;
    2a1a:	08 c0       	rjmp	.+16     	; 0x2a2c <_Z13L3G4200D_Testh+0x40>
		}
		case 1:
		{
			TWDR = 1<<BDU | 0<<BLE | 0<<FS1 | 0<<FS0 | 0<<ST1 | 1<<ST0 | 0<<SIM;
    2a1c:	82 e8       	ldi	r24, 0x82	; 130
    2a1e:	83 b9       	out	0x03, r24	; 3
			break;
    2a20:	05 c0       	rjmp	.+10     	; 0x2a2c <_Z13L3G4200D_Testh+0x40>
		}
		case 2:
		{
			TWDR = 1<<BDU | 0<<BLE | 0<<FS1 | 0<<FS0 | 1<<ST1 | 1<<ST0 | 0<<SIM;
    2a22:	86 e8       	ldi	r24, 0x86	; 134
    2a24:	83 b9       	out	0x03, r24	; 3
			break;
    2a26:	02 c0       	rjmp	.+4      	; 0x2a2c <_Z13L3G4200D_Testh+0x40>
		}
		default:
		{
			TWDR = 1<<BDU | 0<<BLE | 0<<FS1 | 0<<FS0 | 0<<ST1 | 0<<ST0 | 0<<SIM;
    2a28:	80 e8       	ldi	r24, 0x80	; 128
    2a2a:	83 b9       	out	0x03, r24	; 3
		}
	}	
	
	twi(TWI_TRANSMIT);
    2a2c:	83 e0       	ldi	r24, 0x03	; 3
    2a2e:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	twi(TWI_STOP);
    2a32:	82 e0       	ldi	r24, 0x02	; 2
    2a34:	0e 94 2a 13 	call	0x2654	; 0x2654 <_Z3twih>
	
	return 0;
    2a38:	80 e0       	ldi	r24, 0x00	; 0
    2a3a:	cf 91       	pop	r28
    2a3c:	08 95       	ret

00002a3e <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2a3e:	2f ef       	ldi	r18, 0xFF	; 255
    2a40:	31 ee       	ldi	r19, 0xE1	; 225
    2a42:	84 e0       	ldi	r24, 0x04	; 4
    2a44:	21 50       	subi	r18, 0x01	; 1
    2a46:	30 40       	sbci	r19, 0x00	; 0
    2a48:	80 40       	sbci	r24, 0x00	; 0
    2a4a:	e1 f7       	brne	.-8      	; 0x2a44 <main+0x6>
    2a4c:	00 c0       	rjmp	.+0      	; 0x2a4e <main+0x10>
    2a4e:	00 00       	nop
{
	/*Ждем пока все включится*/
	_delay_ms(100);
	
	/*Настраиваем порты ввода-вывода*/
	DDRB = 1<<PORTB0|1<<PORTB1|1<<PORTB2|1<<PORTB3|1<<PORTB4|1<<PORTB5|1<<PORTB6|1<<PORTB7;
    2a50:	8f ef       	ldi	r24, 0xFF	; 255
    2a52:	87 bb       	out	0x17, r24	; 23
	DDRC = 1<<PORTC0|1<<PORTC1|1<<PORTC2|0<<PORTC3|0<<PORTC4|0<<PORTC5|0<<PORTC6|0<<PORTC7;
    2a54:	87 e0       	ldi	r24, 0x07	; 7
    2a56:	84 bb       	out	0x14, r24	; 20
	DDRD = 0<<PORTD0|0<<PORTD1|0<<PORTD2|0<<PORTD3|1<<PORTD4|0<<PORTD5|0<<PORTD6|1<<PORTD7;
    2a58:	80 e9       	ldi	r24, 0x90	; 144
    2a5a:	81 bb       	out	0x11, r24	; 17

	PORTB = 1;
    2a5c:	81 e0       	ldi	r24, 0x01	; 1
    2a5e:	88 bb       	out	0x18, r24	; 24
	PORTD = 1 << PORTD2;
    2a60:	24 e0       	ldi	r18, 0x04	; 4
    2a62:	22 bb       	out	0x12, r18	; 18
    
	/*Тяга двигателей на минимум*/
    for(uint8_t k = 0; k < CHANNELS_COUNT; ++k)
    {
        counter[k] = LOW;
    2a64:	80 e8       	ldi	r24, 0x80	; 128
    2a66:	9e e3       	ldi	r25, 0x3E	; 62
    2a68:	90 93 b0 04 	sts	0x04B0, r25
    2a6c:	80 93 af 04 	sts	0x04AF, r24
    2a70:	90 93 b2 04 	sts	0x04B2, r25
    2a74:	80 93 b1 04 	sts	0x04B1, r24
    2a78:	90 93 b4 04 	sts	0x04B4, r25
    2a7c:	80 93 b3 04 	sts	0x04B3, r24
    2a80:	90 93 b6 04 	sts	0x04B6, r25
    2a84:	80 93 b5 04 	sts	0x04B5, r24
    2a88:	90 93 b8 04 	sts	0x04B8, r25
    2a8c:	80 93 b7 04 	sts	0x04B7, r24
    2a90:	90 93 ba 04 	sts	0x04BA, r25
    2a94:	80 93 b9 04 	sts	0x04B9, r24
    2a98:	90 93 bc 04 	sts	0x04BC, r25
    2a9c:	80 93 bb 04 	sts	0x04BB, r24
    2aa0:	90 93 be 04 	sts	0x04BE, r25
    2aa4:	80 93 bd 04 	sts	0x04BD, r24
    }
	
	/*Настраиваем I2C*/
	TWSR = 0x00;
    2aa8:	11 b8       	out	0x01, r1	; 1
	TWBR = ((F_CPU / I2C_SPEED) - 16) / 2;  
    2aaa:	3c e0       	ldi	r19, 0x0C	; 12
    2aac:	30 b9       	out	0x00, r19	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2aae:	35 e3       	ldi	r19, 0x35	; 53
    2ab0:	3a 95       	dec	r19
    2ab2:	f1 f7       	brne	.-4      	; 0x2ab0 <main+0x72>
    2ab4:	00 00       	nop
	_delay_us(10);

	/*Включаем Таймер0*/
	TCCR0 = 1<<CS02 | 0<<CS01 | 0<<CS00;
    2ab6:	23 bf       	out	0x33, r18	; 51
	
	/*Включаем Таймер1*/
	OCR1A=HIGH; //TOP
    2ab8:	20 e0       	ldi	r18, 0x00	; 0
    2aba:	3d e7       	ldi	r19, 0x7D	; 125
    2abc:	3b bd       	out	0x2b, r19	; 43
    2abe:	2a bd       	out	0x2a, r18	; 42
	TCCR1A=0<<COM1A1|0<<COM1A0|1<<COM1B1|0<<COM1B0|0<<FOC1A|0<<FOC1B|1<<WGM11|1<<WGM10;
    2ac0:	23 e2       	ldi	r18, 0x23	; 35
    2ac2:	2f bd       	out	0x2f, r18	; 47
	TCCR1B=0<<ICNC1|0<<ICES1|1<<WGM13|1<<WGM12|0<<CS12|0<<CS11|1<<CS10;
    2ac4:	29 e1       	ldi	r18, 0x19	; 25
    2ac6:	2e bd       	out	0x2e, r18	; 46
	TIMSK= 1<<TOIE2 | 1<<OCIE1A|1<<OCIE1B|0<<TOIE1|1<<TOIE0|0<<OCIE0;
    2ac8:	29 e5       	ldi	r18, 0x59	; 89
    2aca:	29 bf       	out	0x39, r18	; 57
	OCR1B=LOW;
    2acc:	99 bd       	out	0x29, r25	; 41
    2ace:	88 bd       	out	0x28, r24	; 40
	
	/*Включаем АЦП*/
	ADC_Init();   
    2ad0:	0e 94 d5 01 	call	0x3aa	; 0x3aa <_Z8ADC_Initv>
    
	/*Включаем прерывание INT0(высотомер)*/
	INT0_Init();
    2ad4:	0e 94 a1 0c 	call	0x1942	; 0x1942 <_Z9INT0_Initv>
	
	/*Разрешаем работу прерываний*/
	sei();
    2ad8:	78 94       	sei
	
	/*Настраиваем Modbus*/
	eMBErrorCode eStatus = eMBInit( MB_RTU, 0x01, 0, 57600, MB_PAR_NONE );
    2ada:	e1 2c       	mov	r14, r1
    2adc:	00 e0       	ldi	r16, 0x00	; 0
    2ade:	11 ee       	ldi	r17, 0xE1	; 225
    2ae0:	20 e0       	ldi	r18, 0x00	; 0
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	40 e0       	ldi	r20, 0x00	; 0
    2ae6:	61 e0       	ldi	r22, 0x01	; 1
    2ae8:	80 e0       	ldi	r24, 0x00	; 0
    2aea:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <eMBInit>
	eStatus = eMBEnable();
    2aee:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <eMBEnable>
    
	/*Настраиваем сенсоры*/    
	SensorsInit();
    2af2:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <_Z11SensorsInitv>
	
	/*Загружаем в Holding Registers и в массив параметров значения из EEPROM*/
	ModbusInitValues();
    2af6:	0e 94 60 21 	call	0x42c0	; 0x42c0 <_Z16ModbusInitValuesv>
	
	filterInit();	
    2afa:	0e 94 14 0b 	call	0x1628	; 0x1628 <_Z10filterInitv>
		
	while(1)
	{
		/*Актуализируем значения Modbus-регистров в соответствии со значениями параметров*/
		ModbusLoader();
    2afe:	0e 94 bf 1f 	call	0x3f7e	; 0x3f7e <_Z12ModbusLoaderv>
		/*Актуализируем значения параметров в соответствии со значениями Holding Registers*/
		ModbusSaver();
    2b02:	0e 94 39 22 	call	0x4472	; 0x4472 <_Z11ModbusSaverv>
		
		/*Итерация Modbus*/
		eMBPoll();
    2b06:	0e 94 49 17 	call	0x2e92	; 0x2e92 <eMBPoll>
		
		/*Ресурсоемкий расчет курса*/		
		Course_Calc();
    2b0a:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <_Z11Course_Calcv>
    2b0e:	f7 cf       	rjmp	.-18     	; 0x2afe <main+0xc0>

00002b10 <eMBRegInputCB>:
	}
}

eMBErrorCode eMBRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
    2b10:	cf 93       	push	r28
    2b12:	df 93       	push	r29
    2b14:	fc 01       	movw	r30, r24
	eMBErrorCode    eStatus = MB_ENOERR;
	int             iRegIndex;

	if( ( usAddress >= REG_INPUT_START )
    2b16:	68 3e       	cpi	r22, 0xE8	; 232
    2b18:	23 e0       	ldi	r18, 0x03	; 3
    2b1a:	72 07       	cpc	r23, r18
    2b1c:	08 f1       	brcs	.+66     	; 0x2b60 <eMBRegInputCB+0x50>
    2b1e:	ca 01       	movw	r24, r20
    2b20:	86 0f       	add	r24, r22
    2b22:	97 1f       	adc	r25, r23
    2b24:	8c 34       	cpi	r24, 0x4C	; 76
    2b26:	94 40       	sbci	r25, 0x04	; 4
    2b28:	e8 f4       	brcc	.+58     	; 0x2b64 <eMBRegInputCB+0x54>
	&& ( usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS ) )
	{
		iRegIndex = ( int )( usAddress - usRegInputStart );
	        while( usNRegs > 0 )
    2b2a:	41 15       	cp	r20, r1
    2b2c:	51 05       	cpc	r21, r1
    2b2e:	e1 f0       	breq	.+56     	; 0x2b68 <eMBRegInputCB+0x58>
		/*Ресурсоемкий расчет курса*/		
		Course_Calc();
	}
}

eMBErrorCode eMBRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
    2b30:	db 01       	movw	r26, r22
    2b32:	aa 0f       	add	r26, r26
    2b34:	bb 1f       	adc	r27, r27
    2b36:	a7 5e       	subi	r26, 0xE7	; 231
    2b38:	b3 40       	sbci	r27, 0x03	; 3
    2b3a:	ca 01       	movw	r24, r20
    2b3c:	88 0f       	add	r24, r24
    2b3e:	99 1f       	adc	r25, r25
    2b40:	8e 0f       	add	r24, r30
    2b42:	9f 1f       	adc	r25, r31
    2b44:	ed 01       	movw	r28, r26
	{
		iRegIndex = ( int )( usAddress - usRegInputStart );
	        while( usNRegs > 0 )
	        {
			*pucRegBuffer++ =
			( unsigned char )( usRegInputBuf[iRegIndex] >> 8 );
    2b46:	11 96       	adiw	r26, 0x01	; 1
    2b48:	2c 91       	ld	r18, X
    2b4a:	11 97       	sbiw	r26, 0x01	; 1
    2b4c:	20 83       	st	Z, r18
    2b4e:	12 96       	adiw	r26, 0x02	; 2
			*pucRegBuffer++ =
			( unsigned char )( usRegInputBuf[iRegIndex] & 0xFF );
    2b50:	28 81       	ld	r18, Y
    2b52:	21 83       	std	Z+1, r18	; 0x01
		/*Ресурсоемкий расчет курса*/		
		Course_Calc();
	}
}

eMBErrorCode eMBRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
    2b54:	32 96       	adiw	r30, 0x02	; 2

	if( ( usAddress >= REG_INPUT_START )
	&& ( usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS ) )
	{
		iRegIndex = ( int )( usAddress - usRegInputStart );
	        while( usNRegs > 0 )
    2b56:	8e 17       	cp	r24, r30
    2b58:	9f 07       	cpc	r25, r31
    2b5a:	a1 f7       	brne	.-24     	; 0x2b44 <eMBRegInputCB+0x34>
	}
}

eMBErrorCode eMBRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
	eMBErrorCode    eStatus = MB_ENOERR;
    2b5c:	80 e0       	ldi	r24, 0x00	; 0
    2b5e:	05 c0       	rjmp	.+10     	; 0x2b6a <eMBRegInputCB+0x5a>
			usNRegs--;
		}
	}
	else
	{
		eStatus = MB_ENOREG;
    2b60:	81 e0       	ldi	r24, 0x01	; 1
    2b62:	03 c0       	rjmp	.+6      	; 0x2b6a <eMBRegInputCB+0x5a>
    2b64:	81 e0       	ldi	r24, 0x01	; 1
    2b66:	01 c0       	rjmp	.+2      	; 0x2b6a <eMBRegInputCB+0x5a>
	}
}

eMBErrorCode eMBRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
	eMBErrorCode    eStatus = MB_ENOERR;
    2b68:	80 e0       	ldi	r24, 0x00	; 0
	{
		eStatus = MB_ENOREG;
	}

	return eStatus;
}
    2b6a:	df 91       	pop	r29
    2b6c:	cf 91       	pop	r28
    2b6e:	08 95       	ret

00002b70 <eMBRegHoldingCB>:

eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs,
eMBRegisterMode eMode )
{
    2b70:	cf 93       	push	r28
    2b72:	df 93       	push	r29
    2b74:	fc 01       	movw	r30, r24
    eMBErrorCode    eStatus = MB_ENOERR;
    int             iRegIndex;

    if( ( usAddress >= REG_HOLDING_START ) &&
    2b76:	60 3b       	cpi	r22, 0xB0	; 176
    2b78:	34 e0       	ldi	r19, 0x04	; 4
    2b7a:	73 07       	cpc	r23, r19
    2b7c:	08 f4       	brcc	.+2      	; 0x2b80 <eMBRegHoldingCB+0x10>
    2b7e:	45 c0       	rjmp	.+138    	; 0x2c0a <eMBRegHoldingCB+0x9a>
    2b80:	ca 01       	movw	r24, r20
    2b82:	86 0f       	add	r24, r22
    2b84:	97 1f       	adc	r25, r23
    2b86:	8c 3d       	cpi	r24, 0xDC	; 220
    2b88:	95 40       	sbci	r25, 0x05	; 5
    2b8a:	08 f0       	brcs	.+2      	; 0x2b8e <eMBRegHoldingCB+0x1e>
    2b8c:	40 c0       	rjmp	.+128    	; 0x2c0e <eMBRegHoldingCB+0x9e>
    ( usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS ) )
    {
        iRegIndex = ( int )( usAddress - usRegHoldingStart );
        switch ( eMode )
    2b8e:	22 23       	and	r18, r18
    2b90:	39 f0       	breq	.+14     	; 0x2ba0 <eMBRegHoldingCB+0x30>
    2b92:	21 30       	cpi	r18, 0x01	; 1
    2b94:	f1 f5       	brne	.+124    	; 0x2c12 <eMBRegHoldingCB+0xa2>
            break;

            /* Update current register values with new values from the
            * protocol stack. */
            case MB_REG_WRITE:
            while( usNRegs > 0 )
    2b96:	41 15       	cp	r20, r1
    2b98:	51 05       	cpc	r21, r1
    2b9a:	e9 f4       	brne	.+58     	; 0x2bd6 <eMBRegHoldingCB+0x66>

eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs,
eMBRegisterMode eMode )
{
    eMBErrorCode    eStatus = MB_ENOERR;
    2b9c:	80 e0       	ldi	r24, 0x00	; 0
    2b9e:	3c c0       	rjmp	.+120    	; 0x2c18 <eMBRegHoldingCB+0xa8>
        iRegIndex = ( int )( usAddress - usRegHoldingStart );
        switch ( eMode )
        {
            /* Pass current register values to the protocol stack. */
            case MB_REG_READ:
            while( usNRegs > 0 )
    2ba0:	41 15       	cp	r20, r1
    2ba2:	51 05       	cpc	r21, r1
    2ba4:	c1 f1       	breq	.+112    	; 0x2c16 <eMBRegHoldingCB+0xa6>

	return eStatus;
}

eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs,
    2ba6:	db 01       	movw	r26, r22
    2ba8:	aa 0f       	add	r26, r26
    2baa:	bb 1f       	adc	r27, r27
    2bac:	ad 5c       	subi	r26, 0xCD	; 205
    2bae:	b7 40       	sbci	r27, 0x07	; 7
    2bb0:	ca 01       	movw	r24, r20
    2bb2:	88 0f       	add	r24, r24
    2bb4:	99 1f       	adc	r25, r25
    2bb6:	8e 0f       	add	r24, r30
    2bb8:	9f 1f       	adc	r25, r31
    2bba:	ed 01       	movw	r28, r26
        {
            /* Pass current register values to the protocol stack. */
            case MB_REG_READ:
            while( usNRegs > 0 )
            {
                *pucRegBuffer++ = ( UCHAR ) ( usRegHoldingBuf[iRegIndex] >> 8 );
    2bbc:	11 96       	adiw	r26, 0x01	; 1
    2bbe:	2c 91       	ld	r18, X
    2bc0:	11 97       	sbiw	r26, 0x01	; 1
    2bc2:	20 83       	st	Z, r18
    2bc4:	12 96       	adiw	r26, 0x02	; 2
                *pucRegBuffer++ = ( UCHAR ) ( usRegHoldingBuf[iRegIndex] & 0xFF );
    2bc6:	28 81       	ld	r18, Y
    2bc8:	21 83       	std	Z+1, r18	; 0x01

	return eStatus;
}

eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs,
    2bca:	32 96       	adiw	r30, 0x02	; 2
        iRegIndex = ( int )( usAddress - usRegHoldingStart );
        switch ( eMode )
        {
            /* Pass current register values to the protocol stack. */
            case MB_REG_READ:
            while( usNRegs > 0 )
    2bcc:	e8 17       	cp	r30, r24
    2bce:	f9 07       	cpc	r31, r25
    2bd0:	a1 f7       	brne	.-24     	; 0x2bba <eMBRegHoldingCB+0x4a>

eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs,
eMBRegisterMode eMode )
{
    eMBErrorCode    eStatus = MB_ENOERR;
    2bd2:	80 e0       	ldi	r24, 0x00	; 0
    2bd4:	21 c0       	rjmp	.+66     	; 0x2c18 <eMBRegHoldingCB+0xa8>

	return eStatus;
}

eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs,
    2bd6:	eb 01       	movw	r28, r22
    2bd8:	cc 0f       	add	r28, r28
    2bda:	dd 1f       	adc	r29, r29
    2bdc:	cd 5c       	subi	r28, 0xCD	; 205
    2bde:	d7 40       	sbci	r29, 0x07	; 7
    2be0:	9a 01       	movw	r18, r20
    2be2:	22 0f       	add	r18, r18
    2be4:	33 1f       	adc	r19, r19
    2be6:	2e 0f       	add	r18, r30
    2be8:	3f 1f       	adc	r19, r31
            /* Update current register values with new values from the
            * protocol stack. */
            case MB_REG_WRITE:
            while( usNRegs > 0 )
            {
                usRegHoldingBuf[iRegIndex] = *pucRegBuffer++ << 8;
    2bea:	b0 81       	ld	r27, Z
    2bec:	a0 e0       	ldi	r26, 0x00	; 0
    2bee:	b9 83       	std	Y+1, r27	; 0x01
    2bf0:	a8 83       	st	Y, r26
                usRegHoldingBuf[iRegIndex] |= *pucRegBuffer++;
    2bf2:	81 81       	ldd	r24, Z+1	; 0x01

	return eStatus;
}

eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs,
    2bf4:	32 96       	adiw	r30, 0x02	; 2
            * protocol stack. */
            case MB_REG_WRITE:
            while( usNRegs > 0 )
            {
                usRegHoldingBuf[iRegIndex] = *pucRegBuffer++ << 8;
                usRegHoldingBuf[iRegIndex] |= *pucRegBuffer++;
    2bf6:	ad 01       	movw	r20, r26
    2bf8:	48 2b       	or	r20, r24
    2bfa:	ca 01       	movw	r24, r20
    2bfc:	89 93       	st	Y+, r24
    2bfe:	99 93       	st	Y+, r25
            break;

            /* Update current register values with new values from the
            * protocol stack. */
            case MB_REG_WRITE:
            while( usNRegs > 0 )
    2c00:	e2 17       	cp	r30, r18
    2c02:	f3 07       	cpc	r31, r19
    2c04:	91 f7       	brne	.-28     	; 0x2bea <eMBRegHoldingCB+0x7a>

eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs,
eMBRegisterMode eMode )
{
    eMBErrorCode    eStatus = MB_ENOERR;
    2c06:	80 e0       	ldi	r24, 0x00	; 0
    2c08:	07 c0       	rjmp	.+14     	; 0x2c18 <eMBRegHoldingCB+0xa8>
            }
        }
    }
    else
    {
        eStatus = MB_ENOREG;
    2c0a:	81 e0       	ldi	r24, 0x01	; 1
    2c0c:	05 c0       	rjmp	.+10     	; 0x2c18 <eMBRegHoldingCB+0xa8>
    2c0e:	81 e0       	ldi	r24, 0x01	; 1
    2c10:	03 c0       	rjmp	.+6      	; 0x2c18 <eMBRegHoldingCB+0xa8>

eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs,
eMBRegisterMode eMode )
{
    eMBErrorCode    eStatus = MB_ENOERR;
    2c12:	80 e0       	ldi	r24, 0x00	; 0
    2c14:	01 c0       	rjmp	.+2      	; 0x2c18 <eMBRegHoldingCB+0xa8>
    2c16:	80 e0       	ldi	r24, 0x00	; 0
    else
    {
        eStatus = MB_ENOREG;
    }
    return eStatus;
}
    2c18:	df 91       	pop	r29
    2c1a:	cf 91       	pop	r28
    2c1c:	08 95       	ret

00002c1e <eMBRegCoilsCB>:
eMBErrorCode
eMBRegCoilsCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNCoils,
eMBRegisterMode eMode )
{
    return MB_ENOREG;
}
    2c1e:	81 e0       	ldi	r24, 0x01	; 1
    2c20:	08 95       	ret

00002c22 <eMBRegDiscreteCB>:

eMBErrorCode
eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete )
{
    return MB_ENOREG;
}
    2c22:	81 e0       	ldi	r24, 0x01	; 1
    2c24:	08 95       	ret

00002c26 <_Z9SetMotorsPf>:

uint8_t motor_index = 0;
volatile uint16_t counter[CHANNELS_COUNT];

void SetMotors(float* motors)
{
    2c26:	cf 92       	push	r12
    2c28:	df 92       	push	r13
    2c2a:	ef 92       	push	r14
    2c2c:	ff 92       	push	r15
    2c2e:	0f 93       	push	r16
    2c30:	1f 93       	push	r17
    2c32:	cf 93       	push	r28
    2c34:	df 93       	push	r29
    2c36:	08 2f       	mov	r16, r24
    2c38:	19 2f       	mov	r17, r25
    2c3a:	c0 e0       	ldi	r28, 0x00	; 0
    2c3c:	d0 e0       	ldi	r29, 0x00	; 0
        {
            counter[i] = LOW;
        }
        else if (sum > HIGH)
        {
            counter[i] = HIGH;
    2c3e:	0f 2e       	mov	r0, r31
    2c40:	c1 2c       	mov	r12, r1
    2c42:	fd e7       	ldi	r31, 0x7D	; 125
    2c44:	df 2e       	mov	r13, r31
    2c46:	f0 2d       	mov	r31, r0
        {
            counter[i] = sum;
        }
        else if (sum < LOW)
        {
            counter[i] = LOW;
    2c48:	0f 2e       	mov	r0, r31
    2c4a:	f0 e8       	ldi	r31, 0x80	; 128
    2c4c:	ef 2e       	mov	r14, r31
    2c4e:	fe e3       	ldi	r31, 0x3E	; 62
    2c50:	ff 2e       	mov	r15, r31
    2c52:	f0 2d       	mov	r31, r0

void SetMotors(float* motors)
{
    for (uint8_t i = 0; i < MOTORS_COUNT; ++i)
    {
        uint16_t sum = (uint16_t)motors[i];
    2c54:	f8 01       	movw	r30, r16
    2c56:	61 91       	ld	r22, Z+
    2c58:	71 91       	ld	r23, Z+
    2c5a:	81 91       	ld	r24, Z+
    2c5c:	91 91       	ld	r25, Z+
    2c5e:	8f 01       	movw	r16, r30
    2c60:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <__fixunssfsi>

        if (sum > LOW && sum < HIGH)
    2c64:	cb 01       	movw	r24, r22
    2c66:	81 58       	subi	r24, 0x81	; 129
    2c68:	9e 43       	sbci	r25, 0x3E	; 62
    2c6a:	8f 37       	cpi	r24, 0x7F	; 127
    2c6c:	9e 43       	sbci	r25, 0x3E	; 62
    2c6e:	40 f4       	brcc	.+16     	; 0x2c80 <_Z9SetMotorsPf+0x5a>
        {
            counter[i] = sum;
    2c70:	fe 01       	movw	r30, r28
    2c72:	ee 0f       	add	r30, r30
    2c74:	ff 1f       	adc	r31, r31
    2c76:	e1 55       	subi	r30, 0x51	; 81
    2c78:	fb 4f       	sbci	r31, 0xFB	; 251
    2c7a:	71 83       	std	Z+1, r23	; 0x01
    2c7c:	60 83       	st	Z, r22
    2c7e:	16 c0       	rjmp	.+44     	; 0x2cac <_Z9SetMotorsPf+0x86>
        }
        else if (sum < LOW)
    2c80:	60 38       	cpi	r22, 0x80	; 128
    2c82:	2e e3       	ldi	r18, 0x3E	; 62
    2c84:	72 07       	cpc	r23, r18
    2c86:	40 f4       	brcc	.+16     	; 0x2c98 <_Z9SetMotorsPf+0x72>
        {
            counter[i] = LOW;
    2c88:	fe 01       	movw	r30, r28
    2c8a:	ee 0f       	add	r30, r30
    2c8c:	ff 1f       	adc	r31, r31
    2c8e:	e1 55       	subi	r30, 0x51	; 81
    2c90:	fb 4f       	sbci	r31, 0xFB	; 251
    2c92:	f1 82       	std	Z+1, r15	; 0x01
    2c94:	e0 82       	st	Z, r14
    2c96:	0a c0       	rjmp	.+20     	; 0x2cac <_Z9SetMotorsPf+0x86>
        }
        else if (sum > HIGH)
    2c98:	61 30       	cpi	r22, 0x01	; 1
    2c9a:	7d 47       	sbci	r23, 0x7D	; 125
    2c9c:	38 f0       	brcs	.+14     	; 0x2cac <_Z9SetMotorsPf+0x86>
        {
            counter[i] = HIGH;
    2c9e:	fe 01       	movw	r30, r28
    2ca0:	ee 0f       	add	r30, r30
    2ca2:	ff 1f       	adc	r31, r31
    2ca4:	e1 55       	subi	r30, 0x51	; 81
    2ca6:	fb 4f       	sbci	r31, 0xFB	; 251
    2ca8:	d1 82       	std	Z+1, r13	; 0x01
    2caa:	c0 82       	st	Z, r12
    2cac:	21 96       	adiw	r28, 0x01	; 1
uint8_t motor_index = 0;
volatile uint16_t counter[CHANNELS_COUNT];

void SetMotors(float* motors)
{
    for (uint8_t i = 0; i < MOTORS_COUNT; ++i)
    2cae:	c4 30       	cpi	r28, 0x04	; 4
    2cb0:	d1 05       	cpc	r29, r1
    2cb2:	81 f6       	brne	.-96     	; 0x2c54 <_Z9SetMotorsPf+0x2e>
        else if (sum > HIGH)
        {
            counter[i] = HIGH;
        }
    }
}
    2cb4:	df 91       	pop	r29
    2cb6:	cf 91       	pop	r28
    2cb8:	1f 91       	pop	r17
    2cba:	0f 91       	pop	r16
    2cbc:	ff 90       	pop	r15
    2cbe:	ef 90       	pop	r14
    2cc0:	df 90       	pop	r13
    2cc2:	cf 90       	pop	r12
    2cc4:	08 95       	ret

00002cc6 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    2cc6:	1f 92       	push	r1
    2cc8:	0f 92       	push	r0
    2cca:	0f b6       	in	r0, 0x3f	; 63
    2ccc:	0f 92       	push	r0
    2cce:	11 24       	eor	r1, r1
    2cd0:	8f 93       	push	r24
    2cd2:	9f 93       	push	r25
    2cd4:	ef 93       	push	r30
    2cd6:	ff 93       	push	r31
    
    if (motor_index <= 7)
    2cd8:	e0 91 bf 04 	lds	r30, 0x04BF
    2cdc:	e8 30       	cpi	r30, 0x08	; 8
    2cde:	50 f4       	brcc	.+20     	; 0x2cf4 <__vector_7+0x2e>
    {
        OCR1B = counter[motor_index];
    2ce0:	f0 e0       	ldi	r31, 0x00	; 0
    2ce2:	ee 0f       	add	r30, r30
    2ce4:	ff 1f       	adc	r31, r31
    2ce6:	e1 55       	subi	r30, 0x51	; 81
    2ce8:	fb 4f       	sbci	r31, 0xFB	; 251
    2cea:	80 81       	ld	r24, Z
    2cec:	91 81       	ldd	r25, Z+1	; 0x01
    2cee:	99 bd       	out	0x29, r25	; 41
    2cf0:	88 bd       	out	0x28, r24	; 40
    2cf2:	02 c0       	rjmp	.+4      	; 0x2cf8 <__vector_7+0x32>
    }
    else
    {
        OCR1B = 0;
    2cf4:	19 bc       	out	0x29, r1	; 41
    2cf6:	18 bc       	out	0x28, r1	; 40
    }
    
}
    2cf8:	ff 91       	pop	r31
    2cfa:	ef 91       	pop	r30
    2cfc:	9f 91       	pop	r25
    2cfe:	8f 91       	pop	r24
    2d00:	0f 90       	pop	r0
    2d02:	0f be       	out	0x3f, r0	; 63
    2d04:	0f 90       	pop	r0
    2d06:	1f 90       	pop	r1
    2d08:	18 95       	reti

00002d0a <__vector_8>:

ISR(TIMER1_COMPB_vect, ISR_NOBLOCK)
{
    2d0a:	78 94       	sei
    2d0c:	1f 92       	push	r1
    2d0e:	0f 92       	push	r0
    2d10:	0f b6       	in	r0, 0x3f	; 63
    2d12:	0f 92       	push	r0
    2d14:	11 24       	eor	r1, r1
    2d16:	8f 93       	push	r24
    2d18:	9f 93       	push	r25
    if (motor_index <= 7)
    2d1a:	80 91 bf 04 	lds	r24, 0x04BF
    2d1e:	88 30       	cpi	r24, 0x08	; 8
    2d20:	20 f4       	brcc	.+8      	; 0x2d2a <__vector_8+0x20>
    {
        PORTB = motor_index | PORTB & 0b11111000;
    2d22:	98 b3       	in	r25, 0x18	; 24
    2d24:	98 7f       	andi	r25, 0xF8	; 248
    2d26:	89 2b       	or	r24, r25
    2d28:	88 bb       	out	0x18, r24	; 24
    }
    
    if (motor_index >= 9)
    2d2a:	80 91 bf 04 	lds	r24, 0x04BF
    2d2e:	89 30       	cpi	r24, 0x09	; 9
    2d30:	18 f0       	brcs	.+6      	; 0x2d38 <__vector_8+0x2e>
    {
        motor_index = 0;
    2d32:	10 92 bf 04 	sts	0x04BF, r1
    2d36:	03 c0       	rjmp	.+6      	; 0x2d3e <__vector_8+0x34>
    }
    else
    {
        motor_index++;
    2d38:	8f 5f       	subi	r24, 0xFF	; 255
    2d3a:	80 93 bf 04 	sts	0x04BF, r24
    }
    2d3e:	9f 91       	pop	r25
    2d40:	8f 91       	pop	r24
    2d42:	0f 90       	pop	r0
    2d44:	0f be       	out	0x3f, r0	; 63
    2d46:	0f 90       	pop	r0
    2d48:	1f 90       	pop	r1
    2d4a:	18 95       	reti

00002d4c <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
    2d4c:	ef 92       	push	r14
    2d4e:	0f 93       	push	r16
    2d50:	1f 93       	push	r17
    2d52:	cf 93       	push	r28
    2d54:	df 93       	push	r29
    2d56:	c8 2f       	mov	r28, r24
    2d58:	86 2f       	mov	r24, r22
    2d5a:	64 2f       	mov	r22, r20
    2d5c:	a9 01       	movw	r20, r18
    2d5e:	98 01       	movw	r18, r16
    eMBErrorCode    eStatus = MB_ENOERR;

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
    2d60:	98 2f       	mov	r25, r24
    2d62:	91 50       	subi	r25, 0x01	; 1
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
    eMBErrorCode    eStatus = MB_ENOERR;

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
    2d64:	97 3f       	cpi	r25, 0xF7	; 247
    2d66:	08 f0       	brcs	.+2      	; 0x2d6a <eMBInit+0x1e>
    2d68:	7b c0       	rjmp	.+246    	; 0x2e60 <eMBInit+0x114>
    {
        eStatus = MB_EINVAL;
    }
    else
    {
        ucMBAddress = ucSlaveAddress;
    2d6a:	80 93 c0 04 	sts	0x04C0, r24

        switch ( eMode )
    2d6e:	cc 23       	and	r28, r28
    2d70:	21 f0       	breq	.+8      	; 0x2d7a <eMBInit+0x2e>
    2d72:	c1 30       	cpi	r28, 0x01	; 1
    2d74:	09 f0       	breq	.+2      	; 0x2d78 <eMBInit+0x2c>
    2d76:	67 c0       	rjmp	.+206    	; 0x2e46 <eMBInit+0xfa>
    2d78:	33 c0       	rjmp	.+102    	; 0x2de0 <eMBInit+0x94>
        {
#if MB_RTU_ENABLED > 0
        case MB_RTU:
            pvMBFrameStartCur = eMBRTUStart;
    2d7a:	ea e3       	ldi	r30, 0x3A	; 58
    2d7c:	fd e1       	ldi	r31, 0x1D	; 29
    2d7e:	f0 93 c2 04 	sts	0x04C2, r31
    2d82:	e0 93 c1 04 	sts	0x04C1, r30
            pvMBFrameStopCur = eMBRTUStop;
    2d86:	e5 e4       	ldi	r30, 0x45	; 69
    2d88:	fd e1       	ldi	r31, 0x1D	; 29
    2d8a:	f0 93 c4 04 	sts	0x04C4, r31
    2d8e:	e0 93 c3 04 	sts	0x04C3, r30
            peMBFrameSendCur = eMBRTUSend;
    2d92:	e6 e8       	ldi	r30, 0x86	; 134
    2d94:	fd e1       	ldi	r31, 0x1D	; 29
    2d96:	f0 93 c6 04 	sts	0x04C6, r31
    2d9a:	e0 93 c5 04 	sts	0x04C5, r30
            peMBFrameReceiveCur = eMBRTUReceive;
    2d9e:	ee e4       	ldi	r30, 0x4E	; 78
    2da0:	fd e1       	ldi	r31, 0x1D	; 29
    2da2:	f0 93 c8 04 	sts	0x04C8, r31
    2da6:	e0 93 c7 04 	sts	0x04C7, r30
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
    2daa:	10 92 ca 04 	sts	0x04CA, r1
    2dae:	10 92 c9 04 	sts	0x04C9, r1
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
    2db2:	e2 ed       	ldi	r30, 0xD2	; 210
    2db4:	fd e1       	ldi	r31, 0x1D	; 29
    2db6:	f0 93 a1 06 	sts	0x06A1, r31
    2dba:	e0 93 a0 06 	sts	0x06A0, r30
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
    2dbe:	e4 e2       	ldi	r30, 0x24	; 36
    2dc0:	fe e1       	ldi	r31, 0x1E	; 30
    2dc2:	f0 93 9d 06 	sts	0x069D, r31
    2dc6:	e0 93 9c 06 	sts	0x069C, r30
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
    2dca:	e2 e6       	ldi	r30, 0x62	; 98
    2dcc:	fe e1       	ldi	r31, 0x1E	; 30
    2dce:	f0 93 9f 06 	sts	0x069F, r31
    2dd2:	e0 93 9e 06 	sts	0x069E, r30

            eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
    2dd6:	0e 2d       	mov	r16, r14
    2dd8:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <eMBRTUInit>
    2ddc:	d8 2f       	mov	r29, r24
            break;
    2dde:	34 c0       	rjmp	.+104    	; 0x2e48 <eMBInit+0xfc>
#endif
#if MB_ASCII_ENABLED > 0
        case MB_ASCII:
            pvMBFrameStartCur = eMBASCIIStart;
    2de0:	e0 e2       	ldi	r30, 0x20	; 32
    2de2:	f8 e1       	ldi	r31, 0x18	; 24
    2de4:	f0 93 c2 04 	sts	0x04C2, r31
    2de8:	e0 93 c1 04 	sts	0x04C1, r30
            pvMBFrameStopCur = eMBASCIIStop;
    2dec:	ec e2       	ldi	r30, 0x2C	; 44
    2dee:	f8 e1       	ldi	r31, 0x18	; 24
    2df0:	f0 93 c4 04 	sts	0x04C4, r31
    2df4:	e0 93 c3 04 	sts	0x04C3, r30
            peMBFrameSendCur = eMBASCIISend;
    2df8:	ed e6       	ldi	r30, 0x6D	; 109
    2dfa:	f8 e1       	ldi	r31, 0x18	; 24
    2dfc:	f0 93 c6 04 	sts	0x04C6, r31
    2e00:	e0 93 c5 04 	sts	0x04C5, r30
            peMBFrameReceiveCur = eMBASCIIReceive;
    2e04:	e5 e3       	ldi	r30, 0x35	; 53
    2e06:	f8 e1       	ldi	r31, 0x18	; 24
    2e08:	f0 93 c8 04 	sts	0x04C8, r31
    2e0c:	e0 93 c7 04 	sts	0x04C7, r30
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
    2e10:	10 92 ca 04 	sts	0x04CA, r1
    2e14:	10 92 c9 04 	sts	0x04C9, r1
            pxMBFrameCBByteReceived = xMBASCIIReceiveFSM;
    2e18:	ea ea       	ldi	r30, 0xAA	; 170
    2e1a:	f8 e1       	ldi	r31, 0x18	; 24
    2e1c:	f0 93 a1 06 	sts	0x06A1, r31
    2e20:	e0 93 a0 06 	sts	0x06A0, r30
            pxMBFrameCBTransmitterEmpty = xMBASCIITransmitFSM;
    2e24:	ef e4       	ldi	r30, 0x4F	; 79
    2e26:	f9 e1       	ldi	r31, 0x19	; 25
    2e28:	f0 93 9d 06 	sts	0x069D, r31
    2e2c:	e0 93 9c 06 	sts	0x069C, r30
            pxMBPortCBTimerExpired = xMBASCIITimerT1SExpired;
    2e30:	e5 ed       	ldi	r30, 0xD5	; 213
    2e32:	f9 e1       	ldi	r31, 0x19	; 25
    2e34:	f0 93 9f 06 	sts	0x069F, r31
    2e38:	e0 93 9e 06 	sts	0x069E, r30

            eStatus = eMBASCIIInit( ucMBAddress, ucPort, ulBaudRate, eParity );
    2e3c:	0e 2d       	mov	r16, r14
    2e3e:	0e 94 05 18 	call	0x300a	; 0x300a <eMBASCIIInit>
    2e42:	d8 2f       	mov	r29, r24
            break;
    2e44:	01 c0       	rjmp	.+2      	; 0x2e48 <eMBInit+0xfc>
#endif
        default:
            eStatus = MB_EINVAL;
    2e46:	d2 e0       	ldi	r29, 0x02	; 2
        }

        if( eStatus == MB_ENOERR )
    2e48:	d1 11       	cpse	r29, r1
    2e4a:	0d c0       	rjmp	.+26     	; 0x2e66 <eMBInit+0x11a>
        {
            if( !xMBPortEventInit(  ) )
    2e4c:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <xMBPortEventInit>
    2e50:	88 23       	and	r24, r24
    2e52:	41 f0       	breq	.+16     	; 0x2e64 <eMBInit+0x118>
                /* port dependent event module initalization failed. */
                eStatus = MB_EPORTERR;
            }
            else
            {
                eMBCurrentMode = eMode;
    2e54:	c0 93 cb 04 	sts	0x04CB, r28
                eMBState = STATE_DISABLED;
    2e58:	81 e0       	ldi	r24, 0x01	; 1
    2e5a:	80 93 60 00 	sts	0x0060, r24
    2e5e:	03 c0       	rjmp	.+6      	; 0x2e66 <eMBInit+0x11a>

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
    {
        eStatus = MB_EINVAL;
    2e60:	d2 e0       	ldi	r29, 0x02	; 2
    2e62:	01 c0       	rjmp	.+2      	; 0x2e66 <eMBInit+0x11a>
        if( eStatus == MB_ENOERR )
        {
            if( !xMBPortEventInit(  ) )
            {
                /* port dependent event module initalization failed. */
                eStatus = MB_EPORTERR;
    2e64:	d3 e0       	ldi	r29, 0x03	; 3
                eMBState = STATE_DISABLED;
            }
        }
    }
    return eStatus;
}
    2e66:	8d 2f       	mov	r24, r29
    2e68:	df 91       	pop	r29
    2e6a:	cf 91       	pop	r28
    2e6c:	1f 91       	pop	r17
    2e6e:	0f 91       	pop	r16
    2e70:	ef 90       	pop	r14
    2e72:	08 95       	ret

00002e74 <eMBEnable>:
eMBErrorCode
eMBEnable( void )
{
    eMBErrorCode    eStatus = MB_ENOERR;

    if( eMBState == STATE_DISABLED )
    2e74:	80 91 60 00 	lds	r24, 0x0060
    2e78:	81 30       	cpi	r24, 0x01	; 1
    2e7a:	49 f4       	brne	.+18     	; 0x2e8e <eMBEnable+0x1a>
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
    2e7c:	e0 91 c1 04 	lds	r30, 0x04C1
    2e80:	f0 91 c2 04 	lds	r31, 0x04C2
    2e84:	09 95       	icall
        eMBState = STATE_ENABLED;
    2e86:	10 92 60 00 	sts	0x0060, r1
}

eMBErrorCode
eMBEnable( void )
{
    eMBErrorCode    eStatus = MB_ENOERR;
    2e8a:	80 e0       	ldi	r24, 0x00	; 0
    2e8c:	08 95       	ret
        pvMBFrameStartCur(  );
        eMBState = STATE_ENABLED;
    }
    else
    {
        eStatus = MB_EILLSTATE;
    2e8e:	86 e0       	ldi	r24, 0x06	; 6
    }
    return eStatus;
}
    2e90:	08 95       	ret

00002e92 <eMBPoll>:
    return eStatus;
}

eMBErrorCode
eMBPoll( void )
{
    2e92:	cf 93       	push	r28
    2e94:	df 93       	push	r29
    2e96:	1f 92       	push	r1
    2e98:	cd b7       	in	r28, 0x3d	; 61
    2e9a:	de b7       	in	r29, 0x3e	; 62
    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
    2e9c:	80 91 60 00 	lds	r24, 0x0060
    2ea0:	81 11       	cpse	r24, r1
    2ea2:	88 c0       	rjmp	.+272    	; 0x2fb4 <eMBPoll+0x122>
        return MB_EILLSTATE;
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
    2ea4:	ce 01       	movw	r24, r28
    2ea6:	01 96       	adiw	r24, 0x01	; 1
    2ea8:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <xMBPortEventGet>
    2eac:	81 30       	cpi	r24, 0x01	; 1
    2eae:	09 f0       	breq	.+2      	; 0x2eb2 <eMBPoll+0x20>
    2eb0:	83 c0       	rjmp	.+262    	; 0x2fb8 <eMBPoll+0x126>
    {
        switch ( eEvent )
    2eb2:	89 81       	ldd	r24, Y+1	; 0x01
    2eb4:	81 30       	cpi	r24, 0x01	; 1
    2eb6:	21 f0       	breq	.+8      	; 0x2ec0 <eMBPoll+0x2e>
    2eb8:	82 30       	cpi	r24, 0x02	; 2
    2eba:	09 f0       	breq	.+2      	; 0x2ebe <eMBPoll+0x2c>
    2ebc:	7f c0       	rjmp	.+254    	; 0x2fbc <eMBPoll+0x12a>
    2ebe:	1a c0       	rjmp	.+52     	; 0x2ef4 <eMBPoll+0x62>
        {
        case EV_READY:
            break;

        case EV_FRAME_RECEIVED:
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
    2ec0:	e0 91 c7 04 	lds	r30, 0x04C7
    2ec4:	f0 91 c8 04 	lds	r31, 0x04C8
    2ec8:	4f ec       	ldi	r20, 0xCF	; 207
    2eca:	54 e0       	ldi	r21, 0x04	; 4
    2ecc:	6d ec       	ldi	r22, 0xCD	; 205
    2ece:	74 e0       	ldi	r23, 0x04	; 4
    2ed0:	8c ec       	ldi	r24, 0xCC	; 204
    2ed2:	94 e0       	ldi	r25, 0x04	; 4
    2ed4:	09 95       	icall
            if( eStatus == MB_ENOERR )
    2ed6:	81 11       	cpse	r24, r1
    2ed8:	73 c0       	rjmp	.+230    	; 0x2fc0 <eMBPoll+0x12e>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
    2eda:	80 91 cc 04 	lds	r24, 0x04CC
    2ede:	90 91 c0 04 	lds	r25, 0x04C0
    2ee2:	89 17       	cp	r24, r25
    2ee4:	11 f0       	breq	.+4      	; 0x2eea <eMBPoll+0x58>
    2ee6:	81 11       	cpse	r24, r1
    2ee8:	6d c0       	rjmp	.+218    	; 0x2fc4 <eMBPoll+0x132>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );
    2eea:	82 e0       	ldi	r24, 0x02	; 2
    2eec:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <xMBPortEventPost>

        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
    2ef0:	80 e0       	ldi	r24, 0x00	; 0
    2ef2:	6b c0       	rjmp	.+214    	; 0x2fca <eMBPoll+0x138>
                }
            }
            break;

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
    2ef4:	a0 91 cd 04 	lds	r26, 0x04CD
    2ef8:	b0 91 ce 04 	lds	r27, 0x04CE
    2efc:	9c 91       	ld	r25, X
    2efe:	90 93 d1 04 	sts	0x04D1, r25
            eException = MB_EX_ILLEGAL_FUNCTION;
    2f02:	81 e0       	ldi	r24, 0x01	; 1
    2f04:	80 93 d2 04 	sts	0x04D2, r24
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
    2f08:	80 91 61 00 	lds	r24, 0x0061
    2f0c:	88 23       	and	r24, r24
    2f0e:	31 f1       	breq	.+76     	; 0x2f5c <eMBPoll+0xca>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
    2f10:	98 17       	cp	r25, r24
    2f12:	51 f0       	breq	.+20     	; 0x2f28 <eMBPoll+0x96>
    2f14:	e4 e6       	ldi	r30, 0x64	; 100
    2f16:	f0 e0       	ldi	r31, 0x00	; 0
            break;

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
            eException = MB_EX_ILLEGAL_FUNCTION;
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
    2f18:	21 e0       	ldi	r18, 0x01	; 1
    2f1a:	30 e0       	ldi	r19, 0x00	; 0
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
    2f1c:	80 81       	ld	r24, Z
    2f1e:	88 23       	and	r24, r24
    2f20:	e9 f0       	breq	.+58     	; 0x2f5c <eMBPoll+0xca>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
    2f22:	98 13       	cpse	r25, r24
    2f24:	15 c0       	rjmp	.+42     	; 0x2f50 <eMBPoll+0xbe>
    2f26:	02 c0       	rjmp	.+4      	; 0x2f2c <eMBPoll+0x9a>
            break;

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
            eException = MB_EX_ILLEGAL_FUNCTION;
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
    2f28:	20 e0       	ldi	r18, 0x00	; 0
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
    2f2c:	f9 01       	movw	r30, r18
    2f2e:	ee 0f       	add	r30, r30
    2f30:	ff 1f       	adc	r31, r31
    2f32:	2e 0f       	add	r18, r30
    2f34:	3f 1f       	adc	r19, r31
    2f36:	f9 01       	movw	r30, r18
    2f38:	ef 59       	subi	r30, 0x9F	; 159
    2f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3c:	01 80       	ldd	r0, Z+1	; 0x01
    2f3e:	f2 81       	ldd	r31, Z+2	; 0x02
    2f40:	e0 2d       	mov	r30, r0
    2f42:	6f ec       	ldi	r22, 0xCF	; 207
    2f44:	74 e0       	ldi	r23, 0x04	; 4
    2f46:	cd 01       	movw	r24, r26
    2f48:	09 95       	icall
    2f4a:	80 93 d2 04 	sts	0x04D2, r24
                    break;
    2f4e:	06 c0       	rjmp	.+12     	; 0x2f5c <eMBPoll+0xca>
            break;

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
            eException = MB_EX_ILLEGAL_FUNCTION;
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
    2f50:	2f 5f       	subi	r18, 0xFF	; 255
    2f52:	3f 4f       	sbci	r19, 0xFF	; 255
    2f54:	33 96       	adiw	r30, 0x03	; 3
    2f56:	20 31       	cpi	r18, 0x10	; 16
    2f58:	31 05       	cpc	r19, r1
    2f5a:	01 f7       	brne	.-64     	; 0x2f1c <eMBPoll+0x8a>
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
    2f5c:	80 91 cc 04 	lds	r24, 0x04CC
    2f60:	88 23       	and	r24, r24
    2f62:	91 f1       	breq	.+100    	; 0x2fc8 <eMBPoll+0x136>
            {
                if( eException != MB_EX_NONE )
    2f64:	80 91 d2 04 	lds	r24, 0x04D2
    2f68:	88 23       	and	r24, r24
    2f6a:	99 f0       	breq	.+38     	; 0x2f92 <eMBPoll+0x100>
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
    2f6c:	e0 91 cd 04 	lds	r30, 0x04CD
    2f70:	f0 91 ce 04 	lds	r31, 0x04CE
    2f74:	90 91 d1 04 	lds	r25, 0x04D1
    2f78:	90 68       	ori	r25, 0x80	; 128
    2f7a:	90 83       	st	Z, r25
                    ucMBFrame[usLength++] = eException;
    2f7c:	e0 91 cd 04 	lds	r30, 0x04CD
    2f80:	f0 91 ce 04 	lds	r31, 0x04CE
    2f84:	81 83       	std	Z+1, r24	; 0x01
    2f86:	82 e0       	ldi	r24, 0x02	; 2
    2f88:	90 e0       	ldi	r25, 0x00	; 0
    2f8a:	90 93 d0 04 	sts	0x04D0, r25
    2f8e:	80 93 cf 04 	sts	0x04CF, r24
                }
                if( ( eMBCurrentMode == MB_ASCII ) && MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS )
                {
                    vMBPortTimersDelay( MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS );
                }                
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
    2f92:	40 91 cf 04 	lds	r20, 0x04CF
    2f96:	50 91 d0 04 	lds	r21, 0x04D0
    2f9a:	60 91 cd 04 	lds	r22, 0x04CD
    2f9e:	70 91 ce 04 	lds	r23, 0x04CE
    2fa2:	e0 91 c5 04 	lds	r30, 0x04C5
    2fa6:	f0 91 c6 04 	lds	r31, 0x04C6
    2faa:	80 91 c0 04 	lds	r24, 0x04C0
    2fae:	09 95       	icall

        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
    2fb0:	80 e0       	ldi	r24, 0x00	; 0
    2fb2:	0b c0       	rjmp	.+22     	; 0x2fca <eMBPoll+0x138>
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
    {
        return MB_EILLSTATE;
    2fb4:	86 e0       	ldi	r24, 0x06	; 6
    2fb6:	09 c0       	rjmp	.+18     	; 0x2fca <eMBPoll+0x138>

        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
    2fb8:	80 e0       	ldi	r24, 0x00	; 0
    2fba:	07 c0       	rjmp	.+14     	; 0x2fca <eMBPoll+0x138>
    2fbc:	80 e0       	ldi	r24, 0x00	; 0
    2fbe:	05 c0       	rjmp	.+10     	; 0x2fca <eMBPoll+0x138>
    2fc0:	80 e0       	ldi	r24, 0x00	; 0
    2fc2:	03 c0       	rjmp	.+6      	; 0x2fca <eMBPoll+0x138>
    2fc4:	80 e0       	ldi	r24, 0x00	; 0
    2fc6:	01 c0       	rjmp	.+2      	; 0x2fca <eMBPoll+0x138>
    2fc8:	80 e0       	ldi	r24, 0x00	; 0
}
    2fca:	0f 90       	pop	r0
    2fcc:	df 91       	pop	r29
    2fce:	cf 91       	pop	r28
    2fd0:	08 95       	ret

00002fd2 <prvucMBBIN2CHAR>:
}

static          UCHAR
prvucMBBIN2CHAR( UCHAR ucByte )
{
    if( ucByte <= 0x09 )
    2fd2:	8a 30       	cpi	r24, 0x0A	; 10
    2fd4:	10 f4       	brcc	.+4      	; 0x2fda <prvucMBBIN2CHAR+0x8>
    {
        return ( UCHAR )( '0' + ucByte );
    2fd6:	80 5d       	subi	r24, 0xD0	; 208
    2fd8:	08 95       	ret
    }
    else if( ( ucByte >= 0x0A ) && ( ucByte <= 0x0F ) )
    2fda:	98 2f       	mov	r25, r24
    2fdc:	9a 50       	subi	r25, 0x0A	; 10
    2fde:	96 30       	cpi	r25, 0x06	; 6
    2fe0:	10 f4       	brcc	.+4      	; 0x2fe6 <prvucMBBIN2CHAR+0x14>
    {
        return ( UCHAR )( ucByte - 0x0A + 'A' );
    2fe2:	89 5c       	subi	r24, 0xC9	; 201
    2fe4:	08 95       	ret
    else
    {
        /* Programming error. */
        assert( 0 );
    }
    return '0';
    2fe6:	80 e3       	ldi	r24, 0x30	; 48
}
    2fe8:	08 95       	ret

00002fea <prvucMBLRC>:


static          UCHAR
prvucMBLRC( UCHAR * pucFrame, USHORT usLen )
{
    2fea:	fc 01       	movw	r30, r24
    UCHAR           ucLRC = 0;  /* LRC char initialized */

    while( usLen-- )
    2fec:	61 15       	cp	r22, r1
    2fee:	71 05       	cpc	r23, r1
    2ff0:	49 f0       	breq	.+18     	; 0x3004 <prvucMBLRC+0x1a>
    return '0';
}


static          UCHAR
prvucMBLRC( UCHAR * pucFrame, USHORT usLen )
    2ff2:	68 0f       	add	r22, r24
    2ff4:	79 1f       	adc	r23, r25
{
    UCHAR           ucLRC = 0;  /* LRC char initialized */
    2ff6:	80 e0       	ldi	r24, 0x00	; 0

    while( usLen-- )
    {
        ucLRC += *pucFrame++;   /* Add buffer byte without carry */
    2ff8:	91 91       	ld	r25, Z+
    2ffa:	89 0f       	add	r24, r25
static          UCHAR
prvucMBLRC( UCHAR * pucFrame, USHORT usLen )
{
    UCHAR           ucLRC = 0;  /* LRC char initialized */

    while( usLen-- )
    2ffc:	e6 17       	cp	r30, r22
    2ffe:	f7 07       	cpc	r31, r23
    3000:	d9 f7       	brne	.-10     	; 0x2ff8 <prvucMBLRC+0xe>
    3002:	01 c0       	rjmp	.+2      	; 0x3006 <prvucMBLRC+0x1c>


static          UCHAR
prvucMBLRC( UCHAR * pucFrame, USHORT usLen )
{
    UCHAR           ucLRC = 0;  /* LRC char initialized */
    3004:	80 e0       	ldi	r24, 0x00	; 0
    }

    /* Return twos complement */
    ucLRC = ( UCHAR ) ( -( ( CHAR ) ucLRC ) );
    return ucLRC;
}
    3006:	81 95       	neg	r24
    3008:	08 95       	ret

0000300a <eMBASCIIInit>:
static volatile UCHAR ucMBLFCharacter;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBASCIIInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
    300a:	0f 93       	push	r16
    300c:	86 2f       	mov	r24, r22
    300e:	ba 01       	movw	r22, r20
    3010:	a9 01       	movw	r20, r18
    eMBErrorCode    eStatus = MB_ENOERR;
    ( void )ucSlaveAddress;
    
    ENTER_CRITICAL_SECTION(  );
    3012:	f8 94       	cli
    ucMBLFCharacter = MB_ASCII_DEFAULT_LF;
    3014:	9a e0       	ldi	r25, 0x0A	; 10
    3016:	90 93 d3 04 	sts	0x04D3, r25

    if( xMBPortSerialInit( ucPort, ulBaudRate, 7, eParity ) != TRUE )
    301a:	27 e0       	ldi	r18, 0x07	; 7
    301c:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <xMBPortSerialInit>
    3020:	81 30       	cpi	r24, 0x01	; 1
    3022:	41 f4       	brne	.+16     	; 0x3034 <eMBASCIIInit+0x2a>
    {
        eStatus = MB_EPORTERR;
    }
    else if( xMBPortTimersInit( MB_ASCII_TIMEOUT_SEC * 20000UL ) != TRUE )
    3024:	80 e2       	ldi	r24, 0x20	; 32
    3026:	9e e4       	ldi	r25, 0x4E	; 78
    3028:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <xMBPortTimersInit>
    302c:	81 30       	cpi	r24, 0x01	; 1
    302e:	21 f4       	brne	.+8      	; 0x3038 <eMBASCIIInit+0x2e>

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBASCIIInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
    eMBErrorCode    eStatus = MB_ENOERR;
    3030:	80 e0       	ldi	r24, 0x00	; 0
    3032:	03 c0       	rjmp	.+6      	; 0x303a <eMBASCIIInit+0x30>
    ENTER_CRITICAL_SECTION(  );
    ucMBLFCharacter = MB_ASCII_DEFAULT_LF;

    if( xMBPortSerialInit( ucPort, ulBaudRate, 7, eParity ) != TRUE )
    {
        eStatus = MB_EPORTERR;
    3034:	83 e0       	ldi	r24, 0x03	; 3
    3036:	01 c0       	rjmp	.+2      	; 0x303a <eMBASCIIInit+0x30>
    }
    else if( xMBPortTimersInit( MB_ASCII_TIMEOUT_SEC * 20000UL ) != TRUE )
    {
        eStatus = MB_EPORTERR;
    3038:	83 e0       	ldi	r24, 0x03	; 3
    }

    EXIT_CRITICAL_SECTION(  );
    303a:	78 94       	sei

    return eStatus;
}
    303c:	0f 91       	pop	r16
    303e:	08 95       	ret

00003040 <eMBASCIIStart>:

void
eMBASCIIStart( void )
{
    ENTER_CRITICAL_SECTION(  );
    3040:	f8 94       	cli
    vMBPortSerialEnable( TRUE, FALSE );
    3042:	60 e0       	ldi	r22, 0x00	; 0
    3044:	81 e0       	ldi	r24, 0x01	; 1
    3046:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <vMBPortSerialEnable>
    eRcvState = STATE_RX_IDLE;
    304a:	10 92 d9 04 	sts	0x04D9, r1
    EXIT_CRITICAL_SECTION(  );
    304e:	78 94       	sei

    /* No special startup required for ASCII. */
    ( void )xMBPortEventPost( EV_READY );
    3050:	80 e0       	ldi	r24, 0x00	; 0
    3052:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <xMBPortEventPost>
    3056:	08 95       	ret

00003058 <eMBASCIIStop>:
}

void
eMBASCIIStop( void )
{
    ENTER_CRITICAL_SECTION(  );
    3058:	f8 94       	cli
    vMBPortSerialEnable( FALSE, FALSE );
    305a:	60 e0       	ldi	r22, 0x00	; 0
    305c:	80 e0       	ldi	r24, 0x00	; 0
    305e:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
    3062:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <vMBPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
    3066:	78 94       	sei
    3068:	08 95       	ret

0000306a <eMBASCIIReceive>:
}

eMBErrorCode
eMBASCIIReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
    306a:	ef 92       	push	r14
    306c:	ff 92       	push	r15
    306e:	0f 93       	push	r16
    3070:	1f 93       	push	r17
    3072:	cf 93       	push	r28
    3074:	df 93       	push	r29
    3076:	7c 01       	movw	r14, r24
    3078:	eb 01       	movw	r28, r22
    307a:	8a 01       	movw	r16, r20
    eMBErrorCode    eStatus = MB_ENOERR;

    ENTER_CRITICAL_SECTION(  );
    307c:	f8 94       	cli
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
    307e:	20 91 d7 04 	lds	r18, 0x04D7
    3082:	30 91 d8 04 	lds	r19, 0x04D8
    3086:	23 30       	cpi	r18, 0x03	; 3
    3088:	31 05       	cpc	r19, r1
    308a:	e0 f0       	brcs	.+56     	; 0x30c4 <eMBASCIIReceive+0x5a>
        && ( prvucMBLRC( ( UCHAR * ) ucASCIIBuf, usRcvBufferPos ) == 0 ) )
    308c:	60 91 d7 04 	lds	r22, 0x04D7
    3090:	70 91 d8 04 	lds	r23, 0x04D8
    3094:	86 ea       	ldi	r24, 0xA6	; 166
    3096:	96 e0       	ldi	r25, 0x06	; 6
    3098:	0e 94 f5 17 	call	0x2fea	; 0x2fea <prvucMBLRC>
    309c:	81 11       	cpse	r24, r1
    309e:	14 c0       	rjmp	.+40     	; 0x30c8 <eMBASCIIReceive+0x5e>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucASCIIBuf[MB_SER_PDU_ADDR_OFF];
    30a0:	80 91 a6 06 	lds	r24, 0x06A6
    30a4:	f7 01       	movw	r30, r14
    30a6:	80 83       	st	Z, r24

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_LRC );
    30a8:	80 91 d7 04 	lds	r24, 0x04D7
    30ac:	90 91 d8 04 	lds	r25, 0x04D8
    30b0:	02 97       	sbiw	r24, 0x02	; 2
    30b2:	f8 01       	movw	r30, r16
    30b4:	91 83       	std	Z+1, r25	; 0x01
    30b6:	80 83       	st	Z, r24

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucASCIIBuf[MB_SER_PDU_PDU_OFF];
    30b8:	87 ea       	ldi	r24, 0xA7	; 167
    30ba:	96 e0       	ldi	r25, 0x06	; 6
    30bc:	99 83       	std	Y+1, r25	; 0x01
    30be:	88 83       	st	Y, r24
}

eMBErrorCode
eMBASCIIReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
    eMBErrorCode    eStatus = MB_ENOERR;
    30c0:	80 e0       	ldi	r24, 0x00	; 0
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_LRC );

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucASCIIBuf[MB_SER_PDU_PDU_OFF];
    30c2:	03 c0       	rjmp	.+6      	; 0x30ca <eMBASCIIReceive+0x60>
    }
    else
    {
        eStatus = MB_EIO;
    30c4:	85 e0       	ldi	r24, 0x05	; 5
    30c6:	01 c0       	rjmp	.+2      	; 0x30ca <eMBASCIIReceive+0x60>
    30c8:	85 e0       	ldi	r24, 0x05	; 5
    }
    EXIT_CRITICAL_SECTION(  );
    30ca:	78 94       	sei
    return eStatus;
}
    30cc:	df 91       	pop	r29
    30ce:	cf 91       	pop	r28
    30d0:	1f 91       	pop	r17
    30d2:	0f 91       	pop	r16
    30d4:	ff 90       	pop	r15
    30d6:	ef 90       	pop	r14
    30d8:	08 95       	ret

000030da <eMBASCIISend>:
eMBASCIISend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
    eMBErrorCode    eStatus = MB_ENOERR;
    UCHAR           usLRC;

    ENTER_CRITICAL_SECTION(  );
    30da:	f8 94       	cli
    /* Check if the receiver is still in idle state. If not we where too
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
    30dc:	90 91 d9 04 	lds	r25, 0x04D9
    30e0:	91 11       	cpse	r25, r1
    30e2:	35 c0       	rjmp	.+106    	; 0x314e <eMBASCIISend+0x74>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
    30e4:	fb 01       	movw	r30, r22
    30e6:	31 97       	sbiw	r30, 0x01	; 1
    30e8:	f0 93 dc 04 	sts	0x04DC, r31
    30ec:	e0 93 db 04 	sts	0x04DB, r30
        usSndBufferCount = 1;
    30f0:	21 e0       	ldi	r18, 0x01	; 1
    30f2:	30 e0       	ldi	r19, 0x00	; 0
    30f4:	30 93 d5 04 	sts	0x04D5, r19
    30f8:	20 93 d4 04 	sts	0x04D4, r18

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
    30fc:	80 83       	st	Z, r24
        usSndBufferCount += usLength;
    30fe:	80 91 d4 04 	lds	r24, 0x04D4
    3102:	90 91 d5 04 	lds	r25, 0x04D5
    3106:	48 0f       	add	r20, r24
    3108:	59 1f       	adc	r21, r25
    310a:	50 93 d5 04 	sts	0x04D5, r21
    310e:	40 93 d4 04 	sts	0x04D4, r20

        /* Calculate LRC checksum for Modbus-Serial-Line-PDU. */
        usLRC = prvucMBLRC( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
    3112:	60 91 d4 04 	lds	r22, 0x04D4
    3116:	70 91 d5 04 	lds	r23, 0x04D5
    311a:	cf 01       	movw	r24, r30
    311c:	0e 94 f5 17 	call	0x2fea	; 0x2fea <prvucMBLRC>
        ucASCIIBuf[usSndBufferCount++] = usLRC;
    3120:	20 91 d4 04 	lds	r18, 0x04D4
    3124:	30 91 d5 04 	lds	r19, 0x04D5
    3128:	f9 01       	movw	r30, r18
    312a:	ea 55       	subi	r30, 0x5A	; 90
    312c:	f9 4f       	sbci	r31, 0xF9	; 249
    312e:	80 83       	st	Z, r24
    3130:	2f 5f       	subi	r18, 0xFF	; 255
    3132:	3f 4f       	sbci	r19, 0xFF	; 255
    3134:	30 93 d5 04 	sts	0x04D5, r19
    3138:	20 93 d4 04 	sts	0x04D4, r18

        /* Activate the transmitter. */
        eSndState = STATE_TX_START;
    313c:	81 e0       	ldi	r24, 0x01	; 1
    313e:	80 93 da 04 	sts	0x04DA, r24
        vMBPortSerialEnable( FALSE, TRUE );
    3142:	61 e0       	ldi	r22, 0x01	; 1
    3144:	80 e0       	ldi	r24, 0x00	; 0
    3146:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <vMBPortSerialEnable>
}

eMBErrorCode
eMBASCIISend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
    eMBErrorCode    eStatus = MB_ENOERR;
    314a:	80 e0       	ldi	r24, 0x00	; 0
    314c:	01 c0       	rjmp	.+2      	; 0x3150 <eMBASCIISend+0x76>
        eSndState = STATE_TX_START;
        vMBPortSerialEnable( FALSE, TRUE );
    }
    else
    {
        eStatus = MB_EIO;
    314e:	85 e0       	ldi	r24, 0x05	; 5
    }
    EXIT_CRITICAL_SECTION(  );
    3150:	78 94       	sei
    return eStatus;
}
    3152:	08 95       	ret

00003154 <xMBASCIIReceiveFSM>:

BOOL
xMBASCIIReceiveFSM( void )
{
    3154:	cf 93       	push	r28
    3156:	df 93       	push	r29
    3158:	1f 92       	push	r1
    315a:	cd b7       	in	r28, 0x3d	; 61
    315c:	de b7       	in	r29, 0x3e	; 62
    UCHAR           ucByte;
    UCHAR           ucResult;

    assert( eSndState == STATE_TX_IDLE );

    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
    315e:	ce 01       	movw	r24, r28
    3160:	01 96       	adiw	r24, 0x01	; 1
    3162:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <xMBPortSerialGetByte>
    switch ( eRcvState )
    3166:	80 91 d9 04 	lds	r24, 0x04D9
    316a:	81 30       	cpi	r24, 0x01	; 1
    316c:	31 f0       	breq	.+12     	; 0x317a <xMBASCIIReceiveFSM+0x26>
    316e:	08 f4       	brcc	.+2      	; 0x3172 <xMBASCIIReceiveFSM+0x1e>
    3170:	7d c0       	rjmp	.+250    	; 0x326c <xMBASCIIReceiveFSM+0x118>
    3172:	82 30       	cpi	r24, 0x02	; 2
    3174:	09 f0       	breq	.+2      	; 0x3178 <xMBASCIIReceiveFSM+0x24>
    3176:	8a c0       	rjmp	.+276    	; 0x328c <xMBASCIIReceiveFSM+0x138>
    3178:	59 c0       	rjmp	.+178    	; 0x322c <xMBASCIIReceiveFSM+0xd8>
         * block. Other characters are part of the data block and their
         * ASCII value is converted back to a binary representation.
         */
    case STATE_RX_RCV:
        /* Enable timer for character timeout. */
        vMBPortTimersEnable(  );
    317a:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <vMBPortTimersEnable>
        if( ucByte == ':' )
    317e:	89 81       	ldd	r24, Y+1	; 0x01
    3180:	8a 33       	cpi	r24, 0x3A	; 58
    3182:	41 f4       	brne	.+16     	; 0x3194 <xMBASCIIReceiveFSM+0x40>
        {
            /* Empty receive buffer. */
            eBytePos = BYTE_HIGH_NIBBLE;
    3184:	10 92 d6 04 	sts	0x04D6, r1
            usRcvBufferPos = 0;
    3188:	10 92 d8 04 	sts	0x04D8, r1
    318c:	10 92 d7 04 	sts	0x04D7, r1
}

BOOL
xMBASCIIReceiveFSM( void )
{
    BOOL            xNeedPoll = FALSE;
    3190:	80 e0       	ldi	r24, 0x00	; 0
    3192:	81 c0       	rjmp	.+258    	; 0x3296 <xMBASCIIReceiveFSM+0x142>
        {
            /* Empty receive buffer. */
            eBytePos = BYTE_HIGH_NIBBLE;
            usRcvBufferPos = 0;
        }
        else if( ucByte == MB_ASCII_DEFAULT_CR )
    3194:	8d 30       	cpi	r24, 0x0D	; 13
    3196:	29 f4       	brne	.+10     	; 0x31a2 <xMBASCIIReceiveFSM+0x4e>
        {
            eRcvState = STATE_RX_WAIT_EOF;
    3198:	82 e0       	ldi	r24, 0x02	; 2
    319a:	80 93 d9 04 	sts	0x04D9, r24
}

BOOL
xMBASCIIReceiveFSM( void )
{
    BOOL            xNeedPoll = FALSE;
    319e:	80 e0       	ldi	r24, 0x00	; 0
    31a0:	7a c0       	rjmp	.+244    	; 0x3296 <xMBASCIIReceiveFSM+0x142>


static          UCHAR
prvucMBCHAR2BIN( UCHAR ucCharacter )
{
    if( ( ucCharacter >= '0' ) && ( ucCharacter <= '9' ) )
    31a2:	28 2f       	mov	r18, r24
    31a4:	20 53       	subi	r18, 0x30	; 48
    31a6:	2a 30       	cpi	r18, 0x0A	; 10
    31a8:	38 f0       	brcs	.+14     	; 0x31b8 <xMBASCIIReceiveFSM+0x64>
    {
        return ( UCHAR )( ucCharacter - '0' );
    }
    else if( ( ucCharacter >= 'A' ) && ( ucCharacter <= 'F' ) )
    31aa:	98 2f       	mov	r25, r24
    31ac:	91 54       	subi	r25, 0x41	; 65
    31ae:	96 30       	cpi	r25, 0x06	; 6
    31b0:	10 f4       	brcc	.+4      	; 0x31b6 <xMBASCIIReceiveFSM+0x62>
    {
        return ( UCHAR )( ucCharacter - 'A' + 0x0A );
    31b2:	27 50       	subi	r18, 0x07	; 7
    31b4:	01 c0       	rjmp	.+2      	; 0x31b8 <xMBASCIIReceiveFSM+0x64>
    }
    else
    {
        return 0xFF;
    31b6:	2f ef       	ldi	r18, 0xFF	; 255
            eRcvState = STATE_RX_WAIT_EOF;
        }
        else
        {
            ucResult = prvucMBCHAR2BIN( ucByte );
            switch ( eBytePos )
    31b8:	80 91 d6 04 	lds	r24, 0x04D6
    31bc:	88 23       	and	r24, r24
    31be:	21 f0       	breq	.+8      	; 0x31c8 <xMBASCIIReceiveFSM+0x74>
    31c0:	81 30       	cpi	r24, 0x01	; 1
    31c2:	09 f0       	breq	.+2      	; 0x31c6 <xMBASCIIReceiveFSM+0x72>
    31c4:	65 c0       	rjmp	.+202    	; 0x3290 <xMBASCIIReceiveFSM+0x13c>
    31c6:	1c c0       	rjmp	.+56     	; 0x3200 <xMBASCIIReceiveFSM+0xac>
            {
                /* High nibble of the byte comes first. We check for
                 * a buffer overflow here. */
            case BYTE_HIGH_NIBBLE:
                if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
    31c8:	80 91 d7 04 	lds	r24, 0x04D7
    31cc:	90 91 d8 04 	lds	r25, 0x04D8
    31d0:	8f 3f       	cpi	r24, 0xFF	; 255
    31d2:	91 05       	cpc	r25, r1
    31d4:	09 f0       	breq	.+2      	; 0x31d8 <xMBASCIIReceiveFSM+0x84>
    31d6:	70 f4       	brcc	.+28     	; 0x31f4 <xMBASCIIReceiveFSM+0xa0>
                {
                    ucASCIIBuf[usRcvBufferPos] = ( UCHAR )( ucResult << 4 );
    31d8:	e0 91 d7 04 	lds	r30, 0x04D7
    31dc:	f0 91 d8 04 	lds	r31, 0x04D8
    31e0:	ea 55       	subi	r30, 0x5A	; 90
    31e2:	f9 4f       	sbci	r31, 0xF9	; 249
    31e4:	22 95       	swap	r18
    31e6:	20 7f       	andi	r18, 0xF0	; 240
    31e8:	20 83       	st	Z, r18
                    eBytePos = BYTE_LOW_NIBBLE;
    31ea:	81 e0       	ldi	r24, 0x01	; 1
    31ec:	80 93 d6 04 	sts	0x04D6, r24
}

BOOL
xMBASCIIReceiveFSM( void )
{
    BOOL            xNeedPoll = FALSE;
    31f0:	80 e0       	ldi	r24, 0x00	; 0
            case BYTE_HIGH_NIBBLE:
                if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
                {
                    ucASCIIBuf[usRcvBufferPos] = ( UCHAR )( ucResult << 4 );
                    eBytePos = BYTE_LOW_NIBBLE;
                    break;
    31f2:	51 c0       	rjmp	.+162    	; 0x3296 <xMBASCIIReceiveFSM+0x142>
                }
                else
                {
                    /* not handled in Modbus specification but seems
                     * a resonable implementation. */
                    eRcvState = STATE_RX_IDLE;
    31f4:	10 92 d9 04 	sts	0x04D9, r1
                    /* Disable previously activated timer because of error state. */
                    vMBPortTimersDisable(  );
    31f8:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <vMBPortTimersDisable>
}

BOOL
xMBASCIIReceiveFSM( void )
{
    BOOL            xNeedPoll = FALSE;
    31fc:	80 e0       	ldi	r24, 0x00	; 0
                     * a resonable implementation. */
                    eRcvState = STATE_RX_IDLE;
                    /* Disable previously activated timer because of error state. */
                    vMBPortTimersDisable(  );
                }
                break;
    31fe:	4b c0       	rjmp	.+150    	; 0x3296 <xMBASCIIReceiveFSM+0x142>

            case BYTE_LOW_NIBBLE:
                ucASCIIBuf[usRcvBufferPos] |= ucResult;
    3200:	e0 91 d7 04 	lds	r30, 0x04D7
    3204:	f0 91 d8 04 	lds	r31, 0x04D8
    3208:	ea 55       	subi	r30, 0x5A	; 90
    320a:	f9 4f       	sbci	r31, 0xF9	; 249
    320c:	80 81       	ld	r24, Z
    320e:	28 2b       	or	r18, r24
    3210:	20 83       	st	Z, r18
                usRcvBufferPos++;
    3212:	80 91 d7 04 	lds	r24, 0x04D7
    3216:	90 91 d8 04 	lds	r25, 0x04D8
    321a:	01 96       	adiw	r24, 0x01	; 1
    321c:	90 93 d8 04 	sts	0x04D8, r25
    3220:	80 93 d7 04 	sts	0x04D7, r24
                eBytePos = BYTE_HIGH_NIBBLE;
    3224:	10 92 d6 04 	sts	0x04D6, r1
}

BOOL
xMBASCIIReceiveFSM( void )
{
    BOOL            xNeedPoll = FALSE;
    3228:	80 e0       	ldi	r24, 0x00	; 0

            case BYTE_LOW_NIBBLE:
                ucASCIIBuf[usRcvBufferPos] |= ucResult;
                usRcvBufferPos++;
                eBytePos = BYTE_HIGH_NIBBLE;
                break;
    322a:	35 c0       	rjmp	.+106    	; 0x3296 <xMBASCIIReceiveFSM+0x142>
            }
        }
        break;

    case STATE_RX_WAIT_EOF:
        if( ucByte == ucMBLFCharacter )
    322c:	89 81       	ldd	r24, Y+1	; 0x01
    322e:	90 91 d3 04 	lds	r25, 0x04D3
    3232:	89 13       	cpse	r24, r25
    3234:	08 c0       	rjmp	.+16     	; 0x3246 <xMBASCIIReceiveFSM+0xf2>
        {
            /* Disable character timeout timer because all characters are
             * received. */
            vMBPortTimersDisable(  );
    3236:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <vMBPortTimersDisable>
            /* Receiver is again in idle state. */
            eRcvState = STATE_RX_IDLE;
    323a:	10 92 d9 04 	sts	0x04D9, r1

            /* Notify the caller of eMBASCIIReceive that a new frame
             * was received. */
            xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
    323e:	81 e0       	ldi	r24, 0x01	; 1
    3240:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <xMBPortEventPost>
    3244:	28 c0       	rjmp	.+80     	; 0x3296 <xMBASCIIReceiveFSM+0x142>
        }
        else if( ucByte == ':' )
    3246:	8a 33       	cpi	r24, 0x3A	; 58
    3248:	69 f4       	brne	.+26     	; 0x3264 <xMBASCIIReceiveFSM+0x110>
        {
            /* Empty receive buffer and back to receive state. */
            eBytePos = BYTE_HIGH_NIBBLE;
    324a:	10 92 d6 04 	sts	0x04D6, r1
            usRcvBufferPos = 0;
    324e:	10 92 d8 04 	sts	0x04D8, r1
    3252:	10 92 d7 04 	sts	0x04D7, r1
            eRcvState = STATE_RX_RCV;
    3256:	81 e0       	ldi	r24, 0x01	; 1
    3258:	80 93 d9 04 	sts	0x04D9, r24

            /* Enable timer for character timeout. */
            vMBPortTimersEnable(  );
    325c:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <vMBPortTimersEnable>
}

BOOL
xMBASCIIReceiveFSM( void )
{
    BOOL            xNeedPoll = FALSE;
    3260:	80 e0       	ldi	r24, 0x00	; 0
    3262:	19 c0       	rjmp	.+50     	; 0x3296 <xMBASCIIReceiveFSM+0x142>
            vMBPortTimersEnable(  );
        }
        else
        {
            /* Frame is not okay. Delete entire frame. */
            eRcvState = STATE_RX_IDLE;
    3264:	10 92 d9 04 	sts	0x04D9, r1
}

BOOL
xMBASCIIReceiveFSM( void )
{
    BOOL            xNeedPoll = FALSE;
    3268:	80 e0       	ldi	r24, 0x00	; 0
    326a:	15 c0       	rjmp	.+42     	; 0x3296 <xMBASCIIReceiveFSM+0x142>
            eRcvState = STATE_RX_IDLE;
        }
        break;

    case STATE_RX_IDLE:
        if( ucByte == ':' )
    326c:	89 81       	ldd	r24, Y+1	; 0x01
    326e:	8a 33       	cpi	r24, 0x3A	; 58
    3270:	89 f4       	brne	.+34     	; 0x3294 <xMBASCIIReceiveFSM+0x140>
        {
            /* Enable timer for character timeout. */
            vMBPortTimersEnable(  );
    3272:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <vMBPortTimersEnable>
            /* Reset the input buffers to store the frame. */
            usRcvBufferPos = 0;;
    3276:	10 92 d8 04 	sts	0x04D8, r1
    327a:	10 92 d7 04 	sts	0x04D7, r1
            eBytePos = BYTE_HIGH_NIBBLE;
    327e:	10 92 d6 04 	sts	0x04D6, r1
            eRcvState = STATE_RX_RCV;
    3282:	81 e0       	ldi	r24, 0x01	; 1
    3284:	80 93 d9 04 	sts	0x04D9, r24
}

BOOL
xMBASCIIReceiveFSM( void )
{
    BOOL            xNeedPoll = FALSE;
    3288:	80 e0       	ldi	r24, 0x00	; 0
    328a:	05 c0       	rjmp	.+10     	; 0x3296 <xMBASCIIReceiveFSM+0x142>
    328c:	80 e0       	ldi	r24, 0x00	; 0
    328e:	03 c0       	rjmp	.+6      	; 0x3296 <xMBASCIIReceiveFSM+0x142>
    3290:	80 e0       	ldi	r24, 0x00	; 0
    3292:	01 c0       	rjmp	.+2      	; 0x3296 <xMBASCIIReceiveFSM+0x142>
    3294:	80 e0       	ldi	r24, 0x00	; 0
        }
        break;
    }

    return xNeedPoll;
}
    3296:	0f 90       	pop	r0
    3298:	df 91       	pop	r29
    329a:	cf 91       	pop	r28
    329c:	08 95       	ret

0000329e <xMBASCIITransmitFSM>:

BOOL
xMBASCIITransmitFSM( void )
{
    329e:	cf 93       	push	r28
    BOOL            xNeedPoll = FALSE;
    UCHAR           ucByte;

    assert( eRcvState == STATE_RX_IDLE );
    switch ( eSndState )
    32a0:	80 91 da 04 	lds	r24, 0x04DA
    32a4:	82 30       	cpi	r24, 0x02	; 2
    32a6:	c9 f0       	breq	.+50     	; 0x32da <xMBASCIITransmitFSM+0x3c>
    32a8:	38 f4       	brcc	.+14     	; 0x32b8 <xMBASCIITransmitFSM+0x1a>
    32aa:	88 23       	and	r24, r24
    32ac:	09 f4       	brne	.+2      	; 0x32b0 <xMBASCIITransmitFSM+0x12>
    32ae:	71 c0       	rjmp	.+226    	; 0x3392 <xMBASCIITransmitFSM+0xf4>
    32b0:	81 30       	cpi	r24, 0x01	; 1
    32b2:	09 f0       	breq	.+2      	; 0x32b6 <xMBASCIITransmitFSM+0x18>
    32b4:	74 c0       	rjmp	.+232    	; 0x339e <xMBASCIITransmitFSM+0x100>
    32b6:	07 c0       	rjmp	.+14     	; 0x32c6 <xMBASCIITransmitFSM+0x28>
    32b8:	83 30       	cpi	r24, 0x03	; 3
    32ba:	09 f4       	brne	.+2      	; 0x32be <xMBASCIITransmitFSM+0x20>
    32bc:	54 c0       	rjmp	.+168    	; 0x3366 <xMBASCIITransmitFSM+0xc8>
    32be:	84 30       	cpi	r24, 0x04	; 4
    32c0:	09 f0       	breq	.+2      	; 0x32c4 <xMBASCIITransmitFSM+0x26>
    32c2:	6d c0       	rjmp	.+218    	; 0x339e <xMBASCIITransmitFSM+0x100>
    32c4:	59 c0       	rjmp	.+178    	; 0x3378 <xMBASCIITransmitFSM+0xda>
    {
        /* Start of transmission. The start of a frame is defined by sending
         * the character ':'. */
    case STATE_TX_START:
        ucByte = ':';
        xMBPortSerialPutByte( ( CHAR )ucByte );
    32c6:	8a e3       	ldi	r24, 0x3A	; 58
    32c8:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <xMBPortSerialPutByte>
        eSndState = STATE_TX_DATA;
    32cc:	82 e0       	ldi	r24, 0x02	; 2
    32ce:	80 93 da 04 	sts	0x04DA, r24
        eBytePos = BYTE_HIGH_NIBBLE;
    32d2:	10 92 d6 04 	sts	0x04D6, r1
}

BOOL
xMBASCIITransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
    32d6:	c0 e0       	ldi	r28, 0x00	; 0
    case STATE_TX_START:
        ucByte = ':';
        xMBPortSerialPutByte( ( CHAR )ucByte );
        eSndState = STATE_TX_DATA;
        eBytePos = BYTE_HIGH_NIBBLE;
        break;
    32d8:	65 c0       	rjmp	.+202    	; 0x33a4 <xMBASCIITransmitFSM+0x106>
        /* Send the data block. Each data byte is encoded as a character hex
         * stream with the high nibble sent first and the low nibble sent
         * last. If all data bytes are exhausted we send a '\r' character
         * to end the transmission. */
    case STATE_TX_DATA:
        if( usSndBufferCount > 0 )
    32da:	80 91 d4 04 	lds	r24, 0x04D4
    32de:	90 91 d5 04 	lds	r25, 0x04D5
    32e2:	89 2b       	or	r24, r25
    32e4:	c1 f1       	breq	.+112    	; 0x3356 <xMBASCIITransmitFSM+0xb8>
        {
            switch ( eBytePos )
    32e6:	80 91 d6 04 	lds	r24, 0x04D6
    32ea:	88 23       	and	r24, r24
    32ec:	21 f0       	breq	.+8      	; 0x32f6 <xMBASCIITransmitFSM+0x58>
    32ee:	81 30       	cpi	r24, 0x01	; 1
    32f0:	09 f0       	breq	.+2      	; 0x32f4 <xMBASCIITransmitFSM+0x56>
    32f2:	57 c0       	rjmp	.+174    	; 0x33a2 <xMBASCIITransmitFSM+0x104>
    32f4:	10 c0       	rjmp	.+32     	; 0x3316 <xMBASCIITransmitFSM+0x78>
            {
            case BYTE_HIGH_NIBBLE:
                ucByte = prvucMBBIN2CHAR( ( UCHAR )( *pucSndBufferCur >> 4 ) );
    32f6:	e0 91 db 04 	lds	r30, 0x04DB
    32fa:	f0 91 dc 04 	lds	r31, 0x04DC
    32fe:	80 81       	ld	r24, Z
    3300:	82 95       	swap	r24
    3302:	8f 70       	andi	r24, 0x0F	; 15
    3304:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <prvucMBBIN2CHAR>
                xMBPortSerialPutByte( ( CHAR ) ucByte );
    3308:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <xMBPortSerialPutByte>
                eBytePos = BYTE_LOW_NIBBLE;
    330c:	81 e0       	ldi	r24, 0x01	; 1
    330e:	80 93 d6 04 	sts	0x04D6, r24
}

BOOL
xMBASCIITransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
    3312:	c0 e0       	ldi	r28, 0x00	; 0
            {
            case BYTE_HIGH_NIBBLE:
                ucByte = prvucMBBIN2CHAR( ( UCHAR )( *pucSndBufferCur >> 4 ) );
                xMBPortSerialPutByte( ( CHAR ) ucByte );
                eBytePos = BYTE_LOW_NIBBLE;
                break;
    3314:	47 c0       	rjmp	.+142    	; 0x33a4 <xMBASCIITransmitFSM+0x106>

            case BYTE_LOW_NIBBLE:
                ucByte = prvucMBBIN2CHAR( ( UCHAR )( *pucSndBufferCur & 0x0F ) );
    3316:	e0 91 db 04 	lds	r30, 0x04DB
    331a:	f0 91 dc 04 	lds	r31, 0x04DC
    331e:	80 81       	ld	r24, Z
    3320:	8f 70       	andi	r24, 0x0F	; 15
    3322:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <prvucMBBIN2CHAR>
                xMBPortSerialPutByte( ( CHAR )ucByte );
    3326:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <xMBPortSerialPutByte>
                pucSndBufferCur++;
    332a:	80 91 db 04 	lds	r24, 0x04DB
    332e:	90 91 dc 04 	lds	r25, 0x04DC
    3332:	01 96       	adiw	r24, 0x01	; 1
    3334:	90 93 dc 04 	sts	0x04DC, r25
    3338:	80 93 db 04 	sts	0x04DB, r24
                eBytePos = BYTE_HIGH_NIBBLE;
    333c:	10 92 d6 04 	sts	0x04D6, r1
                usSndBufferCount--;
    3340:	80 91 d4 04 	lds	r24, 0x04D4
    3344:	90 91 d5 04 	lds	r25, 0x04D5
    3348:	01 97       	sbiw	r24, 0x01	; 1
    334a:	90 93 d5 04 	sts	0x04D5, r25
    334e:	80 93 d4 04 	sts	0x04D4, r24
}

BOOL
xMBASCIITransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
    3352:	c0 e0       	ldi	r28, 0x00	; 0
                ucByte = prvucMBBIN2CHAR( ( UCHAR )( *pucSndBufferCur & 0x0F ) );
                xMBPortSerialPutByte( ( CHAR )ucByte );
                pucSndBufferCur++;
                eBytePos = BYTE_HIGH_NIBBLE;
                usSndBufferCount--;
                break;
    3354:	27 c0       	rjmp	.+78     	; 0x33a4 <xMBASCIITransmitFSM+0x106>
            }
        }
        else
        {
            xMBPortSerialPutByte( MB_ASCII_DEFAULT_CR );
    3356:	8d e0       	ldi	r24, 0x0D	; 13
    3358:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <xMBPortSerialPutByte>
            eSndState = STATE_TX_END;
    335c:	83 e0       	ldi	r24, 0x03	; 3
    335e:	80 93 da 04 	sts	0x04DA, r24
}

BOOL
xMBASCIITransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
    3362:	c0 e0       	ldi	r28, 0x00	; 0
    3364:	1f c0       	rjmp	.+62     	; 0x33a4 <xMBASCIITransmitFSM+0x106>
        }
        break;

        /* Finish the frame by sending a LF character. */
    case STATE_TX_END:
        xMBPortSerialPutByte( ( CHAR )ucMBLFCharacter );
    3366:	80 91 d3 04 	lds	r24, 0x04D3
    336a:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <xMBPortSerialPutByte>
        /* We need another state to make sure that the CR character has
         * been sent. */
        eSndState = STATE_TX_NOTIFY;
    336e:	84 e0       	ldi	r24, 0x04	; 4
    3370:	80 93 da 04 	sts	0x04DA, r24
}

BOOL
xMBASCIITransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
    3374:	c0 e0       	ldi	r28, 0x00	; 0
    case STATE_TX_END:
        xMBPortSerialPutByte( ( CHAR )ucMBLFCharacter );
        /* We need another state to make sure that the CR character has
         * been sent. */
        eSndState = STATE_TX_NOTIFY;
        break;
    3376:	16 c0       	rjmp	.+44     	; 0x33a4 <xMBASCIITransmitFSM+0x106>

        /* Notify the task which called eMBASCIISend that the frame has
         * been sent. */
    case STATE_TX_NOTIFY:
        eSndState = STATE_TX_IDLE;
    3378:	10 92 da 04 	sts	0x04DA, r1
        xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
    337c:	83 e0       	ldi	r24, 0x03	; 3
    337e:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <xMBPortEventPost>
    3382:	c8 2f       	mov	r28, r24

        /* Disable transmitter. This prevents another transmit buffer
         * empty interrupt. */
        vMBPortSerialEnable( TRUE, FALSE );
    3384:	60 e0       	ldi	r22, 0x00	; 0
    3386:	81 e0       	ldi	r24, 0x01	; 1
    3388:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <vMBPortSerialEnable>
        eSndState = STATE_TX_IDLE;
    338c:	10 92 da 04 	sts	0x04DA, r1
        break;
    3390:	09 c0       	rjmp	.+18     	; 0x33a4 <xMBASCIITransmitFSM+0x106>

        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
    3392:	60 e0       	ldi	r22, 0x00	; 0
    3394:	81 e0       	ldi	r24, 0x01	; 1
    3396:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <vMBPortSerialEnable>
}

BOOL
xMBASCIITransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
    339a:	c0 e0       	ldi	r28, 0x00	; 0
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
        break;
    339c:	03 c0       	rjmp	.+6      	; 0x33a4 <xMBASCIITransmitFSM+0x106>
}

BOOL
xMBASCIITransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
    339e:	c0 e0       	ldi	r28, 0x00	; 0
    33a0:	01 c0       	rjmp	.+2      	; 0x33a4 <xMBASCIITransmitFSM+0x106>
    33a2:	c0 e0       	ldi	r28, 0x00	; 0
        vMBPortSerialEnable( TRUE, FALSE );
        break;
    }

    return xNeedPoll;
}
    33a4:	8c 2f       	mov	r24, r28
    33a6:	cf 91       	pop	r28
    33a8:	08 95       	ret

000033aa <xMBASCIITimerT1SExpired>:

BOOL
xMBASCIITimerT1SExpired( void )
{
    switch ( eRcvState )
    33aa:	80 91 d9 04 	lds	r24, 0x04D9
    33ae:	81 50       	subi	r24, 0x01	; 1
    33b0:	82 30       	cpi	r24, 0x02	; 2
    33b2:	10 f4       	brcc	.+4      	; 0x33b8 <xMBASCIITimerT1SExpired+0xe>
        /* If we have a timeout we go back to the idle state and wait for
         * the next frame.
         */
    case STATE_RX_RCV:
    case STATE_RX_WAIT_EOF:
        eRcvState = STATE_RX_IDLE;
    33b4:	10 92 d9 04 	sts	0x04D9, r1

    default:
        assert( ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_WAIT_EOF ) );
        break;
    }
    vMBPortTimersDisable(  );
    33b8:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <vMBPortTimersDisable>

    /* no context switch required. */
    return FALSE;
}
    33bc:	80 e0       	ldi	r24, 0x00	; 0
    33be:	08 95       	ret

000033c0 <usMBCRC16>:
    0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
    33c0:	dc 01       	movw	r26, r24
    UCHAR           ucCRCHi = 0xFF;
    UCHAR           ucCRCLo = 0xFF;
    int             iIndex;

    while( usLen-- )
    33c2:	61 15       	cp	r22, r1
    33c4:	71 05       	cpc	r23, r1
    33c6:	b1 f0       	breq	.+44     	; 0x33f4 <usMBCRC16+0x34>
    0x41, 0x81, 0x80,
    0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
    33c8:	68 0f       	add	r22, r24
    33ca:	79 1f       	adc	r23, r25
{
    UCHAR           ucCRCHi = 0xFF;
    UCHAR           ucCRCLo = 0xFF;
    33cc:	4f ef       	ldi	r20, 0xFF	; 255
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
    UCHAR           ucCRCHi = 0xFF;
    33ce:	2f ef       	ldi	r18, 0xFF	; 255
    UCHAR           ucCRCLo = 0xFF;
    int             iIndex;

    while( usLen-- )
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
    33d0:	8d 91       	ld	r24, X+
    33d2:	48 27       	eor	r20, r24
    33d4:	84 2f       	mov	r24, r20
    33d6:	90 e0       	ldi	r25, 0x00	; 0
        ucCRCLo = ucCRCHi ^ pgm_read_byte( &aucCRCHi[iIndex] );
    33d8:	fc 01       	movw	r30, r24
    33da:	ee 53       	subi	r30, 0x3E	; 62
    33dc:	ff 4f       	sbci	r31, 0xFF	; 255
    33de:	44 91       	lpm	r20, Z
    33e0:	42 27       	eor	r20, r18
        ucCRCHi = pgm_read_byte( &aucCRCLo[iIndex] );;
    33e2:	fc 01       	movw	r30, r24
    33e4:	ee 53       	subi	r30, 0x3E	; 62
    33e6:	fe 4f       	sbci	r31, 0xFE	; 254
    33e8:	e4 91       	lpm	r30, Z
    33ea:	2e 2f       	mov	r18, r30
{
    UCHAR           ucCRCHi = 0xFF;
    UCHAR           ucCRCLo = 0xFF;
    int             iIndex;

    while( usLen-- )
    33ec:	a6 17       	cp	r26, r22
    33ee:	b7 07       	cpc	r27, r23
    33f0:	79 f7       	brne	.-34     	; 0x33d0 <usMBCRC16+0x10>
    33f2:	02 c0       	rjmp	.+4      	; 0x33f8 <usMBCRC16+0x38>

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
    UCHAR           ucCRCHi = 0xFF;
    UCHAR           ucCRCLo = 0xFF;
    33f4:	4f ef       	ldi	r20, 0xFF	; 255
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
    UCHAR           ucCRCHi = 0xFF;
    33f6:	ef ef       	ldi	r30, 0xFF	; 255
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
        ucCRCLo = ucCRCHi ^ pgm_read_byte( &aucCRCHi[iIndex] );
        ucCRCHi = pgm_read_byte( &aucCRCLo[iIndex] );;
    }
    return ucCRCHi << 8 | ucCRCLo;
    33f8:	20 e0       	ldi	r18, 0x00	; 0
    33fa:	24 2b       	or	r18, r20
}
    33fc:	82 2f       	mov	r24, r18
    33fe:	9e 2f       	mov	r25, r30
    3400:	08 95       	ret

00003402 <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
    3402:	1f 93       	push	r17
    3404:	cf 93       	push	r28
    3406:	df 93       	push	r29
    3408:	eb 01       	movw	r28, r22
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    340a:	28 81       	ld	r18, Y
    340c:	39 81       	ldd	r19, Y+1	; 0x01
    340e:	25 30       	cpi	r18, 0x05	; 5
    3410:	31 05       	cpc	r19, r1
    3412:	09 f0       	breq	.+2      	; 0x3416 <eMBFuncReadCoils+0x14>
    3414:	56 c0       	rjmp	.+172    	; 0x34c2 <eMBFuncReadCoils+0xc0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
    3416:	dc 01       	movw	r26, r24
    3418:	11 96       	adiw	r26, 0x01	; 1
    341a:	fc 91       	ld	r31, X
    341c:	11 97       	sbiw	r26, 0x01	; 1
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
    341e:	12 96       	adiw	r26, 0x02	; 2
    3420:	ec 91       	ld	r30, X
    3422:	12 97       	sbiw	r26, 0x02	; 2
        usRegAddress++;

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
    3424:	13 96       	adiw	r26, 0x03	; 3
    3426:	5c 91       	ld	r21, X
    3428:	13 97       	sbiw	r26, 0x03	; 3
    342a:	40 e0       	ldi	r20, 0x00	; 0
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
    342c:	14 96       	adiw	r26, 0x04	; 4
    342e:	2c 91       	ld	r18, X
    3430:	42 2b       	or	r20, r18

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
    3432:	9a 01       	movw	r18, r20
    3434:	21 50       	subi	r18, 0x01	; 1
    3436:	31 09       	sbc	r19, r1
    3438:	2f 3c       	cpi	r18, 0xCF	; 207
    343a:	37 40       	sbci	r19, 0x07	; 7
    343c:	08 f0       	brcs	.+2      	; 0x3440 <eMBFuncReadCoils+0x3e>
    343e:	43 c0       	rjmp	.+134    	; 0x34c6 <eMBFuncReadCoils+0xc4>
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
    3440:	19 82       	std	Y+1, r1	; 0x01
    3442:	18 82       	st	Y, r1

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
    3444:	21 e0       	ldi	r18, 0x01	; 1
    3446:	dc 01       	movw	r26, r24
    3448:	2c 93       	st	X, r18
            *usLen += 1;
    344a:	28 81       	ld	r18, Y
    344c:	39 81       	ldd	r19, Y+1	; 0x01
    344e:	2f 5f       	subi	r18, 0xFF	; 255
    3450:	3f 4f       	sbci	r19, 0xFF	; 255
    3452:	39 83       	std	Y+1, r19	; 0x01
    3454:	28 83       	st	Y, r18

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
    3456:	9a 01       	movw	r18, r20
    3458:	27 70       	andi	r18, 0x07	; 7
    345a:	33 27       	eor	r19, r19
    345c:	23 2b       	or	r18, r19
    345e:	51 f0       	breq	.+20     	; 0x3474 <eMBFuncReadCoils+0x72>
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
    3460:	9a 01       	movw	r18, r20
    3462:	36 95       	lsr	r19
    3464:	27 95       	ror	r18
    3466:	36 95       	lsr	r19
    3468:	27 95       	ror	r18
    346a:	36 95       	lsr	r19
    346c:	27 95       	ror	r18
    346e:	12 2f       	mov	r17, r18
    3470:	1f 5f       	subi	r17, 0xFF	; 255
    3472:	08 c0       	rjmp	.+16     	; 0x3484 <eMBFuncReadCoils+0x82>
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
    3474:	9a 01       	movw	r18, r20
    3476:	36 95       	lsr	r19
    3478:	27 95       	ror	r18
    347a:	36 95       	lsr	r19
    347c:	27 95       	ror	r18
    347e:	36 95       	lsr	r19
    3480:	27 95       	ror	r18
    3482:	12 2f       	mov	r17, r18
            }
            *pucFrameCur++ = ucNBytes;
    3484:	dc 01       	movw	r26, r24
    3486:	11 96       	adiw	r26, 0x01	; 1
    3488:	1c 93       	st	X, r17
            *usLen += 1;
    348a:	28 81       	ld	r18, Y
    348c:	39 81       	ldd	r19, Y+1	; 0x01
    348e:	2f 5f       	subi	r18, 0xFF	; 255
    3490:	3f 4f       	sbci	r19, 0xFF	; 255
    3492:	39 83       	std	Y+1, r19	; 0x01
    3494:	28 83       	st	Y, r18
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
    3496:	7f 2f       	mov	r23, r31
    3498:	60 e0       	ldi	r22, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
    349a:	6e 2b       	or	r22, r30
        usRegAddress++;
    349c:	6f 5f       	subi	r22, 0xFF	; 255
    349e:	7f 4f       	sbci	r23, 0xFF	; 255
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
            }
            *pucFrameCur++ = ucNBytes;
            *usLen += 1;

            eRegStatus =
    34a0:	20 e0       	ldi	r18, 0x00	; 0
    34a2:	02 96       	adiw	r24, 0x02	; 2
    34a4:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <eMBRegCoilsCB>
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
    34a8:	88 23       	and	r24, r24
    34aa:	19 f0       	breq	.+6      	; 0x34b2 <eMBFuncReadCoils+0xb0>
            {
                eStatus = prveMBError2Exception( eRegStatus );
    34ac:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <prveMBError2Exception>
    34b0:	0b c0       	rjmp	.+22     	; 0x34c8 <eMBFuncReadCoils+0xc6>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
    34b2:	88 81       	ld	r24, Y
    34b4:	99 81       	ldd	r25, Y+1	; 0x01
    34b6:	81 0f       	add	r24, r17
    34b8:	91 1d       	adc	r25, r1
    34ba:	99 83       	std	Y+1, r25	; 0x01
    34bc:	88 83       	st	Y, r24
    USHORT          usRegAddress;
    USHORT          usCoilCount;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    34be:	80 e0       	ldi	r24, 0x00	; 0
    34c0:	03 c0       	rjmp	.+6      	; 0x34c8 <eMBFuncReadCoils+0xc6>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    34c2:	83 e0       	ldi	r24, 0x03	; 3
    34c4:	01 c0       	rjmp	.+2      	; 0x34c8 <eMBFuncReadCoils+0xc6>
                *usLen += ucNBytes;;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    34c6:	83 e0       	ldi	r24, 0x03	; 3
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    34c8:	df 91       	pop	r29
    34ca:	cf 91       	pop	r28
    34cc:	1f 91       	pop	r17
    34ce:	08 95       	ret

000034d0 <eMBFuncWriteCoil>:

#if MB_FUNC_WRITE_COIL_ENABLED > 0
eMBException
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
    34d0:	cf 93       	push	r28
    34d2:	df 93       	push	r29
    34d4:	00 d0       	rcall	.+0      	; 0x34d6 <eMBFuncWriteCoil+0x6>
    34d6:	cd b7       	in	r28, 0x3d	; 61
    34d8:	de b7       	in	r29, 0x3e	; 62
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    34da:	fb 01       	movw	r30, r22
    34dc:	20 81       	ld	r18, Z
    34de:	31 81       	ldd	r19, Z+1	; 0x01
    34e0:	25 30       	cpi	r18, 0x05	; 5
    34e2:	31 05       	cpc	r19, r1
    34e4:	19 f5       	brne	.+70     	; 0x352c <eMBFuncWriteCoil+0x5c>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
    34e6:	fc 01       	movw	r30, r24
    34e8:	41 81       	ldd	r20, Z+1	; 0x01
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
    34ea:	32 81       	ldd	r19, Z+2	; 0x02
        usRegAddress++;

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
    34ec:	24 81       	ldd	r18, Z+4	; 0x04
    34ee:	21 11       	cpse	r18, r1
    34f0:	1f c0       	rjmp	.+62     	; 0x3530 <eMBFuncWriteCoil+0x60>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
    34f2:	83 81       	ldd	r24, Z+3	; 0x03
    34f4:	98 2f       	mov	r25, r24
    34f6:	91 50       	subi	r25, 0x01	; 1
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
        usRegAddress++;

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
    34f8:	9e 3f       	cpi	r25, 0xFE	; 254
    34fa:	e0 f0       	brcs	.+56     	; 0x3534 <eMBFuncWriteCoil+0x64>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
        {
            ucBuf[1] = 0;
    34fc:	1a 82       	std	Y+2, r1	; 0x02
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
    34fe:	8f 3f       	cpi	r24, 0xFF	; 255
    3500:	19 f4       	brne	.+6      	; 0x3508 <eMBFuncWriteCoil+0x38>
            {
                ucBuf[0] = 1;
    3502:	81 e0       	ldi	r24, 0x01	; 1
    3504:	89 83       	std	Y+1, r24	; 0x01
    3506:	01 c0       	rjmp	.+2      	; 0x350a <eMBFuncWriteCoil+0x3a>
            }
            else
            {
                ucBuf[0] = 0;
    3508:	19 82       	std	Y+1, r1	; 0x01
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
    350a:	74 2f       	mov	r23, r20
    350c:	60 e0       	ldi	r22, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
    350e:	63 2b       	or	r22, r19
        usRegAddress++;
    3510:	6f 5f       	subi	r22, 0xFF	; 255
    3512:	7f 4f       	sbci	r23, 0xFF	; 255
            }
            else
            {
                ucBuf[0] = 0;
            }
            eRegStatus =
    3514:	21 e0       	ldi	r18, 0x01	; 1
    3516:	41 e0       	ldi	r20, 0x01	; 1
    3518:	50 e0       	ldi	r21, 0x00	; 0
    351a:	ce 01       	movw	r24, r28
    351c:	01 96       	adiw	r24, 0x01	; 1
    351e:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <eMBRegCoilsCB>
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
    3522:	88 23       	and	r24, r24
    3524:	49 f0       	breq	.+18     	; 0x3538 <eMBFuncWriteCoil+0x68>
            {
                eStatus = prveMBError2Exception( eRegStatus );
    3526:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <prveMBError2Exception>
    352a:	07 c0       	rjmp	.+14     	; 0x353a <eMBFuncWriteCoil+0x6a>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    352c:	83 e0       	ldi	r24, 0x03	; 3
    352e:	05 c0       	rjmp	.+10     	; 0x353a <eMBFuncWriteCoil+0x6a>
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    3530:	83 e0       	ldi	r24, 0x03	; 3
    3532:	03 c0       	rjmp	.+6      	; 0x353a <eMBFuncWriteCoil+0x6a>
    3534:	83 e0       	ldi	r24, 0x03	; 3
    3536:	01 c0       	rjmp	.+2      	; 0x353a <eMBFuncWriteCoil+0x6a>
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
    USHORT          usRegAddress;
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    3538:	80 e0       	ldi	r24, 0x00	; 0
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    353a:	0f 90       	pop	r0
    353c:	0f 90       	pop	r0
    353e:	df 91       	pop	r29
    3540:	cf 91       	pop	r28
    3542:	08 95       	ret

00003544 <eMBFuncWriteMultipleCoils>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
    3544:	cf 93       	push	r28
    3546:	df 93       	push	r29
    3548:	eb 01       	movw	r28, r22
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    354a:	28 81       	ld	r18, Y
    354c:	39 81       	ldd	r19, Y+1	; 0x01
    354e:	26 30       	cpi	r18, 0x06	; 6
    3550:	31 05       	cpc	r19, r1
    3552:	08 f4       	brcc	.+2      	; 0x3556 <eMBFuncWriteMultipleCoils+0x12>
    3554:	45 c0       	rjmp	.+138    	; 0x35e0 <eMBFuncWriteMultipleCoils+0x9c>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
    3556:	dc 01       	movw	r26, r24
    3558:	11 96       	adiw	r26, 0x01	; 1
    355a:	fc 91       	ld	r31, X
    355c:	11 97       	sbiw	r26, 0x01	; 1
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
    355e:	12 96       	adiw	r26, 0x02	; 2
    3560:	ec 91       	ld	r30, X
    3562:	12 97       	sbiw	r26, 0x02	; 2
        usRegAddress++;

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
    3564:	13 96       	adiw	r26, 0x03	; 3
    3566:	5c 91       	ld	r21, X
    3568:	13 97       	sbiw	r26, 0x03	; 3
    356a:	40 e0       	ldi	r20, 0x00	; 0
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
    356c:	14 96       	adiw	r26, 0x04	; 4
    356e:	2c 91       	ld	r18, X
    3570:	14 97       	sbiw	r26, 0x04	; 4
    3572:	42 2b       	or	r20, r18

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
    3574:	15 96       	adiw	r26, 0x05	; 5
    3576:	6c 91       	ld	r22, X

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
    3578:	9a 01       	movw	r18, r20
    357a:	27 70       	andi	r18, 0x07	; 7
    357c:	33 27       	eor	r19, r19
    357e:	23 2b       	or	r18, r19
    3580:	51 f0       	breq	.+20     	; 0x3596 <eMBFuncWriteMultipleCoils+0x52>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
    3582:	9a 01       	movw	r18, r20
    3584:	36 95       	lsr	r19
    3586:	27 95       	ror	r18
    3588:	36 95       	lsr	r19
    358a:	27 95       	ror	r18
    358c:	36 95       	lsr	r19
    358e:	27 95       	ror	r18
    3590:	72 2f       	mov	r23, r18
    3592:	7f 5f       	subi	r23, 0xFF	; 255
    3594:	08 c0       	rjmp	.+16     	; 0x35a6 <eMBFuncWriteMultipleCoils+0x62>
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
    3596:	9a 01       	movw	r18, r20
    3598:	36 95       	lsr	r19
    359a:	27 95       	ror	r18
    359c:	36 95       	lsr	r19
    359e:	27 95       	ror	r18
    35a0:	36 95       	lsr	r19
    35a2:	27 95       	ror	r18
    35a4:	72 2f       	mov	r23, r18
        }

        if( ( usCoilCnt >= 1 ) &&
    35a6:	9a 01       	movw	r18, r20
    35a8:	21 50       	subi	r18, 0x01	; 1
    35aa:	31 09       	sbc	r19, r1
    35ac:	20 3b       	cpi	r18, 0xB0	; 176
    35ae:	37 40       	sbci	r19, 0x07	; 7
    35b0:	c8 f4       	brcc	.+50     	; 0x35e4 <eMBFuncWriteMultipleCoils+0xa0>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
    35b2:	76 13       	cpse	r23, r22
    35b4:	19 c0       	rjmp	.+50     	; 0x35e8 <eMBFuncWriteMultipleCoils+0xa4>
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
    35b6:	3f 2f       	mov	r19, r31
    35b8:	20 e0       	ldi	r18, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
    35ba:	2e 2b       	or	r18, r30
        usRegAddress++;
    35bc:	b9 01       	movw	r22, r18
    35be:	6f 5f       	subi	r22, 0xFF	; 255
    35c0:	7f 4f       	sbci	r23, 0xFF	; 255

        if( ( usCoilCnt >= 1 ) &&
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
    35c2:	21 e0       	ldi	r18, 0x01	; 1
    35c4:	06 96       	adiw	r24, 0x06	; 6
    35c6:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <eMBRegCoilsCB>
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
    35ca:	88 23       	and	r24, r24
    35cc:	19 f0       	breq	.+6      	; 0x35d4 <eMBFuncWriteMultipleCoils+0x90>
            {
                eStatus = prveMBError2Exception( eRegStatus );
    35ce:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <prveMBError2Exception>
    35d2:	0b c0       	rjmp	.+22     	; 0x35ea <eMBFuncWriteMultipleCoils+0xa6>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
    35d4:	85 e0       	ldi	r24, 0x05	; 5
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	99 83       	std	Y+1, r25	; 0x01
    35da:	88 83       	st	Y, r24
    USHORT          usRegAddress;
    USHORT          usCoilCnt;
    UCHAR           ucByteCount;
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
    35dc:	80 e0       	ldi	r24, 0x00	; 0
    35de:	05 c0       	rjmp	.+10     	; 0x35ea <eMBFuncWriteMultipleCoils+0xa6>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    35e0:	83 e0       	ldi	r24, 0x03	; 3
    35e2:	03 c0       	rjmp	.+6      	; 0x35ea <eMBFuncWriteMultipleCoils+0xa6>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    35e4:	83 e0       	ldi	r24, 0x03	; 3
    35e6:	01 c0       	rjmp	.+2      	; 0x35ea <eMBFuncWriteMultipleCoils+0xa6>
    35e8:	83 e0       	ldi	r24, 0x03	; 3
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    35ea:	df 91       	pop	r29
    35ec:	cf 91       	pop	r28
    35ee:	08 95       	ret

000035f0 <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
    35f0:	1f 93       	push	r17
    35f2:	cf 93       	push	r28
    35f4:	df 93       	push	r29
    35f6:	eb 01       	movw	r28, r22
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    35f8:	28 81       	ld	r18, Y
    35fa:	39 81       	ldd	r19, Y+1	; 0x01
    35fc:	25 30       	cpi	r18, 0x05	; 5
    35fe:	31 05       	cpc	r19, r1
    3600:	09 f0       	breq	.+2      	; 0x3604 <eMBFuncReadDiscreteInputs+0x14>
    3602:	55 c0       	rjmp	.+170    	; 0x36ae <eMBFuncReadDiscreteInputs+0xbe>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
    3604:	dc 01       	movw	r26, r24
    3606:	11 96       	adiw	r26, 0x01	; 1
    3608:	fc 91       	ld	r31, X
    360a:	11 97       	sbiw	r26, 0x01	; 1
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
    360c:	12 96       	adiw	r26, 0x02	; 2
    360e:	ec 91       	ld	r30, X
    3610:	12 97       	sbiw	r26, 0x02	; 2
        usRegAddress++;

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
    3612:	13 96       	adiw	r26, 0x03	; 3
    3614:	5c 91       	ld	r21, X
    3616:	13 97       	sbiw	r26, 0x03	; 3
    3618:	40 e0       	ldi	r20, 0x00	; 0
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
    361a:	14 96       	adiw	r26, 0x04	; 4
    361c:	2c 91       	ld	r18, X
    361e:	42 2b       	or	r20, r18

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
    3620:	9a 01       	movw	r18, r20
    3622:	21 50       	subi	r18, 0x01	; 1
    3624:	31 09       	sbc	r19, r1
    3626:	2f 3c       	cpi	r18, 0xCF	; 207
    3628:	37 40       	sbci	r19, 0x07	; 7
    362a:	08 f0       	brcs	.+2      	; 0x362e <eMBFuncReadDiscreteInputs+0x3e>
    362c:	42 c0       	rjmp	.+132    	; 0x36b2 <eMBFuncReadDiscreteInputs+0xc2>
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
    362e:	19 82       	std	Y+1, r1	; 0x01
    3630:	18 82       	st	Y, r1

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
    3632:	22 e0       	ldi	r18, 0x02	; 2
    3634:	dc 01       	movw	r26, r24
    3636:	2c 93       	st	X, r18
            *usLen += 1;
    3638:	28 81       	ld	r18, Y
    363a:	39 81       	ldd	r19, Y+1	; 0x01
    363c:	2f 5f       	subi	r18, 0xFF	; 255
    363e:	3f 4f       	sbci	r19, 0xFF	; 255
    3640:	39 83       	std	Y+1, r19	; 0x01
    3642:	28 83       	st	Y, r18

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
    3644:	9a 01       	movw	r18, r20
    3646:	27 70       	andi	r18, 0x07	; 7
    3648:	33 27       	eor	r19, r19
    364a:	23 2b       	or	r18, r19
    364c:	51 f0       	breq	.+20     	; 0x3662 <eMBFuncReadDiscreteInputs+0x72>
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
    364e:	9a 01       	movw	r18, r20
    3650:	36 95       	lsr	r19
    3652:	27 95       	ror	r18
    3654:	36 95       	lsr	r19
    3656:	27 95       	ror	r18
    3658:	36 95       	lsr	r19
    365a:	27 95       	ror	r18
    365c:	12 2f       	mov	r17, r18
    365e:	1f 5f       	subi	r17, 0xFF	; 255
    3660:	08 c0       	rjmp	.+16     	; 0x3672 <eMBFuncReadDiscreteInputs+0x82>
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
    3662:	9a 01       	movw	r18, r20
    3664:	36 95       	lsr	r19
    3666:	27 95       	ror	r18
    3668:	36 95       	lsr	r19
    366a:	27 95       	ror	r18
    366c:	36 95       	lsr	r19
    366e:	27 95       	ror	r18
    3670:	12 2f       	mov	r17, r18
            }
            *pucFrameCur++ = ucNBytes;
    3672:	dc 01       	movw	r26, r24
    3674:	11 96       	adiw	r26, 0x01	; 1
    3676:	1c 93       	st	X, r17
            *usLen += 1;
    3678:	28 81       	ld	r18, Y
    367a:	39 81       	ldd	r19, Y+1	; 0x01
    367c:	2f 5f       	subi	r18, 0xFF	; 255
    367e:	3f 4f       	sbci	r19, 0xFF	; 255
    3680:	39 83       	std	Y+1, r19	; 0x01
    3682:	28 83       	st	Y, r18
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
    3684:	7f 2f       	mov	r23, r31
    3686:	60 e0       	ldi	r22, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
    3688:	6e 2b       	or	r22, r30
        usRegAddress++;
    368a:	6f 5f       	subi	r22, 0xFF	; 255
    368c:	7f 4f       	sbci	r23, 0xFF	; 255
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
            }
            *pucFrameCur++ = ucNBytes;
            *usLen += 1;

            eRegStatus =
    368e:	02 96       	adiw	r24, 0x02	; 2
    3690:	0e 94 11 16 	call	0x2c22	; 0x2c22 <eMBRegDiscreteCB>
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
    3694:	88 23       	and	r24, r24
    3696:	19 f0       	breq	.+6      	; 0x369e <eMBFuncReadDiscreteInputs+0xae>
            {
                eStatus = prveMBError2Exception( eRegStatus );
    3698:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <prveMBError2Exception>
    369c:	0b c0       	rjmp	.+22     	; 0x36b4 <eMBFuncReadDiscreteInputs+0xc4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
    369e:	88 81       	ld	r24, Y
    36a0:	99 81       	ldd	r25, Y+1	; 0x01
    36a2:	81 0f       	add	r24, r17
    36a4:	91 1d       	adc	r25, r1
    36a6:	99 83       	std	Y+1, r25	; 0x01
    36a8:	88 83       	st	Y, r24
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    36aa:	80 e0       	ldi	r24, 0x00	; 0
    36ac:	03 c0       	rjmp	.+6      	; 0x36b4 <eMBFuncReadDiscreteInputs+0xc4>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    36ae:	83 e0       	ldi	r24, 0x03	; 3
    36b0:	01 c0       	rjmp	.+2      	; 0x36b4 <eMBFuncReadDiscreteInputs+0xc4>
                *usLen += ucNBytes;;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    36b2:	83 e0       	ldi	r24, 0x03	; 3
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    36b4:	df 91       	pop	r29
    36b6:	cf 91       	pop	r28
    36b8:	1f 91       	pop	r17
    36ba:	08 95       	ret

000036bc <eMBFuncWriteHoldingRegister>:
{
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    36bc:	fb 01       	movw	r30, r22
    36be:	20 81       	ld	r18, Z
    36c0:	31 81       	ldd	r19, Z+1	; 0x01
    36c2:	25 30       	cpi	r18, 0x05	; 5
    36c4:	31 05       	cpc	r19, r1
    36c6:	91 f4       	brne	.+36     	; 0x36ec <eMBFuncWriteHoldingRegister+0x30>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
    36c8:	fc 01       	movw	r30, r24
    36ca:	71 81       	ldd	r23, Z+1	; 0x01
    36cc:	60 e0       	ldi	r22, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
    36ce:	22 81       	ldd	r18, Z+2	; 0x02
    36d0:	62 2b       	or	r22, r18
        usRegAddress++;
    36d2:	6f 5f       	subi	r22, 0xFF	; 255
    36d4:	7f 4f       	sbci	r23, 0xFF	; 255

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
    36d6:	21 e0       	ldi	r18, 0x01	; 1
    36d8:	41 e0       	ldi	r20, 0x01	; 1
    36da:	50 e0       	ldi	r21, 0x00	; 0
    36dc:	03 96       	adiw	r24, 0x03	; 3
    36de:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <eMBRegHoldingCB>
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
    36e2:	88 23       	and	r24, r24
    36e4:	29 f0       	breq	.+10     	; 0x36f0 <eMBFuncWriteHoldingRegister+0x34>
        {
            eStatus = prveMBError2Exception( eRegStatus );
    36e6:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <prveMBError2Exception>
    36ea:	08 95       	ret
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    36ec:	83 e0       	ldi	r24, 0x03	; 3
    36ee:	08 95       	ret

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
    36f0:	80 e0       	ldi	r24, 0x00	; 0
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    36f2:	08 95       	ret

000036f4 <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
    36f4:	cf 93       	push	r28
    36f6:	df 93       	push	r29
    36f8:	eb 01       	movw	r28, r22
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
    36fa:	28 81       	ld	r18, Y
    36fc:	39 81       	ldd	r19, Y+1	; 0x01
    36fe:	26 30       	cpi	r18, 0x06	; 6
    3700:	31 05       	cpc	r19, r1
    3702:	80 f1       	brcs	.+96     	; 0x3764 <eMBFuncWriteMultipleHoldingRegister+0x70>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
    3704:	dc 01       	movw	r26, r24
    3706:	11 96       	adiw	r26, 0x01	; 1
    3708:	ec 91       	ld	r30, X
    370a:	11 97       	sbiw	r26, 0x01	; 1
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
    370c:	12 96       	adiw	r26, 0x02	; 2
    370e:	7c 91       	ld	r23, X
    3710:	12 97       	sbiw	r26, 0x02	; 2
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
    3712:	13 96       	adiw	r26, 0x03	; 3
    3714:	5c 91       	ld	r21, X
    3716:	13 97       	sbiw	r26, 0x03	; 3
    3718:	40 e0       	ldi	r20, 0x00	; 0
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
    371a:	14 96       	adiw	r26, 0x04	; 4
    371c:	2c 91       	ld	r18, X
    371e:	14 97       	sbiw	r26, 0x04	; 4
    3720:	42 2b       	or	r20, r18

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
    3722:	15 96       	adiw	r26, 0x05	; 5
    3724:	6c 91       	ld	r22, X

        if( ( usRegCount >= 1 ) &&
    3726:	9a 01       	movw	r18, r20
    3728:	21 50       	subi	r18, 0x01	; 1
    372a:	31 09       	sbc	r19, r1
    372c:	28 37       	cpi	r18, 0x78	; 120
    372e:	31 05       	cpc	r19, r1
    3730:	d8 f4       	brcc	.+54     	; 0x3768 <eMBFuncWriteMultipleHoldingRegister+0x74>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
    3732:	24 2f       	mov	r18, r20
    3734:	22 0f       	add	r18, r18
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];

        if( ( usRegCount >= 1 ) &&
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
    3736:	26 13       	cpse	r18, r22
    3738:	19 c0       	rjmp	.+50     	; 0x376c <eMBFuncWriteMultipleHoldingRegister+0x78>
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
    373a:	3e 2f       	mov	r19, r30
    373c:	20 e0       	ldi	r18, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
    373e:	27 2b       	or	r18, r23
        usRegAddress++;
    3740:	b9 01       	movw	r22, r18
    3742:	6f 5f       	subi	r22, 0xFF	; 255
    3744:	7f 4f       	sbci	r23, 0xFF	; 255
        if( ( usRegCount >= 1 ) &&
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
        {
            /* Make callback to update the register values. */
            eRegStatus =
    3746:	21 e0       	ldi	r18, 0x01	; 1
    3748:	06 96       	adiw	r24, 0x06	; 6
    374a:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <eMBRegHoldingCB>
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
    374e:	88 23       	and	r24, r24
    3750:	19 f0       	breq	.+6      	; 0x3758 <eMBFuncWriteMultipleHoldingRegister+0x64>
            {
                eStatus = prveMBError2Exception( eRegStatus );
    3752:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <prveMBError2Exception>
    3756:	0b c0       	rjmp	.+22     	; 0x376e <eMBFuncWriteMultipleHoldingRegister+0x7a>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
    3758:	85 e0       	ldi	r24, 0x05	; 5
    375a:	90 e0       	ldi	r25, 0x00	; 0
    375c:	99 83       	std	Y+1, r25	; 0x01
    375e:	88 83       	st	Y, r24
{
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
    3760:	80 e0       	ldi	r24, 0x00	; 0
    3762:	05 c0       	rjmp	.+10     	; 0x376e <eMBFuncWriteMultipleHoldingRegister+0x7a>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    3764:	83 e0       	ldi	r24, 0x03	; 3
    3766:	03 c0       	rjmp	.+6      	; 0x376e <eMBFuncWriteMultipleHoldingRegister+0x7a>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    3768:	83 e0       	ldi	r24, 0x03	; 3
    376a:	01 c0       	rjmp	.+2      	; 0x376e <eMBFuncWriteMultipleHoldingRegister+0x7a>
    376c:	83 e0       	ldi	r24, 0x03	; 3
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    376e:	df 91       	pop	r29
    3770:	cf 91       	pop	r28
    3772:	08 95       	ret

00003774 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
    3774:	0f 93       	push	r16
    3776:	1f 93       	push	r17
    3778:	cf 93       	push	r28
    377a:	df 93       	push	r29
    377c:	eb 01       	movw	r28, r22
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    377e:	28 81       	ld	r18, Y
    3780:	39 81       	ldd	r19, Y+1	; 0x01
    3782:	25 30       	cpi	r18, 0x05	; 5
    3784:	31 05       	cpc	r19, r1
    3786:	f1 f5       	brne	.+124    	; 0x3804 <eMBFuncReadHoldingRegister+0x90>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
    3788:	dc 01       	movw	r26, r24
    378a:	11 96       	adiw	r26, 0x01	; 1
    378c:	ec 91       	ld	r30, X
    378e:	11 97       	sbiw	r26, 0x01	; 1
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
    3790:	12 96       	adiw	r26, 0x02	; 2
    3792:	5c 91       	ld	r21, X
    3794:	12 97       	sbiw	r26, 0x02	; 2
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
    3796:	14 96       	adiw	r26, 0x04	; 4
    3798:	4c 91       	ld	r20, X
    379a:	14 97       	sbiw	r26, 0x04	; 4
    379c:	04 2f       	mov	r16, r20
    379e:	10 e0       	ldi	r17, 0x00	; 0

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
    37a0:	98 01       	movw	r18, r16
    37a2:	21 50       	subi	r18, 0x01	; 1
    37a4:	31 09       	sbc	r19, r1
    37a6:	2d 37       	cpi	r18, 0x7D	; 125
    37a8:	31 05       	cpc	r19, r1
    37aa:	70 f5       	brcc	.+92     	; 0x3808 <eMBFuncReadHoldingRegister+0x94>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
    37ac:	19 82       	std	Y+1, r1	; 0x01
    37ae:	18 82       	st	Y, r1

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
    37b0:	23 e0       	ldi	r18, 0x03	; 3
    37b2:	2c 93       	st	X, r18
            *usLen += 1;
    37b4:	28 81       	ld	r18, Y
    37b6:	39 81       	ldd	r19, Y+1	; 0x01
    37b8:	2f 5f       	subi	r18, 0xFF	; 255
    37ba:	3f 4f       	sbci	r19, 0xFF	; 255
    37bc:	39 83       	std	Y+1, r19	; 0x01
    37be:	28 83       	st	Y, r18

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
    37c0:	44 0f       	add	r20, r20
    37c2:	11 96       	adiw	r26, 0x01	; 1
    37c4:	4c 93       	st	X, r20
            *usLen += 1;
    37c6:	28 81       	ld	r18, Y
    37c8:	39 81       	ldd	r19, Y+1	; 0x01
    37ca:	2f 5f       	subi	r18, 0xFF	; 255
    37cc:	3f 4f       	sbci	r19, 0xFF	; 255
    37ce:	39 83       	std	Y+1, r19	; 0x01
    37d0:	28 83       	st	Y, r18
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
    37d2:	7e 2f       	mov	r23, r30
    37d4:	60 e0       	ldi	r22, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
    37d6:	65 2b       	or	r22, r21
        usRegAddress++;
    37d8:	6f 5f       	subi	r22, 0xFF	; 255
    37da:	7f 4f       	sbci	r23, 0xFF	; 255
            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
            *usLen += 1;

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
    37dc:	20 e0       	ldi	r18, 0x00	; 0
    37de:	a8 01       	movw	r20, r16
    37e0:	02 96       	adiw	r24, 0x02	; 2
    37e2:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <eMBRegHoldingCB>
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
    37e6:	88 23       	and	r24, r24
    37e8:	19 f0       	breq	.+6      	; 0x37f0 <eMBFuncReadHoldingRegister+0x7c>
            {
                eStatus = prveMBError2Exception( eRegStatus );
    37ea:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <prveMBError2Exception>
    37ee:	0d c0       	rjmp	.+26     	; 0x380a <eMBFuncReadHoldingRegister+0x96>
            }
            else
            {
                *usLen += usRegCount * 2;
    37f0:	00 0f       	add	r16, r16
    37f2:	11 1f       	adc	r17, r17
    37f4:	88 81       	ld	r24, Y
    37f6:	99 81       	ldd	r25, Y+1	; 0x01
    37f8:	08 0f       	add	r16, r24
    37fa:	19 1f       	adc	r17, r25
    37fc:	19 83       	std	Y+1, r17	; 0x01
    37fe:	08 83       	st	Y, r16
{
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    3800:	80 e0       	ldi	r24, 0x00	; 0
    3802:	03 c0       	rjmp	.+6      	; 0x380a <eMBFuncReadHoldingRegister+0x96>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    3804:	83 e0       	ldi	r24, 0x03	; 3
    3806:	01 c0       	rjmp	.+2      	; 0x380a <eMBFuncReadHoldingRegister+0x96>
                *usLen += usRegCount * 2;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    3808:	83 e0       	ldi	r24, 0x03	; 3
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    380a:	df 91       	pop	r29
    380c:	cf 91       	pop	r28
    380e:	1f 91       	pop	r17
    3810:	0f 91       	pop	r16
    3812:	08 95       	ret

00003814 <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
    3814:	cf 92       	push	r12
    3816:	df 92       	push	r13
    3818:	ef 92       	push	r14
    381a:	ff 92       	push	r15
    381c:	0f 93       	push	r16
    381e:	1f 93       	push	r17
    3820:	cf 93       	push	r28
    3822:	df 93       	push	r29
    3824:	ec 01       	movw	r28, r24
    3826:	8b 01       	movw	r16, r22
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
    3828:	fb 01       	movw	r30, r22
    382a:	80 81       	ld	r24, Z
    382c:	91 81       	ldd	r25, Z+1	; 0x01
    382e:	0a 97       	sbiw	r24, 0x0a	; 10
    3830:	08 f4       	brcc	.+2      	; 0x3834 <eMBFuncReadWriteMultipleHoldingRegister+0x20>
    3832:	5d c0       	rjmp	.+186    	; 0x38ee <eMBFuncReadWriteMultipleHoldingRegister+0xda>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
    3834:	c9 80       	ldd	r12, Y+1	; 0x01
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
    3836:	da 80       	ldd	r13, Y+2	; 0x02
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
    3838:	9b 81       	ldd	r25, Y+3	; 0x03
    383a:	80 e0       	ldi	r24, 0x00	; 0
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
    383c:	2c 81       	ldd	r18, Y+4	; 0x04
    383e:	7c 01       	movw	r14, r24
    3840:	e2 2a       	or	r14, r18

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
    3842:	7d 81       	ldd	r23, Y+5	; 0x05
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
    3844:	6e 81       	ldd	r22, Y+6	; 0x06
        usRegWriteAddress++;

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
    3846:	4f 81       	ldd	r20, Y+7	; 0x07
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
    3848:	38 85       	ldd	r19, Y+8	; 0x08

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
    384a:	29 85       	ldd	r18, Y+9	; 0x09

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
    384c:	c7 01       	movw	r24, r14
    384e:	01 97       	sbiw	r24, 0x01	; 1
    3850:	8d 37       	cpi	r24, 0x7D	; 125
    3852:	91 05       	cpc	r25, r1
    3854:	08 f0       	brcs	.+2      	; 0x3858 <eMBFuncReadWriteMultipleHoldingRegister+0x44>
    3856:	4d c0       	rjmp	.+154    	; 0x38f2 <eMBFuncReadWriteMultipleHoldingRegister+0xde>

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
        usRegWriteAddress++;

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
    3858:	94 2f       	mov	r25, r20
    385a:	80 e0       	ldi	r24, 0x00	; 0
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
    385c:	83 2b       	or	r24, r19

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
    385e:	00 97       	sbiw	r24, 0x00	; 0
    3860:	09 f4       	brne	.+2      	; 0x3864 <eMBFuncReadWriteMultipleHoldingRegister+0x50>
    3862:	49 c0       	rjmp	.+146    	; 0x38f6 <eMBFuncReadWriteMultipleHoldingRegister+0xe2>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
    3864:	8a 37       	cpi	r24, 0x7A	; 122
    3866:	91 05       	cpc	r25, r1
    3868:	08 f0       	brcs	.+2      	; 0x386c <eMBFuncReadWriteMultipleHoldingRegister+0x58>
    386a:	47 c0       	rjmp	.+142    	; 0x38fa <eMBFuncReadWriteMultipleHoldingRegister+0xe6>
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
    386c:	ac 01       	movw	r20, r24
    386e:	44 0f       	add	r20, r20
    3870:	55 1f       	adc	r21, r21
    3872:	30 e0       	ldi	r19, 0x00	; 0
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
    3874:	42 17       	cp	r20, r18
    3876:	53 07       	cpc	r21, r19
    3878:	09 f0       	breq	.+2      	; 0x387c <eMBFuncReadWriteMultipleHoldingRegister+0x68>
    387a:	41 c0       	rjmp	.+130    	; 0x38fe <eMBFuncReadWriteMultipleHoldingRegister+0xea>
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
    387c:	37 2f       	mov	r19, r23
    387e:	20 e0       	ldi	r18, 0x00	; 0
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
    3880:	26 2b       	or	r18, r22
        usRegWriteAddress++;
    3882:	b9 01       	movw	r22, r18
    3884:	6f 5f       	subi	r22, 0xFF	; 255
    3886:	7f 4f       	sbci	r23, 0xFF	; 255
        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
    3888:	21 e0       	ldi	r18, 0x01	; 1
    388a:	ac 01       	movw	r20, r24
    388c:	ce 01       	movw	r24, r28
    388e:	0a 96       	adiw	r24, 0x0a	; 10
    3890:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <eMBRegHoldingCB>
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
    3894:	81 11       	cpse	r24, r1
    3896:	35 c0       	rjmp	.+106    	; 0x3902 <eMBFuncReadWriteMultipleHoldingRegister+0xee>
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
                *usLen = MB_PDU_FUNC_OFF;
    3898:	f8 01       	movw	r30, r16
    389a:	11 82       	std	Z+1, r1	; 0x01
    389c:	10 82       	st	Z, r1

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
    389e:	87 e1       	ldi	r24, 0x17	; 23
    38a0:	88 83       	st	Y, r24
                *usLen += 1;
    38a2:	80 81       	ld	r24, Z
    38a4:	91 81       	ldd	r25, Z+1	; 0x01
    38a6:	01 96       	adiw	r24, 0x01	; 1
    38a8:	91 83       	std	Z+1, r25	; 0x01
    38aa:	80 83       	st	Z, r24

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
    38ac:	8e 2d       	mov	r24, r14
    38ae:	88 0f       	add	r24, r24
    38b0:	89 83       	std	Y+1, r24	; 0x01
                *usLen += 1;
    38b2:	80 81       	ld	r24, Z
    38b4:	91 81       	ldd	r25, Z+1	; 0x01
    38b6:	01 96       	adiw	r24, 0x01	; 1
    38b8:	91 83       	std	Z+1, r25	; 0x01
    38ba:	80 83       	st	Z, r24
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
    38bc:	9c 2d       	mov	r25, r12
    38be:	80 e0       	ldi	r24, 0x00	; 0
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
    38c0:	8d 29       	or	r24, r13
        usRegReadAddress++;
    38c2:	bc 01       	movw	r22, r24
    38c4:	6f 5f       	subi	r22, 0xFF	; 255
    38c6:	7f 4f       	sbci	r23, 0xFF	; 255
                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
                *usLen += 1;

                /* Make the read callback. */
                eRegStatus =
    38c8:	20 e0       	ldi	r18, 0x00	; 0
    38ca:	a7 01       	movw	r20, r14
    38cc:	ce 01       	movw	r24, r28
    38ce:	02 96       	adiw	r24, 0x02	; 2
    38d0:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <eMBRegHoldingCB>
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
                if( eRegStatus == MB_ENOERR )
    38d4:	81 11       	cpse	r24, r1
    38d6:	15 c0       	rjmp	.+42     	; 0x3902 <eMBFuncReadWriteMultipleHoldingRegister+0xee>
                {
                    *usLen += 2 * usRegReadCount;
    38d8:	ee 0c       	add	r14, r14
    38da:	ff 1c       	adc	r15, r15
    38dc:	f8 01       	movw	r30, r16
    38de:	80 81       	ld	r24, Z
    38e0:	91 81       	ldd	r25, Z+1	; 0x01
    38e2:	8e 0d       	add	r24, r14
    38e4:	9f 1d       	adc	r25, r15
    38e6:	91 83       	std	Z+1, r25	; 0x01
    38e8:	80 83       	st	Z, r24
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR           ucRegWriteByteCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    38ea:	80 e0       	ldi	r24, 0x00	; 0
    38ec:	0c c0       	rjmp	.+24     	; 0x3906 <eMBFuncReadWriteMultipleHoldingRegister+0xf2>
    38ee:	80 e0       	ldi	r24, 0x00	; 0
    38f0:	0a c0       	rjmp	.+20     	; 0x3906 <eMBFuncReadWriteMultipleHoldingRegister+0xf2>
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    38f2:	83 e0       	ldi	r24, 0x03	; 3
    38f4:	08 c0       	rjmp	.+16     	; 0x3906 <eMBFuncReadWriteMultipleHoldingRegister+0xf2>
    38f6:	83 e0       	ldi	r24, 0x03	; 3
    38f8:	06 c0       	rjmp	.+12     	; 0x3906 <eMBFuncReadWriteMultipleHoldingRegister+0xf2>
    38fa:	83 e0       	ldi	r24, 0x03	; 3
    38fc:	04 c0       	rjmp	.+8      	; 0x3906 <eMBFuncReadWriteMultipleHoldingRegister+0xf2>
    38fe:	83 e0       	ldi	r24, 0x03	; 3
    3900:	02 c0       	rjmp	.+4      	; 0x3906 <eMBFuncReadWriteMultipleHoldingRegister+0xf2>
                    *usLen += 2 * usRegReadCount;
                }
            }
            if( eRegStatus != MB_ENOERR )
            {
                eStatus = prveMBError2Exception( eRegStatus );
    3902:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <prveMBError2Exception>
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
        }
    }
    return eStatus;
}
    3906:	df 91       	pop	r29
    3908:	cf 91       	pop	r28
    390a:	1f 91       	pop	r17
    390c:	0f 91       	pop	r16
    390e:	ff 90       	pop	r15
    3910:	ef 90       	pop	r14
    3912:	df 90       	pop	r13
    3914:	cf 90       	pop	r12
    3916:	08 95       	ret

00003918 <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
    3918:	0f 93       	push	r16
    391a:	1f 93       	push	r17
    391c:	cf 93       	push	r28
    391e:	df 93       	push	r29
    3920:	eb 01       	movw	r28, r22
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    3922:	28 81       	ld	r18, Y
    3924:	39 81       	ldd	r19, Y+1	; 0x01
    3926:	25 30       	cpi	r18, 0x05	; 5
    3928:	31 05       	cpc	r19, r1
    392a:	09 f0       	breq	.+2      	; 0x392e <eMBFuncReadInputRegister+0x16>
    392c:	42 c0       	rjmp	.+132    	; 0x39b2 <eMBFuncReadInputRegister+0x9a>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
    392e:	dc 01       	movw	r26, r24
    3930:	11 96       	adiw	r26, 0x01	; 1
    3932:	fc 91       	ld	r31, X
    3934:	11 97       	sbiw	r26, 0x01	; 1
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
    3936:	12 96       	adiw	r26, 0x02	; 2
    3938:	ec 91       	ld	r30, X
    393a:	12 97       	sbiw	r26, 0x02	; 2
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
    393c:	13 96       	adiw	r26, 0x03	; 3
    393e:	5c 91       	ld	r21, X
    3940:	13 97       	sbiw	r26, 0x03	; 3
    3942:	40 e0       	ldi	r20, 0x00	; 0
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
    3944:	14 96       	adiw	r26, 0x04	; 4
    3946:	2c 91       	ld	r18, X
    3948:	14 97       	sbiw	r26, 0x04	; 4
    394a:	8a 01       	movw	r16, r20
    394c:	02 2b       	or	r16, r18

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
    394e:	98 01       	movw	r18, r16
    3950:	21 50       	subi	r18, 0x01	; 1
    3952:	31 09       	sbc	r19, r1
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
    3954:	2c 37       	cpi	r18, 0x7C	; 124
    3956:	31 05       	cpc	r19, r1
    3958:	70 f5       	brcc	.+92     	; 0x39b6 <eMBFuncReadInputRegister+0x9e>
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
    395a:	19 82       	std	Y+1, r1	; 0x01
    395c:	18 82       	st	Y, r1

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
    395e:	24 e0       	ldi	r18, 0x04	; 4
    3960:	2c 93       	st	X, r18
            *usLen += 1;
    3962:	28 81       	ld	r18, Y
    3964:	39 81       	ldd	r19, Y+1	; 0x01
    3966:	2f 5f       	subi	r18, 0xFF	; 255
    3968:	3f 4f       	sbci	r19, 0xFF	; 255
    396a:	39 83       	std	Y+1, r19	; 0x01
    396c:	28 83       	st	Y, r18

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
    396e:	20 2f       	mov	r18, r16
    3970:	22 0f       	add	r18, r18
    3972:	11 96       	adiw	r26, 0x01	; 1
    3974:	2c 93       	st	X, r18
            *usLen += 1;
    3976:	28 81       	ld	r18, Y
    3978:	39 81       	ldd	r19, Y+1	; 0x01
    397a:	2f 5f       	subi	r18, 0xFF	; 255
    397c:	3f 4f       	sbci	r19, 0xFF	; 255
    397e:	39 83       	std	Y+1, r19	; 0x01
    3980:	28 83       	st	Y, r18
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
    3982:	7f 2f       	mov	r23, r31
    3984:	60 e0       	ldi	r22, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
    3986:	6e 2b       	or	r22, r30
        usRegAddress++;
    3988:	6f 5f       	subi	r22, 0xFF	; 255
    398a:	7f 4f       	sbci	r23, 0xFF	; 255

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
            *usLen += 1;

            eRegStatus =
    398c:	a8 01       	movw	r20, r16
    398e:	02 96       	adiw	r24, 0x02	; 2
    3990:	0e 94 88 15 	call	0x2b10	; 0x2b10 <eMBRegInputCB>
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
    3994:	88 23       	and	r24, r24
    3996:	19 f0       	breq	.+6      	; 0x399e <eMBFuncReadInputRegister+0x86>
            {
                eStatus = prveMBError2Exception( eRegStatus );
    3998:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <prveMBError2Exception>
    399c:	0d c0       	rjmp	.+26     	; 0x39b8 <eMBFuncReadInputRegister+0xa0>
            }
            else
            {
                *usLen += usRegCount * 2;
    399e:	00 0f       	add	r16, r16
    39a0:	11 1f       	adc	r17, r17
    39a2:	88 81       	ld	r24, Y
    39a4:	99 81       	ldd	r25, Y+1	; 0x01
    39a6:	08 0f       	add	r16, r24
    39a8:	19 1f       	adc	r17, r25
    39aa:	19 83       	std	Y+1, r17	; 0x01
    39ac:	08 83       	st	Y, r16
{
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    39ae:	80 e0       	ldi	r24, 0x00	; 0
    39b0:	03 c0       	rjmp	.+6      	; 0x39b8 <eMBFuncReadInputRegister+0xa0>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    39b2:	83 e0       	ldi	r24, 0x03	; 3
    39b4:	01 c0       	rjmp	.+2      	; 0x39b8 <eMBFuncReadInputRegister+0xa0>
                *usLen += usRegCount * 2;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    39b6:	83 e0       	ldi	r24, 0x03	; 3
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    39b8:	df 91       	pop	r29
    39ba:	cf 91       	pop	r28
    39bc:	1f 91       	pop	r17
    39be:	0f 91       	pop	r16
    39c0:	08 95       	ret

000039c2 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
    39c2:	0f 93       	push	r16
    39c4:	1f 93       	push	r17
    39c6:	cf 93       	push	r28
    39c8:	df 93       	push	r29
    39ca:	8b 01       	movw	r16, r22
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
    39cc:	c0 91 dd 04 	lds	r28, 0x04DD
    39d0:	d0 91 de 04 	lds	r29, 0x04DE
    39d4:	9c 01       	movw	r18, r24
    39d6:	2f 5f       	subi	r18, 0xFF	; 255
    39d8:	3f 4f       	sbci	r19, 0xFF	; 255
    39da:	8f ed       	ldi	r24, 0xDF	; 223
    39dc:	94 e0       	ldi	r25, 0x04	; 4
    39de:	4c 2f       	mov	r20, r28
    39e0:	5d 2f       	mov	r21, r29
    39e2:	68 2f       	mov	r22, r24
    39e4:	79 2f       	mov	r23, r25
    39e6:	82 2f       	mov	r24, r18
    39e8:	93 2f       	mov	r25, r19
    39ea:	0e 94 10 2f 	call	0x5e20	; 0x5e20 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
    39ee:	21 96       	adiw	r28, 0x01	; 1
    39f0:	f8 01       	movw	r30, r16
    39f2:	d1 83       	std	Z+1, r29	; 0x01
    39f4:	c0 83       	st	Z, r28
    return MB_EX_NONE;
}
    39f6:	80 e0       	ldi	r24, 0x00	; 0
    39f8:	df 91       	pop	r29
    39fa:	cf 91       	pop	r28
    39fc:	1f 91       	pop	r17
    39fe:	0f 91       	pop	r16
    3a00:	08 95       	ret

00003a02 <eMBRTUInit>:
static volatile USHORT usRcvBufferPos;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
    3a02:	cf 92       	push	r12
    3a04:	df 92       	push	r13
    3a06:	ef 92       	push	r14
    3a08:	ff 92       	push	r15
    3a0a:	0f 93       	push	r16
    3a0c:	86 2f       	mov	r24, r22
    3a0e:	69 01       	movw	r12, r18
    3a10:	7a 01       	movw	r14, r20
    eMBErrorCode    eStatus = MB_ENOERR;
    ULONG           usTimerT35_50us;

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );
    3a12:	f8 94       	cli

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
    3a14:	28 e0       	ldi	r18, 0x08	; 8
    3a16:	b7 01       	movw	r22, r14
    3a18:	a6 01       	movw	r20, r12
    3a1a:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <xMBPortSerialInit>
    3a1e:	81 30       	cpi	r24, 0x01	; 1
    3a20:	f9 f4       	brne	.+62     	; 0x3a60 <eMBRTUInit+0x5e>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
    3a22:	81 e0       	ldi	r24, 0x01	; 1
    3a24:	c8 16       	cp	r12, r24
    3a26:	8b e4       	ldi	r24, 0x4B	; 75
    3a28:	d8 06       	cpc	r13, r24
    3a2a:	e1 04       	cpc	r14, r1
    3a2c:	f1 04       	cpc	r15, r1
    3a2e:	68 f4       	brcc	.+26     	; 0x3a4a <eMBRTUInit+0x48>
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
    3a30:	a7 01       	movw	r20, r14
    3a32:	96 01       	movw	r18, r12
    3a34:	22 0f       	add	r18, r18
    3a36:	33 1f       	adc	r19, r19
    3a38:	44 1f       	adc	r20, r20
    3a3a:	55 1f       	adc	r21, r21
    3a3c:	60 ea       	ldi	r22, 0xA0	; 160
    3a3e:	7f e7       	ldi	r23, 0x7F	; 127
    3a40:	87 e1       	ldi	r24, 0x17	; 23
    3a42:	90 e0       	ldi	r25, 0x00	; 0
    3a44:	0e 94 ad 2e 	call	0x5d5a	; 0x5d5a <__udivmodsi4>
    3a48:	04 c0       	rjmp	.+8      	; 0x3a52 <eMBRTUInit+0x50>
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
        {
            usTimerT35_50us = 35;       /* 1800us. */
    3a4a:	23 e2       	ldi	r18, 0x23	; 35
    3a4c:	30 e0       	ldi	r19, 0x00	; 0
    3a4e:	40 e0       	ldi	r20, 0x00	; 0
    3a50:	50 e0       	ldi	r21, 0x00	; 0
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
        }
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
    3a52:	c9 01       	movw	r24, r18
    3a54:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <xMBPortTimersInit>
    3a58:	81 30       	cpi	r24, 0x01	; 1
    3a5a:	21 f4       	brne	.+8      	; 0x3a64 <eMBRTUInit+0x62>

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
    eMBErrorCode    eStatus = MB_ENOERR;
    3a5c:	80 e0       	ldi	r24, 0x00	; 0
    3a5e:	03 c0       	rjmp	.+6      	; 0x3a66 <eMBRTUInit+0x64>
    ENTER_CRITICAL_SECTION(  );

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
    {
        eStatus = MB_EPORTERR;
    3a60:	83 e0       	ldi	r24, 0x03	; 3
    3a62:	01 c0       	rjmp	.+2      	; 0x3a66 <eMBRTUInit+0x64>
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
        }
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
        {
            eStatus = MB_EPORTERR;
    3a64:	83 e0       	ldi	r24, 0x03	; 3
        }
    }
    EXIT_CRITICAL_SECTION(  );
    3a66:	78 94       	sei

    return eStatus;
}
    3a68:	0f 91       	pop	r16
    3a6a:	ff 90       	pop	r15
    3a6c:	ef 90       	pop	r14
    3a6e:	df 90       	pop	r13
    3a70:	cf 90       	pop	r12
    3a72:	08 95       	ret

00003a74 <eMBRTUStart>:

void
eMBRTUStart( void )
{
    ENTER_CRITICAL_SECTION(  );
    3a74:	f8 94       	cli
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
    3a76:	10 92 03 05 	sts	0x0503, r1
    vMBPortSerialEnable( TRUE, FALSE );
    3a7a:	60 e0       	ldi	r22, 0x00	; 0
    3a7c:	81 e0       	ldi	r24, 0x01	; 1
    3a7e:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <vMBPortSerialEnable>
    vMBPortTimersEnable(  );
    3a82:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <vMBPortTimersEnable>

    EXIT_CRITICAL_SECTION(  );
    3a86:	78 94       	sei
    3a88:	08 95       	ret

00003a8a <eMBRTUStop>:
}

void
eMBRTUStop( void )
{
    ENTER_CRITICAL_SECTION(  );
    3a8a:	f8 94       	cli
    vMBPortSerialEnable( FALSE, FALSE );
    3a8c:	60 e0       	ldi	r22, 0x00	; 0
    3a8e:	80 e0       	ldi	r24, 0x00	; 0
    3a90:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
    3a94:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <vMBPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
    3a98:	78 94       	sei
    3a9a:	08 95       	ret

00003a9c <eMBRTUReceive>:
}

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
    3a9c:	ef 92       	push	r14
    3a9e:	ff 92       	push	r15
    3aa0:	0f 93       	push	r16
    3aa2:	1f 93       	push	r17
    3aa4:	cf 93       	push	r28
    3aa6:	df 93       	push	r29
    3aa8:	7c 01       	movw	r14, r24
    3aaa:	eb 01       	movw	r28, r22
    3aac:	8a 01       	movw	r16, r20
    BOOL            xFrameReceived = FALSE;
    eMBErrorCode    eStatus = MB_ENOERR;

    ENTER_CRITICAL_SECTION(  );
    3aae:	f8 94       	cli
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
    3ab0:	20 91 ff 04 	lds	r18, 0x04FF
    3ab4:	30 91 00 05 	lds	r19, 0x0500
    3ab8:	24 30       	cpi	r18, 0x04	; 4
    3aba:	31 05       	cpc	r19, r1
    3abc:	e0 f0       	brcs	.+56     	; 0x3af6 <eMBRTUReceive+0x5a>
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
    3abe:	60 91 ff 04 	lds	r22, 0x04FF
    3ac2:	70 91 00 05 	lds	r23, 0x0500
    3ac6:	86 ea       	ldi	r24, 0xA6	; 166
    3ac8:	96 e0       	ldi	r25, 0x06	; 6
    3aca:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <usMBCRC16>
    3ace:	89 2b       	or	r24, r25
    3ad0:	a1 f4       	brne	.+40     	; 0x3afa <eMBRTUReceive+0x5e>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
    3ad2:	80 91 a6 06 	lds	r24, 0x06A6
    3ad6:	f7 01       	movw	r30, r14
    3ad8:	80 83       	st	Z, r24

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
    3ada:	80 91 ff 04 	lds	r24, 0x04FF
    3ade:	90 91 00 05 	lds	r25, 0x0500
    3ae2:	03 97       	sbiw	r24, 0x03	; 3
    3ae4:	f8 01       	movw	r30, r16
    3ae6:	91 83       	std	Z+1, r25	; 0x01
    3ae8:	80 83       	st	Z, r24

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
    3aea:	87 ea       	ldi	r24, 0xA7	; 167
    3aec:	96 e0       	ldi	r25, 0x06	; 6
    3aee:	99 83       	std	Y+1, r25	; 0x01
    3af0:	88 83       	st	Y, r24

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
    BOOL            xFrameReceived = FALSE;
    eMBErrorCode    eStatus = MB_ENOERR;
    3af2:	80 e0       	ldi	r24, 0x00	; 0
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
        xFrameReceived = TRUE;
    3af4:	03 c0       	rjmp	.+6      	; 0x3afc <eMBRTUReceive+0x60>
    }
    else
    {
        eStatus = MB_EIO;
    3af6:	85 e0       	ldi	r24, 0x05	; 5
    3af8:	01 c0       	rjmp	.+2      	; 0x3afc <eMBRTUReceive+0x60>
    3afa:	85 e0       	ldi	r24, 0x05	; 5
    }

    EXIT_CRITICAL_SECTION(  );
    3afc:	78 94       	sei
    return eStatus;
}
    3afe:	df 91       	pop	r29
    3b00:	cf 91       	pop	r28
    3b02:	1f 91       	pop	r17
    3b04:	0f 91       	pop	r16
    3b06:	ff 90       	pop	r15
    3b08:	ef 90       	pop	r14
    3b0a:	08 95       	ret

00003b0c <eMBRTUSend>:
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
    eMBErrorCode    eStatus = MB_ENOERR;
    USHORT          usCRC16;

    ENTER_CRITICAL_SECTION(  );
    3b0c:	f8 94       	cli

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
    3b0e:	90 91 03 05 	lds	r25, 0x0503
    3b12:	91 30       	cpi	r25, 0x01	; 1
    3b14:	09 f0       	breq	.+2      	; 0x3b18 <eMBRTUSend+0xc>
    3b16:	43 c0       	rjmp	.+134    	; 0x3b9e <eMBRTUSend+0x92>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
    3b18:	fb 01       	movw	r30, r22
    3b1a:	31 97       	sbiw	r30, 0x01	; 1
    3b1c:	f0 93 06 05 	sts	0x0506, r31
    3b20:	e0 93 05 05 	sts	0x0505, r30
        usSndBufferCount = 1;
    3b24:	21 e0       	ldi	r18, 0x01	; 1
    3b26:	30 e0       	ldi	r19, 0x00	; 0
    3b28:	30 93 02 05 	sts	0x0502, r19
    3b2c:	20 93 01 05 	sts	0x0501, r18

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
    3b30:	80 83       	st	Z, r24
        usSndBufferCount += usLength;
    3b32:	80 91 01 05 	lds	r24, 0x0501
    3b36:	90 91 02 05 	lds	r25, 0x0502
    3b3a:	48 0f       	add	r20, r24
    3b3c:	59 1f       	adc	r21, r25
    3b3e:	50 93 02 05 	sts	0x0502, r21
    3b42:	40 93 01 05 	sts	0x0501, r20

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
    3b46:	60 91 01 05 	lds	r22, 0x0501
    3b4a:	70 91 02 05 	lds	r23, 0x0502
    3b4e:	cf 01       	movw	r24, r30
    3b50:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <usMBCRC16>
    3b54:	49 2f       	mov	r20, r25
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
    3b56:	20 91 01 05 	lds	r18, 0x0501
    3b5a:	30 91 02 05 	lds	r19, 0x0502
    3b5e:	f9 01       	movw	r30, r18
    3b60:	ea 55       	subi	r30, 0x5A	; 90
    3b62:	f9 4f       	sbci	r31, 0xF9	; 249
    3b64:	80 83       	st	Z, r24
    3b66:	2f 5f       	subi	r18, 0xFF	; 255
    3b68:	3f 4f       	sbci	r19, 0xFF	; 255
    3b6a:	30 93 02 05 	sts	0x0502, r19
    3b6e:	20 93 01 05 	sts	0x0501, r18
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
    3b72:	80 91 01 05 	lds	r24, 0x0501
    3b76:	90 91 02 05 	lds	r25, 0x0502
    3b7a:	fc 01       	movw	r30, r24
    3b7c:	ea 55       	subi	r30, 0x5A	; 90
    3b7e:	f9 4f       	sbci	r31, 0xF9	; 249
    3b80:	40 83       	st	Z, r20
    3b82:	01 96       	adiw	r24, 0x01	; 1
    3b84:	90 93 02 05 	sts	0x0502, r25
    3b88:	80 93 01 05 	sts	0x0501, r24

        /* Activate the transmitter. */
        eSndState = STATE_TX_XMIT;
    3b8c:	81 e0       	ldi	r24, 0x01	; 1
    3b8e:	80 93 04 05 	sts	0x0504, r24
        vMBPortSerialEnable( FALSE, TRUE );
    3b92:	61 e0       	ldi	r22, 0x01	; 1
    3b94:	80 e0       	ldi	r24, 0x00	; 0
    3b96:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <vMBPortSerialEnable>
}

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
    eMBErrorCode    eStatus = MB_ENOERR;
    3b9a:	80 e0       	ldi	r24, 0x00	; 0
    3b9c:	01 c0       	rjmp	.+2      	; 0x3ba0 <eMBRTUSend+0x94>
        eSndState = STATE_TX_XMIT;
        vMBPortSerialEnable( FALSE, TRUE );
    }
    else
    {
        eStatus = MB_EIO;
    3b9e:	85 e0       	ldi	r24, 0x05	; 5
    }
    EXIT_CRITICAL_SECTION(  );
    3ba0:	78 94       	sei
    return eStatus;
}
    3ba2:	08 95       	ret

00003ba4 <xMBRTUReceiveFSM>:

BOOL
xMBRTUReceiveFSM( void )
{
    3ba4:	cf 93       	push	r28
    3ba6:	df 93       	push	r29
    3ba8:	1f 92       	push	r1
    3baa:	cd b7       	in	r28, 0x3d	; 61
    3bac:	de b7       	in	r29, 0x3e	; 62
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );

    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
    3bae:	ce 01       	movw	r24, r28
    3bb0:	01 96       	adiw	r24, 0x01	; 1
    3bb2:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <xMBPortSerialGetByte>

    switch ( eRcvState )
    3bb6:	80 91 03 05 	lds	r24, 0x0503
    3bba:	81 30       	cpi	r24, 0x01	; 1
    3bbc:	61 f0       	breq	.+24     	; 0x3bd6 <xMBRTUReceiveFSM+0x32>
    3bbe:	28 f0       	brcs	.+10     	; 0x3bca <xMBRTUReceiveFSM+0x26>
    3bc0:	82 30       	cpi	r24, 0x02	; 2
    3bc2:	09 f1       	breq	.+66     	; 0x3c06 <xMBRTUReceiveFSM+0x62>
    3bc4:	83 30       	cpi	r24, 0x03	; 3
    3bc6:	d9 f5       	brne	.+118    	; 0x3c3e <xMBRTUReceiveFSM+0x9a>
    3bc8:	03 c0       	rjmp	.+6      	; 0x3bd0 <xMBRTUReceiveFSM+0x2c>
    {
        /* If we have received a character in the init state we have to
         * wait until the frame is finished.
         */
    case STATE_RX_INIT:
        vMBPortTimersEnable(  );
    3bca:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <vMBPortTimersEnable>
        break;
    3bce:	37 c0       	rjmp	.+110    	; 0x3c3e <xMBRTUReceiveFSM+0x9a>

        /* In the error state we wait until all characters in the
         * damaged frame are transmitted.
         */
    case STATE_RX_ERROR:
        vMBPortTimersEnable(  );
    3bd0:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <vMBPortTimersEnable>
        break;
    3bd4:	34 c0       	rjmp	.+104    	; 0x3c3e <xMBRTUReceiveFSM+0x9a>
        /* In the idle state we wait for a new character. If a character
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
        usRcvBufferPos = 0;
    3bd6:	10 92 00 05 	sts	0x0500, r1
    3bda:	10 92 ff 04 	sts	0x04FF, r1
        ucRTUBuf[usRcvBufferPos++] = ucByte;
    3bde:	80 91 ff 04 	lds	r24, 0x04FF
    3be2:	90 91 00 05 	lds	r25, 0x0500
    3be6:	29 81       	ldd	r18, Y+1	; 0x01
    3be8:	fc 01       	movw	r30, r24
    3bea:	ea 55       	subi	r30, 0x5A	; 90
    3bec:	f9 4f       	sbci	r31, 0xF9	; 249
    3bee:	20 83       	st	Z, r18
    3bf0:	01 96       	adiw	r24, 0x01	; 1
    3bf2:	90 93 00 05 	sts	0x0500, r25
    3bf6:	80 93 ff 04 	sts	0x04FF, r24
        eRcvState = STATE_RX_RCV;
    3bfa:	82 e0       	ldi	r24, 0x02	; 2
    3bfc:	80 93 03 05 	sts	0x0503, r24

        /* Enable t3.5 timers. */
        vMBPortTimersEnable(  );
    3c00:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <vMBPortTimersEnable>
        break;
    3c04:	1c c0       	rjmp	.+56     	; 0x3c3e <xMBRTUReceiveFSM+0x9a>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_RX_RCV:
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
    3c06:	80 91 ff 04 	lds	r24, 0x04FF
    3c0a:	90 91 00 05 	lds	r25, 0x0500
    3c0e:	8f 3f       	cpi	r24, 0xFF	; 255
    3c10:	91 05       	cpc	r25, r1
    3c12:	09 f0       	breq	.+2      	; 0x3c16 <xMBRTUReceiveFSM+0x72>
    3c14:	78 f4       	brcc	.+30     	; 0x3c34 <xMBRTUReceiveFSM+0x90>
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
    3c16:	80 91 ff 04 	lds	r24, 0x04FF
    3c1a:	90 91 00 05 	lds	r25, 0x0500
    3c1e:	29 81       	ldd	r18, Y+1	; 0x01
    3c20:	fc 01       	movw	r30, r24
    3c22:	ea 55       	subi	r30, 0x5A	; 90
    3c24:	f9 4f       	sbci	r31, 0xF9	; 249
    3c26:	20 83       	st	Z, r18
    3c28:	01 96       	adiw	r24, 0x01	; 1
    3c2a:	90 93 00 05 	sts	0x0500, r25
    3c2e:	80 93 ff 04 	sts	0x04FF, r24
    3c32:	03 c0       	rjmp	.+6      	; 0x3c3a <xMBRTUReceiveFSM+0x96>
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
    3c34:	83 e0       	ldi	r24, 0x03	; 3
    3c36:	80 93 03 05 	sts	0x0503, r24
        }
        vMBPortTimersEnable(  );
    3c3a:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <vMBPortTimersEnable>
        break;
    }
    return xTaskNeedSwitch;
}
    3c3e:	80 e0       	ldi	r24, 0x00	; 0
    3c40:	0f 90       	pop	r0
    3c42:	df 91       	pop	r29
    3c44:	cf 91       	pop	r28
    3c46:	08 95       	ret

00003c48 <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )
{
    3c48:	cf 93       	push	r28
    BOOL            xNeedPoll = FALSE;

    assert( eRcvState == STATE_RX_IDLE );

    switch ( eSndState )
    3c4a:	80 91 04 05 	lds	r24, 0x0504
    3c4e:	88 23       	and	r24, r24
    3c50:	19 f0       	breq	.+6      	; 0x3c58 <xMBRTUTransmitFSM+0x10>
    3c52:	81 30       	cpi	r24, 0x01	; 1
    3c54:	99 f5       	brne	.+102    	; 0x3cbc <xMBRTUTransmitFSM+0x74>
    3c56:	06 c0       	rjmp	.+12     	; 0x3c64 <xMBRTUTransmitFSM+0x1c>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
    3c58:	60 e0       	ldi	r22, 0x00	; 0
    3c5a:	81 e0       	ldi	r24, 0x01	; 1
    3c5c:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <vMBPortSerialEnable>
}

BOOL
xMBRTUTransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
    3c60:	c0 e0       	ldi	r28, 0x00	; 0
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
        break;
    3c62:	2d c0       	rjmp	.+90     	; 0x3cbe <xMBRTUTransmitFSM+0x76>

    case STATE_TX_XMIT:
        /* check if we are finished. */
        if( usSndBufferCount != 0 )
    3c64:	80 91 01 05 	lds	r24, 0x0501
    3c68:	90 91 02 05 	lds	r25, 0x0502
    3c6c:	89 2b       	or	r24, r25
    3c6e:	d9 f0       	breq	.+54     	; 0x3ca6 <xMBRTUTransmitFSM+0x5e>
        {
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
    3c70:	e0 91 05 05 	lds	r30, 0x0505
    3c74:	f0 91 06 05 	lds	r31, 0x0506
    3c78:	80 81       	ld	r24, Z
    3c7a:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <xMBPortSerialPutByte>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
    3c7e:	80 91 05 05 	lds	r24, 0x0505
    3c82:	90 91 06 05 	lds	r25, 0x0506
    3c86:	01 96       	adiw	r24, 0x01	; 1
    3c88:	90 93 06 05 	sts	0x0506, r25
    3c8c:	80 93 05 05 	sts	0x0505, r24
            usSndBufferCount--;
    3c90:	80 91 01 05 	lds	r24, 0x0501
    3c94:	90 91 02 05 	lds	r25, 0x0502
    3c98:	01 97       	sbiw	r24, 0x01	; 1
    3c9a:	90 93 02 05 	sts	0x0502, r25
    3c9e:	80 93 01 05 	sts	0x0501, r24
}

BOOL
xMBRTUTransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
    3ca2:	c0 e0       	ldi	r28, 0x00	; 0
    3ca4:	0c c0       	rjmp	.+24     	; 0x3cbe <xMBRTUTransmitFSM+0x76>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
            usSndBufferCount--;
        }
        else
        {
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
    3ca6:	83 e0       	ldi	r24, 0x03	; 3
    3ca8:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <xMBPortEventPost>
    3cac:	c8 2f       	mov	r28, r24
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */
            vMBPortSerialEnable( TRUE, FALSE );
    3cae:	60 e0       	ldi	r22, 0x00	; 0
    3cb0:	81 e0       	ldi	r24, 0x01	; 1
    3cb2:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
    3cb6:	10 92 04 05 	sts	0x0504, r1
    3cba:	01 c0       	rjmp	.+2      	; 0x3cbe <xMBRTUTransmitFSM+0x76>
}

BOOL
xMBRTUTransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
    3cbc:	c0 e0       	ldi	r28, 0x00	; 0
        }
        break;
    }

    return xNeedPoll;
}
    3cbe:	8c 2f       	mov	r24, r28
    3cc0:	cf 91       	pop	r28
    3cc2:	08 95       	ret

00003cc4 <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )
{
    3cc4:	cf 93       	push	r28
    BOOL            xNeedPoll = FALSE;

    switch ( eRcvState )
    3cc6:	80 91 03 05 	lds	r24, 0x0503
    3cca:	88 23       	and	r24, r24
    3ccc:	19 f0       	breq	.+6      	; 0x3cd4 <xMBRTUTimerT35Expired+0x10>
    3cce:	82 30       	cpi	r24, 0x02	; 2
    3cd0:	59 f4       	brne	.+22     	; 0x3ce8 <xMBRTUTimerT35Expired+0x24>
    3cd2:	05 c0       	rjmp	.+10     	; 0x3cde <xMBRTUTimerT35Expired+0x1a>
    {
        /* Timer t35 expired. Startup phase is finished. */
    case STATE_RX_INIT:
        xNeedPoll = xMBPortEventPost( EV_READY );
    3cd4:	80 e0       	ldi	r24, 0x00	; 0
    3cd6:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <xMBPortEventPost>
    3cda:	c8 2f       	mov	r28, r24
        break;
    3cdc:	06 c0       	rjmp	.+12     	; 0x3cea <xMBRTUTimerT35Expired+0x26>

        /* A frame was received and t35 expired. Notify the listener that
         * a new frame was received. */
    case STATE_RX_RCV:
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
    3cde:	81 e0       	ldi	r24, 0x01	; 1
    3ce0:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <xMBPortEventPost>
    3ce4:	c8 2f       	mov	r28, r24
        break;
    3ce6:	01 c0       	rjmp	.+2      	; 0x3cea <xMBRTUTimerT35Expired+0x26>
}

BOOL
xMBRTUTimerT35Expired( void )
{
    BOOL            xNeedPoll = FALSE;
    3ce8:	c0 e0       	ldi	r28, 0x00	; 0
    default:
        assert( ( eRcvState == STATE_RX_INIT ) ||
                ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
    }

    vMBPortTimersDisable(  );
    3cea:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
    3cee:	81 e0       	ldi	r24, 0x01	; 1
    3cf0:	80 93 03 05 	sts	0x0503, r24

    return xNeedPoll;
}
    3cf4:	8c 2f       	mov	r24, r28
    3cf6:	cf 91       	pop	r28
    3cf8:	08 95       	ret

00003cfa <prveMBError2Exception>:
eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
    eMBException    eStatus;

    switch ( eErrorCode )
    3cfa:	81 30       	cpi	r24, 0x01	; 1
    3cfc:	51 f0       	breq	.+20     	; 0x3d12 <prveMBError2Exception+0x18>
    3cfe:	18 f0       	brcs	.+6      	; 0x3d06 <prveMBError2Exception+0xc>
    3d00:	87 30       	cpi	r24, 0x07	; 7
    3d02:	29 f4       	brne	.+10     	; 0x3d0e <prveMBError2Exception+0x14>
    3d04:	02 c0       	rjmp	.+4      	; 0x3d0a <prveMBError2Exception+0x10>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
    3d06:	80 e0       	ldi	r24, 0x00	; 0
    3d08:	08 95       	ret
        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
            break;

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
    3d0a:	86 e0       	ldi	r24, 0x06	; 6
            break;
    3d0c:	08 95       	ret

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
    3d0e:	84 e0       	ldi	r24, 0x04	; 4
            break;
    3d10:	08 95       	ret
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
            break;

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
    3d12:	82 e0       	ldi	r24, 0x02	; 2
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
            break;
    }

    return eStatus;
}
    3d14:	08 95       	ret

00003d16 <xMBPortEventInit>:

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
    xEventInQueue = FALSE;
    3d16:	10 92 07 05 	sts	0x0507, r1
    return TRUE;
}
    3d1a:	81 e0       	ldi	r24, 0x01	; 1
    3d1c:	08 95       	ret

00003d1e <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
    xEventInQueue = TRUE;
    3d1e:	91 e0       	ldi	r25, 0x01	; 1
    3d20:	90 93 07 05 	sts	0x0507, r25
    eQueuedEvent = eEvent;
    3d24:	80 93 08 05 	sts	0x0508, r24
    return TRUE;
}
    3d28:	81 e0       	ldi	r24, 0x01	; 1
    3d2a:	08 95       	ret

00003d2c <xMBPortEventGet>:
BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
    BOOL            xEventHappened = FALSE;

    if( xEventInQueue )
    3d2c:	20 91 07 05 	lds	r18, 0x0507
    3d30:	22 23       	and	r18, r18
    3d32:	41 f0       	breq	.+16     	; 0x3d44 <xMBPortEventGet+0x18>
    {
        *eEvent = eQueuedEvent;
    3d34:	20 91 08 05 	lds	r18, 0x0508
    3d38:	fc 01       	movw	r30, r24
    3d3a:	20 83       	st	Z, r18
        xEventInQueue = FALSE;
    3d3c:	10 92 07 05 	sts	0x0507, r1
        xEventHappened = TRUE;
    3d40:	81 e0       	ldi	r24, 0x01	; 1
    3d42:	08 95       	ret
}

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
    BOOL            xEventHappened = FALSE;
    3d44:	80 e0       	ldi	r24, 0x00	; 0
        *eEvent = eQueuedEvent;
        xEventInQueue = FALSE;
        xEventHappened = TRUE;
    }
    return xEventHappened;
}
    3d46:	08 95       	ret

00003d48 <vMBPortSerialEnable>:
vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
#ifdef RTS_ENABLE
    UCSRB |= _BV( TXEN ) | _BV(TXCIE);
#else
    UCSRB |= _BV( TXEN );
    3d48:	53 9a       	sbi	0x0a, 3	; 10
#endif

    if( xRxEnable )
    3d4a:	88 23       	and	r24, r24
    3d4c:	21 f0       	breq	.+8      	; 0x3d56 <vMBPortSerialEnable+0xe>
    {
        UCSRB |= _BV( RXEN ) | _BV( RXCIE );
    3d4e:	8a b1       	in	r24, 0x0a	; 10
    3d50:	80 69       	ori	r24, 0x90	; 144
    3d52:	8a b9       	out	0x0a, r24	; 10
    3d54:	03 c0       	rjmp	.+6      	; 0x3d5c <vMBPortSerialEnable+0x14>
    }
    else
    {
        UCSRB &= ~( _BV( RXEN ) | _BV( RXCIE ) );
    3d56:	8a b1       	in	r24, 0x0a	; 10
    3d58:	8f 76       	andi	r24, 0x6F	; 111
    3d5a:	8a b9       	out	0x0a, r24	; 10
    }

    if( xTxEnable )
    3d5c:	66 23       	and	r22, r22
    3d5e:	21 f0       	breq	.+8      	; 0x3d68 <vMBPortSerialEnable+0x20>
    {
        UCSRB |= _BV( TXEN ) | _BV( UDRE );
    3d60:	8a b1       	in	r24, 0x0a	; 10
    3d62:	88 62       	ori	r24, 0x28	; 40
    3d64:	8a b9       	out	0x0a, r24	; 10
    3d66:	08 95       	ret
        RTS_HIGH;
#endif
    }
    else
    {
        UCSRB &= ~( _BV( UDRE ) );
    3d68:	55 98       	cbi	0x0a, 5	; 10
    3d6a:	08 95       	ret

00003d6c <xMBPortSerialInit>:
    }
}

BOOL
xMBPortSerialInit( UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity )
{
    3d6c:	0f 93       	push	r16
    3d6e:	cf 93       	push	r28
    3d70:	c2 2f       	mov	r28, r18
    UCHAR ucUCSRC = 0;

    /* prevent compiler warning. */
    (void)ucPORT;
	
    UBRR = UART_BAUD_CALC( ulBaudRate, F_CPU );
    3d72:	db 01       	movw	r26, r22
    3d74:	ca 01       	movw	r24, r20
    3d76:	88 0f       	add	r24, r24
    3d78:	99 1f       	adc	r25, r25
    3d7a:	aa 1f       	adc	r26, r26
    3d7c:	bb 1f       	adc	r27, r27
    3d7e:	88 0f       	add	r24, r24
    3d80:	99 1f       	adc	r25, r25
    3d82:	aa 1f       	adc	r26, r26
    3d84:	bb 1f       	adc	r27, r27
    3d86:	9c 01       	movw	r18, r24
    3d88:	ad 01       	movw	r20, r26
    3d8a:	22 0f       	add	r18, r18
    3d8c:	33 1f       	adc	r19, r19
    3d8e:	44 1f       	adc	r20, r20
    3d90:	55 1f       	adc	r21, r21
    3d92:	22 0f       	add	r18, r18
    3d94:	33 1f       	adc	r19, r19
    3d96:	44 1f       	adc	r20, r20
    3d98:	55 1f       	adc	r21, r21
    3d9a:	60 e0       	ldi	r22, 0x00	; 0
    3d9c:	74 e2       	ldi	r23, 0x24	; 36
    3d9e:	84 ef       	ldi	r24, 0xF4	; 244
    3da0:	90 e0       	ldi	r25, 0x00	; 0
    3da2:	0e 94 ad 2e 	call	0x5d5a	; 0x5d5a <__udivmodsi4>
    3da6:	21 50       	subi	r18, 0x01	; 1
    3da8:	29 b9       	out	0x09, r18	; 9

    switch ( eParity )
    3daa:	01 30       	cpi	r16, 0x01	; 1
    3dac:	21 f0       	breq	.+8      	; 0x3db6 <xMBPortSerialInit+0x4a>
    3dae:	02 30       	cpi	r16, 0x02	; 2
    3db0:	21 f0       	breq	.+8      	; 0x3dba <xMBPortSerialInit+0x4e>
}

BOOL
xMBPortSerialInit( UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity )
{
    UCHAR ucUCSRC = 0;
    3db2:	80 e0       	ldi	r24, 0x00	; 0
    3db4:	03 c0       	rjmp	.+6      	; 0x3dbc <xMBPortSerialInit+0x50>
    {
        case MB_PAR_EVEN:
            ucUCSRC |= _BV( UPM1 );
            break;
        case MB_PAR_ODD:
            ucUCSRC |= _BV( UPM1 ) | _BV( UPM0 );
    3db6:	80 e3       	ldi	r24, 0x30	; 48
            break;
    3db8:	01 c0       	rjmp	.+2      	; 0x3dbc <xMBPortSerialInit+0x50>
    UBRR = UART_BAUD_CALC( ulBaudRate, F_CPU );

    switch ( eParity )
    {
        case MB_PAR_EVEN:
            ucUCSRC |= _BV( UPM1 );
    3dba:	80 e2       	ldi	r24, 0x20	; 32
            break;
        case MB_PAR_NONE:
            break;
    }

    switch ( ucDataBits )
    3dbc:	c7 30       	cpi	r28, 0x07	; 7
    3dbe:	21 f0       	breq	.+8      	; 0x3dc8 <xMBPortSerialInit+0x5c>
    3dc0:	c8 30       	cpi	r28, 0x08	; 8
    3dc2:	19 f4       	brne	.+6      	; 0x3dca <xMBPortSerialInit+0x5e>
    {
        case 8:
            ucUCSRC |= _BV( UCSZ0 ) | _BV( UCSZ1 );
    3dc4:	86 60       	ori	r24, 0x06	; 6
            break;
    3dc6:	01 c0       	rjmp	.+2      	; 0x3dca <xMBPortSerialInit+0x5e>
        case 7:
            ucUCSRC |= _BV( UCSZ1 );
    3dc8:	84 60       	ori	r24, 0x04	; 4
#elif defined (__AVR_ATmega16__)
    UCSRC = _BV( URSEL ) | ucUCSRC;
#elif defined (__AVR_ATmega32__)
    UCSRC = _BV( URSEL ) | ucUCSRC;
#elif defined (__AVR_ATmega32A__)
	UCSRC = _BV( URSEL ) | ucUCSRC;
    3dca:	80 68       	ori	r24, 0x80	; 128
    3dcc:	80 bd       	out	0x20, r24	; 32
#elif defined (__AVR_ATmega128__)
    UCSRC |= ucUCSRC;
#endif

    vMBPortSerialEnable( FALSE, FALSE );
    3dce:	60 e0       	ldi	r22, 0x00	; 0
    3dd0:	80 e0       	ldi	r24, 0x00	; 0
    3dd2:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <vMBPortSerialEnable>

#ifdef RTS_ENABLE
    RTS_INIT;
#endif
    return TRUE;
}
    3dd6:	81 e0       	ldi	r24, 0x01	; 1
    3dd8:	cf 91       	pop	r28
    3dda:	0f 91       	pop	r16
    3ddc:	08 95       	ret

00003dde <xMBPortSerialPutByte>:

BOOL
xMBPortSerialPutByte( CHAR ucByte )
{
    UDR = ucByte;
    3dde:	8c b9       	out	0x0c, r24	; 12
    return TRUE;
}
    3de0:	81 e0       	ldi	r24, 0x01	; 1
    3de2:	08 95       	ret

00003de4 <xMBPortSerialGetByte>:

BOOL
xMBPortSerialGetByte( CHAR * pucByte )
{
    *pucByte = UDR;
    3de4:	2c b1       	in	r18, 0x0c	; 12
    3de6:	fc 01       	movw	r30, r24
    3de8:	20 83       	st	Z, r18
    return TRUE;
}
    3dea:	81 e0       	ldi	r24, 0x01	; 1
    3dec:	08 95       	ret

00003dee <__vector_14>:

ISR( USART_UDRE_vect )
{
    3dee:	1f 92       	push	r1
    3df0:	0f 92       	push	r0
    3df2:	0f b6       	in	r0, 0x3f	; 63
    3df4:	0f 92       	push	r0
    3df6:	11 24       	eor	r1, r1
    3df8:	2f 93       	push	r18
    3dfa:	3f 93       	push	r19
    3dfc:	4f 93       	push	r20
    3dfe:	5f 93       	push	r21
    3e00:	6f 93       	push	r22
    3e02:	7f 93       	push	r23
    3e04:	8f 93       	push	r24
    3e06:	9f 93       	push	r25
    3e08:	af 93       	push	r26
    3e0a:	bf 93       	push	r27
    3e0c:	ef 93       	push	r30
    3e0e:	ff 93       	push	r31
    pxMBFrameCBTransmitterEmpty(  );
    3e10:	e0 91 9c 06 	lds	r30, 0x069C
    3e14:	f0 91 9d 06 	lds	r31, 0x069D
    3e18:	09 95       	icall
}
    3e1a:	ff 91       	pop	r31
    3e1c:	ef 91       	pop	r30
    3e1e:	bf 91       	pop	r27
    3e20:	af 91       	pop	r26
    3e22:	9f 91       	pop	r25
    3e24:	8f 91       	pop	r24
    3e26:	7f 91       	pop	r23
    3e28:	6f 91       	pop	r22
    3e2a:	5f 91       	pop	r21
    3e2c:	4f 91       	pop	r20
    3e2e:	3f 91       	pop	r19
    3e30:	2f 91       	pop	r18
    3e32:	0f 90       	pop	r0
    3e34:	0f be       	out	0x3f, r0	; 63
    3e36:	0f 90       	pop	r0
    3e38:	1f 90       	pop	r1
    3e3a:	18 95       	reti

00003e3c <__vector_13>:

ISR( USART_RXC_vect )
{
    3e3c:	1f 92       	push	r1
    3e3e:	0f 92       	push	r0
    3e40:	0f b6       	in	r0, 0x3f	; 63
    3e42:	0f 92       	push	r0
    3e44:	11 24       	eor	r1, r1
    3e46:	2f 93       	push	r18
    3e48:	3f 93       	push	r19
    3e4a:	4f 93       	push	r20
    3e4c:	5f 93       	push	r21
    3e4e:	6f 93       	push	r22
    3e50:	7f 93       	push	r23
    3e52:	8f 93       	push	r24
    3e54:	9f 93       	push	r25
    3e56:	af 93       	push	r26
    3e58:	bf 93       	push	r27
    3e5a:	ef 93       	push	r30
    3e5c:	ff 93       	push	r31
	pxMBFrameCBByteReceived(  );
    3e5e:	e0 91 a0 06 	lds	r30, 0x06A0
    3e62:	f0 91 a1 06 	lds	r31, 0x06A1
    3e66:	09 95       	icall
}
    3e68:	ff 91       	pop	r31
    3e6a:	ef 91       	pop	r30
    3e6c:	bf 91       	pop	r27
    3e6e:	af 91       	pop	r26
    3e70:	9f 91       	pop	r25
    3e72:	8f 91       	pop	r24
    3e74:	7f 91       	pop	r23
    3e76:	6f 91       	pop	r22
    3e78:	5f 91       	pop	r21
    3e7a:	4f 91       	pop	r20
    3e7c:	3f 91       	pop	r19
    3e7e:	2f 91       	pop	r18
    3e80:	0f 90       	pop	r0
    3e82:	0f be       	out	0x3f, r0	; 63
    3e84:	0f 90       	pop	r0
    3e86:	1f 90       	pop	r1
    3e88:	18 95       	reti

00003e8a <xMBPortTimersInit>:
BOOL
xMBPortTimersInit( USHORT usTim1Timerout50us )
{
    /* Calculate overflow counter an OCR values for Timer1. */
    usTimerOCRADelta =
        ( MB_TIMER_TICKS * usTim1Timerout50us ) / ( MB_50US_TICKS );
    3e8a:	9c 01       	movw	r18, r24
    3e8c:	a9 e0       	ldi	r26, 0x09	; 9
    3e8e:	bd e3       	ldi	r27, 0x3D	; 61
    3e90:	0e 94 eb 2e 	call	0x5dd6	; 0x5dd6 <__umulhisi3>
    3e94:	20 e2       	ldi	r18, 0x20	; 32
    3e96:	3e e4       	ldi	r19, 0x4E	; 78
    3e98:	40 e0       	ldi	r20, 0x00	; 0
    3e9a:	50 e0       	ldi	r21, 0x00	; 0
    3e9c:	0e 94 ad 2e 	call	0x5d5a	; 0x5d5a <__udivmodsi4>
/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortTimersInit( USHORT usTim1Timerout50us )
{
    /* Calculate overflow counter an OCR values for Timer1. */
    usTimerOCRADelta =
    3ea0:	30 93 0a 05 	sts	0x050A, r19
    3ea4:	20 93 09 05 	sts	0x0509, r18
    TCCR1A = 0x00;
    TCCR1B = 0x00;
    TCCR1C = 0x00;
	*/
	
	TCCR2=0x00;
    3ea8:	15 bc       	out	0x25, r1	; 37

inline void
vMBPortTimersDisable(  )
{
    /* Disable the timer. */
    TCCR2 &= ~( _BV( CS22 ) | _BV( CS21 ) | _BV( CS20 ) );
    3eaa:	85 b5       	in	r24, 0x25	; 37
    3eac:	88 7f       	andi	r24, 0xF8	; 248
    3eae:	85 bd       	out	0x25, r24	; 37
    /* Disable the output compare interrupts for channel A/B. */
    TIMSK &= ~( _BV( OCIE2 ) );
    3eb0:	89 b7       	in	r24, 0x39	; 57
    3eb2:	8f 77       	andi	r24, 0x7F	; 127
    3eb4:	89 bf       	out	0x39, r24	; 57
    /* Clear output compare flags for channel A/B. */
    TIFR1 |= _BV( OCF2 ) ;
    3eb6:	88 b7       	in	r24, 0x38	; 56
    3eb8:	80 68       	ori	r24, 0x80	; 128
    3eba:	88 bf       	out	0x38, r24	; 56
	TCCR2=0x00;
	
    vMBPortTimersDisable(  );

    return TRUE;
}
    3ebc:	81 e0       	ldi	r24, 0x01	; 1
    3ebe:	08 95       	ret

00003ec0 <vMBPortTimersEnable>:


inline void
vMBPortTimersEnable(  )
{
    TCNT2 = 0x0000;
    3ec0:	14 bc       	out	0x24, r1	; 36
    if( usTimerOCRADelta > 0 )
    3ec2:	80 91 09 05 	lds	r24, 0x0509
    3ec6:	90 91 0a 05 	lds	r25, 0x050A
    3eca:	89 2b       	or	r24, r25
    3ecc:	31 f0       	breq	.+12     	; 0x3eda <vMBPortTimersEnable+0x1a>
    {
        TIMSK |= _BV( OCIE2 );
    3ece:	89 b7       	in	r24, 0x39	; 57
    3ed0:	80 68       	ori	r24, 0x80	; 128
    3ed2:	89 bf       	out	0x39, r24	; 57
        OCR2 = (uint8_t)usTimerOCRADelta;
    3ed4:	80 91 09 05 	lds	r24, 0x0509
    3ed8:	83 bd       	out	0x23, r24	; 35
    }

    TCCR2 |= _BV( CS22 ) | _BV( CS21 ) | _BV( CS20 );
    3eda:	85 b5       	in	r24, 0x25	; 37
    3edc:	87 60       	ori	r24, 0x07	; 7
    3ede:	85 bd       	out	0x25, r24	; 37
    3ee0:	08 95       	ret

00003ee2 <vMBPortTimersDisable>:

inline void
vMBPortTimersDisable(  )
{
    /* Disable the timer. */
    TCCR2 &= ~( _BV( CS22 ) | _BV( CS21 ) | _BV( CS20 ) );
    3ee2:	85 b5       	in	r24, 0x25	; 37
    3ee4:	88 7f       	andi	r24, 0xF8	; 248
    3ee6:	85 bd       	out	0x25, r24	; 37
    /* Disable the output compare interrupts for channel A/B. */
    TIMSK &= ~( _BV( OCIE2 ) );
    3ee8:	89 b7       	in	r24, 0x39	; 57
    3eea:	8f 77       	andi	r24, 0x7F	; 127
    3eec:	89 bf       	out	0x39, r24	; 57
    /* Clear output compare flags for channel A/B. */
    TIFR1 |= _BV( OCF2 ) ;
    3eee:	88 b7       	in	r24, 0x38	; 56
    3ef0:	80 68       	ori	r24, 0x80	; 128
    3ef2:	88 bf       	out	0x38, r24	; 56
    3ef4:	08 95       	ret

00003ef6 <__vector_4>:
}

ISR( TIMER2_COMP_vect, ISR_NOBLOCK )
{
    3ef6:	78 94       	sei
    3ef8:	1f 92       	push	r1
    3efa:	0f 92       	push	r0
    3efc:	0f b6       	in	r0, 0x3f	; 63
    3efe:	0f 92       	push	r0
    3f00:	11 24       	eor	r1, r1
    3f02:	2f 93       	push	r18
    3f04:	3f 93       	push	r19
    3f06:	4f 93       	push	r20
    3f08:	5f 93       	push	r21
    3f0a:	6f 93       	push	r22
    3f0c:	7f 93       	push	r23
    3f0e:	8f 93       	push	r24
    3f10:	9f 93       	push	r25
    3f12:	af 93       	push	r26
    3f14:	bf 93       	push	r27
    3f16:	ef 93       	push	r30
    3f18:	ff 93       	push	r31
    ( void )pxMBPortCBTimerExpired(  );
    3f1a:	e0 91 9e 06 	lds	r30, 0x069E
    3f1e:	f0 91 9f 06 	lds	r31, 0x069F
    3f22:	09 95       	icall
}
    3f24:	ff 91       	pop	r31
    3f26:	ef 91       	pop	r30
    3f28:	bf 91       	pop	r27
    3f2a:	af 91       	pop	r26
    3f2c:	9f 91       	pop	r25
    3f2e:	8f 91       	pop	r24
    3f30:	7f 91       	pop	r23
    3f32:	6f 91       	pop	r22
    3f34:	5f 91       	pop	r21
    3f36:	4f 91       	pop	r20
    3f38:	3f 91       	pop	r19
    3f3a:	2f 91       	pop	r18
    3f3c:	0f 90       	pop	r0
    3f3e:	0f be       	out	0x3f, r0	; 63
    3f40:	0f 90       	pop	r0
    3f42:	1f 90       	pop	r1
    3f44:	18 95       	reti

00003f46 <_Z6LED_Onh>:
 */ 
#include "Output.h"

void LED_On(uint8_t LED)
{
	switch (LED)
    3f46:	82 30       	cpi	r24, 0x02	; 2
    3f48:	31 f0       	breq	.+12     	; 0x3f56 <_Z6LED_Onh+0x10>
    3f4a:	83 30       	cpi	r24, 0x03	; 3
    3f4c:	31 f0       	breq	.+12     	; 0x3f5a <_Z6LED_Onh+0x14>
    3f4e:	81 30       	cpi	r24, 0x01	; 1
    3f50:	29 f4       	brne	.+10     	; 0x3f5c <_Z6LED_Onh+0x16>
	{
		case LED_RED: 
		{
			PORTB |= 0b00100000;
    3f52:	c5 9a       	sbi	0x18, 5	; 24
			break;
    3f54:	08 95       	ret
		}
		case LED_BLUE:
		{
			PORTB |= 0b01000000;
    3f56:	c6 9a       	sbi	0x18, 6	; 24
			break;
    3f58:	08 95       	ret
		}
		case LED_GREEN:
		{
			PORTB |= 0b10000000;
    3f5a:	c7 9a       	sbi	0x18, 7	; 24
    3f5c:	08 95       	ret

00003f5e <_Z7LED_Offh>:
	}
}

void LED_Off(uint8_t LED)
{
	switch (LED)
    3f5e:	82 30       	cpi	r24, 0x02	; 2
    3f60:	31 f0       	breq	.+12     	; 0x3f6e <_Z7LED_Offh+0x10>
    3f62:	83 30       	cpi	r24, 0x03	; 3
    3f64:	31 f0       	breq	.+12     	; 0x3f72 <_Z7LED_Offh+0x14>
    3f66:	81 30       	cpi	r24, 0x01	; 1
    3f68:	29 f4       	brne	.+10     	; 0x3f74 <_Z7LED_Offh+0x16>
	{
		case LED_RED:
		{
			PORTB &= ~0b00100000;
    3f6a:	c5 98       	cbi	0x18, 5	; 24
			break;
    3f6c:	08 95       	ret
		}
		case LED_BLUE:
		{
			PORTB &= ~0b01000000;
    3f6e:	c6 98       	cbi	0x18, 6	; 24
			break;
    3f70:	08 95       	ret
		}
		case LED_GREEN:
		{
			PORTB &= ~0b10000000;
    3f72:	c7 98       	cbi	0x18, 7	; 24
    3f74:	08 95       	ret

00003f76 <_Z8Sound_Onv>:
}


void Sound_On()
{
	PORTB |= 0b00001000;
    3f76:	c3 9a       	sbi	0x18, 3	; 24
    3f78:	08 95       	ret

00003f7a <_Z9Sound_Offv>:
}

void Sound_Off()
{
	PORTB &= ~0b00001000;
    3f7a:	c3 98       	cbi	0x18, 3	; 24
    3f7c:	08 95       	ret

00003f7e <_Z12ModbusLoaderv>:

//Выводим телеметрию и т.п. в Inputs
void ModbusLoader()
{
	
	usRegInputBuf[1]=T.array[0];
    3f7e:	80 91 bb 05 	lds	r24, 0x05BB
    3f82:	90 91 bc 05 	lds	r25, 0x05BC
    3f86:	90 93 ec 03 	sts	0x03EC, r25
    3f8a:	80 93 eb 03 	sts	0x03EB, r24
	usRegInputBuf[2]=T.array[1];
    3f8e:	80 91 bd 05 	lds	r24, 0x05BD
    3f92:	90 91 be 05 	lds	r25, 0x05BE
    3f96:	90 93 ee 03 	sts	0x03EE, r25
    3f9a:	80 93 ed 03 	sts	0x03ED, r24
	
	usRegInputBuf[3]=P.array[0];
    3f9e:	80 91 bf 05 	lds	r24, 0x05BF
    3fa2:	90 91 c0 05 	lds	r25, 0x05C0
    3fa6:	90 93 f0 03 	sts	0x03F0, r25
    3faa:	80 93 ef 03 	sts	0x03EF, r24
	usRegInputBuf[4]=P.array[1];
    3fae:	80 91 c1 05 	lds	r24, 0x05C1
    3fb2:	90 91 c2 05 	lds	r25, 0x05C2
    3fb6:	90 93 f2 03 	sts	0x03F2, r25
    3fba:	80 93 f1 03 	sts	0x03F1, r24
	//usRegInputBuf[3]=(uint16_t)EEE;
	
	usRegInputBuf[5]=k_x.array[0];
    3fbe:	80 91 e3 05 	lds	r24, 0x05E3
    3fc2:	90 91 e4 05 	lds	r25, 0x05E4
    3fc6:	90 93 f4 03 	sts	0x03F4, r25
    3fca:	80 93 f3 03 	sts	0x03F3, r24
	usRegInputBuf[6]=k_x.array[1];
    3fce:	80 91 e5 05 	lds	r24, 0x05E5
    3fd2:	90 91 e6 05 	lds	r25, 0x05E6
    3fd6:	90 93 f6 03 	sts	0x03F6, r25
    3fda:	80 93 f5 03 	sts	0x03F5, r24
	
	usRegInputBuf[7]=k_y.array[0];
    3fde:	80 91 e7 05 	lds	r24, 0x05E7
    3fe2:	90 91 e8 05 	lds	r25, 0x05E8
    3fe6:	90 93 f8 03 	sts	0x03F8, r25
    3fea:	80 93 f7 03 	sts	0x03F7, r24
	usRegInputBuf[8]=k_y.array[1];
    3fee:	80 91 e9 05 	lds	r24, 0x05E9
    3ff2:	90 91 ea 05 	lds	r25, 0x05EA
    3ff6:	90 93 fa 03 	sts	0x03FA, r25
    3ffa:	80 93 f9 03 	sts	0x03F9, r24
	
	usRegInputBuf[9]=k_z.array[0];
    3ffe:	80 91 eb 05 	lds	r24, 0x05EB
    4002:	90 91 ec 05 	lds	r25, 0x05EC
    4006:	90 93 fc 03 	sts	0x03FC, r25
    400a:	80 93 fb 03 	sts	0x03FB, r24
	usRegInputBuf[10]=k_z.array[1];
    400e:	80 91 ed 05 	lds	r24, 0x05ED
    4012:	90 91 ee 05 	lds	r25, 0x05EE
    4016:	90 93 fe 03 	sts	0x03FE, r25
    401a:	80 93 fd 03 	sts	0x03FD, r24
	
	usRegInputBuf[11] = B_x.array[0];
    401e:	80 91 1f 06 	lds	r24, 0x061F
    4022:	90 91 20 06 	lds	r25, 0x0620
    4026:	90 93 00 04 	sts	0x0400, r25
    402a:	80 93 ff 03 	sts	0x03FF, r24
	usRegInputBuf[12] = B_x.array[1];
    402e:	80 91 21 06 	lds	r24, 0x0621
    4032:	90 91 22 06 	lds	r25, 0x0622
    4036:	90 93 02 04 	sts	0x0402, r25
    403a:	80 93 01 04 	sts	0x0401, r24
	
	usRegInputBuf[13] = B_y.array[0];
    403e:	80 91 23 06 	lds	r24, 0x0623
    4042:	90 91 24 06 	lds	r25, 0x0624
    4046:	90 93 04 04 	sts	0x0404, r25
    404a:	80 93 03 04 	sts	0x0403, r24
	usRegInputBuf[14] = B_y.array[1];
    404e:	80 91 25 06 	lds	r24, 0x0625
    4052:	90 91 26 06 	lds	r25, 0x0626
    4056:	90 93 06 04 	sts	0x0406, r25
    405a:	80 93 05 04 	sts	0x0405, r24
	
	usRegInputBuf[15] = B_z.array[0];
    405e:	80 91 27 06 	lds	r24, 0x0627
    4062:	90 91 28 06 	lds	r25, 0x0628
    4066:	90 93 08 04 	sts	0x0408, r25
    406a:	80 93 07 04 	sts	0x0407, r24
	usRegInputBuf[16] = B_z.array[1];
    406e:	80 91 29 06 	lds	r24, 0x0629
    4072:	90 91 2a 06 	lds	r25, 0x062A
    4076:	90 93 0a 04 	sts	0x040A, r25
    407a:	80 93 09 04 	sts	0x0409, r24
	
	usRegInputBuf[17] = magOz.array[0];
    407e:	80 91 7f 06 	lds	r24, 0x067F
    4082:	90 91 80 06 	lds	r25, 0x0680
    4086:	90 93 0c 04 	sts	0x040C, r25
    408a:	80 93 0b 04 	sts	0x040B, r24
	usRegInputBuf[18] = magOz.array[1];
    408e:	80 91 81 06 	lds	r24, 0x0681
    4092:	90 91 82 06 	lds	r25, 0x0682
    4096:	90 93 0e 04 	sts	0x040E, r25
    409a:	80 93 0d 04 	sts	0x040D, r24
	
	usRegInputBuf[19] = Talt.array[0];	
    409e:	80 91 3f 06 	lds	r24, 0x063F
    40a2:	90 91 40 06 	lds	r25, 0x0640
    40a6:	90 93 10 04 	sts	0x0410, r25
    40aa:	80 93 0f 04 	sts	0x040F, r24
	usRegInputBuf[20] = Talt.array[1];
    40ae:	80 91 41 06 	lds	r24, 0x0641
    40b2:	90 91 42 06 	lds	r25, 0x0642
    40b6:	90 93 12 04 	sts	0x0412, r25
    40ba:	80 93 11 04 	sts	0x0411, r24
	
	usRegInputBuf[21] = w_x.array[0];
    40be:	80 91 07 06 	lds	r24, 0x0607
    40c2:	90 91 08 06 	lds	r25, 0x0608
    40c6:	90 93 14 04 	sts	0x0414, r25
    40ca:	80 93 13 04 	sts	0x0413, r24
	usRegInputBuf[22] = w_x.array[1];
    40ce:	80 91 09 06 	lds	r24, 0x0609
    40d2:	90 91 0a 06 	lds	r25, 0x060A
    40d6:	90 93 16 04 	sts	0x0416, r25
    40da:	80 93 15 04 	sts	0x0415, r24
	
	usRegInputBuf[23] = w_y.array[0];
    40de:	80 91 0b 06 	lds	r24, 0x060B
    40e2:	90 91 0c 06 	lds	r25, 0x060C
    40e6:	90 93 18 04 	sts	0x0418, r25
    40ea:	80 93 17 04 	sts	0x0417, r24
	usRegInputBuf[24] = w_y.array[1];
    40ee:	80 91 0d 06 	lds	r24, 0x060D
    40f2:	90 91 0e 06 	lds	r25, 0x060E
    40f6:	90 93 1a 04 	sts	0x041A, r25
    40fa:	80 93 19 04 	sts	0x0419, r24
	
	usRegInputBuf[25] = w_z.array[0];
    40fe:	80 91 0f 06 	lds	r24, 0x060F
    4102:	90 91 10 06 	lds	r25, 0x0610
    4106:	90 93 1c 04 	sts	0x041C, r25
    410a:	80 93 1b 04 	sts	0x041B, r24
	usRegInputBuf[26] = w_z.array[1];
    410e:	80 91 11 06 	lds	r24, 0x0611
    4112:	90 91 12 06 	lds	r25, 0x0612
    4116:	90 93 1e 04 	sts	0x041E, r25
    411a:	80 93 1d 04 	sts	0x041D, r24
	
	usRegInputBuf[27] = Ox.array[0];
    411e:	80 91 47 06 	lds	r24, 0x0647
    4122:	90 91 48 06 	lds	r25, 0x0648
    4126:	90 93 20 04 	sts	0x0420, r25
    412a:	80 93 1f 04 	sts	0x041F, r24
	usRegInputBuf[28] = Ox.array[1];
    412e:	80 91 49 06 	lds	r24, 0x0649
    4132:	90 91 4a 06 	lds	r25, 0x064A
    4136:	90 93 22 04 	sts	0x0422, r25
    413a:	80 93 21 04 	sts	0x0421, r24
	
	usRegInputBuf[29] = Oy.array[0];
    413e:	80 91 4b 06 	lds	r24, 0x064B
    4142:	90 91 4c 06 	lds	r25, 0x064C
    4146:	90 93 24 04 	sts	0x0424, r25
    414a:	80 93 23 04 	sts	0x0423, r24
	usRegInputBuf[30] = Oy.array[1];
    414e:	80 91 4d 06 	lds	r24, 0x064D
    4152:	90 91 4e 06 	lds	r25, 0x064E
    4156:	90 93 26 04 	sts	0x0426, r25
    415a:	80 93 25 04 	sts	0x0425, r24
	
	usRegInputBuf[31] = int_w_x.array[0];
    415e:	80 91 57 06 	lds	r24, 0x0657
    4162:	90 91 58 06 	lds	r25, 0x0658
    4166:	90 93 28 04 	sts	0x0428, r25
    416a:	80 93 27 04 	sts	0x0427, r24
	usRegInputBuf[32] = int_w_x.array[1];
    416e:	80 91 59 06 	lds	r24, 0x0659
    4172:	90 91 5a 06 	lds	r25, 0x065A
    4176:	90 93 2a 04 	sts	0x042A, r25
    417a:	80 93 29 04 	sts	0x0429, r24
	
	usRegInputBuf[33] = int_w_y.array[0];
    417e:	80 91 5b 06 	lds	r24, 0x065B
    4182:	90 91 5c 06 	lds	r25, 0x065C
    4186:	90 93 2c 04 	sts	0x042C, r25
    418a:	80 93 2b 04 	sts	0x042B, r24
	usRegInputBuf[34] = int_w_y.array[1];
    418e:	80 91 5d 06 	lds	r24, 0x065D
    4192:	90 91 5e 06 	lds	r25, 0x065E
    4196:	90 93 2e 04 	sts	0x042E, r25
    419a:	80 93 2d 04 	sts	0x042D, r24
	
	usRegInputBuf[35] = acc_Ox.array[0];
    419e:	80 91 5f 06 	lds	r24, 0x065F
    41a2:	90 91 60 06 	lds	r25, 0x0660
    41a6:	90 93 30 04 	sts	0x0430, r25
    41aa:	80 93 2f 04 	sts	0x042F, r24
	usRegInputBuf[36] = acc_Ox.array[1];
    41ae:	80 91 61 06 	lds	r24, 0x0661
    41b2:	90 91 62 06 	lds	r25, 0x0662
    41b6:	90 93 32 04 	sts	0x0432, r25
    41ba:	80 93 31 04 	sts	0x0431, r24
	
	usRegInputBuf[37] = acc_Oy.array[0];
    41be:	80 91 63 06 	lds	r24, 0x0663
    41c2:	90 91 64 06 	lds	r25, 0x0664
    41c6:	90 93 34 04 	sts	0x0434, r25
    41ca:	80 93 33 04 	sts	0x0433, r24
	usRegInputBuf[38] = acc_Oy.array[1];
    41ce:	80 91 65 06 	lds	r24, 0x0665
    41d2:	90 91 66 06 	lds	r25, 0x0666
    41d6:	90 93 36 04 	sts	0x0436, r25
    41da:	80 93 35 04 	sts	0x0435, r24
	
	usRegInputBuf[39] = U_Batt.array[0];
    41de:	80 91 67 06 	lds	r24, 0x0667
    41e2:	90 91 68 06 	lds	r25, 0x0668
    41e6:	90 93 38 04 	sts	0x0438, r25
    41ea:	80 93 37 04 	sts	0x0437, r24
	usRegInputBuf[40] = U_Batt.array[1];
    41ee:	80 91 69 06 	lds	r24, 0x0669
    41f2:	90 91 6a 06 	lds	r25, 0x066A
    41f6:	90 93 3a 04 	sts	0x043A, r25
    41fa:	80 93 39 04 	sts	0x0439, r24
	
	usRegInputBuf[41] = int_Ox.array[0];
    41fe:	80 91 73 06 	lds	r24, 0x0673
    4202:	90 91 74 06 	lds	r25, 0x0674
    4206:	90 93 3c 04 	sts	0x043C, r25
    420a:	80 93 3b 04 	sts	0x043B, r24
	usRegInputBuf[42] = int_Ox.array[1];
    420e:	80 91 75 06 	lds	r24, 0x0675
    4212:	90 91 76 06 	lds	r25, 0x0676
    4216:	90 93 3e 04 	sts	0x043E, r25
    421a:	80 93 3d 04 	sts	0x043D, r24
	
	usRegInputBuf[43] = int_Oy.array[0];
    421e:	80 91 77 06 	lds	r24, 0x0677
    4222:	90 91 78 06 	lds	r25, 0x0678
    4226:	90 93 40 04 	sts	0x0440, r25
    422a:	80 93 3f 04 	sts	0x043F, r24
	usRegInputBuf[44] = int_Oy.array[1];
    422e:	80 91 79 06 	lds	r24, 0x0679
    4232:	90 91 7a 06 	lds	r25, 0x067A
    4236:	90 93 42 04 	sts	0x0442, r25
    423a:	80 93 41 04 	sts	0x0441, r24
	
	usRegInputBuf[45] = int_w_z.array[0];
    423e:	80 91 7b 06 	lds	r24, 0x067B
    4242:	90 91 7c 06 	lds	r25, 0x067C
    4246:	90 93 44 04 	sts	0x0444, r25
    424a:	80 93 43 04 	sts	0x0443, r24
	usRegInputBuf[46] = int_w_z.array[1];
    424e:	80 91 7d 06 	lds	r24, 0x067D
    4252:	90 91 7e 06 	lds	r25, 0x067E
    4256:	90 93 46 04 	sts	0x0446, r25
    425a:	80 93 45 04 	sts	0x0445, r24
	
	usRegInputBuf[47] = int_Oz.array[0];
    425e:	80 91 83 06 	lds	r24, 0x0683
    4262:	90 91 84 06 	lds	r25, 0x0684
    4266:	90 93 48 04 	sts	0x0448, r25
    426a:	80 93 47 04 	sts	0x0447, r24
	usRegInputBuf[48] = int_Oz.array[1];
    426e:	80 91 85 06 	lds	r24, 0x0685
    4272:	90 91 86 06 	lds	r25, 0x0686
    4276:	90 93 4a 04 	sts	0x044A, r25
    427a:	80 93 49 04 	sts	0x0449, r24
	
	usRegInputBuf[49] = Oz.array[0];
    427e:	80 91 3b 06 	lds	r24, 0x063B
    4282:	90 91 3c 06 	lds	r25, 0x063C
    4286:	90 93 4c 04 	sts	0x044C, r25
    428a:	80 93 4b 04 	sts	0x044B, r24
	usRegInputBuf[50] = Oz.array[1];	
    428e:	80 91 3d 06 	lds	r24, 0x063D
    4292:	90 91 3e 06 	lds	r25, 0x063E
    4296:	90 93 4e 04 	sts	0x044E, r25
    429a:	80 93 4d 04 	sts	0x044D, r24
	
	usRegInputBuf[51] = H.array[0];
    429e:	80 91 c3 05 	lds	r24, 0x05C3
    42a2:	90 91 c4 05 	lds	r25, 0x05C4
    42a6:	90 93 50 04 	sts	0x0450, r25
    42aa:	80 93 4f 04 	sts	0x044F, r24
	usRegInputBuf[52] = H.array[1];
    42ae:	80 91 c5 05 	lds	r24, 0x05C5
    42b2:	90 91 c6 05 	lds	r25, 0x05C6
    42b6:	90 93 52 04 	sts	0x0452, r25
    42ba:	80 93 51 04 	sts	0x0451, r24
    42be:	08 95       	ret

000042c0 <_Z16ModbusInitValuesv>:
	ModbusEEPROMLoader();
}

//Загружаем в Holding Registers и в массив параметров значения из EEPROM
void ModbusInitValues()
{	
    42c0:	ef 92       	push	r14
    42c2:	ff 92       	push	r15
    42c4:	0f 93       	push	r16
    42c6:	1f 93       	push	r17
    42c8:	cf 93       	push	r28
    42ca:	df 93       	push	r29
    42cc:	cb e0       	ldi	r28, 0x0B	; 11
    42ce:	d5 e0       	ldi	r29, 0x05	; 5
		
	ModbusEEPROMLoader();
}

//Загружаем в Holding Registers и в массив параметров значения из EEPROM
void ModbusInitValues()
    42d0:	7e 01       	movw	r14, r28
    42d2:	0b eb       	ldi	r16, 0xBB	; 187
    42d4:	15 e0       	ldi	r17, 0x05	; 5
{	
	for(uint8_t i = 0; i < coeff_list_SIZE; i++)
	{
		coeffs[i].value = eeprom_read_float((float*)(4 * i));
    42d6:	ce 01       	movw	r24, r28
    42d8:	8e 19       	sub	r24, r14
    42da:	9f 09       	sbc	r25, r15
    42dc:	0e 94 19 2f 	call	0x5e32	; 0x5e32 <__eerd_dword_m32a>
    42e0:	69 93       	st	Y+, r22
    42e2:	79 93       	st	Y+, r23
    42e4:	89 93       	st	Y+, r24
    42e6:	99 93       	st	Y+, r25
}

//Загружаем в Holding Registers и в массив параметров значения из EEPROM
void ModbusInitValues()
{	
	for(uint8_t i = 0; i < coeff_list_SIZE; i++)
    42e8:	c0 17       	cp	r28, r16
    42ea:	d1 07       	cpc	r29, r17
    42ec:	a1 f7       	brne	.-24     	; 0x42d6 <_Z16ModbusInitValuesv+0x16>
    42ee:	eb e0       	ldi	r30, 0x0B	; 11
    42f0:	f5 e0       	ldi	r31, 0x05	; 5
    42f2:	ab eb       	ldi	r26, 0xBB	; 187
    42f4:	b1 e0       	ldi	r27, 0x01	; 1
		coeffs[i].value = eeprom_read_float((float*)(4 * i));
	}
	
	for (uint8_t i = 0; i < coeff_list_SIZE; i++)
	{
		usRegHoldingBuf[2 * i + MB_OFFSET + MB_Kp_Oz] = coeffs[i].array[0];
    42f6:	80 81       	ld	r24, Z
    42f8:	91 81       	ldd	r25, Z+1	; 0x01
    42fa:	11 96       	adiw	r26, 0x01	; 1
    42fc:	9c 93       	st	X, r25
    42fe:	8e 93       	st	-X, r24
		usRegHoldingBuf[2 * i + MB_OFFSET + MB_Kp_Oz + 1] = coeffs[i].array[1];
    4300:	82 81       	ldd	r24, Z+2	; 0x02
    4302:	93 81       	ldd	r25, Z+3	; 0x03
    4304:	13 96       	adiw	r26, 0x03	; 3
    4306:	9c 93       	st	X, r25
    4308:	8e 93       	st	-X, r24
    430a:	12 97       	sbiw	r26, 0x02	; 2
    430c:	34 96       	adiw	r30, 0x04	; 4
    430e:	14 96       	adiw	r26, 0x04	; 4
	for(uint8_t i = 0; i < coeff_list_SIZE; i++)
	{
		coeffs[i].value = eeprom_read_float((float*)(4 * i));
	}
	
	for (uint8_t i = 0; i < coeff_list_SIZE; i++)
    4310:	e0 17       	cp	r30, r16
    4312:	f1 07       	cpc	r31, r17
    4314:	81 f7       	brne	.-32     	; 0x42f6 <_Z16ModbusInitValuesv+0x36>
	{
		usRegHoldingBuf[2 * i + MB_OFFSET + MB_Kp_Oz] = coeffs[i].array[0];
		usRegHoldingBuf[2 * i + MB_OFFSET + MB_Kp_Oz + 1] = coeffs[i].array[1];
	}
}
    4316:	df 91       	pop	r29
    4318:	cf 91       	pop	r28
    431a:	1f 91       	pop	r17
    431c:	0f 91       	pop	r16
    431e:	ff 90       	pop	r15
    4320:	ef 90       	pop	r14
    4322:	08 95       	ret

00004324 <_Z15Uint32Comparrermmmm>:

bool Uint32Comparrer(uint32_t A1, uint32_t A2, uint32_t B1, uint32_t B2)
{
    4324:	af 92       	push	r10
    4326:	bf 92       	push	r11
    4328:	cf 92       	push	r12
    432a:	df 92       	push	r13
    432c:	ef 92       	push	r14
    432e:	ff 92       	push	r15
    4330:	0f 93       	push	r16
    4332:	1f 93       	push	r17
	if (A1 != B1 || A2 != B2)
    4334:	6e 15       	cp	r22, r14
    4336:	7f 05       	cpc	r23, r15
    4338:	80 07       	cpc	r24, r16
    433a:	91 07       	cpc	r25, r17
    433c:	41 f4       	brne	.+16     	; 0x434e <_Z15Uint32Comparrermmmm+0x2a>
    433e:	81 e0       	ldi	r24, 0x01	; 1
    4340:	2a 15       	cp	r18, r10
    4342:	3b 05       	cpc	r19, r11
    4344:	4c 05       	cpc	r20, r12
    4346:	5d 05       	cpc	r21, r13
    4348:	19 f0       	breq	.+6      	; 0x4350 <_Z15Uint32Comparrermmmm+0x2c>
    434a:	80 e0       	ldi	r24, 0x00	; 0
    434c:	01 c0       	rjmp	.+2      	; 0x4350 <_Z15Uint32Comparrermmmm+0x2c>
	{
		return false;
    434e:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return true;
}
    4350:	1f 91       	pop	r17
    4352:	0f 91       	pop	r16
    4354:	ff 90       	pop	r15
    4356:	ef 90       	pop	r14
    4358:	df 90       	pop	r13
    435a:	cf 90       	pop	r12
    435c:	bf 90       	pop	r11
    435e:	af 90       	pop	r10
    4360:	08 95       	ret

00004362 <_Z18ModbusEEPROMLoaderv>:

void ModbusEEPROMLoader()
{
    4362:	2f 92       	push	r2
    4364:	3f 92       	push	r3
    4366:	4f 92       	push	r4
    4368:	5f 92       	push	r5
    436a:	6f 92       	push	r6
    436c:	7f 92       	push	r7
    436e:	8f 92       	push	r8
    4370:	9f 92       	push	r9
    4372:	af 92       	push	r10
    4374:	bf 92       	push	r11
    4376:	cf 92       	push	r12
    4378:	df 92       	push	r13
    437a:	ef 92       	push	r14
    437c:	ff 92       	push	r15
    437e:	0f 93       	push	r16
    4380:	1f 93       	push	r17
    4382:	cf 93       	push	r28
    4384:	df 93       	push	r29
    4386:	00 d0       	rcall	.+0      	; 0x4388 <_Z18ModbusEEPROMLoaderv+0x26>
    4388:	1f 92       	push	r1
    438a:	cd b7       	in	r28, 0x3d	; 61
    438c:	de b7       	in	r29, 0x3e	; 62
    438e:	0f 2e       	mov	r0, r31
    4390:	fb eb       	ldi	r31, 0xBB	; 187
    4392:	8f 2e       	mov	r8, r31
    4394:	f1 e0       	ldi	r31, 0x01	; 1
    4396:	9f 2e       	mov	r9, r31
    4398:	f0 2d       	mov	r31, r0
	}
	
	return true;
}

void ModbusEEPROMLoader()
    439a:	0f 2e       	mov	r0, r31
    439c:	fb eb       	ldi	r31, 0xBB	; 187
    439e:	2f 2e       	mov	r2, r31
    43a0:	f5 e0       	ldi	r31, 0x05	; 5
    43a2:	3f 2e       	mov	r3, r31
    43a4:	f0 2d       	mov	r31, r0
    43a6:	8b e0       	ldi	r24, 0x0B	; 11
    43a8:	95 e0       	ldi	r25, 0x05	; 5
    43aa:	9b 83       	std	Y+3, r25	; 0x03
    43ac:	8a 83       	std	Y+2, r24	; 0x02
{
	uint8_t change_flag = 0;
    43ae:	19 82       	std	Y+1, r1	; 0x01

	
	for (uint8_t i = 0; i < coeff_list_SIZE; i++)
	{
		if (!Uint32Comparrer(usRegHoldingBuf[2 * i + MB_OFFSET + MB_Kp_Oz], usRegHoldingBuf[2 * i + MB_OFFSET + MB_Kp_Oz + 1], coeffs[i].array[0], coeffs[i].array[1]))
    43b0:	f4 01       	movw	r30, r8
    43b2:	42 80       	ldd	r4, Z+2	; 0x02
    43b4:	53 80       	ldd	r5, Z+3	; 0x03
    43b6:	60 80       	ld	r6, Z
    43b8:	71 80       	ldd	r7, Z+1	; 0x01
    43ba:	ea 81       	ldd	r30, Y+2	; 0x02
    43bc:	fb 81       	ldd	r31, Y+3	; 0x03
    43be:	a2 80       	ldd	r10, Z+2	; 0x02
    43c0:	b3 80       	ldd	r11, Z+3	; 0x03
    43c2:	c1 2c       	mov	r12, r1
    43c4:	d1 2c       	mov	r13, r1
    43c6:	e0 80       	ld	r14, Z
    43c8:	f1 80       	ldd	r15, Z+1	; 0x01
    43ca:	00 e0       	ldi	r16, 0x00	; 0
    43cc:	10 e0       	ldi	r17, 0x00	; 0
    43ce:	92 01       	movw	r18, r4
    43d0:	40 e0       	ldi	r20, 0x00	; 0
    43d2:	50 e0       	ldi	r21, 0x00	; 0
    43d4:	b3 01       	movw	r22, r6
    43d6:	80 e0       	ldi	r24, 0x00	; 0
    43d8:	90 e0       	ldi	r25, 0x00	; 0
    43da:	0e 94 92 21 	call	0x4324	; 0x4324 <_Z15Uint32Comparrermmmm>
    43de:	81 11       	cpse	r24, r1
    43e0:	11 c0       	rjmp	.+34     	; 0x4404 <_Z18ModbusEEPROMLoaderv+0xa2>
		{
			coeffs[i].array[0]=usRegHoldingBuf[2 * i + MB_OFFSET + MB_Kp_Oz];
    43e2:	ea 81       	ldd	r30, Y+2	; 0x02
    43e4:	fb 81       	ldd	r31, Y+3	; 0x03
    43e6:	71 82       	std	Z+1, r7	; 0x01
    43e8:	60 82       	st	Z, r6
			coeffs[i].array[1]=usRegHoldingBuf[2 * i + MB_OFFSET + MB_Kp_Oz + 1];
    43ea:	53 82       	std	Z+3, r5	; 0x03
    43ec:	42 82       	std	Z+2, r4	; 0x02
			eeprom_write_float((float*)(i * 4), coeffs[i].value);
    43ee:	40 81       	ld	r20, Z
    43f0:	51 81       	ldd	r21, Z+1	; 0x01
    43f2:	62 81       	ldd	r22, Z+2	; 0x02
    43f4:	73 81       	ldd	r23, Z+3	; 0x03
    43f6:	cf 01       	movw	r24, r30
    43f8:	8b 50       	subi	r24, 0x0B	; 11
    43fa:	95 40       	sbci	r25, 0x05	; 5
    43fc:	0e 94 1f 2f 	call	0x5e3e	; 0x5e3e <__eewr_dword_m32a>
			change_flag = 1;
    4400:	f1 e0       	ldi	r31, 0x01	; 1
    4402:	f9 83       	std	Y+1, r31	; 0x01
    4404:	8a 81       	ldd	r24, Y+2	; 0x02
    4406:	9b 81       	ldd	r25, Y+3	; 0x03
    4408:	04 96       	adiw	r24, 0x04	; 4
    440a:	9b 83       	std	Y+3, r25	; 0x03
    440c:	8a 83       	std	Y+2, r24	; 0x02
    440e:	94 e0       	ldi	r25, 0x04	; 4
    4410:	89 0e       	add	r8, r25
    4412:	91 1c       	adc	r9, r1
void ModbusEEPROMLoader()
{
	uint8_t change_flag = 0;

	
	for (uint8_t i = 0; i < coeff_list_SIZE; i++)
    4414:	ea 81       	ldd	r30, Y+2	; 0x02
    4416:	fb 81       	ldd	r31, Y+3	; 0x03
    4418:	e2 15       	cp	r30, r2
    441a:	f3 05       	cpc	r31, r3
    441c:	49 f6       	brne	.-110    	; 0x43b0 <_Z18ModbusEEPROMLoaderv+0x4e>
			eeprom_write_float((float*)(i * 4), coeffs[i].value);
			change_flag = 1;
		}
	}	
	
	if (change_flag)
    441e:	f9 81       	ldd	r31, Y+1	; 0x01
    4420:	ff 23       	and	r31, r31
    4422:	79 f0       	breq	.+30     	; 0x4442 <_Z18ModbusEEPROMLoaderv+0xe0>
	{
		filterUpdate();
    4424:	0e 94 a5 0b 	call	0x174a	; 0x174a <_Z12filterUpdatev>
		Sound_On();
    4428:	0e 94 bb 1f 	call	0x3f76	; 0x3f76 <_Z8Sound_Onv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    442c:	2f ef       	ldi	r18, 0xFF	; 255
    442e:	81 ee       	ldi	r24, 0xE1	; 225
    4430:	94 e0       	ldi	r25, 0x04	; 4
    4432:	21 50       	subi	r18, 0x01	; 1
    4434:	80 40       	sbci	r24, 0x00	; 0
    4436:	90 40       	sbci	r25, 0x00	; 0
    4438:	e1 f7       	brne	.-8      	; 0x4432 <_Z18ModbusEEPROMLoaderv+0xd0>
    443a:	00 c0       	rjmp	.+0      	; 0x443c <_Z18ModbusEEPROMLoaderv+0xda>
    443c:	00 00       	nop
		_delay_ms(100);
		Sound_Off();		
    443e:	0e 94 bd 1f 	call	0x3f7a	; 0x3f7a <_Z9Sound_Offv>
	}
	
	ModbusInitValues(); 
    4442:	0e 94 60 21 	call	0x42c0	; 0x42c0 <_Z16ModbusInitValuesv>
    4446:	0f 90       	pop	r0
    4448:	0f 90       	pop	r0
    444a:	0f 90       	pop	r0
    444c:	df 91       	pop	r29
    444e:	cf 91       	pop	r28
    4450:	1f 91       	pop	r17
    4452:	0f 91       	pop	r16
    4454:	ff 90       	pop	r15
    4456:	ef 90       	pop	r14
    4458:	df 90       	pop	r13
    445a:	cf 90       	pop	r12
    445c:	bf 90       	pop	r11
    445e:	af 90       	pop	r10
    4460:	9f 90       	pop	r9
    4462:	8f 90       	pop	r8
    4464:	7f 90       	pop	r7
    4466:	6f 90       	pop	r6
    4468:	5f 90       	pop	r5
    446a:	4f 90       	pop	r4
    446c:	3f 90       	pop	r3
    446e:	2f 90       	pop	r2
    4470:	08 95       	ret

00004472 <_Z11ModbusSaverv>:
	usRegInputBuf[52] = H.array[1];
}

//Обрабатываем значения HoldingRegisters
void ModbusSaver()
{
    4472:	cf 93       	push	r28
    4474:	df 93       	push	r29
    4476:	cd b7       	in	r28, 0x3d	; 61
    4478:	de b7       	in	r29, 0x3e	; 62
    447a:	60 97       	sbiw	r28, 0x10	; 16
    447c:	0f b6       	in	r0, 0x3f	; 63
    447e:	f8 94       	cli
    4480:	de bf       	out	0x3e, r29	; 62
    4482:	0f be       	out	0x3f, r0	; 63
    4484:	cd bf       	out	0x3d, r28	; 61
	switch (usRegHoldingBuf[MB_OFFSET+MB_COMMAND])
    4486:	80 91 a9 01 	lds	r24, 0x01A9
    448a:	90 91 aa 01 	lds	r25, 0x01AA
    448e:	81 30       	cpi	r24, 0x01	; 1
    4490:	91 05       	cpc	r25, r1
    4492:	19 f0       	breq	.+6      	; 0x449a <_Z11ModbusSaverv+0x28>
    4494:	02 97       	sbiw	r24, 0x02	; 2
    4496:	79 f4       	brne	.+30     	; 0x44b6 <_Z11ModbusSaverv+0x44>
    4498:	0c c0       	rjmp	.+24     	; 0x44b2 <_Z11ModbusSaverv+0x40>
	{
		case 1:	
			wdt_enable(WDTO_15MS); // enable watchdog
    449a:	28 e0       	ldi	r18, 0x08	; 8
    449c:	88 e1       	ldi	r24, 0x18	; 24
    449e:	90 e0       	ldi	r25, 0x00	; 0
    44a0:	0f b6       	in	r0, 0x3f	; 63
    44a2:	f8 94       	cli
    44a4:	a8 95       	wdr
    44a6:	80 93 41 00 	sts	0x0041, r24
    44aa:	0f be       	out	0x3f, r0	; 63
    44ac:	20 93 41 00 	sts	0x0041, r18
    44b0:	ff cf       	rjmp	.-2      	; 0x44b0 <_Z11ModbusSaverv+0x3e>
			while(1); // wait for watchdog to reset processor break;
			break;
			
		case 2:
			ADXL345_Calibrate();
    44b2:	0e 94 fd 02 	call	0x5fa	; 0x5fa <_Z17ADXL345_Calibratev>
			break;
	}
	
	usRegHoldingBuf[MB_OFFSET+MB_COMMAND] = 0;
    44b6:	10 92 aa 01 	sts	0x01AA, r1
    44ba:	10 92 a9 01 	sts	0x01A9, r1
	
	if (usRegHoldingBuf[MB_OFFSET+MB_LED_BLUE])
    44be:	80 91 ab 01 	lds	r24, 0x01AB
    44c2:	90 91 ac 01 	lds	r25, 0x01AC
    44c6:	89 2b       	or	r24, r25
    44c8:	21 f0       	breq	.+8      	; 0x44d2 <_Z11ModbusSaverv+0x60>
	{
		LED_On(LED_BLUE);
    44ca:	82 e0       	ldi	r24, 0x02	; 2
    44cc:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <_Z6LED_Onh>
    44d0:	03 c0       	rjmp	.+6      	; 0x44d8 <_Z11ModbusSaverv+0x66>
	}
	else
	{
		LED_Off(LED_BLUE);
    44d2:	82 e0       	ldi	r24, 0x02	; 2
    44d4:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <_Z7LED_Offh>
	}
	
	if (usRegHoldingBuf[MB_OFFSET+MB_LED_GREEN])
    44d8:	80 91 ad 01 	lds	r24, 0x01AD
    44dc:	90 91 ae 01 	lds	r25, 0x01AE
    44e0:	89 2b       	or	r24, r25
    44e2:	21 f0       	breq	.+8      	; 0x44ec <_Z11ModbusSaverv+0x7a>
	{
		LED_On(LED_GREEN);
    44e4:	83 e0       	ldi	r24, 0x03	; 3
    44e6:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <_Z6LED_Onh>
    44ea:	03 c0       	rjmp	.+6      	; 0x44f2 <_Z11ModbusSaverv+0x80>
	}
	else
	{
		LED_Off(LED_GREEN);
    44ec:	83 e0       	ldi	r24, 0x03	; 3
    44ee:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <_Z7LED_Offh>
	}
	
	if (bit_is_set(usRegHoldingBuf[MB_OFFSET+MB_SOUND], 0))
    44f2:	e3 e9       	ldi	r30, 0x93	; 147
    44f4:	f1 e0       	ldi	r31, 0x01	; 1
    44f6:	84 8d       	ldd	r24, Z+28	; 0x1c
    44f8:	80 ff       	sbrs	r24, 0
    44fa:	03 c0       	rjmp	.+6      	; 0x4502 <_Z11ModbusSaverv+0x90>
	{
		Sound_On();
    44fc:	0e 94 bb 1f 	call	0x3f76	; 0x3f76 <_Z8Sound_Onv>
    4500:	02 c0       	rjmp	.+4      	; 0x4506 <_Z11ModbusSaverv+0x94>
	}
	else
	{
		Sound_Off();
    4502:	0e 94 bd 1f 	call	0x3f7a	; 0x3f7a <_Z9Sound_Offv>
	}
	
	if (usRegHoldingBuf[MB_OFFSET+MB_ALL]<16000UL)
    4506:	80 91 b9 01 	lds	r24, 0x01B9
    450a:	90 91 ba 01 	lds	r25, 0x01BA
    450e:	80 38       	cpi	r24, 0x80	; 128
    4510:	9e 43       	sbci	r25, 0x3E	; 62
    4512:	30 f4       	brcc	.+12     	; 0x4520 <_Z11ModbusSaverv+0xae>
	{
		usRegHoldingBuf[MB_OFFSET+MB_ALL]=16000UL;
    4514:	80 e8       	ldi	r24, 0x80	; 128
    4516:	9e e3       	ldi	r25, 0x3E	; 62
    4518:	90 93 ba 01 	sts	0x01BA, r25
    451c:	80 93 b9 01 	sts	0x01B9, r24
	}
	
	
	if (bit_is_set(usRegHoldingBuf[MB_OFFSET+MB_MANUAL], 4))
    4520:	e3 e9       	ldi	r30, 0x93	; 147
    4522:	f1 e0       	ldi	r31, 0x01	; 1
    4524:	84 89       	ldd	r24, Z+20	; 0x14
    4526:	84 ff       	sbrs	r24, 4
    4528:	35 c0       	rjmp	.+106    	; 0x4594 <_Z11ModbusSaverv+0x122>
	{
		float speeds[4];
		speeds[FRONT_LEFT]	= (float)usRegHoldingBuf[MB_OFFSET + MB_FRONT_LEFT];
    452a:	60 91 b1 01 	lds	r22, 0x01B1
    452e:	70 91 b2 01 	lds	r23, 0x01B2
    4532:	80 e0       	ldi	r24, 0x00	; 0
    4534:	90 e0       	ldi	r25, 0x00	; 0
    4536:	0e 94 8e 2c 	call	0x591c	; 0x591c <__floatunsisf>
    453a:	69 87       	std	Y+9, r22	; 0x09
    453c:	7a 87       	std	Y+10, r23	; 0x0a
    453e:	8b 87       	std	Y+11, r24	; 0x0b
    4540:	9c 87       	std	Y+12, r25	; 0x0c
		speeds[FRONT_RIGHT] = (float)usRegHoldingBuf[MB_OFFSET + MB_FRONT_RIGHT];
    4542:	60 91 b3 01 	lds	r22, 0x01B3
    4546:	70 91 b4 01 	lds	r23, 0x01B4
    454a:	80 e0       	ldi	r24, 0x00	; 0
    454c:	90 e0       	ldi	r25, 0x00	; 0
    454e:	0e 94 8e 2c 	call	0x591c	; 0x591c <__floatunsisf>
    4552:	6d 87       	std	Y+13, r22	; 0x0d
    4554:	7e 87       	std	Y+14, r23	; 0x0e
    4556:	8f 87       	std	Y+15, r24	; 0x0f
    4558:	98 8b       	std	Y+16, r25	; 0x10
		speeds[REAR_LEFT]	= (float)usRegHoldingBuf[MB_OFFSET + MB_REAR_LEFT];
    455a:	60 91 b5 01 	lds	r22, 0x01B5
    455e:	70 91 b6 01 	lds	r23, 0x01B6
    4562:	80 e0       	ldi	r24, 0x00	; 0
    4564:	90 e0       	ldi	r25, 0x00	; 0
    4566:	0e 94 8e 2c 	call	0x591c	; 0x591c <__floatunsisf>
    456a:	6d 83       	std	Y+5, r22	; 0x05
    456c:	7e 83       	std	Y+6, r23	; 0x06
    456e:	8f 83       	std	Y+7, r24	; 0x07
    4570:	98 87       	std	Y+8, r25	; 0x08
		speeds[REAR_RIGHT]	= (float)usRegHoldingBuf[MB_OFFSET + MB_REAR_RIGHT];
    4572:	60 91 b7 01 	lds	r22, 0x01B7
    4576:	70 91 b8 01 	lds	r23, 0x01B8
    457a:	80 e0       	ldi	r24, 0x00	; 0
    457c:	90 e0       	ldi	r25, 0x00	; 0
    457e:	0e 94 8e 2c 	call	0x591c	; 0x591c <__floatunsisf>
    4582:	69 83       	std	Y+1, r22	; 0x01
    4584:	7a 83       	std	Y+2, r23	; 0x02
    4586:	8b 83       	std	Y+3, r24	; 0x03
    4588:	9c 83       	std	Y+4, r25	; 0x04
		SetMotors(speeds);	
    458a:	ce 01       	movw	r24, r28
    458c:	01 96       	adiw	r24, 0x01	; 1
    458e:	0e 94 13 16 	call	0x2c26	; 0x2c26 <_Z9SetMotorsPf>
    4592:	20 c0       	rjmp	.+64     	; 0x45d4 <_Z11ModbusSaverv+0x162>
	}
	else
	{
		usRegHoldingBuf[MB_OFFSET + MB_FRONT_LEFT] = counter[FRONT_LEFT];
    4594:	80 91 b3 04 	lds	r24, 0x04B3
    4598:	90 91 b4 04 	lds	r25, 0x04B4
    459c:	90 93 b2 01 	sts	0x01B2, r25
    45a0:	80 93 b1 01 	sts	0x01B1, r24
		usRegHoldingBuf[MB_OFFSET + MB_FRONT_RIGHT] = counter[FRONT_RIGHT];
    45a4:	80 91 b5 04 	lds	r24, 0x04B5
    45a8:	90 91 b6 04 	lds	r25, 0x04B6
    45ac:	90 93 b4 01 	sts	0x01B4, r25
    45b0:	80 93 b3 01 	sts	0x01B3, r24
		usRegHoldingBuf[MB_OFFSET + MB_REAR_LEFT] = counter[REAR_LEFT];
    45b4:	80 91 b1 04 	lds	r24, 0x04B1
    45b8:	90 91 b2 04 	lds	r25, 0x04B2
    45bc:	90 93 b6 01 	sts	0x01B6, r25
    45c0:	80 93 b5 01 	sts	0x01B5, r24
		usRegHoldingBuf[MB_OFFSET + MB_REAR_RIGHT] = counter[REAR_RIGHT];
    45c4:	80 91 af 04 	lds	r24, 0x04AF
    45c8:	90 91 b0 04 	lds	r25, 0x04B0
    45cc:	90 93 b8 01 	sts	0x01B8, r25
    45d0:	80 93 b7 01 	sts	0x01B7, r24
	}		
	
	//t_Ox.value = 0;
	//t_Oy.value = 0;
	t_Ox.array[0] = usRegHoldingBuf[2];
    45d4:	80 91 97 01 	lds	r24, 0x0197
    45d8:	90 91 98 01 	lds	r25, 0x0198
    45dc:	90 93 50 06 	sts	0x0650, r25
    45e0:	80 93 4f 06 	sts	0x064F, r24
	t_Ox.array[1] = usRegHoldingBuf[3];
    45e4:	80 91 99 01 	lds	r24, 0x0199
    45e8:	90 91 9a 01 	lds	r25, 0x019A
    45ec:	90 93 52 06 	sts	0x0652, r25
    45f0:	80 93 51 06 	sts	0x0651, r24
		
	t_Oy.array[0] = usRegHoldingBuf[4];
    45f4:	80 91 9b 01 	lds	r24, 0x019B
    45f8:	90 91 9c 01 	lds	r25, 0x019C
    45fc:	90 93 54 06 	sts	0x0654, r25
    4600:	80 93 53 06 	sts	0x0653, r24
	t_Oy.array[1] = usRegHoldingBuf[5];
    4604:	80 91 9d 01 	lds	r24, 0x019D
    4608:	90 91 9e 01 	lds	r25, 0x019E
    460c:	90 93 56 06 	sts	0x0656, r25
    4610:	80 93 55 06 	sts	0x0655, r24
	
	t_Oz.array[0] = usRegHoldingBuf[6];
    4614:	80 91 9f 01 	lds	r24, 0x019F
    4618:	90 91 a0 01 	lds	r25, 0x01A0
    461c:	90 93 38 06 	sts	0x0638, r25
    4620:	80 93 37 06 	sts	0x0637, r24
	t_Oz.array[1] = usRegHoldingBuf[7];
    4624:	80 91 a1 01 	lds	r24, 0x01A1
    4628:	90 91 a2 01 	lds	r25, 0x01A2
    462c:	90 93 3a 06 	sts	0x063A, r25
    4630:	80 93 39 06 	sts	0x0639, r24
		
	ModbusEEPROMLoader();
    4634:	0e 94 b1 21 	call	0x4362	; 0x4362 <_Z18ModbusEEPROMLoaderv>
}
    4638:	60 96       	adiw	r28, 0x10	; 16
    463a:	0f b6       	in	r0, 0x3f	; 63
    463c:	f8 94       	cli
    463e:	de bf       	out	0x3e, r29	; 62
    4640:	0f be       	out	0x3f, r0	; 63
    4642:	cd bf       	out	0x3d, r28	; 61
    4644:	df 91       	pop	r29
    4646:	cf 91       	pop	r28
    4648:	08 95       	ret

0000464a <_Z6PID_Ozv>:
#include "PIDs.h"

float motors_sum[MOTORS_COUNT];

void PID_Oz()
{
    464a:	2f 92       	push	r2
    464c:	3f 92       	push	r3
    464e:	4f 92       	push	r4
    4650:	5f 92       	push	r5
    4652:	6f 92       	push	r6
    4654:	7f 92       	push	r7
    4656:	8f 92       	push	r8
    4658:	9f 92       	push	r9
    465a:	af 92       	push	r10
    465c:	bf 92       	push	r11
    465e:	cf 92       	push	r12
    4660:	df 92       	push	r13
    4662:	ef 92       	push	r14
    4664:	ff 92       	push	r15
    4666:	0f 93       	push	r16
    4668:	1f 93       	push	r17
    466a:	cf 93       	push	r28
    466c:	df 93       	push	r29
    466e:	00 d0       	rcall	.+0      	; 0x4670 <_Z6PID_Ozv+0x26>
    4670:	00 d0       	rcall	.+0      	; 0x4672 <_Z6PID_Ozv+0x28>
    4672:	cd b7       	in	r28, 0x3d	; 61
    4674:	de b7       	in	r29, 0x3e	; 62
	float D = Heading_displacement_calc(Oz.value, t_Oz.value);
    4676:	20 91 37 06 	lds	r18, 0x0637
    467a:	30 91 38 06 	lds	r19, 0x0638
    467e:	40 91 39 06 	lds	r20, 0x0639
    4682:	50 91 3a 06 	lds	r21, 0x063A
    4686:	60 91 3b 06 	lds	r22, 0x063B
    468a:	70 91 3c 06 	lds	r23, 0x063C
    468e:	80 91 3d 06 	lds	r24, 0x063D
    4692:	90 91 3e 06 	lds	r25, 0x063E
    4696:	0e 94 5e 2a 	call	0x54bc	; 0x54bc <_Z25Heading_displacement_calcff>
	
	motors_sum[FRONT_LEFT] += coeffs[Kp_Oz].value * D * -1.0;
    469a:	20 91 0b 05 	lds	r18, 0x050B
    469e:	30 91 0c 05 	lds	r19, 0x050C
    46a2:	40 91 0d 05 	lds	r20, 0x050D
    46a6:	50 91 0e 05 	lds	r21, 0x050E
    46aa:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    46ae:	c6 2e       	mov	r12, r22
    46b0:	d7 2e       	mov	r13, r23
    46b2:	e8 2e       	mov	r14, r24
    46b4:	f9 2e       	mov	r15, r25
	motors_sum[FRONT_RIGHT] += coeffs[Kp_Oz].value * D;
    46b6:	e3 e9       	ldi	r30, 0x93	; 147
    46b8:	f6 e0       	ldi	r31, 0x06	; 6
    46ba:	20 81       	ld	r18, Z
    46bc:	31 81       	ldd	r19, Z+1	; 0x01
    46be:	42 81       	ldd	r20, Z+2	; 0x02
    46c0:	53 81       	ldd	r21, Z+3	; 0x03
    46c2:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    46c6:	26 2e       	mov	r2, r22
    46c8:	37 2e       	mov	r3, r23
    46ca:	48 2e       	mov	r4, r24
    46cc:	59 2e       	mov	r5, r25
	motors_sum[REAR_LEFT] += coeffs[Kp_Oz].value * D;
    46ce:	eb e8       	ldi	r30, 0x8B	; 139
    46d0:	f6 e0       	ldi	r31, 0x06	; 6
    46d2:	20 81       	ld	r18, Z
    46d4:	31 81       	ldd	r19, Z+1	; 0x01
    46d6:	42 81       	ldd	r20, Z+2	; 0x02
    46d8:	53 81       	ldd	r21, Z+3	; 0x03
    46da:	6c 2d       	mov	r22, r12
    46dc:	7d 2d       	mov	r23, r13
    46de:	8e 2d       	mov	r24, r14
    46e0:	9f 2d       	mov	r25, r15
    46e2:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    46e6:	66 2e       	mov	r6, r22
    46e8:	77 2e       	mov	r7, r23
    46ea:	88 2e       	mov	r8, r24
    46ec:	99 2e       	mov	r9, r25
	motors_sum[REAR_RIGHT] += coeffs[Kp_Oz].value * D * -1.0;	
    46ee:	2c 2d       	mov	r18, r12
    46f0:	3d 2d       	mov	r19, r13
    46f2:	4e 2d       	mov	r20, r14
    46f4:	5f 2d       	mov	r21, r15
    46f6:	e7 e8       	ldi	r30, 0x87	; 135
    46f8:	f6 e0       	ldi	r31, 0x06	; 6
    46fa:	60 81       	ld	r22, Z
    46fc:	71 81       	ldd	r23, Z+1	; 0x01
    46fe:	82 81       	ldd	r24, Z+2	; 0x02
    4700:	93 81       	ldd	r25, Z+3	; 0x03
    4702:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__subsf3>
    4706:	a6 2e       	mov	r10, r22
    4708:	b7 2e       	mov	r11, r23
    470a:	89 83       	std	Y+1, r24	; 0x01
    470c:	9a 83       	std	Y+2, r25	; 0x02
	
	motors_sum[FRONT_LEFT] += coeffs[Kd_Oz].value * w_z.value * -1.0;
    470e:	20 91 0f 06 	lds	r18, 0x060F
    4712:	30 91 10 06 	lds	r19, 0x0610
    4716:	40 91 11 06 	lds	r20, 0x0611
    471a:	50 91 12 06 	lds	r21, 0x0612
    471e:	60 91 13 05 	lds	r22, 0x0513
    4722:	70 91 14 05 	lds	r23, 0x0514
    4726:	80 91 15 05 	lds	r24, 0x0515
    472a:	90 91 16 05 	lds	r25, 0x0516
    472e:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    4732:	06 2f       	mov	r16, r22
    4734:	17 2f       	mov	r17, r23
    4736:	8c 83       	std	Y+4, r24	; 0x04
    4738:	9b 83       	std	Y+3, r25	; 0x03

void PID_Oz()
{
	float D = Heading_displacement_calc(Oz.value, t_Oz.value);
	
	motors_sum[FRONT_LEFT] += coeffs[Kp_Oz].value * D * -1.0;
    473a:	2c 2d       	mov	r18, r12
    473c:	3d 2d       	mov	r19, r13
    473e:	4e 2d       	mov	r20, r14
    4740:	5f 2d       	mov	r21, r15
    4742:	ef e8       	ldi	r30, 0x8F	; 143
    4744:	f6 e0       	ldi	r31, 0x06	; 6
    4746:	60 81       	ld	r22, Z
    4748:	71 81       	ldd	r23, Z+1	; 0x01
    474a:	82 81       	ldd	r24, Z+2	; 0x02
    474c:	93 81       	ldd	r25, Z+3	; 0x03
    474e:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__subsf3>
	motors_sum[FRONT_RIGHT] += coeffs[Kp_Oz].value * D;
	motors_sum[REAR_LEFT] += coeffs[Kp_Oz].value * D;
	motors_sum[REAR_RIGHT] += coeffs[Kp_Oz].value * D * -1.0;	
	
	motors_sum[FRONT_LEFT] += coeffs[Kd_Oz].value * w_z.value * -1.0;
    4752:	fc 81       	ldd	r31, Y+4	; 0x04
    4754:	eb 81       	ldd	r30, Y+3	; 0x03
    4756:	20 2f       	mov	r18, r16
    4758:	31 2f       	mov	r19, r17
    475a:	4f 2f       	mov	r20, r31
    475c:	5e 2f       	mov	r21, r30
    475e:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__subsf3>
    4762:	ef e8       	ldi	r30, 0x8F	; 143
    4764:	f6 e0       	ldi	r31, 0x06	; 6
    4766:	60 83       	st	Z, r22
    4768:	71 83       	std	Z+1, r23	; 0x01
    476a:	82 83       	std	Z+2, r24	; 0x02
    476c:	93 83       	std	Z+3, r25	; 0x03
	motors_sum[FRONT_RIGHT] += coeffs[Kd_Oz].value * w_z.value;
    476e:	9c 81       	ldd	r25, Y+4	; 0x04
    4770:	8b 81       	ldd	r24, Y+3	; 0x03
    4772:	20 2f       	mov	r18, r16
    4774:	31 2f       	mov	r19, r17
    4776:	49 2f       	mov	r20, r25
    4778:	58 2f       	mov	r21, r24
    477a:	62 2d       	mov	r22, r2
    477c:	73 2d       	mov	r23, r3
    477e:	84 2d       	mov	r24, r4
    4780:	95 2d       	mov	r25, r5
    4782:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    4786:	e3 e9       	ldi	r30, 0x93	; 147
    4788:	f6 e0       	ldi	r31, 0x06	; 6
    478a:	60 83       	st	Z, r22
    478c:	71 83       	std	Z+1, r23	; 0x01
    478e:	82 83       	std	Z+2, r24	; 0x02
    4790:	93 83       	std	Z+3, r25	; 0x03
	motors_sum[REAR_LEFT] += coeffs[Kd_Oz].value * w_z.value;
    4792:	9c 81       	ldd	r25, Y+4	; 0x04
    4794:	8b 81       	ldd	r24, Y+3	; 0x03
    4796:	20 2f       	mov	r18, r16
    4798:	31 2f       	mov	r19, r17
    479a:	49 2f       	mov	r20, r25
    479c:	58 2f       	mov	r21, r24
    479e:	66 2d       	mov	r22, r6
    47a0:	77 2d       	mov	r23, r7
    47a2:	88 2d       	mov	r24, r8
    47a4:	99 2d       	mov	r25, r9
    47a6:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    47aa:	eb e8       	ldi	r30, 0x8B	; 139
    47ac:	f6 e0       	ldi	r31, 0x06	; 6
    47ae:	60 83       	st	Z, r22
    47b0:	71 83       	std	Z+1, r23	; 0x01
    47b2:	82 83       	std	Z+2, r24	; 0x02
    47b4:	93 83       	std	Z+3, r25	; 0x03
	motors_sum[REAR_RIGHT] += coeffs[Kd_Oz].value * w_z.value * -1.0;
    47b6:	9c 81       	ldd	r25, Y+4	; 0x04
    47b8:	8b 81       	ldd	r24, Y+3	; 0x03
    47ba:	20 2f       	mov	r18, r16
    47bc:	31 2f       	mov	r19, r17
    47be:	49 2f       	mov	r20, r25
    47c0:	58 2f       	mov	r21, r24
    47c2:	e9 81       	ldd	r30, Y+1	; 0x01
    47c4:	1a 81       	ldd	r17, Y+2	; 0x02
    47c6:	6a 2d       	mov	r22, r10
    47c8:	7b 2d       	mov	r23, r11
    47ca:	8e 2f       	mov	r24, r30
    47cc:	91 2f       	mov	r25, r17
    47ce:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__subsf3>
    47d2:	e7 e8       	ldi	r30, 0x87	; 135
    47d4:	f6 e0       	ldi	r31, 0x06	; 6
    47d6:	60 83       	st	Z, r22
    47d8:	71 83       	std	Z+1, r23	; 0x01
    47da:	82 83       	std	Z+2, r24	; 0x02
    47dc:	93 83       	std	Z+3, r25	; 0x03
}
    47de:	0f 90       	pop	r0
    47e0:	0f 90       	pop	r0
    47e2:	0f 90       	pop	r0
    47e4:	0f 90       	pop	r0
    47e6:	df 91       	pop	r29
    47e8:	cf 91       	pop	r28
    47ea:	1f 91       	pop	r17
    47ec:	0f 91       	pop	r16
    47ee:	ff 90       	pop	r15
    47f0:	ef 90       	pop	r14
    47f2:	df 90       	pop	r13
    47f4:	cf 90       	pop	r12
    47f6:	bf 90       	pop	r11
    47f8:	af 90       	pop	r10
    47fa:	9f 90       	pop	r9
    47fc:	8f 90       	pop	r8
    47fe:	7f 90       	pop	r7
    4800:	6f 90       	pop	r6
    4802:	5f 90       	pop	r5
    4804:	4f 90       	pop	r4
    4806:	3f 90       	pop	r3
    4808:	2f 90       	pop	r2
    480a:	08 95       	ret

0000480c <_Z6PID_Oxv>:

void PID_Ox()
{
    480c:	2f 92       	push	r2
    480e:	3f 92       	push	r3
    4810:	4f 92       	push	r4
    4812:	5f 92       	push	r5
    4814:	6f 92       	push	r6
    4816:	7f 92       	push	r7
    4818:	8f 92       	push	r8
    481a:	9f 92       	push	r9
    481c:	af 92       	push	r10
    481e:	bf 92       	push	r11
    4820:	cf 92       	push	r12
    4822:	df 92       	push	r13
    4824:	ef 92       	push	r14
    4826:	ff 92       	push	r15
    4828:	0f 93       	push	r16
    482a:	1f 93       	push	r17
    482c:	cf 93       	push	r28
    482e:	df 93       	push	r29
    4830:	cd b7       	in	r28, 0x3d	; 61
    4832:	de b7       	in	r29, 0x3e	; 62
    4834:	28 97       	sbiw	r28, 0x08	; 8
    4836:	0f b6       	in	r0, 0x3f	; 63
    4838:	f8 94       	cli
    483a:	de bf       	out	0x3e, r29	; 62
    483c:	0f be       	out	0x3f, r0	; 63
    483e:	cd bf       	out	0x3d, r28	; 61
	motors_sum[FRONT_LEFT] += coeffs[Kp_Ox].value * (Ox.value - t_Ox.value) * (-1.0);
    4840:	20 91 4f 06 	lds	r18, 0x064F
    4844:	30 91 50 06 	lds	r19, 0x0650
    4848:	40 91 51 06 	lds	r20, 0x0651
    484c:	50 91 52 06 	lds	r21, 0x0652
    4850:	60 91 47 06 	lds	r22, 0x0647
    4854:	70 91 48 06 	lds	r23, 0x0648
    4858:	80 91 49 06 	lds	r24, 0x0649
    485c:	90 91 4a 06 	lds	r25, 0x064A
    4860:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__subsf3>
    4864:	20 91 17 05 	lds	r18, 0x0517
    4868:	30 91 18 05 	lds	r19, 0x0518
    486c:	40 91 19 05 	lds	r20, 0x0519
    4870:	50 91 1a 05 	lds	r21, 0x051A
    4874:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    4878:	86 2e       	mov	r8, r22
    487a:	97 2e       	mov	r9, r23
    487c:	a8 2e       	mov	r10, r24
    487e:	b9 2e       	mov	r11, r25
	motors_sum[FRONT_RIGHT] += coeffs[Kp_Ox].value * (Ox.value - t_Ox.value);
	motors_sum[REAR_LEFT] += coeffs[Kp_Ox].value * (Ox.value - t_Ox.value) * (-1.0);
	motors_sum[REAR_RIGHT] += coeffs[Kp_Ox].value * (Ox.value - t_Ox.value);
	
	motors_sum[FRONT_LEFT] += coeffs[Ki_Ox].value * int_Ox.value * (-1.0);
    4880:	20 91 73 06 	lds	r18, 0x0673
    4884:	30 91 74 06 	lds	r19, 0x0674
    4888:	40 91 75 06 	lds	r20, 0x0675
    488c:	50 91 76 06 	lds	r21, 0x0676
    4890:	60 91 1b 05 	lds	r22, 0x051B
    4894:	70 91 1c 05 	lds	r23, 0x051C
    4898:	80 91 1d 05 	lds	r24, 0x051D
    489c:	90 91 1e 05 	lds	r25, 0x051E
    48a0:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    48a4:	c6 2e       	mov	r12, r22
    48a6:	d7 2e       	mov	r13, r23
    48a8:	e8 2e       	mov	r14, r24
    48aa:	f9 2e       	mov	r15, r25
}

void PID_Ox()
{
	motors_sum[FRONT_LEFT] += coeffs[Kp_Ox].value * (Ox.value - t_Ox.value) * (-1.0);
	motors_sum[FRONT_RIGHT] += coeffs[Kp_Ox].value * (Ox.value - t_Ox.value);
    48ac:	e3 e9       	ldi	r30, 0x93	; 147
    48ae:	f6 e0       	ldi	r31, 0x06	; 6
    48b0:	20 81       	ld	r18, Z
    48b2:	31 81       	ldd	r19, Z+1	; 0x01
    48b4:	42 81       	ldd	r20, Z+2	; 0x02
    48b6:	53 81       	ldd	r21, Z+3	; 0x03
    48b8:	68 2d       	mov	r22, r8
    48ba:	79 2d       	mov	r23, r9
    48bc:	8a 2d       	mov	r24, r10
    48be:	9b 2d       	mov	r25, r11
    48c0:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
	motors_sum[REAR_LEFT] += coeffs[Kp_Ox].value * (Ox.value - t_Ox.value) * (-1.0);
	motors_sum[REAR_RIGHT] += coeffs[Kp_Ox].value * (Ox.value - t_Ox.value);
	
	motors_sum[FRONT_LEFT] += coeffs[Ki_Ox].value * int_Ox.value * (-1.0);
	motors_sum[FRONT_RIGHT] += coeffs[Ki_Ox].value * int_Ox.value;
    48c4:	2c 2d       	mov	r18, r12
    48c6:	3d 2d       	mov	r19, r13
    48c8:	4e 2d       	mov	r20, r14
    48ca:	5f 2d       	mov	r21, r15
    48cc:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    48d0:	26 2e       	mov	r2, r22
    48d2:	37 2e       	mov	r3, r23
    48d4:	89 83       	std	Y+1, r24	; 0x01
    48d6:	9a 83       	std	Y+2, r25	; 0x02

void PID_Ox()
{
	motors_sum[FRONT_LEFT] += coeffs[Kp_Ox].value * (Ox.value - t_Ox.value) * (-1.0);
	motors_sum[FRONT_RIGHT] += coeffs[Kp_Ox].value * (Ox.value - t_Ox.value);
	motors_sum[REAR_LEFT] += coeffs[Kp_Ox].value * (Ox.value - t_Ox.value) * (-1.0);
    48d8:	28 2d       	mov	r18, r8
    48da:	39 2d       	mov	r19, r9
    48dc:	4a 2d       	mov	r20, r10
    48de:	5b 2d       	mov	r21, r11
    48e0:	eb e8       	ldi	r30, 0x8B	; 139
    48e2:	f6 e0       	ldi	r31, 0x06	; 6
    48e4:	60 81       	ld	r22, Z
    48e6:	71 81       	ldd	r23, Z+1	; 0x01
    48e8:	82 81       	ldd	r24, Z+2	; 0x02
    48ea:	93 81       	ldd	r25, Z+3	; 0x03
    48ec:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__subsf3>
	motors_sum[REAR_RIGHT] += coeffs[Kp_Ox].value * (Ox.value - t_Ox.value);
	
	motors_sum[FRONT_LEFT] += coeffs[Ki_Ox].value * int_Ox.value * (-1.0);
	motors_sum[FRONT_RIGHT] += coeffs[Ki_Ox].value * int_Ox.value;
	motors_sum[REAR_LEFT] += coeffs[Ki_Ox].value * int_Ox.value * (-1.0);
    48f0:	2c 2d       	mov	r18, r12
    48f2:	3d 2d       	mov	r19, r13
    48f4:	4e 2d       	mov	r20, r14
    48f6:	5f 2d       	mov	r21, r15
    48f8:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__subsf3>
    48fc:	6b 83       	std	Y+3, r22	; 0x03
    48fe:	7c 83       	std	Y+4, r23	; 0x04
    4900:	8d 83       	std	Y+5, r24	; 0x05
    4902:	9e 83       	std	Y+6, r25	; 0x06
void PID_Ox()
{
	motors_sum[FRONT_LEFT] += coeffs[Kp_Ox].value * (Ox.value - t_Ox.value) * (-1.0);
	motors_sum[FRONT_RIGHT] += coeffs[Kp_Ox].value * (Ox.value - t_Ox.value);
	motors_sum[REAR_LEFT] += coeffs[Kp_Ox].value * (Ox.value - t_Ox.value) * (-1.0);
	motors_sum[REAR_RIGHT] += coeffs[Kp_Ox].value * (Ox.value - t_Ox.value);
    4904:	e7 e8       	ldi	r30, 0x87	; 135
    4906:	f6 e0       	ldi	r31, 0x06	; 6
    4908:	20 81       	ld	r18, Z
    490a:	31 81       	ldd	r19, Z+1	; 0x01
    490c:	42 81       	ldd	r20, Z+2	; 0x02
    490e:	53 81       	ldd	r21, Z+3	; 0x03
    4910:	68 2d       	mov	r22, r8
    4912:	79 2d       	mov	r23, r9
    4914:	8a 2d       	mov	r24, r10
    4916:	9b 2d       	mov	r25, r11
    4918:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
	
	motors_sum[FRONT_LEFT] += coeffs[Ki_Ox].value * int_Ox.value * (-1.0);
	motors_sum[FRONT_RIGHT] += coeffs[Ki_Ox].value * int_Ox.value;
	motors_sum[REAR_LEFT] += coeffs[Ki_Ox].value * int_Ox.value * (-1.0);
	motors_sum[REAR_RIGHT] += coeffs[Ki_Ox].value * int_Ox.value;
    491c:	2c 2d       	mov	r18, r12
    491e:	3d 2d       	mov	r19, r13
    4920:	4e 2d       	mov	r20, r14
    4922:	5f 2d       	mov	r21, r15
    4924:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    4928:	46 2e       	mov	r4, r22
    492a:	57 2e       	mov	r5, r23
    492c:	68 2e       	mov	r6, r24
    492e:	79 2e       	mov	r7, r25
	
	motors_sum[FRONT_LEFT] += coeffs[Kd_Ox].value * w_x.value * (-1.0);
    4930:	20 91 07 06 	lds	r18, 0x0607
    4934:	30 91 08 06 	lds	r19, 0x0608
    4938:	40 91 09 06 	lds	r20, 0x0609
    493c:	50 91 0a 06 	lds	r21, 0x060A
    4940:	60 91 1f 05 	lds	r22, 0x051F
    4944:	70 91 20 05 	lds	r23, 0x0520
    4948:	80 91 21 05 	lds	r24, 0x0521
    494c:	90 91 22 05 	lds	r25, 0x0522
    4950:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    4954:	06 2f       	mov	r16, r22
    4956:	17 2f       	mov	r17, r23
    4958:	88 87       	std	Y+8, r24	; 0x08
    495a:	9f 83       	std	Y+7, r25	; 0x07
	motors_sum[REAR_RIGHT] += coeffs[Kd_Oz].value * w_z.value * -1.0;
}

void PID_Ox()
{
	motors_sum[FRONT_LEFT] += coeffs[Kp_Ox].value * (Ox.value - t_Ox.value) * (-1.0);
    495c:	28 2d       	mov	r18, r8
    495e:	39 2d       	mov	r19, r9
    4960:	4a 2d       	mov	r20, r10
    4962:	5b 2d       	mov	r21, r11
    4964:	ef e8       	ldi	r30, 0x8F	; 143
    4966:	f6 e0       	ldi	r31, 0x06	; 6
    4968:	60 81       	ld	r22, Z
    496a:	71 81       	ldd	r23, Z+1	; 0x01
    496c:	82 81       	ldd	r24, Z+2	; 0x02
    496e:	93 81       	ldd	r25, Z+3	; 0x03
    4970:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__subsf3>
	motors_sum[FRONT_RIGHT] += coeffs[Kp_Ox].value * (Ox.value - t_Ox.value);
	motors_sum[REAR_LEFT] += coeffs[Kp_Ox].value * (Ox.value - t_Ox.value) * (-1.0);
	motors_sum[REAR_RIGHT] += coeffs[Kp_Ox].value * (Ox.value - t_Ox.value);
	
	motors_sum[FRONT_LEFT] += coeffs[Ki_Ox].value * int_Ox.value * (-1.0);
    4974:	2c 2d       	mov	r18, r12
    4976:	3d 2d       	mov	r19, r13
    4978:	4e 2d       	mov	r20, r14
    497a:	5f 2d       	mov	r21, r15
    497c:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__subsf3>
	motors_sum[FRONT_RIGHT] += coeffs[Ki_Ox].value * int_Ox.value;
	motors_sum[REAR_LEFT] += coeffs[Ki_Ox].value * int_Ox.value * (-1.0);
	motors_sum[REAR_RIGHT] += coeffs[Ki_Ox].value * int_Ox.value;
	
	motors_sum[FRONT_LEFT] += coeffs[Kd_Ox].value * w_x.value * (-1.0);
    4980:	f8 85       	ldd	r31, Y+8	; 0x08
    4982:	ef 81       	ldd	r30, Y+7	; 0x07
    4984:	20 2f       	mov	r18, r16
    4986:	31 2f       	mov	r19, r17
    4988:	4f 2f       	mov	r20, r31
    498a:	5e 2f       	mov	r21, r30
    498c:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__subsf3>
    4990:	ef e8       	ldi	r30, 0x8F	; 143
    4992:	f6 e0       	ldi	r31, 0x06	; 6
    4994:	60 83       	st	Z, r22
    4996:	71 83       	std	Z+1, r23	; 0x01
    4998:	82 83       	std	Z+2, r24	; 0x02
    499a:	93 83       	std	Z+3, r25	; 0x03
	motors_sum[FRONT_RIGHT] += coeffs[Kd_Ox].value * w_x.value;
    499c:	98 85       	ldd	r25, Y+8	; 0x08
    499e:	8f 81       	ldd	r24, Y+7	; 0x07
    49a0:	20 2f       	mov	r18, r16
    49a2:	31 2f       	mov	r19, r17
    49a4:	49 2f       	mov	r20, r25
    49a6:	58 2f       	mov	r21, r24
    49a8:	f9 80       	ldd	r15, Y+1	; 0x01
    49aa:	ea 80       	ldd	r14, Y+2	; 0x02
    49ac:	62 2d       	mov	r22, r2
    49ae:	73 2d       	mov	r23, r3
    49b0:	8f 2d       	mov	r24, r15
    49b2:	9e 2d       	mov	r25, r14
    49b4:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    49b8:	e3 e9       	ldi	r30, 0x93	; 147
    49ba:	f6 e0       	ldi	r31, 0x06	; 6
    49bc:	60 83       	st	Z, r22
    49be:	71 83       	std	Z+1, r23	; 0x01
    49c0:	82 83       	std	Z+2, r24	; 0x02
    49c2:	93 83       	std	Z+3, r25	; 0x03
	motors_sum[REAR_LEFT] += coeffs[Kd_Ox].value * w_x.value * (-1.0);
    49c4:	98 85       	ldd	r25, Y+8	; 0x08
    49c6:	8f 81       	ldd	r24, Y+7	; 0x07
    49c8:	20 2f       	mov	r18, r16
    49ca:	31 2f       	mov	r19, r17
    49cc:	49 2f       	mov	r20, r25
    49ce:	58 2f       	mov	r21, r24
    49d0:	bb 81       	ldd	r27, Y+3	; 0x03
    49d2:	ac 81       	ldd	r26, Y+4	; 0x04
    49d4:	fd 80       	ldd	r15, Y+5	; 0x05
    49d6:	ee 80       	ldd	r14, Y+6	; 0x06
    49d8:	6b 2f       	mov	r22, r27
    49da:	7a 2f       	mov	r23, r26
    49dc:	8f 2d       	mov	r24, r15
    49de:	9e 2d       	mov	r25, r14
    49e0:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__subsf3>
    49e4:	eb e8       	ldi	r30, 0x8B	; 139
    49e6:	f6 e0       	ldi	r31, 0x06	; 6
    49e8:	60 83       	st	Z, r22
    49ea:	71 83       	std	Z+1, r23	; 0x01
    49ec:	82 83       	std	Z+2, r24	; 0x02
    49ee:	93 83       	std	Z+3, r25	; 0x03
	motors_sum[REAR_RIGHT] += coeffs[Kd_Ox].value * w_x.value;
    49f0:	98 85       	ldd	r25, Y+8	; 0x08
    49f2:	8f 81       	ldd	r24, Y+7	; 0x07
    49f4:	20 2f       	mov	r18, r16
    49f6:	31 2f       	mov	r19, r17
    49f8:	49 2f       	mov	r20, r25
    49fa:	58 2f       	mov	r21, r24
    49fc:	64 2d       	mov	r22, r4
    49fe:	75 2d       	mov	r23, r5
    4a00:	86 2d       	mov	r24, r6
    4a02:	97 2d       	mov	r25, r7
    4a04:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    4a08:	e7 e8       	ldi	r30, 0x87	; 135
    4a0a:	f6 e0       	ldi	r31, 0x06	; 6
    4a0c:	60 83       	st	Z, r22
    4a0e:	71 83       	std	Z+1, r23	; 0x01
    4a10:	82 83       	std	Z+2, r24	; 0x02
    4a12:	93 83       	std	Z+3, r25	; 0x03
}
    4a14:	28 96       	adiw	r28, 0x08	; 8
    4a16:	0f b6       	in	r0, 0x3f	; 63
    4a18:	f8 94       	cli
    4a1a:	de bf       	out	0x3e, r29	; 62
    4a1c:	0f be       	out	0x3f, r0	; 63
    4a1e:	cd bf       	out	0x3d, r28	; 61
    4a20:	df 91       	pop	r29
    4a22:	cf 91       	pop	r28
    4a24:	1f 91       	pop	r17
    4a26:	0f 91       	pop	r16
    4a28:	ff 90       	pop	r15
    4a2a:	ef 90       	pop	r14
    4a2c:	df 90       	pop	r13
    4a2e:	cf 90       	pop	r12
    4a30:	bf 90       	pop	r11
    4a32:	af 90       	pop	r10
    4a34:	9f 90       	pop	r9
    4a36:	8f 90       	pop	r8
    4a38:	7f 90       	pop	r7
    4a3a:	6f 90       	pop	r6
    4a3c:	5f 90       	pop	r5
    4a3e:	4f 90       	pop	r4
    4a40:	3f 90       	pop	r3
    4a42:	2f 90       	pop	r2
    4a44:	08 95       	ret

00004a46 <_Z6PID_Oyv>:

void PID_Oy()
{
    4a46:	2f 92       	push	r2
    4a48:	3f 92       	push	r3
    4a4a:	4f 92       	push	r4
    4a4c:	5f 92       	push	r5
    4a4e:	6f 92       	push	r6
    4a50:	7f 92       	push	r7
    4a52:	8f 92       	push	r8
    4a54:	9f 92       	push	r9
    4a56:	af 92       	push	r10
    4a58:	bf 92       	push	r11
    4a5a:	cf 92       	push	r12
    4a5c:	df 92       	push	r13
    4a5e:	ef 92       	push	r14
    4a60:	ff 92       	push	r15
    4a62:	0f 93       	push	r16
    4a64:	1f 93       	push	r17
    4a66:	cf 93       	push	r28
    4a68:	df 93       	push	r29
    4a6a:	cd b7       	in	r28, 0x3d	; 61
    4a6c:	de b7       	in	r29, 0x3e	; 62
    4a6e:	28 97       	sbiw	r28, 0x08	; 8
    4a70:	0f b6       	in	r0, 0x3f	; 63
    4a72:	f8 94       	cli
    4a74:	de bf       	out	0x3e, r29	; 62
    4a76:	0f be       	out	0x3f, r0	; 63
    4a78:	cd bf       	out	0x3d, r28	; 61
	motors_sum[FRONT_LEFT] += coeffs[Kp_Ox].value * (Oy.value - t_Oy.value) * (-1.0);
    4a7a:	20 91 53 06 	lds	r18, 0x0653
    4a7e:	30 91 54 06 	lds	r19, 0x0654
    4a82:	40 91 55 06 	lds	r20, 0x0655
    4a86:	50 91 56 06 	lds	r21, 0x0656
    4a8a:	60 91 4b 06 	lds	r22, 0x064B
    4a8e:	70 91 4c 06 	lds	r23, 0x064C
    4a92:	80 91 4d 06 	lds	r24, 0x064D
    4a96:	90 91 4e 06 	lds	r25, 0x064E
    4a9a:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__subsf3>
    4a9e:	20 91 17 05 	lds	r18, 0x0517
    4aa2:	30 91 18 05 	lds	r19, 0x0518
    4aa6:	40 91 19 05 	lds	r20, 0x0519
    4aaa:	50 91 1a 05 	lds	r21, 0x051A
    4aae:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    4ab2:	86 2e       	mov	r8, r22
    4ab4:	97 2e       	mov	r9, r23
    4ab6:	a8 2e       	mov	r10, r24
    4ab8:	b9 2e       	mov	r11, r25
	motors_sum[FRONT_RIGHT] += coeffs[Kp_Ox].value * (Oy.value - t_Oy.value) * (-1.0);
	motors_sum[REAR_LEFT] += coeffs[Kp_Ox].value * (Oy.value - t_Oy.value);
	motors_sum[REAR_RIGHT] += coeffs[Kp_Ox].value * (Oy.value - t_Oy.value);

	motors_sum[FRONT_LEFT] += coeffs[Ki_Ox].value * int_Oy.value * (-1.0);
    4aba:	20 91 77 06 	lds	r18, 0x0677
    4abe:	30 91 78 06 	lds	r19, 0x0678
    4ac2:	40 91 79 06 	lds	r20, 0x0679
    4ac6:	50 91 7a 06 	lds	r21, 0x067A
    4aca:	60 91 1b 05 	lds	r22, 0x051B
    4ace:	70 91 1c 05 	lds	r23, 0x051C
    4ad2:	80 91 1d 05 	lds	r24, 0x051D
    4ad6:	90 91 1e 05 	lds	r25, 0x051E
    4ada:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    4ade:	c6 2e       	mov	r12, r22
    4ae0:	d7 2e       	mov	r13, r23
    4ae2:	e8 2e       	mov	r14, r24
    4ae4:	f9 2e       	mov	r15, r25
}

void PID_Oy()
{
	motors_sum[FRONT_LEFT] += coeffs[Kp_Ox].value * (Oy.value - t_Oy.value) * (-1.0);
	motors_sum[FRONT_RIGHT] += coeffs[Kp_Ox].value * (Oy.value - t_Oy.value) * (-1.0);
    4ae6:	28 2d       	mov	r18, r8
    4ae8:	39 2d       	mov	r19, r9
    4aea:	4a 2d       	mov	r20, r10
    4aec:	5b 2d       	mov	r21, r11
    4aee:	e3 e9       	ldi	r30, 0x93	; 147
    4af0:	f6 e0       	ldi	r31, 0x06	; 6
    4af2:	60 81       	ld	r22, Z
    4af4:	71 81       	ldd	r23, Z+1	; 0x01
    4af6:	82 81       	ldd	r24, Z+2	; 0x02
    4af8:	93 81       	ldd	r25, Z+3	; 0x03
    4afa:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__subsf3>
	motors_sum[REAR_LEFT] += coeffs[Kp_Ox].value * (Oy.value - t_Oy.value);
	motors_sum[REAR_RIGHT] += coeffs[Kp_Ox].value * (Oy.value - t_Oy.value);

	motors_sum[FRONT_LEFT] += coeffs[Ki_Ox].value * int_Oy.value * (-1.0);
	motors_sum[FRONT_RIGHT] += coeffs[Ki_Ox].value * int_Oy.value * (-1.0);
    4afe:	2c 2d       	mov	r18, r12
    4b00:	3d 2d       	mov	r19, r13
    4b02:	4e 2d       	mov	r20, r14
    4b04:	5f 2d       	mov	r21, r15
    4b06:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__subsf3>
    4b0a:	26 2e       	mov	r2, r22
    4b0c:	37 2e       	mov	r3, r23
    4b0e:	89 83       	std	Y+1, r24	; 0x01
    4b10:	9a 83       	std	Y+2, r25	; 0x02

void PID_Oy()
{
	motors_sum[FRONT_LEFT] += coeffs[Kp_Ox].value * (Oy.value - t_Oy.value) * (-1.0);
	motors_sum[FRONT_RIGHT] += coeffs[Kp_Ox].value * (Oy.value - t_Oy.value) * (-1.0);
	motors_sum[REAR_LEFT] += coeffs[Kp_Ox].value * (Oy.value - t_Oy.value);
    4b12:	eb e8       	ldi	r30, 0x8B	; 139
    4b14:	f6 e0       	ldi	r31, 0x06	; 6
    4b16:	20 81       	ld	r18, Z
    4b18:	31 81       	ldd	r19, Z+1	; 0x01
    4b1a:	42 81       	ldd	r20, Z+2	; 0x02
    4b1c:	53 81       	ldd	r21, Z+3	; 0x03
    4b1e:	68 2d       	mov	r22, r8
    4b20:	79 2d       	mov	r23, r9
    4b22:	8a 2d       	mov	r24, r10
    4b24:	9b 2d       	mov	r25, r11
    4b26:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
	motors_sum[REAR_RIGHT] += coeffs[Kp_Ox].value * (Oy.value - t_Oy.value);

	motors_sum[FRONT_LEFT] += coeffs[Ki_Ox].value * int_Oy.value * (-1.0);
	motors_sum[FRONT_RIGHT] += coeffs[Ki_Ox].value * int_Oy.value * (-1.0);
	motors_sum[REAR_LEFT] += coeffs[Ki_Ox].value * int_Oy.value;
    4b2a:	2c 2d       	mov	r18, r12
    4b2c:	3d 2d       	mov	r19, r13
    4b2e:	4e 2d       	mov	r20, r14
    4b30:	5f 2d       	mov	r21, r15
    4b32:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    4b36:	6b 83       	std	Y+3, r22	; 0x03
    4b38:	7c 83       	std	Y+4, r23	; 0x04
    4b3a:	8d 83       	std	Y+5, r24	; 0x05
    4b3c:	9e 83       	std	Y+6, r25	; 0x06
void PID_Oy()
{
	motors_sum[FRONT_LEFT] += coeffs[Kp_Ox].value * (Oy.value - t_Oy.value) * (-1.0);
	motors_sum[FRONT_RIGHT] += coeffs[Kp_Ox].value * (Oy.value - t_Oy.value) * (-1.0);
	motors_sum[REAR_LEFT] += coeffs[Kp_Ox].value * (Oy.value - t_Oy.value);
	motors_sum[REAR_RIGHT] += coeffs[Kp_Ox].value * (Oy.value - t_Oy.value);
    4b3e:	e7 e8       	ldi	r30, 0x87	; 135
    4b40:	f6 e0       	ldi	r31, 0x06	; 6
    4b42:	20 81       	ld	r18, Z
    4b44:	31 81       	ldd	r19, Z+1	; 0x01
    4b46:	42 81       	ldd	r20, Z+2	; 0x02
    4b48:	53 81       	ldd	r21, Z+3	; 0x03
    4b4a:	68 2d       	mov	r22, r8
    4b4c:	79 2d       	mov	r23, r9
    4b4e:	8a 2d       	mov	r24, r10
    4b50:	9b 2d       	mov	r25, r11
    4b52:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>

	motors_sum[FRONT_LEFT] += coeffs[Ki_Ox].value * int_Oy.value * (-1.0);
	motors_sum[FRONT_RIGHT] += coeffs[Ki_Ox].value * int_Oy.value * (-1.0);
	motors_sum[REAR_LEFT] += coeffs[Ki_Ox].value * int_Oy.value;
	motors_sum[REAR_RIGHT] += coeffs[Ki_Ox].value * int_Oy.value;
    4b56:	2c 2d       	mov	r18, r12
    4b58:	3d 2d       	mov	r19, r13
    4b5a:	4e 2d       	mov	r20, r14
    4b5c:	5f 2d       	mov	r21, r15
    4b5e:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    4b62:	46 2e       	mov	r4, r22
    4b64:	57 2e       	mov	r5, r23
    4b66:	68 2e       	mov	r6, r24
    4b68:	79 2e       	mov	r7, r25
	
	motors_sum[FRONT_LEFT] += coeffs[Kd_Ox].value * w_y.value * (-1.0);
    4b6a:	20 91 0b 06 	lds	r18, 0x060B
    4b6e:	30 91 0c 06 	lds	r19, 0x060C
    4b72:	40 91 0d 06 	lds	r20, 0x060D
    4b76:	50 91 0e 06 	lds	r21, 0x060E
    4b7a:	60 91 1f 05 	lds	r22, 0x051F
    4b7e:	70 91 20 05 	lds	r23, 0x0520
    4b82:	80 91 21 05 	lds	r24, 0x0521
    4b86:	90 91 22 05 	lds	r25, 0x0522
    4b8a:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    4b8e:	06 2f       	mov	r16, r22
    4b90:	17 2f       	mov	r17, r23
    4b92:	88 87       	std	Y+8, r24	; 0x08
    4b94:	9f 83       	std	Y+7, r25	; 0x07
	motors_sum[REAR_RIGHT] += coeffs[Kd_Ox].value * w_x.value;
}

void PID_Oy()
{
	motors_sum[FRONT_LEFT] += coeffs[Kp_Ox].value * (Oy.value - t_Oy.value) * (-1.0);
    4b96:	28 2d       	mov	r18, r8
    4b98:	39 2d       	mov	r19, r9
    4b9a:	4a 2d       	mov	r20, r10
    4b9c:	5b 2d       	mov	r21, r11
    4b9e:	ef e8       	ldi	r30, 0x8F	; 143
    4ba0:	f6 e0       	ldi	r31, 0x06	; 6
    4ba2:	60 81       	ld	r22, Z
    4ba4:	71 81       	ldd	r23, Z+1	; 0x01
    4ba6:	82 81       	ldd	r24, Z+2	; 0x02
    4ba8:	93 81       	ldd	r25, Z+3	; 0x03
    4baa:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__subsf3>
	motors_sum[FRONT_RIGHT] += coeffs[Kp_Ox].value * (Oy.value - t_Oy.value) * (-1.0);
	motors_sum[REAR_LEFT] += coeffs[Kp_Ox].value * (Oy.value - t_Oy.value);
	motors_sum[REAR_RIGHT] += coeffs[Kp_Ox].value * (Oy.value - t_Oy.value);

	motors_sum[FRONT_LEFT] += coeffs[Ki_Ox].value * int_Oy.value * (-1.0);
    4bae:	2c 2d       	mov	r18, r12
    4bb0:	3d 2d       	mov	r19, r13
    4bb2:	4e 2d       	mov	r20, r14
    4bb4:	5f 2d       	mov	r21, r15
    4bb6:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__subsf3>
	motors_sum[FRONT_RIGHT] += coeffs[Ki_Ox].value * int_Oy.value * (-1.0);
	motors_sum[REAR_LEFT] += coeffs[Ki_Ox].value * int_Oy.value;
	motors_sum[REAR_RIGHT] += coeffs[Ki_Ox].value * int_Oy.value;
	
	motors_sum[FRONT_LEFT] += coeffs[Kd_Ox].value * w_y.value * (-1.0);
    4bba:	f8 85       	ldd	r31, Y+8	; 0x08
    4bbc:	ef 81       	ldd	r30, Y+7	; 0x07
    4bbe:	20 2f       	mov	r18, r16
    4bc0:	31 2f       	mov	r19, r17
    4bc2:	4f 2f       	mov	r20, r31
    4bc4:	5e 2f       	mov	r21, r30
    4bc6:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__subsf3>
    4bca:	ef e8       	ldi	r30, 0x8F	; 143
    4bcc:	f6 e0       	ldi	r31, 0x06	; 6
    4bce:	60 83       	st	Z, r22
    4bd0:	71 83       	std	Z+1, r23	; 0x01
    4bd2:	82 83       	std	Z+2, r24	; 0x02
    4bd4:	93 83       	std	Z+3, r25	; 0x03
	motors_sum[FRONT_RIGHT] += coeffs[Kd_Ox].value * w_y.value * (-1.0);
    4bd6:	98 85       	ldd	r25, Y+8	; 0x08
    4bd8:	8f 81       	ldd	r24, Y+7	; 0x07
    4bda:	20 2f       	mov	r18, r16
    4bdc:	31 2f       	mov	r19, r17
    4bde:	49 2f       	mov	r20, r25
    4be0:	58 2f       	mov	r21, r24
    4be2:	f9 80       	ldd	r15, Y+1	; 0x01
    4be4:	ea 80       	ldd	r14, Y+2	; 0x02
    4be6:	62 2d       	mov	r22, r2
    4be8:	73 2d       	mov	r23, r3
    4bea:	8f 2d       	mov	r24, r15
    4bec:	9e 2d       	mov	r25, r14
    4bee:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__subsf3>
    4bf2:	e3 e9       	ldi	r30, 0x93	; 147
    4bf4:	f6 e0       	ldi	r31, 0x06	; 6
    4bf6:	60 83       	st	Z, r22
    4bf8:	71 83       	std	Z+1, r23	; 0x01
    4bfa:	82 83       	std	Z+2, r24	; 0x02
    4bfc:	93 83       	std	Z+3, r25	; 0x03
	motors_sum[REAR_LEFT] += coeffs[Kd_Ox].value * w_y.value;
    4bfe:	98 85       	ldd	r25, Y+8	; 0x08
    4c00:	8f 81       	ldd	r24, Y+7	; 0x07
    4c02:	20 2f       	mov	r18, r16
    4c04:	31 2f       	mov	r19, r17
    4c06:	49 2f       	mov	r20, r25
    4c08:	58 2f       	mov	r21, r24
    4c0a:	bb 81       	ldd	r27, Y+3	; 0x03
    4c0c:	ac 81       	ldd	r26, Y+4	; 0x04
    4c0e:	fd 80       	ldd	r15, Y+5	; 0x05
    4c10:	ee 80       	ldd	r14, Y+6	; 0x06
    4c12:	6b 2f       	mov	r22, r27
    4c14:	7a 2f       	mov	r23, r26
    4c16:	8f 2d       	mov	r24, r15
    4c18:	9e 2d       	mov	r25, r14
    4c1a:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    4c1e:	eb e8       	ldi	r30, 0x8B	; 139
    4c20:	f6 e0       	ldi	r31, 0x06	; 6
    4c22:	60 83       	st	Z, r22
    4c24:	71 83       	std	Z+1, r23	; 0x01
    4c26:	82 83       	std	Z+2, r24	; 0x02
    4c28:	93 83       	std	Z+3, r25	; 0x03
	motors_sum[REAR_RIGHT] += coeffs[Kd_Ox].value * w_y.value;
    4c2a:	98 85       	ldd	r25, Y+8	; 0x08
    4c2c:	8f 81       	ldd	r24, Y+7	; 0x07
    4c2e:	20 2f       	mov	r18, r16
    4c30:	31 2f       	mov	r19, r17
    4c32:	49 2f       	mov	r20, r25
    4c34:	58 2f       	mov	r21, r24
    4c36:	64 2d       	mov	r22, r4
    4c38:	75 2d       	mov	r23, r5
    4c3a:	86 2d       	mov	r24, r6
    4c3c:	97 2d       	mov	r25, r7
    4c3e:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    4c42:	e7 e8       	ldi	r30, 0x87	; 135
    4c44:	f6 e0       	ldi	r31, 0x06	; 6
    4c46:	60 83       	st	Z, r22
    4c48:	71 83       	std	Z+1, r23	; 0x01
    4c4a:	82 83       	std	Z+2, r24	; 0x02
    4c4c:	93 83       	std	Z+3, r25	; 0x03
}
    4c4e:	28 96       	adiw	r28, 0x08	; 8
    4c50:	0f b6       	in	r0, 0x3f	; 63
    4c52:	f8 94       	cli
    4c54:	de bf       	out	0x3e, r29	; 62
    4c56:	0f be       	out	0x3f, r0	; 63
    4c58:	cd bf       	out	0x3d, r28	; 61
    4c5a:	df 91       	pop	r29
    4c5c:	cf 91       	pop	r28
    4c5e:	1f 91       	pop	r17
    4c60:	0f 91       	pop	r16
    4c62:	ff 90       	pop	r15
    4c64:	ef 90       	pop	r14
    4c66:	df 90       	pop	r13
    4c68:	cf 90       	pop	r12
    4c6a:	bf 90       	pop	r11
    4c6c:	af 90       	pop	r10
    4c6e:	9f 90       	pop	r9
    4c70:	8f 90       	pop	r8
    4c72:	7f 90       	pop	r7
    4c74:	6f 90       	pop	r6
    4c76:	5f 90       	pop	r5
    4c78:	4f 90       	pop	r4
    4c7a:	3f 90       	pop	r3
    4c7c:	2f 90       	pop	r2
    4c7e:	08 95       	ret

00004c80 <_Z7RunPIDsv>:

void RunPIDs()
{
	for (uint8_t i = 0; i< MOTORS_COUNT; i++)
	{
		motors_sum[i]=usRegHoldingBuf[MB_OFFSET+MB_ALL];
    4c80:	60 91 b9 01 	lds	r22, 0x01B9
    4c84:	70 91 ba 01 	lds	r23, 0x01BA
    4c88:	80 e0       	ldi	r24, 0x00	; 0
    4c8a:	90 e0       	ldi	r25, 0x00	; 0
    4c8c:	0e 94 8e 2c 	call	0x591c	; 0x591c <__floatunsisf>
    4c90:	60 93 87 06 	sts	0x0687, r22
    4c94:	70 93 88 06 	sts	0x0688, r23
    4c98:	80 93 89 06 	sts	0x0689, r24
    4c9c:	90 93 8a 06 	sts	0x068A, r25
    4ca0:	60 93 8b 06 	sts	0x068B, r22
    4ca4:	70 93 8c 06 	sts	0x068C, r23
    4ca8:	80 93 8d 06 	sts	0x068D, r24
    4cac:	90 93 8e 06 	sts	0x068E, r25
    4cb0:	60 93 8f 06 	sts	0x068F, r22
    4cb4:	70 93 90 06 	sts	0x0690, r23
    4cb8:	80 93 91 06 	sts	0x0691, r24
    4cbc:	90 93 92 06 	sts	0x0692, r25
    4cc0:	60 93 93 06 	sts	0x0693, r22
    4cc4:	70 93 94 06 	sts	0x0694, r23
    4cc8:	80 93 95 06 	sts	0x0695, r24
    4ccc:	90 93 96 06 	sts	0x0696, r25
	}
	
	PID_Oz();
    4cd0:	0e 94 25 23 	call	0x464a	; 0x464a <_Z6PID_Ozv>
	PID_Ox();
    4cd4:	0e 94 06 24 	call	0x480c	; 0x480c <_Z6PID_Oxv>
	PID_Oy();
    4cd8:	0e 94 23 25 	call	0x4a46	; 0x4a46 <_Z6PID_Oyv>
		
	SetMotors(motors_sum);
    4cdc:	87 e8       	ldi	r24, 0x87	; 135
    4cde:	96 e0       	ldi	r25, 0x06	; 6
    4ce0:	0e 94 13 16 	call	0x2c26	; 0x2c26 <_Z9SetMotorsPf>
    4ce4:	08 95       	ret

00004ce6 <_Z11SensorsInitv>:

#include "SensorsPoll.h"

uint8_t SensorsInit()
{
	BMP085_Get_Coef();
    4ce6:	0e 94 c1 03 	call	0x782	; 0x782 <_Z15BMP085_Get_Coefv>
	ADXL345_Init();
    4cea:	0e 94 bc 02 	call	0x578	; 0x578 <_Z12ADXL345_Initv>
	HMC5883L_Init();
    4cee:	0e 94 a6 0c 	call	0x194c	; 0x194c <_Z13HMC5883L_Initv>
	L3G4200D_Init();
    4cf2:	0e 94 4a 13 	call	0x2694	; 0x2694 <_Z13L3G4200D_Initv>
		
	int_w_x.value = 0.0;
    4cf6:	10 92 57 06 	sts	0x0657, r1
    4cfa:	10 92 58 06 	sts	0x0658, r1
    4cfe:	10 92 59 06 	sts	0x0659, r1
    4d02:	10 92 5a 06 	sts	0x065A, r1
	int_w_y.value = 0.0;
    4d06:	10 92 5b 06 	sts	0x065B, r1
    4d0a:	10 92 5c 06 	sts	0x065C, r1
    4d0e:	10 92 5d 06 	sts	0x065D, r1
    4d12:	10 92 5e 06 	sts	0x065E, r1
	int_Ox.value = 0.0;
    4d16:	10 92 73 06 	sts	0x0673, r1
    4d1a:	10 92 74 06 	sts	0x0674, r1
    4d1e:	10 92 75 06 	sts	0x0675, r1
    4d22:	10 92 76 06 	sts	0x0676, r1
	int_Oy.value = 0.0;
    4d26:	10 92 77 06 	sts	0x0677, r1
    4d2a:	10 92 78 06 	sts	0x0678, r1
    4d2e:	10 92 79 06 	sts	0x0679, r1
    4d32:	10 92 7a 06 	sts	0x067A, r1
	
	return 0;
}
    4d36:	80 e0       	ldi	r24, 0x00	; 0
    4d38:	08 95       	ret

00004d3a <_Z11SensorsPollv>:
static uint8_t BMP085PreTimer = 0;
static uint8_t BMP085Flag = 0;

uint8_t SensorsPoll()
{
	BMP085PreTimer++;
    4d3a:	80 91 97 06 	lds	r24, 0x0697
    4d3e:	8f 5f       	subi	r24, 0xFF	; 255
    4d40:	80 93 97 06 	sts	0x0697, r24
	
	if (bit_is_set(usRegHoldingBuf[MB_OFFSET+MB_MANUAL], 0) && BMP085PreTimer >= 4 && BMP085Flag)
    4d44:	e3 e9       	ldi	r30, 0x93	; 147
    4d46:	f1 e0       	ldi	r31, 0x01	; 1
    4d48:	94 89       	ldd	r25, Z+20	; 0x14
    4d4a:	90 ff       	sbrs	r25, 0
    4d4c:	80 c0       	rjmp	.+256    	; 0x4e4e <_Z11SensorsPollv+0x114>
    4d4e:	84 30       	cpi	r24, 0x04	; 4
    4d50:	08 f4       	brcc	.+2      	; 0x4d54 <_Z11SensorsPollv+0x1a>
    4d52:	91 c0       	rjmp	.+290    	; 0x4e76 <_Z11SensorsPollv+0x13c>
    4d54:	80 91 98 06 	lds	r24, 0x0698
    4d58:	81 11       	cpse	r24, r1
    4d5a:	70 c0       	rjmp	.+224    	; 0x4e3c <_Z11SensorsPollv+0x102>
    4d5c:	90 c0       	rjmp	.+288    	; 0x4e7e <_Z11SensorsPollv+0x144>
		BMP085_GetUT();
		BMP085_StartMeasUP();
		BMP085PreTimer = 0;
		BMP085Flag = 0;
	}		
	else if (bit_is_set(usRegHoldingBuf[MB_OFFSET+MB_MANUAL], 0) && BMP085PreTimer >= 4 && !BMP085Flag)
    4d5e:	84 30       	cpi	r24, 0x04	; 4
    4d60:	28 f0       	brcs	.+10     	; 0x4d6c <_Z11SensorsPollv+0x32>
    4d62:	80 91 98 06 	lds	r24, 0x0698
    4d66:	88 23       	and	r24, r24
    4d68:	09 f4       	brne	.+2      	; 0x4d6c <_Z11SensorsPollv+0x32>
    4d6a:	77 c0       	rjmp	.+238    	; 0x4e5a <_Z11SensorsPollv+0x120>
		BMP085_GetUP();
		BMP085_StartMeasUT();
		BMP085PreTimer = 0;
		BMP085Flag = 1;
	}	
	if (bit_is_set(usRegHoldingBuf[MB_OFFSET+MB_MANUAL], 1))
    4d6c:	e3 e9       	ldi	r30, 0x93	; 147
    4d6e:	f1 e0       	ldi	r31, 0x01	; 1
    4d70:	84 89       	ldd	r24, Z+20	; 0x14
    4d72:	81 fd       	sbrc	r24, 1
	{
		ADXL345_Poll();
    4d74:	0e 94 da 01 	call	0x3b4	; 0x3b4 <_Z12ADXL345_Pollv>
	}	
	if (bit_is_set(usRegHoldingBuf[MB_OFFSET+MB_MANUAL], 2))
    4d78:	e3 e9       	ldi	r30, 0x93	; 147
    4d7a:	f1 e0       	ldi	r31, 0x01	; 1
    4d7c:	84 89       	ldd	r24, Z+20	; 0x14
    4d7e:	82 fd       	sbrc	r24, 2
	{
		HMC5883L_Poll();
    4d80:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <_Z13HMC5883L_Pollv>
	}	
	if (bit_is_set(usRegHoldingBuf[MB_OFFSET+MB_MANUAL], 3))
    4d84:	e3 e9       	ldi	r30, 0x93	; 147
    4d86:	f1 e0       	ldi	r31, 0x01	; 1
    4d88:	84 89       	ldd	r24, Z+20	; 0x14
    4d8a:	83 fd       	sbrc	r24, 3
	{
		L3G4200D_Poll();
    4d8c:	0e 94 c4 13 	call	0x2788	; 0x2788 <_Z13L3G4200D_Pollv>
	}		
	
	if (bit_is_set(usRegHoldingBuf[MB_OFFSET+MB_MANUAL], 5))
    4d90:	e3 e9       	ldi	r30, 0x93	; 147
    4d92:	f1 e0       	ldi	r31, 0x01	; 1
    4d94:	84 89       	ldd	r24, Z+20	; 0x14
    4d96:	85 ff       	sbrs	r24, 5
    4d98:	03 c0       	rjmp	.+6      	; 0x4da0 <_Z11SensorsPollv+0x66>
	{
		L3G4200D_Test(1);
    4d9a:	81 e0       	ldi	r24, 0x01	; 1
    4d9c:	0e 94 f6 14 	call	0x29ec	; 0x29ec <_Z13L3G4200D_Testh>
	}
	
	if (bit_is_set(usRegHoldingBuf[MB_OFFSET+MB_MANUAL], 6))
    4da0:	e3 e9       	ldi	r30, 0x93	; 147
    4da2:	f1 e0       	ldi	r31, 0x01	; 1
    4da4:	84 89       	ldd	r24, Z+20	; 0x14
    4da6:	86 ff       	sbrs	r24, 6
    4da8:	03 c0       	rjmp	.+6      	; 0x4db0 <_Z11SensorsPollv+0x76>
	{
		L3G4200D_Test(2);
    4daa:	82 e0       	ldi	r24, 0x02	; 2
    4dac:	0e 94 f6 14 	call	0x29ec	; 0x29ec <_Z13L3G4200D_Testh>
	}
	
	if (bit_is_clear(usRegHoldingBuf[MB_OFFSET+MB_MANUAL], 5) && bit_is_clear(usRegHoldingBuf[MB_OFFSET+MB_MANUAL], 6))
    4db0:	e3 e9       	ldi	r30, 0x93	; 147
    4db2:	f1 e0       	ldi	r31, 0x01	; 1
    4db4:	84 89       	ldd	r24, Z+20	; 0x14
    4db6:	85 fd       	sbrc	r24, 5
    4db8:	03 c0       	rjmp	.+6      	; 0x4dc0 <_Z11SensorsPollv+0x86>
    4dba:	84 89       	ldd	r24, Z+20	; 0x14
    4dbc:	86 ff       	sbrs	r24, 6
    4dbe:	57 c0       	rjmp	.+174    	; 0x4e6e <_Z11SensorsPollv+0x134>
	{
		L3G4200D_Test(0);
	}
	
	if (bit_is_set(usRegHoldingBuf[MB_OFFSET+MB_MANUAL], 7) && bit_is_clear(usRegHoldingBuf[MB_OFFSET+MB_MANUAL], 8))
    4dc0:	e3 e9       	ldi	r30, 0x93	; 147
    4dc2:	f1 e0       	ldi	r31, 0x01	; 1
    4dc4:	84 89       	ldd	r24, Z+20	; 0x14
    4dc6:	88 23       	and	r24, r24
    4dc8:	24 f4       	brge	.+8      	; 0x4dd2 <_Z11SensorsPollv+0x98>
    4dca:	84 89       	ldd	r24, Z+20	; 0x14
	{
		HMC5883L_Test(1);
    4dcc:	81 e0       	ldi	r24, 0x01	; 1
    4dce:	0e 94 02 13 	call	0x2604	; 0x2604 <_Z13HMC5883L_Testh>
	}
	
	if (bit_is_clear(usRegHoldingBuf[MB_OFFSET+MB_MANUAL], 7) && bit_is_set(usRegHoldingBuf[MB_OFFSET+MB_MANUAL], 8))
    4dd2:	e3 e9       	ldi	r30, 0x93	; 147
    4dd4:	f1 e0       	ldi	r31, 0x01	; 1
    4dd6:	84 89       	ldd	r24, Z+20	; 0x14
    4dd8:	88 23       	and	r24, r24
    4dda:	0c f0       	brlt	.+2      	; 0x4dde <_Z11SensorsPollv+0xa4>
    4ddc:	84 89       	ldd	r24, Z+20	; 0x14
	{
		HMC5883L_Test(2);
	}
	
	if (bit_is_clear(usRegHoldingBuf[MB_OFFSET+MB_MANUAL], 7) && bit_is_clear(usRegHoldingBuf[MB_OFFSET+MB_MANUAL], 8))
    4dde:	e3 e9       	ldi	r30, 0x93	; 147
    4de0:	f1 e0       	ldi	r31, 0x01	; 1
    4de2:	84 89       	ldd	r24, Z+20	; 0x14
    4de4:	88 23       	and	r24, r24
    4de6:	24 f0       	brlt	.+8      	; 0x4df0 <_Z11SensorsPollv+0xb6>
    4de8:	84 89       	ldd	r24, Z+20	; 0x14
	{
		HMC5883L_Test(0);
    4dea:	80 e0       	ldi	r24, 0x00	; 0
    4dec:	0e 94 02 13 	call	0x2604	; 0x2604 <_Z13HMC5883L_Testh>
	}
	
	ADCSRA = 1<<ADEN | 1<<ADSC | 0<<ADATE | 0<<ADIF | 1<<ADIE | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0;
    4df0:	8f ec       	ldi	r24, 0xCF	; 207
    4df2:	86 b9       	out	0x06, r24	; 6
	
	if (U_Batt.value < coeffs[U_Alarm].value)
    4df4:	20 91 9f 05 	lds	r18, 0x059F
    4df8:	30 91 a0 05 	lds	r19, 0x05A0
    4dfc:	40 91 a1 05 	lds	r20, 0x05A1
    4e00:	50 91 a2 05 	lds	r21, 0x05A2
    4e04:	60 91 67 06 	lds	r22, 0x0667
    4e08:	70 91 68 06 	lds	r23, 0x0668
    4e0c:	80 91 69 06 	lds	r24, 0x0669
    4e10:	90 91 6a 06 	lds	r25, 0x066A
    4e14:	0e 94 f3 2b 	call	0x57e6	; 0x57e6 <__cmpsf2>
    4e18:	88 23       	and	r24, r24
    4e1a:	44 f4       	brge	.+16     	; 0x4e2c <_Z11SensorsPollv+0xf2>
	{
		usRegHoldingBuf[MB_OFFSET+MB_SOUND] |= 2;
    4e1c:	ef ea       	ldi	r30, 0xAF	; 175
    4e1e:	f1 e0       	ldi	r31, 0x01	; 1
    4e20:	80 81       	ld	r24, Z
    4e22:	91 81       	ldd	r25, Z+1	; 0x01
    4e24:	82 60       	ori	r24, 0x02	; 2
    4e26:	91 83       	std	Z+1, r25	; 0x01
    4e28:	80 83       	st	Z, r24
    4e2a:	2f c0       	rjmp	.+94     	; 0x4e8a <_Z11SensorsPollv+0x150>
	}
	else
	{
		usRegHoldingBuf[MB_OFFSET+MB_SOUND] &= ~2;
    4e2c:	ef ea       	ldi	r30, 0xAF	; 175
    4e2e:	f1 e0       	ldi	r31, 0x01	; 1
    4e30:	80 81       	ld	r24, Z
    4e32:	91 81       	ldd	r25, Z+1	; 0x01
    4e34:	8d 7f       	andi	r24, 0xFD	; 253
    4e36:	91 83       	std	Z+1, r25	; 0x01
    4e38:	80 83       	st	Z, r24
    4e3a:	27 c0       	rjmp	.+78     	; 0x4e8a <_Z11SensorsPollv+0x150>
{
	BMP085PreTimer++;
	
	if (bit_is_set(usRegHoldingBuf[MB_OFFSET+MB_MANUAL], 0) && BMP085PreTimer >= 4 && BMP085Flag)
	{
		BMP085_GetUT();
    4e3c:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <_Z12BMP085_GetUTv>
		BMP085_StartMeasUP();
    4e40:	0e 94 aa 03 	call	0x754	; 0x754 <_Z18BMP085_StartMeasUPv>
		BMP085PreTimer = 0;
    4e44:	10 92 97 06 	sts	0x0697, r1
		BMP085Flag = 0;
    4e48:	10 92 98 06 	sts	0x0698, r1
    4e4c:	8f cf       	rjmp	.-226    	; 0x4d6c <_Z11SensorsPollv+0x32>
	}		
	else if (bit_is_set(usRegHoldingBuf[MB_OFFSET+MB_MANUAL], 0) && BMP085PreTimer >= 4 && !BMP085Flag)
    4e4e:	e3 e9       	ldi	r30, 0x93	; 147
    4e50:	f1 e0       	ldi	r31, 0x01	; 1
    4e52:	94 89       	ldd	r25, Z+20	; 0x14
    4e54:	90 fd       	sbrc	r25, 0
    4e56:	83 cf       	rjmp	.-250    	; 0x4d5e <_Z11SensorsPollv+0x24>
    4e58:	89 cf       	rjmp	.-238    	; 0x4d6c <_Z11SensorsPollv+0x32>
	{
		BMP085_GetUP();
    4e5a:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <_Z12BMP085_GetUPv>
		BMP085_StartMeasUT();
    4e5e:	0e 94 93 03 	call	0x726	; 0x726 <_Z18BMP085_StartMeasUTv>
		BMP085PreTimer = 0;
    4e62:	10 92 97 06 	sts	0x0697, r1
		BMP085Flag = 1;
    4e66:	81 e0       	ldi	r24, 0x01	; 1
    4e68:	80 93 98 06 	sts	0x0698, r24
    4e6c:	7f cf       	rjmp	.-258    	; 0x4d6c <_Z11SensorsPollv+0x32>
		L3G4200D_Test(2);
	}
	
	if (bit_is_clear(usRegHoldingBuf[MB_OFFSET+MB_MANUAL], 5) && bit_is_clear(usRegHoldingBuf[MB_OFFSET+MB_MANUAL], 6))
	{
		L3G4200D_Test(0);
    4e6e:	80 e0       	ldi	r24, 0x00	; 0
    4e70:	0e 94 f6 14 	call	0x29ec	; 0x29ec <_Z13L3G4200D_Testh>
    4e74:	a5 cf       	rjmp	.-182    	; 0x4dc0 <_Z11SensorsPollv+0x86>
		BMP085_GetUT();
		BMP085_StartMeasUP();
		BMP085PreTimer = 0;
		BMP085Flag = 0;
	}		
	else if (bit_is_set(usRegHoldingBuf[MB_OFFSET+MB_MANUAL], 0) && BMP085PreTimer >= 4 && !BMP085Flag)
    4e76:	e3 e9       	ldi	r30, 0x93	; 147
    4e78:	f1 e0       	ldi	r31, 0x01	; 1
    4e7a:	84 89       	ldd	r24, Z+20	; 0x14
    4e7c:	77 cf       	rjmp	.-274    	; 0x4d6c <_Z11SensorsPollv+0x32>
    4e7e:	e3 e9       	ldi	r30, 0x93	; 147
    4e80:	f1 e0       	ldi	r31, 0x01	; 1
    4e82:	84 89       	ldd	r24, Z+20	; 0x14
    4e84:	80 fd       	sbrc	r24, 0
    4e86:	6d cf       	rjmp	.-294    	; 0x4d62 <_Z11SensorsPollv+0x28>
    4e88:	71 cf       	rjmp	.-286    	; 0x4d6c <_Z11SensorsPollv+0x32>
		usRegHoldingBuf[MB_OFFSET+MB_SOUND] &= ~2;
	}
		
	
	return 0;
}
    4e8a:	80 e0       	ldi	r24, 0x00	; 0
    4e8c:	08 95       	ret

00004e8e <_Z12Angular_Calcv>:

void Angular_Calc()
{
    4e8e:	4f 92       	push	r4
    4e90:	5f 92       	push	r5
    4e92:	6f 92       	push	r6
    4e94:	7f 92       	push	r7
    4e96:	8f 92       	push	r8
    4e98:	9f 92       	push	r9
    4e9a:	af 92       	push	r10
    4e9c:	bf 92       	push	r11
    4e9e:	cf 92       	push	r12
    4ea0:	df 92       	push	r13
    4ea2:	ef 92       	push	r14
    4ea4:	ff 92       	push	r15
    4ea6:	0f 93       	push	r16
    4ea8:	1f 93       	push	r17
    4eaa:	cf 93       	push	r28
    4eac:	df 93       	push	r29
	acc_Ox.value = -1.0 * (atan2( k_y.value, k_z.value) * 180.0) / M_PI;
    4eae:	0f 2e       	mov	r0, r31
    4eb0:	fb ee       	ldi	r31, 0xEB	; 235
    4eb2:	cf 2e       	mov	r12, r31
    4eb4:	f5 e0       	ldi	r31, 0x05	; 5
    4eb6:	df 2e       	mov	r13, r31
    4eb8:	f0 2d       	mov	r31, r0
    4eba:	f6 01       	movw	r30, r12
    4ebc:	80 80       	ld	r8, Z
    4ebe:	91 80       	ldd	r9, Z+1	; 0x01
    4ec0:	a2 80       	ldd	r10, Z+2	; 0x02
    4ec2:	b3 80       	ldd	r11, Z+3	; 0x03
    4ec4:	07 ee       	ldi	r16, 0xE7	; 231
    4ec6:	15 e0       	ldi	r17, 0x05	; 5
    4ec8:	f8 01       	movw	r30, r16
    4eca:	60 81       	ld	r22, Z
    4ecc:	71 81       	ldd	r23, Z+1	; 0x01
    4ece:	82 81       	ldd	r24, Z+2	; 0x02
    4ed0:	93 81       	ldd	r25, Z+3	; 0x03
    4ed2:	a5 01       	movw	r20, r10
    4ed4:	94 01       	movw	r18, r8
    4ed6:	0e 94 a0 2b 	call	0x5740	; 0x5740 <atan2>
    4eda:	20 e0       	ldi	r18, 0x00	; 0
    4edc:	30 e0       	ldi	r19, 0x00	; 0
    4ede:	44 e3       	ldi	r20, 0x34	; 52
    4ee0:	53 e4       	ldi	r21, 0x43	; 67
    4ee2:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    4ee6:	90 58       	subi	r25, 0x80	; 128
    4ee8:	2b ed       	ldi	r18, 0xDB	; 219
    4eea:	3f e0       	ldi	r19, 0x0F	; 15
    4eec:	49 e4       	ldi	r20, 0x49	; 73
    4eee:	50 e4       	ldi	r21, 0x40	; 64
    4ef0:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <__divsf3>
    4ef4:	60 93 5f 06 	sts	0x065F, r22
    4ef8:	70 93 60 06 	sts	0x0660, r23
    4efc:	80 93 61 06 	sts	0x0661, r24
    4f00:	90 93 62 06 	sts	0x0662, r25
	acc_Oy.value = (atan2( k_x.value, k_z.value) * 180.0) / M_PI;
    4f04:	0f 2e       	mov	r0, r31
    4f06:	f3 ee       	ldi	r31, 0xE3	; 227
    4f08:	ef 2e       	mov	r14, r31
    4f0a:	f5 e0       	ldi	r31, 0x05	; 5
    4f0c:	ff 2e       	mov	r15, r31
    4f0e:	f0 2d       	mov	r31, r0
    4f10:	f7 01       	movw	r30, r14
    4f12:	60 81       	ld	r22, Z
    4f14:	71 81       	ldd	r23, Z+1	; 0x01
    4f16:	82 81       	ldd	r24, Z+2	; 0x02
    4f18:	93 81       	ldd	r25, Z+3	; 0x03
    4f1a:	a5 01       	movw	r20, r10
    4f1c:	94 01       	movw	r18, r8
    4f1e:	0e 94 a0 2b 	call	0x5740	; 0x5740 <atan2>
    4f22:	20 e0       	ldi	r18, 0x00	; 0
    4f24:	30 e0       	ldi	r19, 0x00	; 0
    4f26:	44 e3       	ldi	r20, 0x34	; 52
    4f28:	53 e4       	ldi	r21, 0x43	; 67
    4f2a:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    4f2e:	2b ed       	ldi	r18, 0xDB	; 219
    4f30:	3f e0       	ldi	r19, 0x0F	; 15
    4f32:	49 e4       	ldi	r20, 0x49	; 73
    4f34:	50 e4       	ldi	r21, 0x40	; 64
    4f36:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <__divsf3>
    4f3a:	60 93 63 06 	sts	0x0663, r22
    4f3e:	70 93 64 06 	sts	0x0664, r23
    4f42:	80 93 65 06 	sts	0x0665, r24
    4f46:	90 93 66 06 	sts	0x0666, r25
	
	//интеграл за последний период измерения
	int_w_x.value += ((w_x.value + p_w_x.value) / 2.0) * Step;
    4f4a:	80 90 9b 00 	lds	r8, 0x009B
    4f4e:	90 90 9c 00 	lds	r9, 0x009C
    4f52:	a0 90 9d 00 	lds	r10, 0x009D
    4f56:	b0 90 9e 00 	lds	r11, 0x009E
    4f5a:	c7 e5       	ldi	r28, 0x57	; 87
    4f5c:	d6 e0       	ldi	r29, 0x06	; 6
    4f5e:	20 91 13 06 	lds	r18, 0x0613
    4f62:	30 91 14 06 	lds	r19, 0x0614
    4f66:	40 91 15 06 	lds	r20, 0x0615
    4f6a:	50 91 16 06 	lds	r21, 0x0616
    4f6e:	60 91 07 06 	lds	r22, 0x0607
    4f72:	70 91 08 06 	lds	r23, 0x0608
    4f76:	80 91 09 06 	lds	r24, 0x0609
    4f7a:	90 91 0a 06 	lds	r25, 0x060A
    4f7e:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    4f82:	20 e0       	ldi	r18, 0x00	; 0
    4f84:	30 e0       	ldi	r19, 0x00	; 0
    4f86:	40 e0       	ldi	r20, 0x00	; 0
    4f88:	5f e3       	ldi	r21, 0x3F	; 63
    4f8a:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    4f8e:	a5 01       	movw	r20, r10
    4f90:	94 01       	movw	r18, r8
    4f92:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    4f96:	9b 01       	movw	r18, r22
    4f98:	ac 01       	movw	r20, r24
    4f9a:	68 81       	ld	r22, Y
    4f9c:	79 81       	ldd	r23, Y+1	; 0x01
    4f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    4fa0:	9b 81       	ldd	r25, Y+3	; 0x03
    4fa2:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    4fa6:	68 83       	st	Y, r22
    4fa8:	79 83       	std	Y+1, r23	; 0x01
    4faa:	8a 83       	std	Y+2, r24	; 0x02
    4fac:	9b 83       	std	Y+3, r25	; 0x03
	int_w_y.value += ((w_y.value + p_w_y.value) / 2.0) * Step;
    4fae:	cb e5       	ldi	r28, 0x5B	; 91
    4fb0:	d6 e0       	ldi	r29, 0x06	; 6
    4fb2:	20 91 17 06 	lds	r18, 0x0617
    4fb6:	30 91 18 06 	lds	r19, 0x0618
    4fba:	40 91 19 06 	lds	r20, 0x0619
    4fbe:	50 91 1a 06 	lds	r21, 0x061A
    4fc2:	60 91 0b 06 	lds	r22, 0x060B
    4fc6:	70 91 0c 06 	lds	r23, 0x060C
    4fca:	80 91 0d 06 	lds	r24, 0x060D
    4fce:	90 91 0e 06 	lds	r25, 0x060E
    4fd2:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    4fd6:	20 e0       	ldi	r18, 0x00	; 0
    4fd8:	30 e0       	ldi	r19, 0x00	; 0
    4fda:	40 e0       	ldi	r20, 0x00	; 0
    4fdc:	5f e3       	ldi	r21, 0x3F	; 63
    4fde:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    4fe2:	9b 01       	movw	r18, r22
    4fe4:	ac 01       	movw	r20, r24
    4fe6:	c5 01       	movw	r24, r10
    4fe8:	b4 01       	movw	r22, r8
    4fea:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    4fee:	9b 01       	movw	r18, r22
    4ff0:	ac 01       	movw	r20, r24
    4ff2:	68 81       	ld	r22, Y
    4ff4:	79 81       	ldd	r23, Y+1	; 0x01
    4ff6:	8a 81       	ldd	r24, Y+2	; 0x02
    4ff8:	9b 81       	ldd	r25, Y+3	; 0x03
    4ffa:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    4ffe:	68 83       	st	Y, r22
    5000:	79 83       	std	Y+1, r23	; 0x01
    5002:	8a 83       	std	Y+2, r24	; 0x02
    5004:	9b 83       	std	Y+3, r25	; 0x03
	int_w_z.value += ((w_z.value + p_w_z.value) / 2.0) * Step;
    5006:	cb e7       	ldi	r28, 0x7B	; 123
    5008:	d6 e0       	ldi	r29, 0x06	; 6
    500a:	20 91 1b 06 	lds	r18, 0x061B
    500e:	30 91 1c 06 	lds	r19, 0x061C
    5012:	40 91 1d 06 	lds	r20, 0x061D
    5016:	50 91 1e 06 	lds	r21, 0x061E
    501a:	60 91 0f 06 	lds	r22, 0x060F
    501e:	70 91 10 06 	lds	r23, 0x0610
    5022:	80 91 11 06 	lds	r24, 0x0611
    5026:	90 91 12 06 	lds	r25, 0x0612
    502a:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    502e:	20 e0       	ldi	r18, 0x00	; 0
    5030:	30 e0       	ldi	r19, 0x00	; 0
    5032:	40 e0       	ldi	r20, 0x00	; 0
    5034:	5f e3       	ldi	r21, 0x3F	; 63
    5036:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    503a:	9b 01       	movw	r18, r22
    503c:	ac 01       	movw	r20, r24
    503e:	c5 01       	movw	r24, r10
    5040:	b4 01       	movw	r22, r8
    5042:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    5046:	28 81       	ld	r18, Y
    5048:	39 81       	ldd	r19, Y+1	; 0x01
    504a:	4a 81       	ldd	r20, Y+2	; 0x02
    504c:	5b 81       	ldd	r21, Y+3	; 0x03
    504e:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    5052:	26 2f       	mov	r18, r22
    5054:	37 2f       	mov	r19, r23
    5056:	46 2f       	mov	r20, r22
    5058:	57 2f       	mov	r21, r23
    505a:	68 2f       	mov	r22, r24
    505c:	79 2f       	mov	r23, r25
    505e:	48 83       	st	Y, r20
    5060:	59 83       	std	Y+1, r21	; 0x01
    5062:	6a 83       	std	Y+2, r22	; 0x02
    5064:	7b 83       	std	Y+3, r23	; 0x03
	//Oz_gyr = ((w_z + p_w_z) / 2.0) * Step;
	int_w_z.value = Correction360(int_w_z.value);
    5066:	62 2f       	mov	r22, r18
    5068:	73 2f       	mov	r23, r19
    506a:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <_Z13Correction360f>
    506e:	68 83       	st	Y, r22
    5070:	79 83       	std	Y+1, r23	; 0x01
    5072:	8a 83       	std	Y+2, r24	; 0x02
    5074:	9b 83       	std	Y+3, r25	; 0x03
	
	//Коррекция ошибки интегрирования угловой скорости
	if ((fabs(fabs(k_x.value) + fabs(k_y.value) + fabs(k_z.value) - 1.0) < coeffs[AXL_TRUE_ACC].value) && fabs(int_w_x.value - acc_Ox.value) < coeffs[COR_X_LIM].value && fabs(int_w_y.value - acc_Oy.value) < coeffs[COR_Y_LIM].value)
    5076:	f7 01       	movw	r30, r14
    5078:	80 81       	ld	r24, Z
    507a:	91 81       	ldd	r25, Z+1	; 0x01
    507c:	a2 81       	ldd	r26, Z+2	; 0x02
    507e:	b3 81       	ldd	r27, Z+3	; 0x03
    5080:	bc 01       	movw	r22, r24
    5082:	cd 01       	movw	r24, r26
    5084:	9f 77       	andi	r25, 0x7F	; 127
    5086:	f8 01       	movw	r30, r16
    5088:	00 81       	ld	r16, Z
    508a:	11 81       	ldd	r17, Z+1	; 0x01
    508c:	22 81       	ldd	r18, Z+2	; 0x02
    508e:	33 81       	ldd	r19, Z+3	; 0x03
    5090:	a9 01       	movw	r20, r18
    5092:	98 01       	movw	r18, r16
    5094:	5f 77       	andi	r21, 0x7F	; 127
    5096:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    509a:	f6 01       	movw	r30, r12
    509c:	00 81       	ld	r16, Z
    509e:	11 81       	ldd	r17, Z+1	; 0x01
    50a0:	22 81       	ldd	r18, Z+2	; 0x02
    50a2:	33 81       	ldd	r19, Z+3	; 0x03
    50a4:	a9 01       	movw	r20, r18
    50a6:	98 01       	movw	r18, r16
    50a8:	5f 77       	andi	r21, 0x7F	; 127
    50aa:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    50ae:	20 e0       	ldi	r18, 0x00	; 0
    50b0:	30 e0       	ldi	r19, 0x00	; 0
    50b2:	40 e8       	ldi	r20, 0x80	; 128
    50b4:	5f e3       	ldi	r21, 0x3F	; 63
    50b6:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__subsf3>
    50ba:	9f 77       	andi	r25, 0x7F	; 127
    50bc:	20 91 53 05 	lds	r18, 0x0553
    50c0:	30 91 54 05 	lds	r19, 0x0554
    50c4:	40 91 55 05 	lds	r20, 0x0555
    50c8:	50 91 56 05 	lds	r21, 0x0556
    50cc:	0e 94 f3 2b 	call	0x57e6	; 0x57e6 <__cmpsf2>
    50d0:	88 23       	and	r24, r24
    50d2:	0c f0       	brlt	.+2      	; 0x50d6 <_Z12Angular_Calcv+0x248>
    50d4:	52 c0       	rjmp	.+164    	; 0x517a <_Z12Angular_Calcv+0x2ec>
    50d6:	c0 90 5f 06 	lds	r12, 0x065F
    50da:	d0 90 60 06 	lds	r13, 0x0660
    50de:	e0 90 61 06 	lds	r14, 0x0661
    50e2:	f0 90 62 06 	lds	r15, 0x0662
    50e6:	a7 01       	movw	r20, r14
    50e8:	96 01       	movw	r18, r12
    50ea:	60 91 57 06 	lds	r22, 0x0657
    50ee:	70 91 58 06 	lds	r23, 0x0658
    50f2:	80 91 59 06 	lds	r24, 0x0659
    50f6:	90 91 5a 06 	lds	r25, 0x065A
    50fa:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__subsf3>
    50fe:	9f 77       	andi	r25, 0x7F	; 127
    5100:	20 91 57 05 	lds	r18, 0x0557
    5104:	30 91 58 05 	lds	r19, 0x0558
    5108:	40 91 59 05 	lds	r20, 0x0559
    510c:	50 91 5a 05 	lds	r21, 0x055A
    5110:	0e 94 f3 2b 	call	0x57e6	; 0x57e6 <__cmpsf2>
    5114:	88 23       	and	r24, r24
    5116:	8c f5       	brge	.+98     	; 0x517a <_Z12Angular_Calcv+0x2ec>
    5118:	40 90 63 06 	lds	r4, 0x0663
    511c:	50 90 64 06 	lds	r5, 0x0664
    5120:	60 90 65 06 	lds	r6, 0x0665
    5124:	70 90 66 06 	lds	r7, 0x0666
    5128:	a3 01       	movw	r20, r6
    512a:	92 01       	movw	r18, r4
    512c:	60 91 5b 06 	lds	r22, 0x065B
    5130:	70 91 5c 06 	lds	r23, 0x065C
    5134:	80 91 5d 06 	lds	r24, 0x065D
    5138:	90 91 5e 06 	lds	r25, 0x065E
    513c:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__subsf3>
    5140:	9f 77       	andi	r25, 0x7F	; 127
    5142:	20 91 5b 05 	lds	r18, 0x055B
    5146:	30 91 5c 05 	lds	r19, 0x055C
    514a:	40 91 5d 05 	lds	r20, 0x055D
    514e:	50 91 5e 05 	lds	r21, 0x055E
    5152:	0e 94 f3 2b 	call	0x57e6	; 0x57e6 <__cmpsf2>
    5156:	88 23       	and	r24, r24
    5158:	84 f4       	brge	.+32     	; 0x517a <_Z12Angular_Calcv+0x2ec>
	{
		int_w_x.value = acc_Ox.value;
    515a:	c0 92 57 06 	sts	0x0657, r12
    515e:	d0 92 58 06 	sts	0x0658, r13
    5162:	e0 92 59 06 	sts	0x0659, r14
    5166:	f0 92 5a 06 	sts	0x065A, r15
		int_w_y.value = acc_Oy.value;
    516a:	40 92 5b 06 	sts	0x065B, r4
    516e:	50 92 5c 06 	sts	0x065C, r5
    5172:	60 92 5d 06 	sts	0x065D, r6
    5176:	70 92 5e 06 	sts	0x065E, r7
	}
	
	p_Ox.value = Ox.value;
    517a:	0f 2e       	mov	r0, r31
    517c:	fb e6       	ldi	r31, 0x6B	; 107
    517e:	4f 2e       	mov	r4, r31
    5180:	f6 e0       	ldi	r31, 0x06	; 6
    5182:	5f 2e       	mov	r5, r31
    5184:	f0 2d       	mov	r31, r0
    5186:	0f 2e       	mov	r0, r31
    5188:	f7 e4       	ldi	r31, 0x47	; 71
    518a:	cf 2e       	mov	r12, r31
    518c:	f6 e0       	ldi	r31, 0x06	; 6
    518e:	df 2e       	mov	r13, r31
    5190:	f0 2d       	mov	r31, r0
    5192:	f6 01       	movw	r30, r12
    5194:	80 81       	ld	r24, Z
    5196:	91 81       	ldd	r25, Z+1	; 0x01
    5198:	a2 81       	ldd	r26, Z+2	; 0x02
    519a:	b3 81       	ldd	r27, Z+3	; 0x03
    519c:	f2 01       	movw	r30, r4
    519e:	80 83       	st	Z, r24
    51a0:	91 83       	std	Z+1, r25	; 0x01
    51a2:	a2 83       	std	Z+2, r26	; 0x02
    51a4:	b3 83       	std	Z+3, r27	; 0x03
	p_Oy.value = Oy.value;
    51a6:	cb e4       	ldi	r28, 0x4B	; 75
    51a8:	d6 e0       	ldi	r29, 0x06	; 6
    51aa:	88 81       	ld	r24, Y
    51ac:	99 81       	ldd	r25, Y+1	; 0x01
    51ae:	aa 81       	ldd	r26, Y+2	; 0x02
    51b0:	bb 81       	ldd	r27, Y+3	; 0x03
    51b2:	80 93 6f 06 	sts	0x066F, r24
    51b6:	90 93 70 06 	sts	0x0670, r25
    51ba:	a0 93 71 06 	sts	0x0671, r26
    51be:	b0 93 72 06 	sts	0x0672, r27
	p_Oz.value = Oz.value;
    51c2:	0f 2e       	mov	r0, r31
    51c4:	fb e3       	ldi	r31, 0x3B	; 59
    51c6:	6f 2e       	mov	r6, r31
    51c8:	f6 e0       	ldi	r31, 0x06	; 6
    51ca:	7f 2e       	mov	r7, r31
    51cc:	f0 2d       	mov	r31, r0
    51ce:	f3 01       	movw	r30, r6
    51d0:	80 81       	ld	r24, Z
    51d2:	91 81       	ldd	r25, Z+1	; 0x01
    51d4:	a2 81       	ldd	r26, Z+2	; 0x02
    51d6:	b3 81       	ldd	r27, Z+3	; 0x03
    51d8:	80 93 43 06 	sts	0x0643, r24
    51dc:	90 93 44 06 	sts	0x0644, r25
    51e0:	a0 93 45 06 	sts	0x0645, r26
    51e4:	b0 93 46 06 	sts	0x0646, r27
	
	//Комплементарный фильтр
	Ox.value = ComplemetaryFilter(acc_Ox.value, int_w_x.value, coeffs[Kcomp_Ox].value);
    51e8:	e0 90 3b 05 	lds	r14, 0x053B
    51ec:	f0 90 3c 05 	lds	r15, 0x053C
    51f0:	00 91 3d 05 	lds	r16, 0x053D
    51f4:	10 91 3e 05 	lds	r17, 0x053E
    51f8:	20 91 57 06 	lds	r18, 0x0657
    51fc:	30 91 58 06 	lds	r19, 0x0658
    5200:	40 91 59 06 	lds	r20, 0x0659
    5204:	50 91 5a 06 	lds	r21, 0x065A
    5208:	60 91 5f 06 	lds	r22, 0x065F
    520c:	70 91 60 06 	lds	r23, 0x0660
    5210:	80 91 61 06 	lds	r24, 0x0661
    5214:	90 91 62 06 	lds	r25, 0x0662
    5218:	0e 94 00 0c 	call	0x1800	; 0x1800 <_Z18ComplemetaryFilterfff>
    521c:	f6 01       	movw	r30, r12
    521e:	60 83       	st	Z, r22
    5220:	71 83       	std	Z+1, r23	; 0x01
    5222:	82 83       	std	Z+2, r24	; 0x02
    5224:	93 83       	std	Z+3, r25	; 0x03
	Oy.value = ComplemetaryFilter(acc_Oy.value, int_w_y.value, coeffs[Kcomp_Oy].value);
    5226:	e0 90 3f 05 	lds	r14, 0x053F
    522a:	f0 90 40 05 	lds	r15, 0x0540
    522e:	00 91 41 05 	lds	r16, 0x0541
    5232:	10 91 42 05 	lds	r17, 0x0542
    5236:	20 91 5b 06 	lds	r18, 0x065B
    523a:	30 91 5c 06 	lds	r19, 0x065C
    523e:	40 91 5d 06 	lds	r20, 0x065D
    5242:	50 91 5e 06 	lds	r21, 0x065E
    5246:	60 91 63 06 	lds	r22, 0x0663
    524a:	70 91 64 06 	lds	r23, 0x0664
    524e:	80 91 65 06 	lds	r24, 0x0665
    5252:	90 91 66 06 	lds	r25, 0x0666
    5256:	0e 94 00 0c 	call	0x1800	; 0x1800 <_Z18ComplemetaryFilterfff>
    525a:	68 83       	st	Y, r22
    525c:	79 83       	std	Y+1, r23	; 0x01
    525e:	8a 83       	std	Y+2, r24	; 0x02
    5260:	9b 83       	std	Y+3, r25	; 0x03
	Oz.value = ComplemetaryFilter(magOz.value, int_w_z.value, coeffs[Kcomp_Oz].value);
    5262:	e0 90 43 05 	lds	r14, 0x0543
    5266:	f0 90 44 05 	lds	r15, 0x0544
    526a:	00 91 45 05 	lds	r16, 0x0545
    526e:	10 91 46 05 	lds	r17, 0x0546
    5272:	20 91 7b 06 	lds	r18, 0x067B
    5276:	30 91 7c 06 	lds	r19, 0x067C
    527a:	40 91 7d 06 	lds	r20, 0x067D
    527e:	50 91 7e 06 	lds	r21, 0x067E
    5282:	60 91 7f 06 	lds	r22, 0x067F
    5286:	70 91 80 06 	lds	r23, 0x0680
    528a:	80 91 81 06 	lds	r24, 0x0681
    528e:	90 91 82 06 	lds	r25, 0x0682
    5292:	0e 94 00 0c 	call	0x1800	; 0x1800 <_Z18ComplemetaryFilterfff>
    5296:	f3 01       	movw	r30, r6
    5298:	60 83       	st	Z, r22
    529a:	71 83       	std	Z+1, r23	; 0x01
    529c:	82 83       	std	Z+2, r24	; 0x02
    529e:	93 83       	std	Z+3, r25	; 0x03
	
	//Накапливаем интегральные суммы для И-крена и И-тангажа для ПИДов
	if (p_Ox.value > -90.0 && p_Ox.value < 90.0 && p_Oy.value > -90.0 && p_Oy.value < 90.0)	//проверка значения углов на корректность (включен ли инклинометр?)
    52a0:	f2 01       	movw	r30, r4
    52a2:	c0 80       	ld	r12, Z
    52a4:	d1 80       	ldd	r13, Z+1	; 0x01
    52a6:	e2 80       	ldd	r14, Z+2	; 0x02
    52a8:	f3 80       	ldd	r15, Z+3	; 0x03
    52aa:	20 e0       	ldi	r18, 0x00	; 0
    52ac:	30 e0       	ldi	r19, 0x00	; 0
    52ae:	44 eb       	ldi	r20, 0xB4	; 180
    52b0:	52 ec       	ldi	r21, 0xC2	; 194
    52b2:	c7 01       	movw	r24, r14
    52b4:	b6 01       	movw	r22, r12
    52b6:	0e 94 9e 2d 	call	0x5b3c	; 0x5b3c <__gesf2>
    52ba:	18 16       	cp	r1, r24
    52bc:	0c f0       	brlt	.+2      	; 0x52c0 <_Z12Angular_Calcv+0x432>
    52be:	76 c0       	rjmp	.+236    	; 0x53ac <_Z12Angular_Calcv+0x51e>
    52c0:	20 e0       	ldi	r18, 0x00	; 0
    52c2:	30 e0       	ldi	r19, 0x00	; 0
    52c4:	44 eb       	ldi	r20, 0xB4	; 180
    52c6:	52 e4       	ldi	r21, 0x42	; 66
    52c8:	c7 01       	movw	r24, r14
    52ca:	b6 01       	movw	r22, r12
    52cc:	0e 94 f3 2b 	call	0x57e6	; 0x57e6 <__cmpsf2>
    52d0:	88 23       	and	r24, r24
    52d2:	0c f0       	brlt	.+2      	; 0x52d6 <_Z12Angular_Calcv+0x448>
    52d4:	6b c0       	rjmp	.+214    	; 0x53ac <_Z12Angular_Calcv+0x51e>
    52d6:	40 90 6f 06 	lds	r4, 0x066F
    52da:	50 90 70 06 	lds	r5, 0x0670
    52de:	60 90 71 06 	lds	r6, 0x0671
    52e2:	70 90 72 06 	lds	r7, 0x0672
    52e6:	20 e0       	ldi	r18, 0x00	; 0
    52e8:	30 e0       	ldi	r19, 0x00	; 0
    52ea:	44 eb       	ldi	r20, 0xB4	; 180
    52ec:	52 ec       	ldi	r21, 0xC2	; 194
    52ee:	c3 01       	movw	r24, r6
    52f0:	b2 01       	movw	r22, r4
    52f2:	0e 94 9e 2d 	call	0x5b3c	; 0x5b3c <__gesf2>
    52f6:	18 16       	cp	r1, r24
    52f8:	0c f0       	brlt	.+2      	; 0x52fc <_Z12Angular_Calcv+0x46e>
    52fa:	58 c0       	rjmp	.+176    	; 0x53ac <_Z12Angular_Calcv+0x51e>
    52fc:	20 e0       	ldi	r18, 0x00	; 0
    52fe:	30 e0       	ldi	r19, 0x00	; 0
    5300:	44 eb       	ldi	r20, 0xB4	; 180
    5302:	52 e4       	ldi	r21, 0x42	; 66
    5304:	c3 01       	movw	r24, r6
    5306:	b2 01       	movw	r22, r4
    5308:	0e 94 f3 2b 	call	0x57e6	; 0x57e6 <__cmpsf2>
    530c:	88 23       	and	r24, r24
    530e:	0c f0       	brlt	.+2      	; 0x5312 <_Z12Angular_Calcv+0x484>
    5310:	4d c0       	rjmp	.+154    	; 0x53ac <_Z12Angular_Calcv+0x51e>
	{
		int_Ox.value += ((Ox.value + p_Ox.value) / 2.0) * Step;
    5312:	c3 e7       	ldi	r28, 0x73	; 115
    5314:	d6 e0       	ldi	r29, 0x06	; 6
    5316:	20 91 47 06 	lds	r18, 0x0647
    531a:	30 91 48 06 	lds	r19, 0x0648
    531e:	40 91 49 06 	lds	r20, 0x0649
    5322:	50 91 4a 06 	lds	r21, 0x064A
    5326:	c7 01       	movw	r24, r14
    5328:	b6 01       	movw	r22, r12
    532a:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    532e:	20 e0       	ldi	r18, 0x00	; 0
    5330:	30 e0       	ldi	r19, 0x00	; 0
    5332:	40 e0       	ldi	r20, 0x00	; 0
    5334:	5f e3       	ldi	r21, 0x3F	; 63
    5336:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    533a:	9b 01       	movw	r18, r22
    533c:	ac 01       	movw	r20, r24
    533e:	c5 01       	movw	r24, r10
    5340:	b4 01       	movw	r22, r8
    5342:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    5346:	9b 01       	movw	r18, r22
    5348:	ac 01       	movw	r20, r24
    534a:	68 81       	ld	r22, Y
    534c:	79 81       	ldd	r23, Y+1	; 0x01
    534e:	8a 81       	ldd	r24, Y+2	; 0x02
    5350:	9b 81       	ldd	r25, Y+3	; 0x03
    5352:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    5356:	68 83       	st	Y, r22
    5358:	79 83       	std	Y+1, r23	; 0x01
    535a:	8a 83       	std	Y+2, r24	; 0x02
    535c:	9b 83       	std	Y+3, r25	; 0x03
		int_Oy.value += ((Oy.value + p_Oy.value) / 2.0) * Step;
    535e:	c7 e7       	ldi	r28, 0x77	; 119
    5360:	d6 e0       	ldi	r29, 0x06	; 6
    5362:	20 91 4b 06 	lds	r18, 0x064B
    5366:	30 91 4c 06 	lds	r19, 0x064C
    536a:	40 91 4d 06 	lds	r20, 0x064D
    536e:	50 91 4e 06 	lds	r21, 0x064E
    5372:	c3 01       	movw	r24, r6
    5374:	b2 01       	movw	r22, r4
    5376:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    537a:	20 e0       	ldi	r18, 0x00	; 0
    537c:	30 e0       	ldi	r19, 0x00	; 0
    537e:	40 e0       	ldi	r20, 0x00	; 0
    5380:	5f e3       	ldi	r21, 0x3F	; 63
    5382:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    5386:	9b 01       	movw	r18, r22
    5388:	ac 01       	movw	r20, r24
    538a:	c5 01       	movw	r24, r10
    538c:	b4 01       	movw	r22, r8
    538e:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__mulsf3>
    5392:	9b 01       	movw	r18, r22
    5394:	ac 01       	movw	r20, r24
    5396:	68 81       	ld	r22, Y
    5398:	79 81       	ldd	r23, Y+1	; 0x01
    539a:	8a 81       	ldd	r24, Y+2	; 0x02
    539c:	9b 81       	ldd	r25, Y+3	; 0x03
    539e:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    53a2:	68 83       	st	Y, r22
    53a4:	79 83       	std	Y+1, r23	; 0x01
    53a6:	8a 83       	std	Y+2, r24	; 0x02
    53a8:	9b 83       	std	Y+3, r25	; 0x03
    53aa:	10 c0       	rjmp	.+32     	; 0x53cc <_Z12Angular_Calcv+0x53e>
	}
	else 
	{
		int_Ox.value = 0.0;
    53ac:	10 92 73 06 	sts	0x0673, r1
    53b0:	10 92 74 06 	sts	0x0674, r1
    53b4:	10 92 75 06 	sts	0x0675, r1
    53b8:	10 92 76 06 	sts	0x0676, r1
		int_Oy.value = 0.0;
    53bc:	10 92 77 06 	sts	0x0677, r1
    53c0:	10 92 78 06 	sts	0x0678, r1
    53c4:	10 92 79 06 	sts	0x0679, r1
    53c8:	10 92 7a 06 	sts	0x067A, r1
	}
	
	//Ограничение интегральных сумм ПИДов И-крена и И-тангажа
	if (int_Ox.value > coeffs[IntSum_LIM].value)
    53cc:	c0 90 7b 05 	lds	r12, 0x057B
    53d0:	d0 90 7c 05 	lds	r13, 0x057C
    53d4:	e0 90 7d 05 	lds	r14, 0x057D
    53d8:	f0 90 7e 05 	lds	r15, 0x057E
    53dc:	a7 01       	movw	r20, r14
    53de:	96 01       	movw	r18, r12
    53e0:	60 91 73 06 	lds	r22, 0x0673
    53e4:	70 91 74 06 	lds	r23, 0x0674
    53e8:	80 91 75 06 	lds	r24, 0x0675
    53ec:	90 91 76 06 	lds	r25, 0x0676
    53f0:	0e 94 9e 2d 	call	0x5b3c	; 0x5b3c <__gesf2>
    53f4:	18 16       	cp	r1, r24
    53f6:	44 f4       	brge	.+16     	; 0x5408 <_Z12Angular_Calcv+0x57a>
	{
		int_Ox.value = coeffs[IntSum_LIM].value;
    53f8:	c0 92 73 06 	sts	0x0673, r12
    53fc:	d0 92 74 06 	sts	0x0674, r13
    5400:	e0 92 75 06 	sts	0x0675, r14
    5404:	f0 92 76 06 	sts	0x0676, r15
	}
	if (int_Oy.value > coeffs[IntSum_LIM].value)
    5408:	20 91 77 06 	lds	r18, 0x0677
    540c:	30 91 78 06 	lds	r19, 0x0678
    5410:	40 91 79 06 	lds	r20, 0x0679
    5414:	50 91 7a 06 	lds	r21, 0x067A
    5418:	c7 01       	movw	r24, r14
    541a:	b6 01       	movw	r22, r12
    541c:	0e 94 f3 2b 	call	0x57e6	; 0x57e6 <__cmpsf2>
    5420:	88 23       	and	r24, r24
    5422:	44 f4       	brge	.+16     	; 0x5434 <_Z12Angular_Calcv+0x5a6>
	{
		int_Oy.value = coeffs[IntSum_LIM].value;
    5424:	c0 92 77 06 	sts	0x0677, r12
    5428:	d0 92 78 06 	sts	0x0678, r13
    542c:	e0 92 79 06 	sts	0x0679, r14
    5430:	f0 92 7a 06 	sts	0x067A, r15
	}
	if (int_Ox.value < coeffs[IntSum_LIM].value * (-1.0))
    5434:	f7 fa       	bst	r15, 7
    5436:	f0 94       	com	r15
    5438:	f7 f8       	bld	r15, 7
    543a:	f0 94       	com	r15
    543c:	a7 01       	movw	r20, r14
    543e:	96 01       	movw	r18, r12
    5440:	60 91 73 06 	lds	r22, 0x0673
    5444:	70 91 74 06 	lds	r23, 0x0674
    5448:	80 91 75 06 	lds	r24, 0x0675
    544c:	90 91 76 06 	lds	r25, 0x0676
    5450:	0e 94 f3 2b 	call	0x57e6	; 0x57e6 <__cmpsf2>
    5454:	88 23       	and	r24, r24
    5456:	44 f4       	brge	.+16     	; 0x5468 <_Z12Angular_Calcv+0x5da>
	{
		int_Ox.value = coeffs[IntSum_LIM].value * (-1.0);
    5458:	c0 92 73 06 	sts	0x0673, r12
    545c:	d0 92 74 06 	sts	0x0674, r13
    5460:	e0 92 75 06 	sts	0x0675, r14
    5464:	f0 92 76 06 	sts	0x0676, r15
	}
	if (int_Oy.value < coeffs[IntSum_LIM].value * (-1.0))
    5468:	20 91 77 06 	lds	r18, 0x0677
    546c:	30 91 78 06 	lds	r19, 0x0678
    5470:	40 91 79 06 	lds	r20, 0x0679
    5474:	50 91 7a 06 	lds	r21, 0x067A
    5478:	c7 01       	movw	r24, r14
    547a:	b6 01       	movw	r22, r12
    547c:	0e 94 9e 2d 	call	0x5b3c	; 0x5b3c <__gesf2>
    5480:	18 16       	cp	r1, r24
    5482:	44 f4       	brge	.+16     	; 0x5494 <_Z12Angular_Calcv+0x606>
	{
		int_Oy.value = coeffs[IntSum_LIM].value * (-1.0);
    5484:	c0 92 77 06 	sts	0x0677, r12
    5488:	d0 92 78 06 	sts	0x0678, r13
    548c:	e0 92 79 06 	sts	0x0679, r14
    5490:	f0 92 7a 06 	sts	0x067A, r15
	}
	
	//отключаем накопление ошибок на взлете
	if (bit_is_set(usRegHoldingBuf[MB_OFFSET+MB_MANUAL], 9))
    5494:	e3 e9       	ldi	r30, 0x93	; 147
    5496:	f1 e0       	ldi	r31, 0x01	; 1
    5498:	84 89       	ldd	r24, Z+20	; 0x14
	{
		int_Ox.value = coeffs[Takeoff_Int_Lim].value;
		int_Oy.value = coeffs[Takeoff_Int_Lim].value;
	}
}
    549a:	df 91       	pop	r29
    549c:	cf 91       	pop	r28
    549e:	1f 91       	pop	r17
    54a0:	0f 91       	pop	r16
    54a2:	ff 90       	pop	r15
    54a4:	ef 90       	pop	r14
    54a6:	df 90       	pop	r13
    54a8:	cf 90       	pop	r12
    54aa:	bf 90       	pop	r11
    54ac:	af 90       	pop	r10
    54ae:	9f 90       	pop	r9
    54b0:	8f 90       	pop	r8
    54b2:	7f 90       	pop	r7
    54b4:	6f 90       	pop	r6
    54b6:	5f 90       	pop	r5
    54b8:	4f 90       	pop	r4
    54ba:	08 95       	ret

000054bc <_Z25Heading_displacement_calcff>:

float Heading_displacement_calc(float Current, float Target)
{
    54bc:	cf 92       	push	r12
    54be:	df 92       	push	r13
    54c0:	ef 92       	push	r14
    54c2:	ff 92       	push	r15
    54c4:	6b 01       	movw	r12, r22
    54c6:	7c 01       	movw	r14, r24
    54c8:	ca 01       	movw	r24, r20
    54ca:	b9 01       	movw	r22, r18
	float X = Target - Current;
    54cc:	a7 01       	movw	r20, r14
    54ce:	96 01       	movw	r18, r12
    54d0:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__subsf3>
    54d4:	c6 2e       	mov	r12, r22
    54d6:	d7 2e       	mov	r13, r23
    54d8:	e8 2e       	mov	r14, r24
    54da:	f9 2e       	mov	r15, r25
	if (fabs(X) < 180.0)
    54dc:	c7 01       	movw	r24, r14
    54de:	b6 01       	movw	r22, r12
    54e0:	9f 77       	andi	r25, 0x7F	; 127
    54e2:	20 e0       	ldi	r18, 0x00	; 0
    54e4:	30 e0       	ldi	r19, 0x00	; 0
    54e6:	44 e3       	ldi	r20, 0x34	; 52
    54e8:	53 e4       	ldi	r21, 0x43	; 67
    54ea:	0e 94 f3 2b 	call	0x57e6	; 0x57e6 <__cmpsf2>
    54ee:	88 23       	and	r24, r24
    54f0:	14 f1       	brlt	.+68     	; 0x5536 <_Z25Heading_displacement_calcff+0x7a>
	return X;

	if (X > 0.0)
    54f2:	20 e0       	ldi	r18, 0x00	; 0
    54f4:	30 e0       	ldi	r19, 0x00	; 0
    54f6:	a9 01       	movw	r20, r18
    54f8:	c7 01       	movw	r24, r14
    54fa:	b6 01       	movw	r22, r12
    54fc:	0e 94 9e 2d 	call	0x5b3c	; 0x5b3c <__gesf2>
    5500:	18 16       	cp	r1, r24
    5502:	6c f4       	brge	.+26     	; 0x551e <_Z25Heading_displacement_calcff+0x62>
	{
		X -= 360.0;
    5504:	20 e0       	ldi	r18, 0x00	; 0
    5506:	30 e0       	ldi	r19, 0x00	; 0
    5508:	44 eb       	ldi	r20, 0xB4	; 180
    550a:	53 e4       	ldi	r21, 0x43	; 67
    550c:	c7 01       	movw	r24, r14
    550e:	b6 01       	movw	r22, r12
    5510:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__subsf3>
    5514:	c6 2e       	mov	r12, r22
    5516:	d7 2e       	mov	r13, r23
    5518:	e8 2e       	mov	r14, r24
    551a:	f9 2e       	mov	r15, r25
    551c:	0c c0       	rjmp	.+24     	; 0x5536 <_Z25Heading_displacement_calcff+0x7a>
	}
	else
	{
		X += 360.0;
    551e:	20 e0       	ldi	r18, 0x00	; 0
    5520:	30 e0       	ldi	r19, 0x00	; 0
    5522:	44 eb       	ldi	r20, 0xB4	; 180
    5524:	53 e4       	ldi	r21, 0x43	; 67
    5526:	c7 01       	movw	r24, r14
    5528:	b6 01       	movw	r22, r12
    552a:	0e 94 2d 2b 	call	0x565a	; 0x565a <__addsf3>
    552e:	c6 2e       	mov	r12, r22
    5530:	d7 2e       	mov	r13, r23
    5532:	e8 2e       	mov	r14, r24
    5534:	f9 2e       	mov	r15, r25
	}

	return X;
}
    5536:	6c 2d       	mov	r22, r12
    5538:	7d 2d       	mov	r23, r13
    553a:	8e 2d       	mov	r24, r14
    553c:	9f 2d       	mov	r25, r15
    553e:	ff 90       	pop	r15
    5540:	ef 90       	pop	r14
    5542:	df 90       	pop	r13
    5544:	cf 90       	pop	r12
    5546:	08 95       	ret

00005548 <__vector_11>:

static uint16_t AlarmTimer;

/*Прерывание, возникающее каждые 0,004096сек.*/
ISR (TIMER0_OVF_vect, ISR_NOBLOCK)
{
    5548:	78 94       	sei
    554a:	1f 92       	push	r1
    554c:	0f 92       	push	r0
    554e:	0f b6       	in	r0, 0x3f	; 63
    5550:	0f 92       	push	r0
    5552:	11 24       	eor	r1, r1
    5554:	2f 93       	push	r18
    5556:	3f 93       	push	r19
    5558:	4f 93       	push	r20
    555a:	5f 93       	push	r21
    555c:	6f 93       	push	r22
    555e:	7f 93       	push	r23
    5560:	8f 93       	push	r24
    5562:	9f 93       	push	r25
    5564:	af 93       	push	r26
    5566:	bf 93       	push	r27
    5568:	ef 93       	push	r30
    556a:	ff 93       	push	r31
	if (HCSR04_Timer_Prescaller >= 30)
    556c:	80 91 92 01 	lds	r24, 0x0192
    5570:	8e 31       	cpi	r24, 0x1E	; 30
    5572:	60 f0       	brcs	.+24     	; 0x558c <__vector_11+0x44>
	{
		HCSR04_Timer_Prescaller = 0;
    5574:	10 92 92 01 	sts	0x0192, r1
		timer0OverflowCount = 0;
    5578:	10 92 91 01 	sts	0x0191, r1
    557c:	10 92 90 01 	sts	0x0190, r1
		PORTD |= 1<<PORTD7;
    5580:	97 9a       	sbi	0x12, 7	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5582:	80 e5       	ldi	r24, 0x50	; 80
    5584:	8a 95       	dec	r24
    5586:	f1 f7       	brne	.-4      	; 0x5584 <__vector_11+0x3c>
		_delay_us(15);
		PORTD &= ~(1<<PORTD7);
    5588:	97 98       	cbi	0x12, 7	; 18
    558a:	0f c0       	rjmp	.+30     	; 0x55aa <__vector_11+0x62>
	}
	else
	{
		PORTD &= ~(1<<PORTD7);
    558c:	97 98       	cbi	0x12, 7	; 18
		HCSR04_Timer_Prescaller++;
    558e:	80 91 92 01 	lds	r24, 0x0192
    5592:	8f 5f       	subi	r24, 0xFF	; 255
    5594:	80 93 92 01 	sts	0x0192, r24
		timer0OverflowCount++;
    5598:	80 91 90 01 	lds	r24, 0x0190
    559c:	90 91 91 01 	lds	r25, 0x0191
    55a0:	01 96       	adiw	r24, 0x01	; 1
    55a2:	90 93 91 01 	sts	0x0191, r25
    55a6:	80 93 90 01 	sts	0x0190, r24
	}
		
	if (!BUSY)
    55aa:	80 91 99 06 	lds	r24, 0x0699
    55ae:	81 11       	cpse	r24, r1
    55b0:	10 c0       	rjmp	.+32     	; 0x55d2 <__vector_11+0x8a>
	{
		BUSY = 1;
    55b2:	81 e0       	ldi	r24, 0x01	; 1
    55b4:	80 93 99 06 	sts	0x0699, r24
		SensorsPoll();
    55b8:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <_Z11SensorsPollv>
		if(bit_is_clear(usRegHoldingBuf[MB_OFFSET+MB_MANUAL], 4))	//Автоматическое управление и инклинометр
    55bc:	e3 e9       	ldi	r30, 0x93	; 147
    55be:	f1 e0       	ldi	r31, 0x01	; 1
    55c0:	84 89       	ldd	r24, Z+20	; 0x14
    55c2:	84 ff       	sbrs	r24, 4
		{
			RunPIDs();		
    55c4:	0e 94 40 26 	call	0x4c80	; 0x4c80 <_Z7RunPIDsv>
		}
		Angular_Calc();
    55c8:	0e 94 47 27 	call	0x4e8e	; 0x4e8e <_Z12Angular_Calcv>
		BUSY = 0;
    55cc:	10 92 99 06 	sts	0x0699, r1
    55d0:	03 c0       	rjmp	.+6      	; 0x55d8 <__vector_11+0x90>
	}
	else
	{
		LED_On(LED_RED);
    55d2:	81 e0       	ldi	r24, 0x01	; 1
    55d4:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <_Z6LED_Onh>
	}
	
	AlarmTimer++;
    55d8:	80 91 9a 06 	lds	r24, 0x069A
    55dc:	90 91 9b 06 	lds	r25, 0x069B
    55e0:	01 96       	adiw	r24, 0x01	; 1
    55e2:	90 93 9b 06 	sts	0x069B, r25
    55e6:	80 93 9a 06 	sts	0x069A, r24
	if (AlarmTimer>Alarm_Long * 2)
    55ea:	20 91 99 00 	lds	r18, 0x0099
    55ee:	30 91 9a 00 	lds	r19, 0x009A
    55f2:	a9 01       	movw	r20, r18
    55f4:	44 0f       	add	r20, r20
    55f6:	55 1f       	adc	r21, r21
    55f8:	48 17       	cp	r20, r24
    55fa:	59 07       	cpc	r21, r25
    55fc:	28 f4       	brcc	.+10     	; 0x5608 <__vector_11+0xc0>
	{
		AlarmTimer=0;
    55fe:	10 92 9b 06 	sts	0x069B, r1
    5602:	10 92 9a 06 	sts	0x069A, r1
    5606:	10 c0       	rjmp	.+32     	; 0x5628 <__vector_11+0xe0>
	}
	
	if (AlarmTimer>Alarm_Long && bit_is_set(usRegHoldingBuf[MB_OFFSET+MB_SOUND], 1))
    5608:	28 17       	cp	r18, r24
    560a:	39 07       	cpc	r19, r25
    560c:	68 f4       	brcc	.+26     	; 0x5628 <__vector_11+0xe0>
    560e:	e3 e9       	ldi	r30, 0x93	; 147
    5610:	f1 e0       	ldi	r31, 0x01	; 1
    5612:	84 8d       	ldd	r24, Z+28	; 0x1c
    5614:	81 ff       	sbrs	r24, 1
    5616:	08 c0       	rjmp	.+16     	; 0x5628 <__vector_11+0xe0>
	{
		usRegHoldingBuf[MB_OFFSET+MB_SOUND] |= 1;
    5618:	ef ea       	ldi	r30, 0xAF	; 175
    561a:	f1 e0       	ldi	r31, 0x01	; 1
    561c:	80 81       	ld	r24, Z
    561e:	91 81       	ldd	r25, Z+1	; 0x01
    5620:	81 60       	ori	r24, 0x01	; 1
    5622:	91 83       	std	Z+1, r25	; 0x01
    5624:	80 83       	st	Z, r24
    5626:	07 c0       	rjmp	.+14     	; 0x5636 <__vector_11+0xee>
	}
	else
	{
		usRegHoldingBuf[MB_OFFSET+MB_SOUND] &= ~1;
    5628:	ef ea       	ldi	r30, 0xAF	; 175
    562a:	f1 e0       	ldi	r31, 0x01	; 1
    562c:	80 81       	ld	r24, Z
    562e:	91 81       	ldd	r25, Z+1	; 0x01
    5630:	8e 7f       	andi	r24, 0xFE	; 254
    5632:	91 83       	std	Z+1, r25	; 0x01
    5634:	80 83       	st	Z, r24
	}
	

    5636:	ff 91       	pop	r31
    5638:	ef 91       	pop	r30
    563a:	bf 91       	pop	r27
    563c:	af 91       	pop	r26
    563e:	9f 91       	pop	r25
    5640:	8f 91       	pop	r24
    5642:	7f 91       	pop	r23
    5644:	6f 91       	pop	r22
    5646:	5f 91       	pop	r21
    5648:	4f 91       	pop	r20
    564a:	3f 91       	pop	r19
    564c:	2f 91       	pop	r18
    564e:	0f 90       	pop	r0
    5650:	0f be       	out	0x3f, r0	; 63
    5652:	0f 90       	pop	r0
    5654:	1f 90       	pop	r1
    5656:	18 95       	reti

00005658 <__subsf3>:
    5658:	50 58       	subi	r21, 0x80	; 128

0000565a <__addsf3>:
    565a:	bb 27       	eor	r27, r27
    565c:	aa 27       	eor	r26, r26
    565e:	0e d0       	rcall	.+28     	; 0x567c <__addsf3x>
    5660:	22 c2       	rjmp	.+1092   	; 0x5aa6 <__fp_round>
    5662:	eb d1       	rcall	.+982    	; 0x5a3a <__fp_pscA>
    5664:	30 f0       	brcs	.+12     	; 0x5672 <__addsf3+0x18>
    5666:	f0 d1       	rcall	.+992    	; 0x5a48 <__fp_pscB>
    5668:	20 f0       	brcs	.+8      	; 0x5672 <__addsf3+0x18>
    566a:	31 f4       	brne	.+12     	; 0x5678 <__addsf3+0x1e>
    566c:	9f 3f       	cpi	r25, 0xFF	; 255
    566e:	11 f4       	brne	.+4      	; 0x5674 <__addsf3+0x1a>
    5670:	1e f4       	brtc	.+6      	; 0x5678 <__addsf3+0x1e>
    5672:	bb c1       	rjmp	.+886    	; 0x59ea <__fp_nan>
    5674:	0e f4       	brtc	.+2      	; 0x5678 <__addsf3+0x1e>
    5676:	e0 95       	com	r30
    5678:	e7 fb       	bst	r30, 7
    567a:	b1 c1       	rjmp	.+866    	; 0x59de <__fp_inf>

0000567c <__addsf3x>:
    567c:	e9 2f       	mov	r30, r25
    567e:	35 d2       	rcall	.+1130   	; 0x5aea <__fp_split3>
    5680:	80 f3       	brcs	.-32     	; 0x5662 <__addsf3+0x8>
    5682:	ba 17       	cp	r27, r26
    5684:	62 07       	cpc	r22, r18
    5686:	73 07       	cpc	r23, r19
    5688:	84 07       	cpc	r24, r20
    568a:	95 07       	cpc	r25, r21
    568c:	18 f0       	brcs	.+6      	; 0x5694 <__addsf3x+0x18>
    568e:	71 f4       	brne	.+28     	; 0x56ac <__addsf3x+0x30>
    5690:	9e f5       	brtc	.+102    	; 0x56f8 <__addsf3x+0x7c>
    5692:	4d c2       	rjmp	.+1178   	; 0x5b2e <__fp_zero>
    5694:	0e f4       	brtc	.+2      	; 0x5698 <__addsf3x+0x1c>
    5696:	e0 95       	com	r30
    5698:	0b 2e       	mov	r0, r27
    569a:	ba 2f       	mov	r27, r26
    569c:	a0 2d       	mov	r26, r0
    569e:	0b 01       	movw	r0, r22
    56a0:	b9 01       	movw	r22, r18
    56a2:	90 01       	movw	r18, r0
    56a4:	0c 01       	movw	r0, r24
    56a6:	ca 01       	movw	r24, r20
    56a8:	a0 01       	movw	r20, r0
    56aa:	11 24       	eor	r1, r1
    56ac:	ff 27       	eor	r31, r31
    56ae:	59 1b       	sub	r21, r25
    56b0:	99 f0       	breq	.+38     	; 0x56d8 <__addsf3x+0x5c>
    56b2:	59 3f       	cpi	r21, 0xF9	; 249
    56b4:	50 f4       	brcc	.+20     	; 0x56ca <__addsf3x+0x4e>
    56b6:	50 3e       	cpi	r21, 0xE0	; 224
    56b8:	68 f1       	brcs	.+90     	; 0x5714 <__addsf3x+0x98>
    56ba:	1a 16       	cp	r1, r26
    56bc:	f0 40       	sbci	r31, 0x00	; 0
    56be:	a2 2f       	mov	r26, r18
    56c0:	23 2f       	mov	r18, r19
    56c2:	34 2f       	mov	r19, r20
    56c4:	44 27       	eor	r20, r20
    56c6:	58 5f       	subi	r21, 0xF8	; 248
    56c8:	f3 cf       	rjmp	.-26     	; 0x56b0 <__addsf3x+0x34>
    56ca:	46 95       	lsr	r20
    56cc:	37 95       	ror	r19
    56ce:	27 95       	ror	r18
    56d0:	a7 95       	ror	r26
    56d2:	f0 40       	sbci	r31, 0x00	; 0
    56d4:	53 95       	inc	r21
    56d6:	c9 f7       	brne	.-14     	; 0x56ca <__addsf3x+0x4e>
    56d8:	7e f4       	brtc	.+30     	; 0x56f8 <__addsf3x+0x7c>
    56da:	1f 16       	cp	r1, r31
    56dc:	ba 0b       	sbc	r27, r26
    56de:	62 0b       	sbc	r22, r18
    56e0:	73 0b       	sbc	r23, r19
    56e2:	84 0b       	sbc	r24, r20
    56e4:	ba f0       	brmi	.+46     	; 0x5714 <__addsf3x+0x98>
    56e6:	91 50       	subi	r25, 0x01	; 1
    56e8:	a1 f0       	breq	.+40     	; 0x5712 <__addsf3x+0x96>
    56ea:	ff 0f       	add	r31, r31
    56ec:	bb 1f       	adc	r27, r27
    56ee:	66 1f       	adc	r22, r22
    56f0:	77 1f       	adc	r23, r23
    56f2:	88 1f       	adc	r24, r24
    56f4:	c2 f7       	brpl	.-16     	; 0x56e6 <__addsf3x+0x6a>
    56f6:	0e c0       	rjmp	.+28     	; 0x5714 <__addsf3x+0x98>
    56f8:	ba 0f       	add	r27, r26
    56fa:	62 1f       	adc	r22, r18
    56fc:	73 1f       	adc	r23, r19
    56fe:	84 1f       	adc	r24, r20
    5700:	48 f4       	brcc	.+18     	; 0x5714 <__addsf3x+0x98>
    5702:	87 95       	ror	r24
    5704:	77 95       	ror	r23
    5706:	67 95       	ror	r22
    5708:	b7 95       	ror	r27
    570a:	f7 95       	ror	r31
    570c:	9e 3f       	cpi	r25, 0xFE	; 254
    570e:	08 f0       	brcs	.+2      	; 0x5712 <__addsf3x+0x96>
    5710:	b3 cf       	rjmp	.-154    	; 0x5678 <__addsf3+0x1e>
    5712:	93 95       	inc	r25
    5714:	88 0f       	add	r24, r24
    5716:	08 f0       	brcs	.+2      	; 0x571a <__addsf3x+0x9e>
    5718:	99 27       	eor	r25, r25
    571a:	ee 0f       	add	r30, r30
    571c:	97 95       	ror	r25
    571e:	87 95       	ror	r24
    5720:	08 95       	ret
    5722:	8b d1       	rcall	.+790    	; 0x5a3a <__fp_pscA>
    5724:	58 f0       	brcs	.+22     	; 0x573c <__addsf3x+0xc0>
    5726:	80 e8       	ldi	r24, 0x80	; 128
    5728:	91 e0       	ldi	r25, 0x01	; 1
    572a:	09 f4       	brne	.+2      	; 0x572e <__addsf3x+0xb2>
    572c:	9e ef       	ldi	r25, 0xFE	; 254
    572e:	8c d1       	rcall	.+792    	; 0x5a48 <__fp_pscB>
    5730:	28 f0       	brcs	.+10     	; 0x573c <__addsf3x+0xc0>
    5732:	40 e8       	ldi	r20, 0x80	; 128
    5734:	51 e0       	ldi	r21, 0x01	; 1
    5736:	59 f4       	brne	.+22     	; 0x574e <atan2+0xe>
    5738:	5e ef       	ldi	r21, 0xFE	; 254
    573a:	09 c0       	rjmp	.+18     	; 0x574e <atan2+0xe>
    573c:	56 c1       	rjmp	.+684    	; 0x59ea <__fp_nan>
    573e:	f7 c1       	rjmp	.+1006   	; 0x5b2e <__fp_zero>

00005740 <atan2>:
    5740:	e9 2f       	mov	r30, r25
    5742:	e0 78       	andi	r30, 0x80	; 128
    5744:	d2 d1       	rcall	.+932    	; 0x5aea <__fp_split3>
    5746:	68 f3       	brcs	.-38     	; 0x5722 <__addsf3x+0xa6>
    5748:	09 2e       	mov	r0, r25
    574a:	05 2a       	or	r0, r21
    574c:	c1 f3       	breq	.-16     	; 0x573e <__addsf3x+0xc2>
    574e:	26 17       	cp	r18, r22
    5750:	37 07       	cpc	r19, r23
    5752:	48 07       	cpc	r20, r24
    5754:	59 07       	cpc	r21, r25
    5756:	38 f0       	brcs	.+14     	; 0x5766 <atan2+0x26>
    5758:	0e 2e       	mov	r0, r30
    575a:	07 f8       	bld	r0, 7
    575c:	e0 25       	eor	r30, r0
    575e:	69 f0       	breq	.+26     	; 0x577a <atan2+0x3a>
    5760:	e0 25       	eor	r30, r0
    5762:	e0 64       	ori	r30, 0x40	; 64
    5764:	0a c0       	rjmp	.+20     	; 0x577a <atan2+0x3a>
    5766:	ef 63       	ori	r30, 0x3F	; 63
    5768:	07 f8       	bld	r0, 7
    576a:	00 94       	com	r0
    576c:	07 fa       	bst	r0, 7
    576e:	db 01       	movw	r26, r22
    5770:	b9 01       	movw	r22, r18
    5772:	9d 01       	movw	r18, r26
    5774:	dc 01       	movw	r26, r24
    5776:	ca 01       	movw	r24, r20
    5778:	ad 01       	movw	r20, r26
    577a:	ef 93       	push	r30
    577c:	4a d0       	rcall	.+148    	; 0x5812 <__divsf3_pse>
    577e:	93 d1       	rcall	.+806    	; 0x5aa6 <__fp_round>
    5780:	0a d0       	rcall	.+20     	; 0x5796 <atan>
    5782:	5f 91       	pop	r21
    5784:	55 23       	and	r21, r21
    5786:	31 f0       	breq	.+12     	; 0x5794 <atan2+0x54>
    5788:	2b ed       	ldi	r18, 0xDB	; 219
    578a:	3f e0       	ldi	r19, 0x0F	; 15
    578c:	49 e4       	ldi	r20, 0x49	; 73
    578e:	50 fd       	sbrc	r21, 0
    5790:	49 ec       	ldi	r20, 0xC9	; 201
    5792:	63 cf       	rjmp	.-314    	; 0x565a <__addsf3>
    5794:	08 95       	ret

00005796 <atan>:
    5796:	df 93       	push	r29
    5798:	dd 27       	eor	r29, r29
    579a:	b9 2f       	mov	r27, r25
    579c:	bf 77       	andi	r27, 0x7F	; 127
    579e:	40 e8       	ldi	r20, 0x80	; 128
    57a0:	5f e3       	ldi	r21, 0x3F	; 63
    57a2:	16 16       	cp	r1, r22
    57a4:	17 06       	cpc	r1, r23
    57a6:	48 07       	cpc	r20, r24
    57a8:	5b 07       	cpc	r21, r27
    57aa:	10 f4       	brcc	.+4      	; 0x57b0 <atan+0x1a>
    57ac:	d9 2f       	mov	r29, r25
    57ae:	ca d1       	rcall	.+916    	; 0x5b44 <inverse>
    57b0:	9f 93       	push	r25
    57b2:	8f 93       	push	r24
    57b4:	7f 93       	push	r23
    57b6:	6f 93       	push	r22
    57b8:	77 d2       	rcall	.+1262   	; 0x5ca8 <square>
    57ba:	e4 e5       	ldi	r30, 0x54	; 84
    57bc:	f0 e0       	ldi	r31, 0x00	; 0
    57be:	18 d1       	rcall	.+560    	; 0x59f0 <__fp_powser>
    57c0:	72 d1       	rcall	.+740    	; 0x5aa6 <__fp_round>
    57c2:	2f 91       	pop	r18
    57c4:	3f 91       	pop	r19
    57c6:	4f 91       	pop	r20
    57c8:	5f 91       	pop	r21
    57ca:	cf d1       	rcall	.+926    	; 0x5b6a <__mulsf3x>
    57cc:	dd 23       	and	r29, r29
    57ce:	49 f0       	breq	.+18     	; 0x57e2 <atan+0x4c>
    57d0:	90 58       	subi	r25, 0x80	; 128
    57d2:	a2 ea       	ldi	r26, 0xA2	; 162
    57d4:	2a ed       	ldi	r18, 0xDA	; 218
    57d6:	3f e0       	ldi	r19, 0x0F	; 15
    57d8:	49 ec       	ldi	r20, 0xC9	; 201
    57da:	5f e3       	ldi	r21, 0x3F	; 63
    57dc:	d0 78       	andi	r29, 0x80	; 128
    57de:	5d 27       	eor	r21, r29
    57e0:	4d df       	rcall	.-358    	; 0x567c <__addsf3x>
    57e2:	df 91       	pop	r29
    57e4:	60 c1       	rjmp	.+704    	; 0x5aa6 <__fp_round>

000057e6 <__cmpsf2>:
    57e6:	d7 d0       	rcall	.+430    	; 0x5996 <__fp_cmp>
    57e8:	08 f4       	brcc	.+2      	; 0x57ec <__cmpsf2+0x6>
    57ea:	81 e0       	ldi	r24, 0x01	; 1
    57ec:	08 95       	ret

000057ee <cos>:
    57ee:	34 d1       	rcall	.+616    	; 0x5a58 <__fp_rempio2>
    57f0:	e3 95       	inc	r30
    57f2:	6a c1       	rjmp	.+724    	; 0x5ac8 <__fp_sinus>

000057f4 <__divsf3>:
    57f4:	0c d0       	rcall	.+24     	; 0x580e <__divsf3x>
    57f6:	57 c1       	rjmp	.+686    	; 0x5aa6 <__fp_round>
    57f8:	27 d1       	rcall	.+590    	; 0x5a48 <__fp_pscB>
    57fa:	40 f0       	brcs	.+16     	; 0x580c <__divsf3+0x18>
    57fc:	1e d1       	rcall	.+572    	; 0x5a3a <__fp_pscA>
    57fe:	30 f0       	brcs	.+12     	; 0x580c <__divsf3+0x18>
    5800:	21 f4       	brne	.+8      	; 0x580a <__divsf3+0x16>
    5802:	5f 3f       	cpi	r21, 0xFF	; 255
    5804:	19 f0       	breq	.+6      	; 0x580c <__divsf3+0x18>
    5806:	eb c0       	rjmp	.+470    	; 0x59de <__fp_inf>
    5808:	51 11       	cpse	r21, r1
    580a:	92 c1       	rjmp	.+804    	; 0x5b30 <__fp_szero>
    580c:	ee c0       	rjmp	.+476    	; 0x59ea <__fp_nan>

0000580e <__divsf3x>:
    580e:	6d d1       	rcall	.+730    	; 0x5aea <__fp_split3>
    5810:	98 f3       	brcs	.-26     	; 0x57f8 <__divsf3+0x4>

00005812 <__divsf3_pse>:
    5812:	99 23       	and	r25, r25
    5814:	c9 f3       	breq	.-14     	; 0x5808 <__divsf3+0x14>
    5816:	55 23       	and	r21, r21
    5818:	b1 f3       	breq	.-20     	; 0x5806 <__divsf3+0x12>
    581a:	95 1b       	sub	r25, r21
    581c:	55 0b       	sbc	r21, r21
    581e:	bb 27       	eor	r27, r27
    5820:	aa 27       	eor	r26, r26
    5822:	62 17       	cp	r22, r18
    5824:	73 07       	cpc	r23, r19
    5826:	84 07       	cpc	r24, r20
    5828:	38 f0       	brcs	.+14     	; 0x5838 <__divsf3_pse+0x26>
    582a:	9f 5f       	subi	r25, 0xFF	; 255
    582c:	5f 4f       	sbci	r21, 0xFF	; 255
    582e:	22 0f       	add	r18, r18
    5830:	33 1f       	adc	r19, r19
    5832:	44 1f       	adc	r20, r20
    5834:	aa 1f       	adc	r26, r26
    5836:	a9 f3       	breq	.-22     	; 0x5822 <__divsf3_pse+0x10>
    5838:	33 d0       	rcall	.+102    	; 0x58a0 <__divsf3_pse+0x8e>
    583a:	0e 2e       	mov	r0, r30
    583c:	3a f0       	brmi	.+14     	; 0x584c <__divsf3_pse+0x3a>
    583e:	e0 e8       	ldi	r30, 0x80	; 128
    5840:	30 d0       	rcall	.+96     	; 0x58a2 <__divsf3_pse+0x90>
    5842:	91 50       	subi	r25, 0x01	; 1
    5844:	50 40       	sbci	r21, 0x00	; 0
    5846:	e6 95       	lsr	r30
    5848:	00 1c       	adc	r0, r0
    584a:	ca f7       	brpl	.-14     	; 0x583e <__divsf3_pse+0x2c>
    584c:	29 d0       	rcall	.+82     	; 0x58a0 <__divsf3_pse+0x8e>
    584e:	fe 2f       	mov	r31, r30
    5850:	27 d0       	rcall	.+78     	; 0x58a0 <__divsf3_pse+0x8e>
    5852:	66 0f       	add	r22, r22
    5854:	77 1f       	adc	r23, r23
    5856:	88 1f       	adc	r24, r24
    5858:	bb 1f       	adc	r27, r27
    585a:	26 17       	cp	r18, r22
    585c:	37 07       	cpc	r19, r23
    585e:	48 07       	cpc	r20, r24
    5860:	ab 07       	cpc	r26, r27
    5862:	b0 e8       	ldi	r27, 0x80	; 128
    5864:	09 f0       	breq	.+2      	; 0x5868 <__divsf3_pse+0x56>
    5866:	bb 0b       	sbc	r27, r27
    5868:	80 2d       	mov	r24, r0
    586a:	bf 01       	movw	r22, r30
    586c:	ff 27       	eor	r31, r31
    586e:	93 58       	subi	r25, 0x83	; 131
    5870:	5f 4f       	sbci	r21, 0xFF	; 255
    5872:	2a f0       	brmi	.+10     	; 0x587e <__divsf3_pse+0x6c>
    5874:	9e 3f       	cpi	r25, 0xFE	; 254
    5876:	51 05       	cpc	r21, r1
    5878:	68 f0       	brcs	.+26     	; 0x5894 <__divsf3_pse+0x82>
    587a:	b1 c0       	rjmp	.+354    	; 0x59de <__fp_inf>
    587c:	59 c1       	rjmp	.+690    	; 0x5b30 <__fp_szero>
    587e:	5f 3f       	cpi	r21, 0xFF	; 255
    5880:	ec f3       	brlt	.-6      	; 0x587c <__divsf3_pse+0x6a>
    5882:	98 3e       	cpi	r25, 0xE8	; 232
    5884:	dc f3       	brlt	.-10     	; 0x587c <__divsf3_pse+0x6a>
    5886:	86 95       	lsr	r24
    5888:	77 95       	ror	r23
    588a:	67 95       	ror	r22
    588c:	b7 95       	ror	r27
    588e:	f7 95       	ror	r31
    5890:	9f 5f       	subi	r25, 0xFF	; 255
    5892:	c9 f7       	brne	.-14     	; 0x5886 <__divsf3_pse+0x74>
    5894:	88 0f       	add	r24, r24
    5896:	91 1d       	adc	r25, r1
    5898:	96 95       	lsr	r25
    589a:	87 95       	ror	r24
    589c:	97 f9       	bld	r25, 7
    589e:	08 95       	ret
    58a0:	e1 e0       	ldi	r30, 0x01	; 1
    58a2:	66 0f       	add	r22, r22
    58a4:	77 1f       	adc	r23, r23
    58a6:	88 1f       	adc	r24, r24
    58a8:	bb 1f       	adc	r27, r27
    58aa:	62 17       	cp	r22, r18
    58ac:	73 07       	cpc	r23, r19
    58ae:	84 07       	cpc	r24, r20
    58b0:	ba 07       	cpc	r27, r26
    58b2:	20 f0       	brcs	.+8      	; 0x58bc <__divsf3_pse+0xaa>
    58b4:	62 1b       	sub	r22, r18
    58b6:	73 0b       	sbc	r23, r19
    58b8:	84 0b       	sbc	r24, r20
    58ba:	ba 0b       	sbc	r27, r26
    58bc:	ee 1f       	adc	r30, r30
    58be:	88 f7       	brcc	.-30     	; 0x58a2 <__divsf3_pse+0x90>
    58c0:	e0 95       	com	r30
    58c2:	08 95       	ret

000058c4 <__fixunssfsi>:
    58c4:	1a d1       	rcall	.+564    	; 0x5afa <__fp_splitA>
    58c6:	88 f0       	brcs	.+34     	; 0x58ea <__fixunssfsi+0x26>
    58c8:	9f 57       	subi	r25, 0x7F	; 127
    58ca:	90 f0       	brcs	.+36     	; 0x58f0 <__fixunssfsi+0x2c>
    58cc:	b9 2f       	mov	r27, r25
    58ce:	99 27       	eor	r25, r25
    58d0:	b7 51       	subi	r27, 0x17	; 23
    58d2:	a0 f0       	brcs	.+40     	; 0x58fc <__fixunssfsi+0x38>
    58d4:	d1 f0       	breq	.+52     	; 0x590a <__fixunssfsi+0x46>
    58d6:	66 0f       	add	r22, r22
    58d8:	77 1f       	adc	r23, r23
    58da:	88 1f       	adc	r24, r24
    58dc:	99 1f       	adc	r25, r25
    58de:	1a f0       	brmi	.+6      	; 0x58e6 <__fixunssfsi+0x22>
    58e0:	ba 95       	dec	r27
    58e2:	c9 f7       	brne	.-14     	; 0x58d6 <__fixunssfsi+0x12>
    58e4:	12 c0       	rjmp	.+36     	; 0x590a <__fixunssfsi+0x46>
    58e6:	b1 30       	cpi	r27, 0x01	; 1
    58e8:	81 f0       	breq	.+32     	; 0x590a <__fixunssfsi+0x46>
    58ea:	21 d1       	rcall	.+578    	; 0x5b2e <__fp_zero>
    58ec:	b1 e0       	ldi	r27, 0x01	; 1
    58ee:	08 95       	ret
    58f0:	1e c1       	rjmp	.+572    	; 0x5b2e <__fp_zero>
    58f2:	67 2f       	mov	r22, r23
    58f4:	78 2f       	mov	r23, r24
    58f6:	88 27       	eor	r24, r24
    58f8:	b8 5f       	subi	r27, 0xF8	; 248
    58fa:	39 f0       	breq	.+14     	; 0x590a <__fixunssfsi+0x46>
    58fc:	b9 3f       	cpi	r27, 0xF9	; 249
    58fe:	cc f3       	brlt	.-14     	; 0x58f2 <__fixunssfsi+0x2e>
    5900:	86 95       	lsr	r24
    5902:	77 95       	ror	r23
    5904:	67 95       	ror	r22
    5906:	b3 95       	inc	r27
    5908:	d9 f7       	brne	.-10     	; 0x5900 <__fixunssfsi+0x3c>
    590a:	3e f4       	brtc	.+14     	; 0x591a <__fixunssfsi+0x56>
    590c:	90 95       	com	r25
    590e:	80 95       	com	r24
    5910:	70 95       	com	r23
    5912:	61 95       	neg	r22
    5914:	7f 4f       	sbci	r23, 0xFF	; 255
    5916:	8f 4f       	sbci	r24, 0xFF	; 255
    5918:	9f 4f       	sbci	r25, 0xFF	; 255
    591a:	08 95       	ret

0000591c <__floatunsisf>:
    591c:	e8 94       	clt
    591e:	09 c0       	rjmp	.+18     	; 0x5932 <__floatsisf+0x12>

00005920 <__floatsisf>:
    5920:	97 fb       	bst	r25, 7
    5922:	3e f4       	brtc	.+14     	; 0x5932 <__floatsisf+0x12>
    5924:	90 95       	com	r25
    5926:	80 95       	com	r24
    5928:	70 95       	com	r23
    592a:	61 95       	neg	r22
    592c:	7f 4f       	sbci	r23, 0xFF	; 255
    592e:	8f 4f       	sbci	r24, 0xFF	; 255
    5930:	9f 4f       	sbci	r25, 0xFF	; 255
    5932:	99 23       	and	r25, r25
    5934:	a9 f0       	breq	.+42     	; 0x5960 <__floatsisf+0x40>
    5936:	f9 2f       	mov	r31, r25
    5938:	96 e9       	ldi	r25, 0x96	; 150
    593a:	bb 27       	eor	r27, r27
    593c:	93 95       	inc	r25
    593e:	f6 95       	lsr	r31
    5940:	87 95       	ror	r24
    5942:	77 95       	ror	r23
    5944:	67 95       	ror	r22
    5946:	b7 95       	ror	r27
    5948:	f1 11       	cpse	r31, r1
    594a:	f8 cf       	rjmp	.-16     	; 0x593c <__floatsisf+0x1c>
    594c:	fa f4       	brpl	.+62     	; 0x598c <__floatsisf+0x6c>
    594e:	bb 0f       	add	r27, r27
    5950:	11 f4       	brne	.+4      	; 0x5956 <__floatsisf+0x36>
    5952:	60 ff       	sbrs	r22, 0
    5954:	1b c0       	rjmp	.+54     	; 0x598c <__floatsisf+0x6c>
    5956:	6f 5f       	subi	r22, 0xFF	; 255
    5958:	7f 4f       	sbci	r23, 0xFF	; 255
    595a:	8f 4f       	sbci	r24, 0xFF	; 255
    595c:	9f 4f       	sbci	r25, 0xFF	; 255
    595e:	16 c0       	rjmp	.+44     	; 0x598c <__floatsisf+0x6c>
    5960:	88 23       	and	r24, r24
    5962:	11 f0       	breq	.+4      	; 0x5968 <__floatsisf+0x48>
    5964:	96 e9       	ldi	r25, 0x96	; 150
    5966:	11 c0       	rjmp	.+34     	; 0x598a <__floatsisf+0x6a>
    5968:	77 23       	and	r23, r23
    596a:	21 f0       	breq	.+8      	; 0x5974 <__floatsisf+0x54>
    596c:	9e e8       	ldi	r25, 0x8E	; 142
    596e:	87 2f       	mov	r24, r23
    5970:	76 2f       	mov	r23, r22
    5972:	05 c0       	rjmp	.+10     	; 0x597e <__floatsisf+0x5e>
    5974:	66 23       	and	r22, r22
    5976:	71 f0       	breq	.+28     	; 0x5994 <__floatsisf+0x74>
    5978:	96 e8       	ldi	r25, 0x86	; 134
    597a:	86 2f       	mov	r24, r22
    597c:	70 e0       	ldi	r23, 0x00	; 0
    597e:	60 e0       	ldi	r22, 0x00	; 0
    5980:	2a f0       	brmi	.+10     	; 0x598c <__floatsisf+0x6c>
    5982:	9a 95       	dec	r25
    5984:	66 0f       	add	r22, r22
    5986:	77 1f       	adc	r23, r23
    5988:	88 1f       	adc	r24, r24
    598a:	da f7       	brpl	.-10     	; 0x5982 <__floatsisf+0x62>
    598c:	88 0f       	add	r24, r24
    598e:	96 95       	lsr	r25
    5990:	87 95       	ror	r24
    5992:	97 f9       	bld	r25, 7
    5994:	08 95       	ret

00005996 <__fp_cmp>:
    5996:	99 0f       	add	r25, r25
    5998:	00 08       	sbc	r0, r0
    599a:	55 0f       	add	r21, r21
    599c:	aa 0b       	sbc	r26, r26
    599e:	e0 e8       	ldi	r30, 0x80	; 128
    59a0:	fe ef       	ldi	r31, 0xFE	; 254
    59a2:	16 16       	cp	r1, r22
    59a4:	17 06       	cpc	r1, r23
    59a6:	e8 07       	cpc	r30, r24
    59a8:	f9 07       	cpc	r31, r25
    59aa:	c0 f0       	brcs	.+48     	; 0x59dc <__fp_cmp+0x46>
    59ac:	12 16       	cp	r1, r18
    59ae:	13 06       	cpc	r1, r19
    59b0:	e4 07       	cpc	r30, r20
    59b2:	f5 07       	cpc	r31, r21
    59b4:	98 f0       	brcs	.+38     	; 0x59dc <__fp_cmp+0x46>
    59b6:	62 1b       	sub	r22, r18
    59b8:	73 0b       	sbc	r23, r19
    59ba:	84 0b       	sbc	r24, r20
    59bc:	95 0b       	sbc	r25, r21
    59be:	39 f4       	brne	.+14     	; 0x59ce <__fp_cmp+0x38>
    59c0:	0a 26       	eor	r0, r26
    59c2:	61 f0       	breq	.+24     	; 0x59dc <__fp_cmp+0x46>
    59c4:	23 2b       	or	r18, r19
    59c6:	24 2b       	or	r18, r20
    59c8:	25 2b       	or	r18, r21
    59ca:	21 f4       	brne	.+8      	; 0x59d4 <__fp_cmp+0x3e>
    59cc:	08 95       	ret
    59ce:	0a 26       	eor	r0, r26
    59d0:	09 f4       	brne	.+2      	; 0x59d4 <__fp_cmp+0x3e>
    59d2:	a1 40       	sbci	r26, 0x01	; 1
    59d4:	a6 95       	lsr	r26
    59d6:	8f ef       	ldi	r24, 0xFF	; 255
    59d8:	81 1d       	adc	r24, r1
    59da:	81 1d       	adc	r24, r1
    59dc:	08 95       	ret

000059de <__fp_inf>:
    59de:	97 f9       	bld	r25, 7
    59e0:	9f 67       	ori	r25, 0x7F	; 127
    59e2:	80 e8       	ldi	r24, 0x80	; 128
    59e4:	70 e0       	ldi	r23, 0x00	; 0
    59e6:	60 e0       	ldi	r22, 0x00	; 0
    59e8:	08 95       	ret

000059ea <__fp_nan>:
    59ea:	9f ef       	ldi	r25, 0xFF	; 255
    59ec:	80 ec       	ldi	r24, 0xC0	; 192
    59ee:	08 95       	ret

000059f0 <__fp_powser>:
    59f0:	df 93       	push	r29
    59f2:	cf 93       	push	r28
    59f4:	1f 93       	push	r17
    59f6:	0f 93       	push	r16
    59f8:	ff 92       	push	r15
    59fa:	ef 92       	push	r14
    59fc:	df 92       	push	r13
    59fe:	7b 01       	movw	r14, r22
    5a00:	8c 01       	movw	r16, r24
    5a02:	68 94       	set
    5a04:	05 c0       	rjmp	.+10     	; 0x5a10 <__fp_powser+0x20>
    5a06:	da 2e       	mov	r13, r26
    5a08:	ef 01       	movw	r28, r30
    5a0a:	af d0       	rcall	.+350    	; 0x5b6a <__mulsf3x>
    5a0c:	fe 01       	movw	r30, r28
    5a0e:	e8 94       	clt
    5a10:	a5 91       	lpm	r26, Z+
    5a12:	25 91       	lpm	r18, Z+
    5a14:	35 91       	lpm	r19, Z+
    5a16:	45 91       	lpm	r20, Z+
    5a18:	55 91       	lpm	r21, Z+
    5a1a:	ae f3       	brts	.-22     	; 0x5a06 <__fp_powser+0x16>
    5a1c:	ef 01       	movw	r28, r30
    5a1e:	2e de       	rcall	.-932    	; 0x567c <__addsf3x>
    5a20:	fe 01       	movw	r30, r28
    5a22:	97 01       	movw	r18, r14
    5a24:	a8 01       	movw	r20, r16
    5a26:	da 94       	dec	r13
    5a28:	79 f7       	brne	.-34     	; 0x5a08 <__fp_powser+0x18>
    5a2a:	df 90       	pop	r13
    5a2c:	ef 90       	pop	r14
    5a2e:	ff 90       	pop	r15
    5a30:	0f 91       	pop	r16
    5a32:	1f 91       	pop	r17
    5a34:	cf 91       	pop	r28
    5a36:	df 91       	pop	r29
    5a38:	08 95       	ret

00005a3a <__fp_pscA>:
    5a3a:	00 24       	eor	r0, r0
    5a3c:	0a 94       	dec	r0
    5a3e:	16 16       	cp	r1, r22
    5a40:	17 06       	cpc	r1, r23
    5a42:	18 06       	cpc	r1, r24
    5a44:	09 06       	cpc	r0, r25
    5a46:	08 95       	ret

00005a48 <__fp_pscB>:
    5a48:	00 24       	eor	r0, r0
    5a4a:	0a 94       	dec	r0
    5a4c:	12 16       	cp	r1, r18
    5a4e:	13 06       	cpc	r1, r19
    5a50:	14 06       	cpc	r1, r20
    5a52:	05 06       	cpc	r0, r21
    5a54:	08 95       	ret
    5a56:	c9 cf       	rjmp	.-110    	; 0x59ea <__fp_nan>

00005a58 <__fp_rempio2>:
    5a58:	50 d0       	rcall	.+160    	; 0x5afa <__fp_splitA>
    5a5a:	e8 f3       	brcs	.-6      	; 0x5a56 <__fp_pscB+0xe>
    5a5c:	e8 94       	clt
    5a5e:	e0 e0       	ldi	r30, 0x00	; 0
    5a60:	bb 27       	eor	r27, r27
    5a62:	9f 57       	subi	r25, 0x7F	; 127
    5a64:	f0 f0       	brcs	.+60     	; 0x5aa2 <__fp_rempio2+0x4a>
    5a66:	2a ed       	ldi	r18, 0xDA	; 218
    5a68:	3f e0       	ldi	r19, 0x0F	; 15
    5a6a:	49 ec       	ldi	r20, 0xC9	; 201
    5a6c:	06 c0       	rjmp	.+12     	; 0x5a7a <__fp_rempio2+0x22>
    5a6e:	ee 0f       	add	r30, r30
    5a70:	bb 0f       	add	r27, r27
    5a72:	66 1f       	adc	r22, r22
    5a74:	77 1f       	adc	r23, r23
    5a76:	88 1f       	adc	r24, r24
    5a78:	28 f0       	brcs	.+10     	; 0x5a84 <__fp_rempio2+0x2c>
    5a7a:	b2 3a       	cpi	r27, 0xA2	; 162
    5a7c:	62 07       	cpc	r22, r18
    5a7e:	73 07       	cpc	r23, r19
    5a80:	84 07       	cpc	r24, r20
    5a82:	28 f0       	brcs	.+10     	; 0x5a8e <__fp_rempio2+0x36>
    5a84:	b2 5a       	subi	r27, 0xA2	; 162
    5a86:	62 0b       	sbc	r22, r18
    5a88:	73 0b       	sbc	r23, r19
    5a8a:	84 0b       	sbc	r24, r20
    5a8c:	e3 95       	inc	r30
    5a8e:	9a 95       	dec	r25
    5a90:	72 f7       	brpl	.-36     	; 0x5a6e <__fp_rempio2+0x16>
    5a92:	80 38       	cpi	r24, 0x80	; 128
    5a94:	30 f4       	brcc	.+12     	; 0x5aa2 <__fp_rempio2+0x4a>
    5a96:	9a 95       	dec	r25
    5a98:	bb 0f       	add	r27, r27
    5a9a:	66 1f       	adc	r22, r22
    5a9c:	77 1f       	adc	r23, r23
    5a9e:	88 1f       	adc	r24, r24
    5aa0:	d2 f7       	brpl	.-12     	; 0x5a96 <__fp_rempio2+0x3e>
    5aa2:	90 48       	sbci	r25, 0x80	; 128
    5aa4:	26 c1       	rjmp	.+588    	; 0x5cf2 <__fp_mpack_finite>

00005aa6 <__fp_round>:
    5aa6:	09 2e       	mov	r0, r25
    5aa8:	03 94       	inc	r0
    5aaa:	00 0c       	add	r0, r0
    5aac:	11 f4       	brne	.+4      	; 0x5ab2 <__fp_round+0xc>
    5aae:	88 23       	and	r24, r24
    5ab0:	52 f0       	brmi	.+20     	; 0x5ac6 <__fp_round+0x20>
    5ab2:	bb 0f       	add	r27, r27
    5ab4:	40 f4       	brcc	.+16     	; 0x5ac6 <__fp_round+0x20>
    5ab6:	bf 2b       	or	r27, r31
    5ab8:	11 f4       	brne	.+4      	; 0x5abe <__fp_round+0x18>
    5aba:	60 ff       	sbrs	r22, 0
    5abc:	04 c0       	rjmp	.+8      	; 0x5ac6 <__fp_round+0x20>
    5abe:	6f 5f       	subi	r22, 0xFF	; 255
    5ac0:	7f 4f       	sbci	r23, 0xFF	; 255
    5ac2:	8f 4f       	sbci	r24, 0xFF	; 255
    5ac4:	9f 4f       	sbci	r25, 0xFF	; 255
    5ac6:	08 95       	ret

00005ac8 <__fp_sinus>:
    5ac8:	ef 93       	push	r30
    5aca:	e0 ff       	sbrs	r30, 0
    5acc:	06 c0       	rjmp	.+12     	; 0x5ada <__fp_sinus+0x12>
    5ace:	a2 ea       	ldi	r26, 0xA2	; 162
    5ad0:	2a ed       	ldi	r18, 0xDA	; 218
    5ad2:	3f e0       	ldi	r19, 0x0F	; 15
    5ad4:	49 ec       	ldi	r20, 0xC9	; 201
    5ad6:	5f eb       	ldi	r21, 0xBF	; 191
    5ad8:	d1 dd       	rcall	.-1118   	; 0x567c <__addsf3x>
    5ada:	e5 df       	rcall	.-54     	; 0x5aa6 <__fp_round>
    5adc:	0f 90       	pop	r0
    5ade:	03 94       	inc	r0
    5ae0:	01 fc       	sbrc	r0, 1
    5ae2:	90 58       	subi	r25, 0x80	; 128
    5ae4:	e1 e8       	ldi	r30, 0x81	; 129
    5ae6:	f0 e0       	ldi	r31, 0x00	; 0
    5ae8:	17 c1       	rjmp	.+558    	; 0x5d18 <__fp_powsodd>

00005aea <__fp_split3>:
    5aea:	57 fd       	sbrc	r21, 7
    5aec:	90 58       	subi	r25, 0x80	; 128
    5aee:	44 0f       	add	r20, r20
    5af0:	55 1f       	adc	r21, r21
    5af2:	59 f0       	breq	.+22     	; 0x5b0a <__fp_splitA+0x10>
    5af4:	5f 3f       	cpi	r21, 0xFF	; 255
    5af6:	71 f0       	breq	.+28     	; 0x5b14 <__fp_splitA+0x1a>
    5af8:	47 95       	ror	r20

00005afa <__fp_splitA>:
    5afa:	88 0f       	add	r24, r24
    5afc:	97 fb       	bst	r25, 7
    5afe:	99 1f       	adc	r25, r25
    5b00:	61 f0       	breq	.+24     	; 0x5b1a <__fp_splitA+0x20>
    5b02:	9f 3f       	cpi	r25, 0xFF	; 255
    5b04:	79 f0       	breq	.+30     	; 0x5b24 <__fp_splitA+0x2a>
    5b06:	87 95       	ror	r24
    5b08:	08 95       	ret
    5b0a:	12 16       	cp	r1, r18
    5b0c:	13 06       	cpc	r1, r19
    5b0e:	14 06       	cpc	r1, r20
    5b10:	55 1f       	adc	r21, r21
    5b12:	f2 cf       	rjmp	.-28     	; 0x5af8 <__fp_split3+0xe>
    5b14:	46 95       	lsr	r20
    5b16:	f1 df       	rcall	.-30     	; 0x5afa <__fp_splitA>
    5b18:	08 c0       	rjmp	.+16     	; 0x5b2a <__fp_splitA+0x30>
    5b1a:	16 16       	cp	r1, r22
    5b1c:	17 06       	cpc	r1, r23
    5b1e:	18 06       	cpc	r1, r24
    5b20:	99 1f       	adc	r25, r25
    5b22:	f1 cf       	rjmp	.-30     	; 0x5b06 <__fp_splitA+0xc>
    5b24:	86 95       	lsr	r24
    5b26:	71 05       	cpc	r23, r1
    5b28:	61 05       	cpc	r22, r1
    5b2a:	08 94       	sec
    5b2c:	08 95       	ret

00005b2e <__fp_zero>:
    5b2e:	e8 94       	clt

00005b30 <__fp_szero>:
    5b30:	bb 27       	eor	r27, r27
    5b32:	66 27       	eor	r22, r22
    5b34:	77 27       	eor	r23, r23
    5b36:	cb 01       	movw	r24, r22
    5b38:	97 f9       	bld	r25, 7
    5b3a:	08 95       	ret

00005b3c <__gesf2>:
    5b3c:	2c df       	rcall	.-424    	; 0x5996 <__fp_cmp>
    5b3e:	08 f4       	brcc	.+2      	; 0x5b42 <__gesf2+0x6>
    5b40:	8f ef       	ldi	r24, 0xFF	; 255
    5b42:	08 95       	ret

00005b44 <inverse>:
    5b44:	9b 01       	movw	r18, r22
    5b46:	ac 01       	movw	r20, r24
    5b48:	60 e0       	ldi	r22, 0x00	; 0
    5b4a:	70 e0       	ldi	r23, 0x00	; 0
    5b4c:	80 e8       	ldi	r24, 0x80	; 128
    5b4e:	9f e3       	ldi	r25, 0x3F	; 63
    5b50:	51 ce       	rjmp	.-862    	; 0x57f4 <__divsf3>

00005b52 <__mulsf3>:
    5b52:	0b d0       	rcall	.+22     	; 0x5b6a <__mulsf3x>
    5b54:	a8 cf       	rjmp	.-176    	; 0x5aa6 <__fp_round>
    5b56:	71 df       	rcall	.-286    	; 0x5a3a <__fp_pscA>
    5b58:	28 f0       	brcs	.+10     	; 0x5b64 <__mulsf3+0x12>
    5b5a:	76 df       	rcall	.-276    	; 0x5a48 <__fp_pscB>
    5b5c:	18 f0       	brcs	.+6      	; 0x5b64 <__mulsf3+0x12>
    5b5e:	95 23       	and	r25, r21
    5b60:	09 f0       	breq	.+2      	; 0x5b64 <__mulsf3+0x12>
    5b62:	3d cf       	rjmp	.-390    	; 0x59de <__fp_inf>
    5b64:	42 cf       	rjmp	.-380    	; 0x59ea <__fp_nan>
    5b66:	11 24       	eor	r1, r1
    5b68:	e3 cf       	rjmp	.-58     	; 0x5b30 <__fp_szero>

00005b6a <__mulsf3x>:
    5b6a:	bf df       	rcall	.-130    	; 0x5aea <__fp_split3>
    5b6c:	a0 f3       	brcs	.-24     	; 0x5b56 <__mulsf3+0x4>

00005b6e <__mulsf3_pse>:
    5b6e:	95 9f       	mul	r25, r21
    5b70:	d1 f3       	breq	.-12     	; 0x5b66 <__mulsf3+0x14>
    5b72:	95 0f       	add	r25, r21
    5b74:	50 e0       	ldi	r21, 0x00	; 0
    5b76:	55 1f       	adc	r21, r21
    5b78:	62 9f       	mul	r22, r18
    5b7a:	f0 01       	movw	r30, r0
    5b7c:	72 9f       	mul	r23, r18
    5b7e:	bb 27       	eor	r27, r27
    5b80:	f0 0d       	add	r31, r0
    5b82:	b1 1d       	adc	r27, r1
    5b84:	63 9f       	mul	r22, r19
    5b86:	aa 27       	eor	r26, r26
    5b88:	f0 0d       	add	r31, r0
    5b8a:	b1 1d       	adc	r27, r1
    5b8c:	aa 1f       	adc	r26, r26
    5b8e:	64 9f       	mul	r22, r20
    5b90:	66 27       	eor	r22, r22
    5b92:	b0 0d       	add	r27, r0
    5b94:	a1 1d       	adc	r26, r1
    5b96:	66 1f       	adc	r22, r22
    5b98:	82 9f       	mul	r24, r18
    5b9a:	22 27       	eor	r18, r18
    5b9c:	b0 0d       	add	r27, r0
    5b9e:	a1 1d       	adc	r26, r1
    5ba0:	62 1f       	adc	r22, r18
    5ba2:	73 9f       	mul	r23, r19
    5ba4:	b0 0d       	add	r27, r0
    5ba6:	a1 1d       	adc	r26, r1
    5ba8:	62 1f       	adc	r22, r18
    5baa:	83 9f       	mul	r24, r19
    5bac:	a0 0d       	add	r26, r0
    5bae:	61 1d       	adc	r22, r1
    5bb0:	22 1f       	adc	r18, r18
    5bb2:	74 9f       	mul	r23, r20
    5bb4:	33 27       	eor	r19, r19
    5bb6:	a0 0d       	add	r26, r0
    5bb8:	61 1d       	adc	r22, r1
    5bba:	23 1f       	adc	r18, r19
    5bbc:	84 9f       	mul	r24, r20
    5bbe:	60 0d       	add	r22, r0
    5bc0:	21 1d       	adc	r18, r1
    5bc2:	82 2f       	mov	r24, r18
    5bc4:	76 2f       	mov	r23, r22
    5bc6:	6a 2f       	mov	r22, r26
    5bc8:	11 24       	eor	r1, r1
    5bca:	9f 57       	subi	r25, 0x7F	; 127
    5bcc:	50 40       	sbci	r21, 0x00	; 0
    5bce:	8a f0       	brmi	.+34     	; 0x5bf2 <__mulsf3_pse+0x84>
    5bd0:	e1 f0       	breq	.+56     	; 0x5c0a <__mulsf3_pse+0x9c>
    5bd2:	88 23       	and	r24, r24
    5bd4:	4a f0       	brmi	.+18     	; 0x5be8 <__mulsf3_pse+0x7a>
    5bd6:	ee 0f       	add	r30, r30
    5bd8:	ff 1f       	adc	r31, r31
    5bda:	bb 1f       	adc	r27, r27
    5bdc:	66 1f       	adc	r22, r22
    5bde:	77 1f       	adc	r23, r23
    5be0:	88 1f       	adc	r24, r24
    5be2:	91 50       	subi	r25, 0x01	; 1
    5be4:	50 40       	sbci	r21, 0x00	; 0
    5be6:	a9 f7       	brne	.-22     	; 0x5bd2 <__mulsf3_pse+0x64>
    5be8:	9e 3f       	cpi	r25, 0xFE	; 254
    5bea:	51 05       	cpc	r21, r1
    5bec:	70 f0       	brcs	.+28     	; 0x5c0a <__mulsf3_pse+0x9c>
    5bee:	f7 ce       	rjmp	.-530    	; 0x59de <__fp_inf>
    5bf0:	9f cf       	rjmp	.-194    	; 0x5b30 <__fp_szero>
    5bf2:	5f 3f       	cpi	r21, 0xFF	; 255
    5bf4:	ec f3       	brlt	.-6      	; 0x5bf0 <__mulsf3_pse+0x82>
    5bf6:	98 3e       	cpi	r25, 0xE8	; 232
    5bf8:	dc f3       	brlt	.-10     	; 0x5bf0 <__mulsf3_pse+0x82>
    5bfa:	86 95       	lsr	r24
    5bfc:	77 95       	ror	r23
    5bfe:	67 95       	ror	r22
    5c00:	b7 95       	ror	r27
    5c02:	f7 95       	ror	r31
    5c04:	e7 95       	ror	r30
    5c06:	9f 5f       	subi	r25, 0xFF	; 255
    5c08:	c1 f7       	brne	.-16     	; 0x5bfa <__mulsf3_pse+0x8c>
    5c0a:	fe 2b       	or	r31, r30
    5c0c:	88 0f       	add	r24, r24
    5c0e:	91 1d       	adc	r25, r1
    5c10:	96 95       	lsr	r25
    5c12:	87 95       	ror	r24
    5c14:	97 f9       	bld	r25, 7
    5c16:	08 95       	ret

00005c18 <sin>:
    5c18:	9f 93       	push	r25
    5c1a:	1e df       	rcall	.-452    	; 0x5a58 <__fp_rempio2>
    5c1c:	0f 90       	pop	r0
    5c1e:	07 fc       	sbrc	r0, 7
    5c20:	ee 5f       	subi	r30, 0xFE	; 254
    5c22:	52 cf       	rjmp	.-348    	; 0x5ac8 <__fp_sinus>
    5c24:	11 f4       	brne	.+4      	; 0x5c2a <sin+0x12>
    5c26:	0e f4       	brtc	.+2      	; 0x5c2a <sin+0x12>
    5c28:	e0 ce       	rjmp	.-576    	; 0x59ea <__fp_nan>
    5c2a:	61 c0       	rjmp	.+194    	; 0x5cee <__fp_mpack>

00005c2c <sqrt>:
    5c2c:	66 df       	rcall	.-308    	; 0x5afa <__fp_splitA>
    5c2e:	d0 f3       	brcs	.-12     	; 0x5c24 <sin+0xc>
    5c30:	99 23       	and	r25, r25
    5c32:	d9 f3       	breq	.-10     	; 0x5c2a <sin+0x12>
    5c34:	ce f3       	brts	.-14     	; 0x5c28 <sin+0x10>
    5c36:	9f 57       	subi	r25, 0x7F	; 127
    5c38:	55 0b       	sbc	r21, r21
    5c3a:	87 ff       	sbrs	r24, 7
    5c3c:	66 d0       	rcall	.+204    	; 0x5d0a <__fp_norm2>
    5c3e:	00 24       	eor	r0, r0
    5c40:	a0 e6       	ldi	r26, 0x60	; 96
    5c42:	40 ea       	ldi	r20, 0xA0	; 160
    5c44:	90 01       	movw	r18, r0
    5c46:	80 58       	subi	r24, 0x80	; 128
    5c48:	56 95       	lsr	r21
    5c4a:	97 95       	ror	r25
    5c4c:	28 f4       	brcc	.+10     	; 0x5c58 <sqrt+0x2c>
    5c4e:	80 5c       	subi	r24, 0xC0	; 192
    5c50:	66 0f       	add	r22, r22
    5c52:	77 1f       	adc	r23, r23
    5c54:	88 1f       	adc	r24, r24
    5c56:	20 f0       	brcs	.+8      	; 0x5c60 <sqrt+0x34>
    5c58:	26 17       	cp	r18, r22
    5c5a:	37 07       	cpc	r19, r23
    5c5c:	48 07       	cpc	r20, r24
    5c5e:	30 f4       	brcc	.+12     	; 0x5c6c <sqrt+0x40>
    5c60:	62 1b       	sub	r22, r18
    5c62:	73 0b       	sbc	r23, r19
    5c64:	84 0b       	sbc	r24, r20
    5c66:	20 29       	or	r18, r0
    5c68:	31 29       	or	r19, r1
    5c6a:	4a 2b       	or	r20, r26
    5c6c:	a6 95       	lsr	r26
    5c6e:	17 94       	ror	r1
    5c70:	07 94       	ror	r0
    5c72:	20 25       	eor	r18, r0
    5c74:	31 25       	eor	r19, r1
    5c76:	4a 27       	eor	r20, r26
    5c78:	58 f7       	brcc	.-42     	; 0x5c50 <sqrt+0x24>
    5c7a:	66 0f       	add	r22, r22
    5c7c:	77 1f       	adc	r23, r23
    5c7e:	88 1f       	adc	r24, r24
    5c80:	20 f0       	brcs	.+8      	; 0x5c8a <sqrt+0x5e>
    5c82:	26 17       	cp	r18, r22
    5c84:	37 07       	cpc	r19, r23
    5c86:	48 07       	cpc	r20, r24
    5c88:	30 f4       	brcc	.+12     	; 0x5c96 <sqrt+0x6a>
    5c8a:	62 0b       	sbc	r22, r18
    5c8c:	73 0b       	sbc	r23, r19
    5c8e:	84 0b       	sbc	r24, r20
    5c90:	20 0d       	add	r18, r0
    5c92:	31 1d       	adc	r19, r1
    5c94:	41 1d       	adc	r20, r1
    5c96:	a0 95       	com	r26
    5c98:	81 f7       	brne	.-32     	; 0x5c7a <sqrt+0x4e>
    5c9a:	b9 01       	movw	r22, r18
    5c9c:	84 2f       	mov	r24, r20
    5c9e:	91 58       	subi	r25, 0x81	; 129
    5ca0:	88 0f       	add	r24, r24
    5ca2:	96 95       	lsr	r25
    5ca4:	87 95       	ror	r24
    5ca6:	08 95       	ret

00005ca8 <square>:
    5ca8:	9b 01       	movw	r18, r22
    5caa:	ac 01       	movw	r20, r24
    5cac:	52 cf       	rjmp	.-348    	; 0x5b52 <__mulsf3>

00005cae <tan>:
    5cae:	df 93       	push	r29
    5cb0:	d9 2f       	mov	r29, r25
    5cb2:	d2 de       	rcall	.-604    	; 0x5a58 <__fp_rempio2>
    5cb4:	e6 95       	lsr	r30
    5cb6:	d7 95       	ror	r29
    5cb8:	2a ed       	ldi	r18, 0xDA	; 218
    5cba:	3f e0       	ldi	r19, 0x0F	; 15
    5cbc:	49 e4       	ldi	r20, 0x49	; 73
    5cbe:	5f e3       	ldi	r21, 0x3F	; 63
    5cc0:	b3 3a       	cpi	r27, 0xA3	; 163
    5cc2:	62 07       	cpc	r22, r18
    5cc4:	73 07       	cpc	r23, r19
    5cc6:	84 07       	cpc	r24, r20
    5cc8:	95 07       	cpc	r25, r21
    5cca:	d7 95       	ror	r29
    5ccc:	2a f0       	brmi	.+10     	; 0x5cd8 <tan+0x2a>
    5cce:	a2 ea       	ldi	r26, 0xA2	; 162
    5cd0:	49 ec       	ldi	r20, 0xC9	; 201
    5cd2:	90 68       	ori	r25, 0x80	; 128
    5cd4:	d3 dc       	rcall	.-1626   	; 0x567c <__addsf3x>
    5cd6:	e7 de       	rcall	.-562    	; 0x5aa6 <__fp_round>
    5cd8:	ef e9       	ldi	r30, 0x9F	; 159
    5cda:	f0 e0       	ldi	r31, 0x00	; 0
    5cdc:	1d d0       	rcall	.+58     	; 0x5d18 <__fp_powsodd>
    5cde:	dd 0f       	add	r29, r29
    5ce0:	0b f0       	brvs	.+2      	; 0x5ce4 <tan+0x36>
    5ce2:	30 df       	rcall	.-416    	; 0x5b44 <inverse>
    5ce4:	dd 0f       	add	r29, r29
    5ce6:	0b f4       	brvc	.+2      	; 0x5cea <tan+0x3c>
    5ce8:	90 58       	subi	r25, 0x80	; 128
    5cea:	df 91       	pop	r29
    5cec:	08 95       	ret

00005cee <__fp_mpack>:
    5cee:	9f 3f       	cpi	r25, 0xFF	; 255
    5cf0:	31 f0       	breq	.+12     	; 0x5cfe <__fp_mpack_finite+0xc>

00005cf2 <__fp_mpack_finite>:
    5cf2:	91 50       	subi	r25, 0x01	; 1
    5cf4:	20 f4       	brcc	.+8      	; 0x5cfe <__fp_mpack_finite+0xc>
    5cf6:	87 95       	ror	r24
    5cf8:	77 95       	ror	r23
    5cfa:	67 95       	ror	r22
    5cfc:	b7 95       	ror	r27
    5cfe:	88 0f       	add	r24, r24
    5d00:	91 1d       	adc	r25, r1
    5d02:	96 95       	lsr	r25
    5d04:	87 95       	ror	r24
    5d06:	97 f9       	bld	r25, 7
    5d08:	08 95       	ret

00005d0a <__fp_norm2>:
    5d0a:	91 50       	subi	r25, 0x01	; 1
    5d0c:	50 40       	sbci	r21, 0x00	; 0
    5d0e:	66 0f       	add	r22, r22
    5d10:	77 1f       	adc	r23, r23
    5d12:	88 1f       	adc	r24, r24
    5d14:	d2 f7       	brpl	.-12     	; 0x5d0a <__fp_norm2>
    5d16:	08 95       	ret

00005d18 <__fp_powsodd>:
    5d18:	9f 93       	push	r25
    5d1a:	8f 93       	push	r24
    5d1c:	7f 93       	push	r23
    5d1e:	6f 93       	push	r22
    5d20:	ff 93       	push	r31
    5d22:	ef 93       	push	r30
    5d24:	9b 01       	movw	r18, r22
    5d26:	ac 01       	movw	r20, r24
    5d28:	14 df       	rcall	.-472    	; 0x5b52 <__mulsf3>
    5d2a:	ef 91       	pop	r30
    5d2c:	ff 91       	pop	r31
    5d2e:	60 de       	rcall	.-832    	; 0x59f0 <__fp_powser>
    5d30:	2f 91       	pop	r18
    5d32:	3f 91       	pop	r19
    5d34:	4f 91       	pop	r20
    5d36:	5f 91       	pop	r21
    5d38:	0c cf       	rjmp	.-488    	; 0x5b52 <__mulsf3>

00005d3a <__mulsi3>:
    5d3a:	db 01       	movw	r26, r22
    5d3c:	8f 93       	push	r24
    5d3e:	9f 93       	push	r25
    5d40:	0e 94 f7 2e 	call	0x5dee	; 0x5dee <__muluhisi3>
    5d44:	bf 91       	pop	r27
    5d46:	af 91       	pop	r26
    5d48:	a2 9f       	mul	r26, r18
    5d4a:	80 0d       	add	r24, r0
    5d4c:	91 1d       	adc	r25, r1
    5d4e:	a3 9f       	mul	r26, r19
    5d50:	90 0d       	add	r25, r0
    5d52:	b2 9f       	mul	r27, r18
    5d54:	90 0d       	add	r25, r0
    5d56:	11 24       	eor	r1, r1
    5d58:	08 95       	ret

00005d5a <__udivmodsi4>:
    5d5a:	a1 e2       	ldi	r26, 0x21	; 33
    5d5c:	1a 2e       	mov	r1, r26
    5d5e:	aa 1b       	sub	r26, r26
    5d60:	bb 1b       	sub	r27, r27
    5d62:	fd 01       	movw	r30, r26
    5d64:	0d c0       	rjmp	.+26     	; 0x5d80 <__udivmodsi4_ep>

00005d66 <__udivmodsi4_loop>:
    5d66:	aa 1f       	adc	r26, r26
    5d68:	bb 1f       	adc	r27, r27
    5d6a:	ee 1f       	adc	r30, r30
    5d6c:	ff 1f       	adc	r31, r31
    5d6e:	a2 17       	cp	r26, r18
    5d70:	b3 07       	cpc	r27, r19
    5d72:	e4 07       	cpc	r30, r20
    5d74:	f5 07       	cpc	r31, r21
    5d76:	20 f0       	brcs	.+8      	; 0x5d80 <__udivmodsi4_ep>
    5d78:	a2 1b       	sub	r26, r18
    5d7a:	b3 0b       	sbc	r27, r19
    5d7c:	e4 0b       	sbc	r30, r20
    5d7e:	f5 0b       	sbc	r31, r21

00005d80 <__udivmodsi4_ep>:
    5d80:	66 1f       	adc	r22, r22
    5d82:	77 1f       	adc	r23, r23
    5d84:	88 1f       	adc	r24, r24
    5d86:	99 1f       	adc	r25, r25
    5d88:	1a 94       	dec	r1
    5d8a:	69 f7       	brne	.-38     	; 0x5d66 <__udivmodsi4_loop>
    5d8c:	60 95       	com	r22
    5d8e:	70 95       	com	r23
    5d90:	80 95       	com	r24
    5d92:	90 95       	com	r25
    5d94:	9b 01       	movw	r18, r22
    5d96:	ac 01       	movw	r20, r24
    5d98:	bd 01       	movw	r22, r26
    5d9a:	cf 01       	movw	r24, r30
    5d9c:	08 95       	ret

00005d9e <__divmodsi4>:
    5d9e:	05 2e       	mov	r0, r21
    5da0:	97 fb       	bst	r25, 7
    5da2:	16 f4       	brtc	.+4      	; 0x5da8 <__divmodsi4+0xa>
    5da4:	00 94       	com	r0
    5da6:	07 d0       	rcall	.+14     	; 0x5db6 <__divmodsi4_neg1>
    5da8:	57 fd       	sbrc	r21, 7
    5daa:	0d d0       	rcall	.+26     	; 0x5dc6 <__divmodsi4_neg2>
    5dac:	0e 94 ad 2e 	call	0x5d5a	; 0x5d5a <__udivmodsi4>
    5db0:	07 fc       	sbrc	r0, 7
    5db2:	09 d0       	rcall	.+18     	; 0x5dc6 <__divmodsi4_neg2>
    5db4:	7e f4       	brtc	.+30     	; 0x5dd4 <__divmodsi4_exit>

00005db6 <__divmodsi4_neg1>:
    5db6:	90 95       	com	r25
    5db8:	80 95       	com	r24
    5dba:	70 95       	com	r23
    5dbc:	61 95       	neg	r22
    5dbe:	7f 4f       	sbci	r23, 0xFF	; 255
    5dc0:	8f 4f       	sbci	r24, 0xFF	; 255
    5dc2:	9f 4f       	sbci	r25, 0xFF	; 255
    5dc4:	08 95       	ret

00005dc6 <__divmodsi4_neg2>:
    5dc6:	50 95       	com	r21
    5dc8:	40 95       	com	r20
    5dca:	30 95       	com	r19
    5dcc:	21 95       	neg	r18
    5dce:	3f 4f       	sbci	r19, 0xFF	; 255
    5dd0:	4f 4f       	sbci	r20, 0xFF	; 255
    5dd2:	5f 4f       	sbci	r21, 0xFF	; 255

00005dd4 <__divmodsi4_exit>:
    5dd4:	08 95       	ret

00005dd6 <__umulhisi3>:
    5dd6:	a2 9f       	mul	r26, r18
    5dd8:	b0 01       	movw	r22, r0
    5dda:	b3 9f       	mul	r27, r19
    5ddc:	c0 01       	movw	r24, r0
    5dde:	a3 9f       	mul	r26, r19
    5de0:	01 d0       	rcall	.+2      	; 0x5de4 <__umulhisi3+0xe>
    5de2:	b2 9f       	mul	r27, r18
    5de4:	70 0d       	add	r23, r0
    5de6:	81 1d       	adc	r24, r1
    5de8:	11 24       	eor	r1, r1
    5dea:	91 1d       	adc	r25, r1
    5dec:	08 95       	ret

00005dee <__muluhisi3>:
    5dee:	0e 94 eb 2e 	call	0x5dd6	; 0x5dd6 <__umulhisi3>
    5df2:	a5 9f       	mul	r26, r21
    5df4:	90 0d       	add	r25, r0
    5df6:	b4 9f       	mul	r27, r20
    5df8:	90 0d       	add	r25, r0
    5dfa:	a4 9f       	mul	r26, r20
    5dfc:	80 0d       	add	r24, r0
    5dfe:	91 1d       	adc	r25, r1
    5e00:	11 24       	eor	r1, r1
    5e02:	08 95       	ret

00005e04 <__mulshisi3>:
    5e04:	b7 ff       	sbrs	r27, 7
    5e06:	0c 94 f7 2e 	jmp	0x5dee	; 0x5dee <__muluhisi3>

00005e0a <__mulohisi3>:
    5e0a:	0e 94 f7 2e 	call	0x5dee	; 0x5dee <__muluhisi3>
    5e0e:	82 1b       	sub	r24, r18
    5e10:	93 0b       	sbc	r25, r19
    5e12:	08 95       	ret

00005e14 <__tablejump2__>:
    5e14:	ee 0f       	add	r30, r30
    5e16:	ff 1f       	adc	r31, r31

00005e18 <__tablejump__>:
    5e18:	05 90       	lpm	r0, Z+
    5e1a:	f4 91       	lpm	r31, Z
    5e1c:	e0 2d       	mov	r30, r0
    5e1e:	09 94       	ijmp

00005e20 <memcpy>:
    5e20:	fb 01       	movw	r30, r22
    5e22:	dc 01       	movw	r26, r24
    5e24:	02 c0       	rjmp	.+4      	; 0x5e2a <memcpy+0xa>
    5e26:	01 90       	ld	r0, Z+
    5e28:	0d 92       	st	X+, r0
    5e2a:	41 50       	subi	r20, 0x01	; 1
    5e2c:	50 40       	sbci	r21, 0x00	; 0
    5e2e:	d8 f7       	brcc	.-10     	; 0x5e26 <memcpy+0x6>
    5e30:	08 95       	ret

00005e32 <__eerd_dword_m32a>:
    5e32:	a6 e1       	ldi	r26, 0x16	; 22
    5e34:	b0 e0       	ldi	r27, 0x00	; 0
    5e36:	44 e0       	ldi	r20, 0x04	; 4
    5e38:	50 e0       	ldi	r21, 0x00	; 0
    5e3a:	0c 94 2e 2f 	jmp	0x5e5c	; 0x5e5c <__eerd_blraw_m32a>

00005e3e <__eewr_dword_m32a>:
    5e3e:	24 2f       	mov	r18, r20
    5e40:	0e 94 3d 2f 	call	0x5e7a	; 0x5e7a <__eewr_r18_m32a>
    5e44:	25 2f       	mov	r18, r21
    5e46:	0e 94 3d 2f 	call	0x5e7a	; 0x5e7a <__eewr_r18_m32a>
    5e4a:	0c 94 27 2f 	jmp	0x5e4e	; 0x5e4e <__eewr_word_m32a>

00005e4e <__eewr_word_m32a>:
    5e4e:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <__eewr_byte_m32a>
    5e52:	27 2f       	mov	r18, r23
    5e54:	0c 94 3d 2f 	jmp	0x5e7a	; 0x5e7a <__eewr_r18_m32a>

00005e58 <__eerd_block_m32a>:
    5e58:	dc 01       	movw	r26, r24
    5e5a:	cb 01       	movw	r24, r22

00005e5c <__eerd_blraw_m32a>:
    5e5c:	fc 01       	movw	r30, r24
    5e5e:	e1 99       	sbic	0x1c, 1	; 28
    5e60:	fe cf       	rjmp	.-4      	; 0x5e5e <__eerd_blraw_m32a+0x2>
    5e62:	06 c0       	rjmp	.+12     	; 0x5e70 <__eerd_blraw_m32a+0x14>
    5e64:	ff bb       	out	0x1f, r31	; 31
    5e66:	ee bb       	out	0x1e, r30	; 30
    5e68:	e0 9a       	sbi	0x1c, 0	; 28
    5e6a:	31 96       	adiw	r30, 0x01	; 1
    5e6c:	0d b2       	in	r0, 0x1d	; 29
    5e6e:	0d 92       	st	X+, r0
    5e70:	41 50       	subi	r20, 0x01	; 1
    5e72:	50 40       	sbci	r21, 0x00	; 0
    5e74:	b8 f7       	brcc	.-18     	; 0x5e64 <__eerd_blraw_m32a+0x8>
    5e76:	08 95       	ret

00005e78 <__eewr_byte_m32a>:
    5e78:	26 2f       	mov	r18, r22

00005e7a <__eewr_r18_m32a>:
    5e7a:	e1 99       	sbic	0x1c, 1	; 28
    5e7c:	fe cf       	rjmp	.-4      	; 0x5e7a <__eewr_r18_m32a>
    5e7e:	9f bb       	out	0x1f, r25	; 31
    5e80:	8e bb       	out	0x1e, r24	; 30
    5e82:	2d bb       	out	0x1d, r18	; 29
    5e84:	0f b6       	in	r0, 0x3f	; 63
    5e86:	f8 94       	cli
    5e88:	e2 9a       	sbi	0x1c, 2	; 28
    5e8a:	e1 9a       	sbi	0x1c, 1	; 28
    5e8c:	0f be       	out	0x3f, r0	; 63
    5e8e:	01 96       	adiw	r24, 0x01	; 1
    5e90:	08 95       	ret

00005e92 <__do_global_dtors>:
    5e92:	12 e0       	ldi	r17, 0x02	; 2
    5e94:	c4 ec       	ldi	r28, 0xC4	; 196
    5e96:	d2 e0       	ldi	r29, 0x02	; 2
    5e98:	04 c0       	rjmp	.+8      	; 0x5ea2 <__do_global_dtors+0x10>
    5e9a:	fe 01       	movw	r30, r28
    5e9c:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <__tablejump__>
    5ea0:	22 96       	adiw	r28, 0x02	; 2
    5ea2:	c6 3c       	cpi	r28, 0xC6	; 198
    5ea4:	d1 07       	cpc	r29, r17
    5ea6:	c9 f7       	brne	.-14     	; 0x5e9a <__do_global_dtors+0x8>
    5ea8:	f8 94       	cli

00005eaa <__stop_program>:
    5eaa:	ff cf       	rjmp	.-2      	; 0x5eaa <__stop_program>
