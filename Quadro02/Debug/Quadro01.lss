
Quadro01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005820  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00005820  000058b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000063b  008000a0  008000a0  000058f4  2**0
                  ALLOC
  3 .stab         000038e8  00000000  00000000  000058f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000115c  00000000  00000000  000091dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000a338  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000668  00000000  00000000  0000a367  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000098d2  00000000  00000000  0000a9cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000274c  00000000  00000000  000142a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000083f1  00000000  00000000  000169ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000011a0  00000000  00000000  0001ede0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00009748  00000000  00000000  0001ff80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000052a1  00000000  00000000  000296c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000458  00000000  00000000  0002e969  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000055e7  00000000  00000000  0002edc1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
double_t wz_sum[4];
*/
double_t MainStack[STACKS_COUNT];

double_t AVG_Calc(uint8_t stack)
{
       0:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__ctors_end>
	double_t z = MainStack[stack] / 64.0;
       4:	0c 94 e4 08 	jmp	0x11c8	; 0x11c8 <__vector_1>
       8:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
       c:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
      10:	0c 94 00 1b 	jmp	0x3600	; 0x3600 <__vector_4>
      14:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
      18:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
      1c:	0c 94 78 1b 	jmp	0x36f0	; 0x36f0 <__vector_7>
      20:	0c 94 9a 1b 	jmp	0x3734	; 0x3734 <__vector_8>
      24:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
	MainStack[stack] = 0.0;
      28:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
      2c:	0c 94 9b 27 	jmp	0x4f36	; 0x4f36 <__vector_11>
	return z;
}
      30:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
{
	memcpy(rx_data, rx_buffer, BUFFER_SIZE - 2);
	uint16_t rx_CRC = 123;//usMBCRC16(rx_data, BUFFER_SIZE - 2);
	if (rx_CRC == (uint16_t)(rx_buffer[16]<<8 | rx_buffer[15]))
	{
		usRegHoldingBuf[MB_OFFSET+MB_ALL] = rx_data[2]<<8 | rx_data[1];
      34:	0c 94 a3 1a 	jmp	0x3546	; 0x3546 <__vector_13>
      38:	0c 94 7c 1a 	jmp	0x34f8	; 0x34f8 <__vector_14>
		Ox.array[0] = rx_data[4]<<8 | rx_data[3];
      3c:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
      40:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__vector_16>
      44:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
      48:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
      4c:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
		Ox.array[1] = rx_data[6]<<8 | rx_data[5];
      50:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
      54:	08 4a       	sbci	r16, 0xA8	; 168
      56:	d7 3b       	cpi	r29, 0xB7	; 183
      58:	3b ce       	rjmp	.-906    	; 0xfffffcd0 <__eeprom_end+0xff7efcd0>
      5a:	01 6e       	ori	r16, 0xE1	; 225
      5c:	84 bc       	out	0x24, r8	; 36
      5e:	bf fd       	.word	0xfdbf	; ????
      60:	c1 2f       	mov	r28, r17
		Oy.array[0] = rx_data[8]<<8 | rx_data[7];
      62:	3d 6c       	ori	r19, 0xCD	; 205
      64:	74 31       	cpi	r23, 0x14	; 20
      66:	9a bd       	out	0x2a, r25	; 42
      68:	56 83       	std	Z+6, r21	; 0x06
      6a:	3d da       	rcall	.-2950   	; 0xfffff4e6 <__eeprom_end+0xff7ef4e6>
      6c:	3d 00       	.word	0x003d	; ????
      6e:	c7 7f       	andi	r28, 0xF7	; 247
      70:	11 be       	out	0x31, r1	; 49
      72:	d9 e4       	ldi	r29, 0x49	; 73
      74:	bb 4c       	sbci	r27, 0xCB	; 203
		Oy.array[1] = rx_data[10]<<8 | rx_data[9];
      76:	3e 91       	ld	r19, -X
      78:	6b aa       	std	Y+51, r6	; 0x33
      7a:	aa be       	out	0x3a, r10	; 58
      7c:	00 00       	nop
      7e:	00 80       	ld	r0, Z
      80:	3f 05       	cpc	r19, r15
      82:	a8 4c       	sbci	r26, 0xC8	; 200
      84:	cd b2       	in	r12, 0x1d	; 29
      86:	d4 4e       	sbci	r29, 0xE4	; 228
      88:	b9 38       	cpi	r27, 0x89	; 137
		Oz.array[0] = rx_data[12]<<8 | rx_data[11];
      8a:	36 a9       	ldd	r19, Z+54	; 0x36
      8c:	02 0c       	add	r0, r2
      8e:	50 b9       	out	0x00, r21	; 0
      90:	91 86       	std	Z+9, r9	; 0x09
      92:	88 08       	sbc	r8, r8
      94:	3c a6       	std	Y+44, r3	; 0x2c
      96:	aa aa       	std	Y+50, r10	; 0x32
      98:	2a be       	out	0x3a, r2	; 58
      9a:	00 00       	nop
      9c:	00 80       	ld	r0, Z
		Oz.array[1] = rx_data[14]<<8 | rx_data[13];
      9e:	3f 00       	.word	0x003f	; ????

0000009f <aucCRCHi>:
      9f:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@
      af:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
      bf:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
      cf:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@
      df:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
      ef:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@
      ff:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@
     10f:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
     11f:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
     12f:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@
     13f:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@
     14f:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
     15f:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@
     16f:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
     17f:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
     18f:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@

0000019f <aucCRCLo>:
     19f:	00 c0 c1 01 c3 03 02 c2 c6 06 07 c7 05 c5 c4 04     ................
     1af:	cc 0c 0d cd 0f cf ce 0e 0a ca cb 0b c9 09 08 c8     ................
     1bf:	d8 18 19 d9 1b db da 1a 1e de df 1f dd 1d 1c dc     ................
     1cf:	14 d4 d5 15 d7 17 16 d6 d2 12 13 d3 11 d1 d0 10     ................
     1df:	f0 30 31 f1 33 f3 f2 32 36 f6 f7 37 f5 35 34 f4     .01.3..26..7.54.
     1ef:	3c fc fd 3d ff 3f 3e fe fa 3a 3b fb 39 f9 f8 38     <..=.?>..:;.9..8
     1ff:	28 e8 e9 29 eb 2b 2a ea ee 2e 2f ef 2d ed ec 2c     (..).+*.../.-..,
     20f:	e4 24 25 e5 27 e7 e6 26 22 e2 e3 23 e1 21 20 e0     .$%.'..&"..#.! .
     21f:	a0 60 61 a1 63 a3 a2 62 66 a6 a7 67 a5 65 64 a4     .`a.c..bf..g.ed.
     22f:	6c ac ad 6d af 6f 6e ae aa 6a 6b ab 69 a9 a8 68     l..m.on..jk.i..h
     23f:	78 b8 b9 79 bb 7b 7a ba be 7e 7f bf 7d bd bc 7c     x..y.{z..~..}..|
     24f:	b4 74 75 b5 77 b7 b6 76 72 b2 b3 73 b1 71 70 b0     .tu.w..vr..s.qp.
     25f:	50 90 91 51 93 53 52 92 96 56 57 97 55 95 94 54     P..Q.SR..VW.U..T
     26f:	9c 5c 5d 9d 5f 9f 9e 5e 5a 9a 9b 5b 99 59 58 98     .\]._..^Z..[.YX.
     27f:	88 48 49 89 4b 8b 8a 4a 4e 8e 8f 4f 8d 4d 4c 8c     .HI.K..JN..O.ML.
     28f:	44 84 85 45 87 47 46 86 82 42 43 83 41 81 80 40     D..E.GF..BC.A..@
	...

000002a0 <__ctors_end>:
     2a0:	11 24       	eor	r1, r1
     2a2:	1f be       	out	0x3f, r1	; 63
     2a4:	cf e5       	ldi	r28, 0x5F	; 95
     2a6:	d8 e0       	ldi	r29, 0x08	; 8
     2a8:	de bf       	out	0x3e, r29	; 62
     2aa:	cd bf       	out	0x3d, r28	; 61

000002ac <__do_copy_data>:
     2ac:	10 e0       	ldi	r17, 0x00	; 0
     2ae:	a0 e6       	ldi	r26, 0x60	; 96
     2b0:	b0 e0       	ldi	r27, 0x00	; 0
     2b2:	e0 e2       	ldi	r30, 0x20	; 32
     2b4:	f8 e5       	ldi	r31, 0x58	; 88
     2b6:	02 c0       	rjmp	.+4      	; 0x2bc <__do_copy_data+0x10>
     2b8:	05 90       	lpm	r0, Z+
     2ba:	0d 92       	st	X+, r0
     2bc:	a0 3a       	cpi	r26, 0xA0	; 160
     2be:	b1 07       	cpc	r27, r17
     2c0:	d9 f7       	brne	.-10     	; 0x2b8 <__do_copy_data+0xc>

000002c2 <__do_clear_bss>:
     2c2:	26 e0       	ldi	r18, 0x06	; 6
     2c4:	a0 ea       	ldi	r26, 0xA0	; 160
     2c6:	b0 e0       	ldi	r27, 0x00	; 0
     2c8:	01 c0       	rjmp	.+2      	; 0x2cc <.do_clear_bss_start>

000002ca <.do_clear_bss_loop>:
     2ca:	1d 92       	st	X+, r1

000002cc <.do_clear_bss_start>:
     2cc:	ab 3d       	cpi	r26, 0xDB	; 219
     2ce:	b2 07       	cpc	r27, r18
     2d0:	e1 f7       	brne	.-8      	; 0x2ca <.do_clear_bss_loop>
     2d2:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <main>
     2d6:	0c 94 0e 2c 	jmp	0x581c	; 0x581c <_exit>

000002da <__bad_interrupt>:
     2da:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002de <__vector_16>:
 */ 

#include "ADC.h"

ISR(ADC_vect)
{
     2de:	1f 92       	push	r1
     2e0:	0f 92       	push	r0
     2e2:	0f b6       	in	r0, 0x3f	; 63
     2e4:	0f 92       	push	r0
     2e6:	11 24       	eor	r1, r1
     2e8:	2f 93       	push	r18
     2ea:	3f 93       	push	r19
     2ec:	4f 93       	push	r20
     2ee:	5f 93       	push	r21
     2f0:	6f 93       	push	r22
     2f2:	7f 93       	push	r23
     2f4:	8f 93       	push	r24
     2f6:	9f 93       	push	r25
     2f8:	af 93       	push	r26
     2fa:	bf 93       	push	r27
     2fc:	ef 93       	push	r30
     2fe:	ff 93       	push	r31
	U_Batt.value = (ADC * 35.45) / 1024.0 + D4_offset;
     300:	64 b1       	in	r22, 0x04	; 4
     302:	75 b1       	in	r23, 0x05	; 5
     304:	80 e0       	ldi	r24, 0x00	; 0
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	0e 94 79 29 	call	0x52f2	; 0x52f2 <__floatunsisf>
     30c:	2d ec       	ldi	r18, 0xCD	; 205
     30e:	3c ec       	ldi	r19, 0xCC	; 204
     310:	4d e0       	ldi	r20, 0x0D	; 13
     312:	52 e4       	ldi	r21, 0x42	; 66
     314:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
     318:	20 e0       	ldi	r18, 0x00	; 0
     31a:	30 e0       	ldi	r19, 0x00	; 0
     31c:	40 e8       	ldi	r20, 0x80	; 128
     31e:	5a e3       	ldi	r21, 0x3A	; 58
     320:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
     324:	20 91 91 00 	lds	r18, 0x0091
     328:	30 91 92 00 	lds	r19, 0x0092
     32c:	40 91 93 00 	lds	r20, 0x0093
     330:	50 91 94 00 	lds	r21, 0x0094
     334:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
     338:	60 93 85 03 	sts	0x0385, r22
     33c:	70 93 86 03 	sts	0x0386, r23
     340:	80 93 87 03 	sts	0x0387, r24
     344:	90 93 88 03 	sts	0x0388, r25
	//U_Batt.array[0] = ADCH<<8 | ADCL;
	ADCSRA=1<<ADEN|1<<ADSC|0<<ADATE|0<<ADIF|1<<ADIE|1<<ADPS2|1<<ADPS1|1<<ADPS0;
     348:	8f ec       	ldi	r24, 0xCF	; 207
     34a:	86 b9       	out	0x06, r24	; 6
}
     34c:	ff 91       	pop	r31
     34e:	ef 91       	pop	r30
     350:	bf 91       	pop	r27
     352:	af 91       	pop	r26
     354:	9f 91       	pop	r25
     356:	8f 91       	pop	r24
     358:	7f 91       	pop	r23
     35a:	6f 91       	pop	r22
     35c:	5f 91       	pop	r21
     35e:	4f 91       	pop	r20
     360:	3f 91       	pop	r19
     362:	2f 91       	pop	r18
     364:	0f 90       	pop	r0
     366:	0f be       	out	0x3f, r0	; 63
     368:	0f 90       	pop	r0
     36a:	1f 90       	pop	r1
     36c:	18 95       	reti

0000036e <ADC_Init>:

void ADC_Init()
{
	ADCSRA=1<<ADEN|1<<ADSC|0<<ADATE|0<<ADIF|1<<ADIE|1<<ADPS2|1<<ADPS1|1<<ADPS0;
     36e:	8f ec       	ldi	r24, 0xCF	; 207
     370:	86 b9       	out	0x06, r24	; 6
	SFIOR = 0<<ADTS2 | 0<<ADTS1 | 0<<ADTS0;
     372:	10 be       	out	0x30, r1	; 48
	ADMUX=0;	
     374:	17 b8       	out	0x07, r1	; 7
     376:	08 95       	ret

00000378 <ADXL345_Poll>:
#include "ADXL345.h"



uint8_t ADXL345_Poll()
{
     378:	2f 92       	push	r2
     37a:	3f 92       	push	r3
     37c:	4f 92       	push	r4
     37e:	5f 92       	push	r5
     380:	6f 92       	push	r6
     382:	7f 92       	push	r7
     384:	8f 92       	push	r8
     386:	9f 92       	push	r9
     388:	af 92       	push	r10
     38a:	bf 92       	push	r11
     38c:	cf 92       	push	r12
     38e:	df 92       	push	r13
     390:	ef 92       	push	r14
     392:	ff 92       	push	r15
     394:	0f 93       	push	r16
     396:	1f 93       	push	r17
     398:	cf 93       	push	r28
     39a:	df 93       	push	r29
	uint8_t LSB, MSB;
	
	twi(TWI_START);
     39c:	80 e0       	ldi	r24, 0x00	; 0
     39e:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=ADXL345_ADDR|I2C_WRITE;
     3a2:	86 ea       	ldi	r24, 0xA6	; 166
     3a4:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     3a6:	83 e0       	ldi	r24, 0x03	; 3
     3a8:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=0x32;
     3ac:	82 e3       	ldi	r24, 0x32	; 50
     3ae:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     3b0:	83 e0       	ldi	r24, 0x03	; 3
     3b2:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	twi(TWI_RESTART);
     3b6:	81 e0       	ldi	r24, 0x01	; 1
     3b8:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=ADXL345_ADDR|I2C_READ;
     3bc:	87 ea       	ldi	r24, 0xA7	; 167
     3be:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     3c0:	83 e0       	ldi	r24, 0x03	; 3
     3c2:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	twi(TWI_RECEIVE_ACK);
     3c6:	84 e0       	ldi	r24, 0x04	; 4
     3c8:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	LSB=TWDR;
     3cc:	13 b1       	in	r17, 0x03	; 3
	twi(TWI_RECEIVE_ACK);
     3ce:	84 e0       	ldi	r24, 0x04	; 4
     3d0:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	MSB=TWDR;
     3d4:	03 b1       	in	r16, 0x03	; 3
	p_k_y.value = k_y.value;
     3d6:	c5 e0       	ldi	r28, 0x05	; 5
     3d8:	d3 e0       	ldi	r29, 0x03	; 3
     3da:	68 81       	ld	r22, Y
     3dc:	79 81       	ldd	r23, Y+1	; 0x01
     3de:	8a 81       	ldd	r24, Y+2	; 0x02
     3e0:	9b 81       	ldd	r25, Y+3	; 0x03
     3e2:	60 93 11 03 	sts	0x0311, r22
     3e6:	70 93 12 03 	sts	0x0312, r23
     3ea:	80 93 13 03 	sts	0x0313, r24
     3ee:	90 93 14 03 	sts	0x0314, r25
	k_y.value = LowPassFilter((-0.0032) * (double)(MSB << 8 | LSB), (p_k_y.value / coeffs[ADXL345_SCY].value) - coeffs[ADXL345_OFFY].value, coeffs[LP_AX_X].value);
     3f2:	0f 2e       	mov	r0, r31
     3f4:	f5 e8       	ldi	r31, 0x85	; 133
     3f6:	cf 2e       	mov	r12, r31
     3f8:	f2 e0       	ldi	r31, 0x02	; 2
     3fa:	df 2e       	mov	r13, r31
     3fc:	f0 2d       	mov	r31, r0
     3fe:	f6 01       	movw	r30, r12
     400:	80 80       	ld	r8, Z
     402:	91 80       	ldd	r9, Z+1	; 0x01
     404:	a2 80       	ldd	r10, Z+2	; 0x02
     406:	b3 80       	ldd	r11, Z+3	; 0x03
     408:	e1 ed       	ldi	r30, 0xD1	; 209
     40a:	f2 e0       	ldi	r31, 0x02	; 2
     40c:	20 81       	ld	r18, Z
     40e:	31 81       	ldd	r19, Z+1	; 0x01
     410:	42 81       	ldd	r20, Z+2	; 0x02
     412:	53 81       	ldd	r21, Z+3	; 0x03
     414:	0e 94 e5 28 	call	0x51ca	; 0x51ca <__divsf3>
     418:	0f 2e       	mov	r0, r31
     41a:	f5 e5       	ldi	r31, 0x55	; 85
     41c:	6f 2e       	mov	r6, r31
     41e:	f2 e0       	ldi	r31, 0x02	; 2
     420:	7f 2e       	mov	r7, r31
     422:	f0 2d       	mov	r31, r0
     424:	f3 01       	movw	r30, r6
     426:	20 81       	ld	r18, Z
     428:	31 81       	ldd	r19, Z+1	; 0x01
     42a:	42 81       	ldd	r20, Z+2	; 0x02
     42c:	53 81       	ldd	r21, Z+3	; 0x03
     42e:	0e 94 17 28 	call	0x502e	; 0x502e <__subsf3>
     432:	1b 01       	movw	r2, r22
     434:	2c 01       	movw	r4, r24
     436:	70 2f       	mov	r23, r16
     438:	60 e0       	ldi	r22, 0x00	; 0
     43a:	61 2b       	or	r22, r17
     43c:	88 27       	eor	r24, r24
     43e:	77 fd       	sbrc	r23, 7
     440:	80 95       	com	r24
     442:	98 2f       	mov	r25, r24
     444:	0e 94 7b 29 	call	0x52f6	; 0x52f6 <__floatsisf>
     448:	27 e1       	ldi	r18, 0x17	; 23
     44a:	37 eb       	ldi	r19, 0xB7	; 183
     44c:	41 e5       	ldi	r20, 0x51	; 81
     44e:	5b eb       	ldi	r21, 0xBB	; 187
     450:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
     454:	85 01       	movw	r16, r10
     456:	74 01       	movw	r14, r8
     458:	a2 01       	movw	r20, r4
     45a:	91 01       	movw	r18, r2
     45c:	0e 94 51 08 	call	0x10a2	; 0x10a2 <LowPassFilter>
	//k_y.value = (-0.0032) * (double)(MSB << 8 | LSB);
	//k_y.value = LowPassFilter((-0.0032) * (double)(MSB << 8 | LSB), p_k_y.value - coeffs[ADXL345_OFFY].value, coeffs[LP_AX_Y].value);
	k_y.value += coeffs[ADXL345_OFFY].value;
     460:	f3 01       	movw	r30, r6
     462:	20 81       	ld	r18, Z
     464:	31 81       	ldd	r19, Z+1	; 0x01
     466:	42 81       	ldd	r20, Z+2	; 0x02
     468:	53 81       	ldd	r21, Z+3	; 0x03
     46a:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
	k_y.value *= coeffs[ADXL345_SCY].value;
     46e:	e1 ed       	ldi	r30, 0xD1	; 209
     470:	f2 e0       	ldi	r31, 0x02	; 2
     472:	20 81       	ld	r18, Z
     474:	31 81       	ldd	r19, Z+1	; 0x01
     476:	42 81       	ldd	r20, Z+2	; 0x02
     478:	53 81       	ldd	r21, Z+3	; 0x03
     47a:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
     47e:	68 83       	st	Y, r22
     480:	79 83       	std	Y+1, r23	; 0x01
     482:	8a 83       	std	Y+2, r24	; 0x02
     484:	9b 83       	std	Y+3, r25	; 0x03
	//Measure_Push((-0.0032) * (double)(MSB << 8 | LSB) + coeffs[ADXL345_OFFY].value, KY);
	//Measure_Push((MSB << 8 | LSB), KY);
	
	
	twi(TWI_RECEIVE_ACK);
     486:	84 e0       	ldi	r24, 0x04	; 4
     488:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	LSB=TWDR;
     48c:	13 b1       	in	r17, 0x03	; 3
	twi(TWI_RECEIVE_ACK);
     48e:	84 e0       	ldi	r24, 0x04	; 4
     490:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	MSB=TWDR;
     494:	03 b1       	in	r16, 0x03	; 3
	p_k_x.value = k_x.value;
     496:	c1 e0       	ldi	r28, 0x01	; 1
     498:	d3 e0       	ldi	r29, 0x03	; 3
     49a:	68 81       	ld	r22, Y
     49c:	79 81       	ldd	r23, Y+1	; 0x01
     49e:	8a 81       	ldd	r24, Y+2	; 0x02
     4a0:	9b 81       	ldd	r25, Y+3	; 0x03
     4a2:	60 93 0d 03 	sts	0x030D, r22
     4a6:	70 93 0e 03 	sts	0x030E, r23
     4aa:	80 93 0f 03 	sts	0x030F, r24
     4ae:	90 93 10 03 	sts	0x0310, r25
	k_x.value = LowPassFilter((-0.0032) * (double)(MSB << 8 | LSB), (p_k_x.value / coeffs[ADXL345_SCX].value) - coeffs[ADXL345_OFFX].value, coeffs[LP_AX_X].value);
     4b2:	f6 01       	movw	r30, r12
     4b4:	80 80       	ld	r8, Z
     4b6:	91 80       	ldd	r9, Z+1	; 0x01
     4b8:	a2 80       	ldd	r10, Z+2	; 0x02
     4ba:	b3 80       	ldd	r11, Z+3	; 0x03
     4bc:	ed ec       	ldi	r30, 0xCD	; 205
     4be:	f2 e0       	ldi	r31, 0x02	; 2
     4c0:	20 81       	ld	r18, Z
     4c2:	31 81       	ldd	r19, Z+1	; 0x01
     4c4:	42 81       	ldd	r20, Z+2	; 0x02
     4c6:	53 81       	ldd	r21, Z+3	; 0x03
     4c8:	0e 94 e5 28 	call	0x51ca	; 0x51ca <__divsf3>
     4cc:	0f 2e       	mov	r0, r31
     4ce:	f1 e5       	ldi	r31, 0x51	; 81
     4d0:	6f 2e       	mov	r6, r31
     4d2:	f2 e0       	ldi	r31, 0x02	; 2
     4d4:	7f 2e       	mov	r7, r31
     4d6:	f0 2d       	mov	r31, r0
     4d8:	f3 01       	movw	r30, r6
     4da:	20 81       	ld	r18, Z
     4dc:	31 81       	ldd	r19, Z+1	; 0x01
     4de:	42 81       	ldd	r20, Z+2	; 0x02
     4e0:	53 81       	ldd	r21, Z+3	; 0x03
     4e2:	0e 94 17 28 	call	0x502e	; 0x502e <__subsf3>
     4e6:	1b 01       	movw	r2, r22
     4e8:	2c 01       	movw	r4, r24
     4ea:	70 2f       	mov	r23, r16
     4ec:	60 e0       	ldi	r22, 0x00	; 0
     4ee:	61 2b       	or	r22, r17
     4f0:	88 27       	eor	r24, r24
     4f2:	77 fd       	sbrc	r23, 7
     4f4:	80 95       	com	r24
     4f6:	98 2f       	mov	r25, r24
     4f8:	0e 94 7b 29 	call	0x52f6	; 0x52f6 <__floatsisf>
     4fc:	27 e1       	ldi	r18, 0x17	; 23
     4fe:	37 eb       	ldi	r19, 0xB7	; 183
     500:	41 e5       	ldi	r20, 0x51	; 81
     502:	5b eb       	ldi	r21, 0xBB	; 187
     504:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
     508:	85 01       	movw	r16, r10
     50a:	74 01       	movw	r14, r8
     50c:	a2 01       	movw	r20, r4
     50e:	91 01       	movw	r18, r2
     510:	0e 94 51 08 	call	0x10a2	; 0x10a2 <LowPassFilter>
	//k_x.value = (-0.0032) * (double)(MSB << 8 | LSB);
	//k_x.value = LowPassFilter((-0.0032) * (double)(MSB << 8 | LSB), p_k_x.value - coeffs[ADXL345_OFFX].value, coeffs[LP_AX_X].value);
	k_x.value += coeffs[ADXL345_OFFX].value;
     514:	f3 01       	movw	r30, r6
     516:	20 81       	ld	r18, Z
     518:	31 81       	ldd	r19, Z+1	; 0x01
     51a:	42 81       	ldd	r20, Z+2	; 0x02
     51c:	53 81       	ldd	r21, Z+3	; 0x03
     51e:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
	k_x.value *= coeffs[ADXL345_SCX].value;
     522:	ed ec       	ldi	r30, 0xCD	; 205
     524:	f2 e0       	ldi	r31, 0x02	; 2
     526:	20 81       	ld	r18, Z
     528:	31 81       	ldd	r19, Z+1	; 0x01
     52a:	42 81       	ldd	r20, Z+2	; 0x02
     52c:	53 81       	ldd	r21, Z+3	; 0x03
     52e:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
     532:	68 83       	st	Y, r22
     534:	79 83       	std	Y+1, r23	; 0x01
     536:	8a 83       	std	Y+2, r24	; 0x02
     538:	9b 83       	std	Y+3, r25	; 0x03
	//Measure_Push((MSB << 8 | LSB), KX);
	
	twi(TWI_RECEIVE_ACK);
     53a:	84 e0       	ldi	r24, 0x04	; 4
     53c:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	LSB=TWDR;
     540:	13 b1       	in	r17, 0x03	; 3
	twi(TWI_RECEIVE_NACK);
     542:	85 e0       	ldi	r24, 0x05	; 5
     544:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	MSB=TWDR;
     548:	03 b1       	in	r16, 0x03	; 3
	twi(TWI_STOP);
     54a:	82 e0       	ldi	r24, 0x02	; 2
     54c:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	p_k_z.value = k_z.value;
     550:	c9 e0       	ldi	r28, 0x09	; 9
     552:	d3 e0       	ldi	r29, 0x03	; 3
     554:	68 81       	ld	r22, Y
     556:	79 81       	ldd	r23, Y+1	; 0x01
     558:	8a 81       	ldd	r24, Y+2	; 0x02
     55a:	9b 81       	ldd	r25, Y+3	; 0x03
     55c:	60 93 15 03 	sts	0x0315, r22
     560:	70 93 16 03 	sts	0x0316, r23
     564:	80 93 17 03 	sts	0x0317, r24
     568:	90 93 18 03 	sts	0x0318, r25
	k_z.value = LowPassFilter((0.0032) * (double)(MSB << 8 | LSB), (p_k_z.value / coeffs[ADXL345_SCZ].value) - coeffs[ADXL345_OFFZ].value, coeffs[LP_AX_X].value);
     56c:	f6 01       	movw	r30, r12
     56e:	c0 80       	ld	r12, Z
     570:	d1 80       	ldd	r13, Z+1	; 0x01
     572:	e2 80       	ldd	r14, Z+2	; 0x02
     574:	f3 80       	ldd	r15, Z+3	; 0x03
     576:	0f 2e       	mov	r0, r31
     578:	f5 ed       	ldi	r31, 0xD5	; 213
     57a:	2f 2e       	mov	r2, r31
     57c:	f2 e0       	ldi	r31, 0x02	; 2
     57e:	3f 2e       	mov	r3, r31
     580:	f0 2d       	mov	r31, r0
     582:	f1 01       	movw	r30, r2
     584:	20 81       	ld	r18, Z
     586:	31 81       	ldd	r19, Z+1	; 0x01
     588:	42 81       	ldd	r20, Z+2	; 0x02
     58a:	53 81       	ldd	r21, Z+3	; 0x03
     58c:	0e 94 e5 28 	call	0x51ca	; 0x51ca <__divsf3>
     590:	0f 2e       	mov	r0, r31
     592:	f9 e5       	ldi	r31, 0x59	; 89
     594:	af 2e       	mov	r10, r31
     596:	f2 e0       	ldi	r31, 0x02	; 2
     598:	bf 2e       	mov	r11, r31
     59a:	f0 2d       	mov	r31, r0
     59c:	f5 01       	movw	r30, r10
     59e:	20 81       	ld	r18, Z
     5a0:	31 81       	ldd	r19, Z+1	; 0x01
     5a2:	42 81       	ldd	r20, Z+2	; 0x02
     5a4:	53 81       	ldd	r21, Z+3	; 0x03
     5a6:	0e 94 17 28 	call	0x502e	; 0x502e <__subsf3>
     5aa:	2b 01       	movw	r4, r22
     5ac:	3c 01       	movw	r6, r24
     5ae:	70 2f       	mov	r23, r16
     5b0:	60 e0       	ldi	r22, 0x00	; 0
     5b2:	61 2b       	or	r22, r17
     5b4:	88 27       	eor	r24, r24
     5b6:	77 fd       	sbrc	r23, 7
     5b8:	80 95       	com	r24
     5ba:	98 2f       	mov	r25, r24
     5bc:	0e 94 7b 29 	call	0x52f6	; 0x52f6 <__floatsisf>
     5c0:	27 e1       	ldi	r18, 0x17	; 23
     5c2:	37 eb       	ldi	r19, 0xB7	; 183
     5c4:	41 e5       	ldi	r20, 0x51	; 81
     5c6:	5b e3       	ldi	r21, 0x3B	; 59
     5c8:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
     5cc:	87 01       	movw	r16, r14
     5ce:	76 01       	movw	r14, r12
     5d0:	a3 01       	movw	r20, r6
     5d2:	92 01       	movw	r18, r4
     5d4:	0e 94 51 08 	call	0x10a2	; 0x10a2 <LowPassFilter>
	//k_z.value = (0.0032) * (double)(MSB << 8 | LSB);
	//k_z.value = LowPassFilter((0.0032) * (double)(MSB << 8 | LSB), p_k_z.value - coeffs[ADXL345_OFFZ].value, coeffs[LP_AX_Z].value);
	k_z.value += coeffs[ADXL345_OFFZ].value;
     5d8:	f5 01       	movw	r30, r10
     5da:	20 81       	ld	r18, Z
     5dc:	31 81       	ldd	r19, Z+1	; 0x01
     5de:	42 81       	ldd	r20, Z+2	; 0x02
     5e0:	53 81       	ldd	r21, Z+3	; 0x03
     5e2:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
	k_z.value *= coeffs[ADXL345_SCZ].value;
     5e6:	f1 01       	movw	r30, r2
     5e8:	20 81       	ld	r18, Z
     5ea:	31 81       	ldd	r19, Z+1	; 0x01
     5ec:	42 81       	ldd	r20, Z+2	; 0x02
     5ee:	53 81       	ldd	r21, Z+3	; 0x03
     5f0:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
     5f4:	68 83       	st	Y, r22
     5f6:	79 83       	std	Y+1, r23	; 0x01
     5f8:	8a 83       	std	Y+2, r24	; 0x02
     5fa:	9b 83       	std	Y+3, r25	; 0x03
	//Measure_Push((MSB << 8 | LSB), KZ);
	
	return 0;
}
     5fc:	80 e0       	ldi	r24, 0x00	; 0
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	1f 91       	pop	r17
     604:	0f 91       	pop	r16
     606:	ff 90       	pop	r15
     608:	ef 90       	pop	r14
     60a:	df 90       	pop	r13
     60c:	cf 90       	pop	r12
     60e:	bf 90       	pop	r11
     610:	af 90       	pop	r10
     612:	9f 90       	pop	r9
     614:	8f 90       	pop	r8
     616:	7f 90       	pop	r7
     618:	6f 90       	pop	r6
     61a:	5f 90       	pop	r5
     61c:	4f 90       	pop	r4
     61e:	3f 90       	pop	r3
     620:	2f 90       	pop	r2
     622:	08 95       	ret

00000624 <ADXL345_Init>:

uint8_t ADXL345_Init()
{
     624:	cf 93       	push	r28
	twi(TWI_START);
     626:	80 e0       	ldi	r24, 0x00	; 0
     628:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=ADXL345_ADDR|I2C_WRITE;
     62c:	c6 ea       	ldi	r28, 0xA6	; 166
     62e:	c3 b9       	out	0x03, r28	; 3
	twi(TWI_TRANSMIT);
     630:	83 e0       	ldi	r24, 0x03	; 3
     632:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=0x31;	//DATA_FORMAT
     636:	81 e3       	ldi	r24, 0x31	; 49
     638:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     63a:	83 e0       	ldi	r24, 0x03	; 3
     63c:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=0b00001011;
     640:	8b e0       	ldi	r24, 0x0B	; 11
     642:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     644:	83 e0       	ldi	r24, 0x03	; 3
     646:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	twi(TWI_STOP);
     64a:	82 e0       	ldi	r24, 0x02	; 2
     64c:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	
	twi(TWI_START);
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=ADXL345_ADDR|I2C_WRITE;
     656:	c3 b9       	out	0x03, r28	; 3
	twi(TWI_TRANSMIT);
     658:	83 e0       	ldi	r24, 0x03	; 3
     65a:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=0x2C;	//BW_RATE
     65e:	8c e2       	ldi	r24, 0x2C	; 44
     660:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     662:	83 e0       	ldi	r24, 0x03	; 3
     664:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=0b00000111;	//0x09; //0b00001111 rate=50hz, bw=20hz 
     668:	87 e0       	ldi	r24, 0x07	; 7
     66a:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     66c:	83 e0       	ldi	r24, 0x03	; 3
     66e:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	twi(TWI_STOP);
     672:	82 e0       	ldi	r24, 0x02	; 2
     674:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	
	twi(TWI_START);
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=ADXL345_ADDR|I2C_WRITE;
     67e:	c3 b9       	out	0x03, r28	; 3
	twi(TWI_TRANSMIT);
     680:	83 e0       	ldi	r24, 0x03	; 3
     682:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=0x2D;	//POWER_CTL 
     686:	8d e2       	ldi	r24, 0x2D	; 45
     688:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     68a:	83 e0       	ldi	r24, 0x03	; 3
     68c:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=0x08;
     690:	88 e0       	ldi	r24, 0x08	; 8
     692:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     694:	83 e0       	ldi	r24, 0x03	; 3
     696:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	twi(TWI_STOP);
     69a:	82 e0       	ldi	r24, 0x02	; 2
     69c:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=0x80;
	twi(TWI_TRANSMIT);
	twi(TWI_STOP);
	*/
	return 0;
}
     6a0:	80 e0       	ldi	r24, 0x00	; 0
     6a2:	cf 91       	pop	r28
     6a4:	08 95       	ret

000006a6 <BMP085_StartMeasUT>:

void BMP085_Calculate();

uint8_t BMP085_StartMeasUT()
{
	twi(TWI_START);
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=BMP085_ADDR|I2C_WRITE;
     6ac:	8e ee       	ldi	r24, 0xEE	; 238
     6ae:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     6b0:	83 e0       	ldi	r24, 0x03	; 3
     6b2:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=0xF4;
     6b6:	84 ef       	ldi	r24, 0xF4	; 244
     6b8:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     6ba:	83 e0       	ldi	r24, 0x03	; 3
     6bc:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=0x2E;	//temperature
     6c0:	8e e2       	ldi	r24, 0x2E	; 46
     6c2:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     6c4:	83 e0       	ldi	r24, 0x03	; 3
     6c6:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	twi(TWI_STOP);
     6ca:	82 e0       	ldi	r24, 0x02	; 2
     6cc:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	return 0; 
}
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	08 95       	ret

000006d4 <BMP085_StartMeasUP>:

uint8_t BMP085_StartMeasUP()
{
	twi(TWI_START);
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=BMP085_ADDR|I2C_WRITE;
     6da:	8e ee       	ldi	r24, 0xEE	; 238
     6dc:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     6de:	83 e0       	ldi	r24, 0x03	; 3
     6e0:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=0x34;
     6e4:	84 e3       	ldi	r24, 0x34	; 52
     6e6:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     6e8:	83 e0       	ldi	r24, 0x03	; 3
     6ea:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR = 0x34 + oss * 0x40;	//pressure	
     6ee:	84 ef       	ldi	r24, 0xF4	; 244
     6f0:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     6f2:	83 e0       	ldi	r24, 0x03	; 3
     6f4:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	twi(TWI_STOP);
     6f8:	82 e0       	ldi	r24, 0x02	; 2
     6fa:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	return 0;
}
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	08 95       	ret

00000702 <BMP085_Get_Coef>:
	BMP085_Calculate();
	return 0;
}

uint8_t BMP085_Get_Coef()
{
     702:	0f 93       	push	r16
     704:	1f 93       	push	r17
     706:	cf 93       	push	r28
     708:	df 93       	push	r29
	uint16_t LSB, MSB;
	
	twi(TWI_START);
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=BMP085_ADDR|I2C_WRITE;
     710:	de ee       	ldi	r29, 0xEE	; 238
     712:	d3 b9       	out	0x03, r29	; 3
	twi(TWI_TRANSMIT);
     714:	83 e0       	ldi	r24, 0x03	; 3
     716:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=0xAA;
     71a:	8a ea       	ldi	r24, 0xAA	; 170
     71c:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     71e:	83 e0       	ldi	r24, 0x03	; 3
     720:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	twi(TWI_RESTART);
     724:	81 e0       	ldi	r24, 0x01	; 1
     726:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=BMP085_ADDR|I2C_READ;
     72a:	cf ee       	ldi	r28, 0xEF	; 239
     72c:	c3 b9       	out	0x03, r28	; 3
	twi(TWI_TRANSMIT);
     72e:	83 e0       	ldi	r24, 0x03	; 3
     730:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	twi(TWI_RECEIVE_ACK);
     734:	84 e0       	ldi	r24, 0x04	; 4
     736:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	MSB=TWDR;
     73a:	03 b1       	in	r16, 0x03	; 3
	twi(TWI_RECEIVE_NACK);
     73c:	85 e0       	ldi	r24, 0x05	; 5
     73e:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	LSB=TWDR;
     742:	13 b1       	in	r17, 0x03	; 3
	twi(TWI_STOP);
     744:	82 e0       	ldi	r24, 0x02	; 2
     746:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	
	AC1 = MSB<<8 | LSB;
     74a:	90 2f       	mov	r25, r16
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	81 2b       	or	r24, r17
     750:	90 93 a9 00 	sts	0x00A9, r25
     754:	80 93 a8 00 	sts	0x00A8, r24
	
	twi(TWI_START);
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=BMP085_ADDR|I2C_WRITE;
     75e:	d3 b9       	out	0x03, r29	; 3
	twi(TWI_TRANSMIT);
     760:	83 e0       	ldi	r24, 0x03	; 3
     762:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=0xAC;
     766:	8c ea       	ldi	r24, 0xAC	; 172
     768:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     76a:	83 e0       	ldi	r24, 0x03	; 3
     76c:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	twi(TWI_RESTART);
     770:	81 e0       	ldi	r24, 0x01	; 1
     772:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=BMP085_ADDR|I2C_READ;
     776:	c3 b9       	out	0x03, r28	; 3
	twi(TWI_TRANSMIT);
     778:	83 e0       	ldi	r24, 0x03	; 3
     77a:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	twi(TWI_RECEIVE_ACK);
     77e:	84 e0       	ldi	r24, 0x04	; 4
     780:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	MSB=TWDR;
     784:	03 b1       	in	r16, 0x03	; 3
	twi(TWI_RECEIVE_NACK);
     786:	85 e0       	ldi	r24, 0x05	; 5
     788:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	LSB=TWDR;
     78c:	13 b1       	in	r17, 0x03	; 3
	twi(TWI_STOP);
     78e:	82 e0       	ldi	r24, 0x02	; 2
     790:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	
	AC2 = MSB<<8 | LSB;
     794:	90 2f       	mov	r25, r16
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	81 2b       	or	r24, r17
     79a:	90 93 ab 00 	sts	0x00AB, r25
     79e:	80 93 aa 00 	sts	0x00AA, r24
	
	twi(TWI_START);
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=BMP085_ADDR|I2C_WRITE;
     7a8:	d3 b9       	out	0x03, r29	; 3
	twi(TWI_TRANSMIT);
     7aa:	83 e0       	ldi	r24, 0x03	; 3
     7ac:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=0xAE;
     7b0:	8e ea       	ldi	r24, 0xAE	; 174
     7b2:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     7b4:	83 e0       	ldi	r24, 0x03	; 3
     7b6:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	twi(TWI_RESTART);
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=BMP085_ADDR|I2C_READ;
     7c0:	c3 b9       	out	0x03, r28	; 3
	twi(TWI_TRANSMIT);
     7c2:	83 e0       	ldi	r24, 0x03	; 3
     7c4:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	twi(TWI_RECEIVE_ACK);
     7c8:	84 e0       	ldi	r24, 0x04	; 4
     7ca:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	MSB=TWDR;
     7ce:	03 b1       	in	r16, 0x03	; 3
	twi(TWI_RECEIVE_NACK);
     7d0:	85 e0       	ldi	r24, 0x05	; 5
     7d2:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	LSB=TWDR;
     7d6:	13 b1       	in	r17, 0x03	; 3
	twi(TWI_STOP);
     7d8:	82 e0       	ldi	r24, 0x02	; 2
     7da:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	
	AC3 = MSB<<8 | LSB;
     7de:	90 2f       	mov	r25, r16
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	81 2b       	or	r24, r17
     7e4:	90 93 ad 00 	sts	0x00AD, r25
     7e8:	80 93 ac 00 	sts	0x00AC, r24
	
	twi(TWI_START);
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=BMP085_ADDR|I2C_WRITE;
     7f2:	d3 b9       	out	0x03, r29	; 3
	twi(TWI_TRANSMIT);
     7f4:	83 e0       	ldi	r24, 0x03	; 3
     7f6:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=0xB0;
     7fa:	80 eb       	ldi	r24, 0xB0	; 176
     7fc:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     7fe:	83 e0       	ldi	r24, 0x03	; 3
     800:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	twi(TWI_RESTART);
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=BMP085_ADDR|I2C_READ;
     80a:	c3 b9       	out	0x03, r28	; 3
	twi(TWI_TRANSMIT);
     80c:	83 e0       	ldi	r24, 0x03	; 3
     80e:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	twi(TWI_RECEIVE_ACK);
     812:	84 e0       	ldi	r24, 0x04	; 4
     814:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	MSB=TWDR;
     818:	03 b1       	in	r16, 0x03	; 3
	twi(TWI_RECEIVE_NACK);
     81a:	85 e0       	ldi	r24, 0x05	; 5
     81c:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	LSB=TWDR;
     820:	13 b1       	in	r17, 0x03	; 3
	twi(TWI_STOP);
     822:	82 e0       	ldi	r24, 0x02	; 2
     824:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	
	AC4 = MSB<<8 | LSB;
     828:	90 2f       	mov	r25, r16
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	81 2b       	or	r24, r17
     82e:	90 93 af 00 	sts	0x00AF, r25
     832:	80 93 ae 00 	sts	0x00AE, r24
	
	twi(TWI_START);
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=BMP085_ADDR|I2C_WRITE;
     83c:	d3 b9       	out	0x03, r29	; 3
	twi(TWI_TRANSMIT);
     83e:	83 e0       	ldi	r24, 0x03	; 3
     840:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=0xB2;
     844:	82 eb       	ldi	r24, 0xB2	; 178
     846:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     848:	83 e0       	ldi	r24, 0x03	; 3
     84a:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	twi(TWI_RESTART);
     84e:	81 e0       	ldi	r24, 0x01	; 1
     850:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=BMP085_ADDR|I2C_READ;
     854:	c3 b9       	out	0x03, r28	; 3
	twi(TWI_TRANSMIT);
     856:	83 e0       	ldi	r24, 0x03	; 3
     858:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	twi(TWI_RECEIVE_ACK);
     85c:	84 e0       	ldi	r24, 0x04	; 4
     85e:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	MSB=TWDR;
     862:	03 b1       	in	r16, 0x03	; 3
	twi(TWI_RECEIVE_NACK);
     864:	85 e0       	ldi	r24, 0x05	; 5
     866:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	LSB=TWDR;
     86a:	13 b1       	in	r17, 0x03	; 3
	twi(TWI_STOP);
     86c:	82 e0       	ldi	r24, 0x02	; 2
     86e:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	
	AC5 = MSB<<8 | LSB;
     872:	90 2f       	mov	r25, r16
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	81 2b       	or	r24, r17
     878:	90 93 b1 00 	sts	0x00B1, r25
     87c:	80 93 b0 00 	sts	0x00B0, r24
	
	twi(TWI_START);
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=BMP085_ADDR|I2C_WRITE;
     886:	d3 b9       	out	0x03, r29	; 3
	twi(TWI_TRANSMIT);
     888:	83 e0       	ldi	r24, 0x03	; 3
     88a:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=0xB4;
     88e:	84 eb       	ldi	r24, 0xB4	; 180
     890:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     892:	83 e0       	ldi	r24, 0x03	; 3
     894:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	twi(TWI_RESTART);
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=BMP085_ADDR|I2C_READ;
     89e:	c3 b9       	out	0x03, r28	; 3
	twi(TWI_TRANSMIT);
     8a0:	83 e0       	ldi	r24, 0x03	; 3
     8a2:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	twi(TWI_RECEIVE_ACK);
     8a6:	84 e0       	ldi	r24, 0x04	; 4
     8a8:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	MSB=TWDR;
     8ac:	03 b1       	in	r16, 0x03	; 3
	twi(TWI_RECEIVE_NACK);
     8ae:	85 e0       	ldi	r24, 0x05	; 5
     8b0:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	LSB=TWDR;
     8b4:	13 b1       	in	r17, 0x03	; 3
	twi(TWI_STOP);
     8b6:	82 e0       	ldi	r24, 0x02	; 2
     8b8:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	
	AC6 = MSB<<8 | LSB;
     8bc:	90 2f       	mov	r25, r16
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	81 2b       	or	r24, r17
     8c2:	90 93 b3 00 	sts	0x00B3, r25
     8c6:	80 93 b2 00 	sts	0x00B2, r24
	
	twi(TWI_START);
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=BMP085_ADDR|I2C_WRITE;
     8d0:	d3 b9       	out	0x03, r29	; 3
	twi(TWI_TRANSMIT);
     8d2:	83 e0       	ldi	r24, 0x03	; 3
     8d4:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=0xB6;
     8d8:	86 eb       	ldi	r24, 0xB6	; 182
     8da:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     8dc:	83 e0       	ldi	r24, 0x03	; 3
     8de:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	twi(TWI_RESTART);
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=BMP085_ADDR|I2C_READ;
     8e8:	c3 b9       	out	0x03, r28	; 3
	twi(TWI_TRANSMIT);
     8ea:	83 e0       	ldi	r24, 0x03	; 3
     8ec:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	twi(TWI_RECEIVE_ACK);
     8f0:	84 e0       	ldi	r24, 0x04	; 4
     8f2:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	MSB=TWDR;
     8f6:	03 b1       	in	r16, 0x03	; 3
	twi(TWI_RECEIVE_NACK);
     8f8:	85 e0       	ldi	r24, 0x05	; 5
     8fa:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	LSB=TWDR;
     8fe:	13 b1       	in	r17, 0x03	; 3
	twi(TWI_STOP);
     900:	82 e0       	ldi	r24, 0x02	; 2
     902:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	
	B1 = MSB<<8 | LSB;
     906:	90 2f       	mov	r25, r16
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	81 2b       	or	r24, r17
     90c:	90 93 b5 00 	sts	0x00B5, r25
     910:	80 93 b4 00 	sts	0x00B4, r24
	
	twi(TWI_START);
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=BMP085_ADDR|I2C_WRITE;
     91a:	d3 b9       	out	0x03, r29	; 3
	twi(TWI_TRANSMIT);
     91c:	83 e0       	ldi	r24, 0x03	; 3
     91e:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=0xB8;
     922:	88 eb       	ldi	r24, 0xB8	; 184
     924:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     926:	83 e0       	ldi	r24, 0x03	; 3
     928:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	twi(TWI_RESTART);
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=BMP085_ADDR|I2C_READ;
     932:	c3 b9       	out	0x03, r28	; 3
	twi(TWI_TRANSMIT);
     934:	83 e0       	ldi	r24, 0x03	; 3
     936:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	twi(TWI_RECEIVE_ACK);
     93a:	84 e0       	ldi	r24, 0x04	; 4
     93c:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	MSB=TWDR;
     940:	03 b1       	in	r16, 0x03	; 3
	twi(TWI_RECEIVE_NACK);
     942:	85 e0       	ldi	r24, 0x05	; 5
     944:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	LSB=TWDR;
     948:	13 b1       	in	r17, 0x03	; 3
	twi(TWI_STOP);
     94a:	82 e0       	ldi	r24, 0x02	; 2
     94c:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	
	B2 = MSB<<8 | LSB;
     950:	90 2f       	mov	r25, r16
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	81 2b       	or	r24, r17
     956:	90 93 b7 00 	sts	0x00B7, r25
     95a:	80 93 b6 00 	sts	0x00B6, r24
	
	twi(TWI_START);
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=BMP085_ADDR|I2C_WRITE;
     964:	d3 b9       	out	0x03, r29	; 3
	twi(TWI_TRANSMIT);
     966:	83 e0       	ldi	r24, 0x03	; 3
     968:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=0xBA;
     96c:	8a eb       	ldi	r24, 0xBA	; 186
     96e:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     970:	83 e0       	ldi	r24, 0x03	; 3
     972:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	twi(TWI_RESTART);
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=BMP085_ADDR|I2C_READ;
     97c:	c3 b9       	out	0x03, r28	; 3
	twi(TWI_TRANSMIT);
     97e:	83 e0       	ldi	r24, 0x03	; 3
     980:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	twi(TWI_RECEIVE_ACK);
     984:	84 e0       	ldi	r24, 0x04	; 4
     986:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	MSB=TWDR;
     98a:	03 b1       	in	r16, 0x03	; 3
	twi(TWI_RECEIVE_NACK);
     98c:	85 e0       	ldi	r24, 0x05	; 5
     98e:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	LSB=TWDR;
     992:	13 b1       	in	r17, 0x03	; 3
	twi(TWI_STOP);
     994:	82 e0       	ldi	r24, 0x02	; 2
     996:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	
	MB = MSB<<8 | LSB;
     99a:	90 2f       	mov	r25, r16
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	81 2b       	or	r24, r17
     9a0:	90 93 b9 00 	sts	0x00B9, r25
     9a4:	80 93 b8 00 	sts	0x00B8, r24
	
	twi(TWI_START);
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=BMP085_ADDR|I2C_WRITE;
     9ae:	d3 b9       	out	0x03, r29	; 3
	twi(TWI_TRANSMIT);
     9b0:	83 e0       	ldi	r24, 0x03	; 3
     9b2:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=0xBC;
     9b6:	8c eb       	ldi	r24, 0xBC	; 188
     9b8:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     9ba:	83 e0       	ldi	r24, 0x03	; 3
     9bc:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	twi(TWI_RESTART);
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=BMP085_ADDR|I2C_READ;
     9c6:	c3 b9       	out	0x03, r28	; 3
	twi(TWI_TRANSMIT);
     9c8:	83 e0       	ldi	r24, 0x03	; 3
     9ca:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	twi(TWI_RECEIVE_ACK);
     9ce:	84 e0       	ldi	r24, 0x04	; 4
     9d0:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	MSB=TWDR;
     9d4:	03 b1       	in	r16, 0x03	; 3
	twi(TWI_RECEIVE_NACK);
     9d6:	85 e0       	ldi	r24, 0x05	; 5
     9d8:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	LSB=TWDR;
     9dc:	13 b1       	in	r17, 0x03	; 3
	twi(TWI_STOP);
     9de:	82 e0       	ldi	r24, 0x02	; 2
     9e0:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	
	MC = MSB<<8 | LSB;
     9e4:	90 2f       	mov	r25, r16
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	81 2b       	or	r24, r17
     9ea:	90 93 bb 00 	sts	0x00BB, r25
     9ee:	80 93 ba 00 	sts	0x00BA, r24
	
	twi(TWI_START);
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=BMP085_ADDR|I2C_WRITE;
     9f8:	d3 b9       	out	0x03, r29	; 3
	twi(TWI_TRANSMIT);
     9fa:	83 e0       	ldi	r24, 0x03	; 3
     9fc:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=0xBE;
     a00:	8e eb       	ldi	r24, 0xBE	; 190
     a02:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	twi(TWI_RESTART);
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=BMP085_ADDR|I2C_READ;
     a10:	c3 b9       	out	0x03, r28	; 3
	twi(TWI_TRANSMIT);
     a12:	83 e0       	ldi	r24, 0x03	; 3
     a14:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	twi(TWI_RECEIVE_ACK);
     a18:	84 e0       	ldi	r24, 0x04	; 4
     a1a:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	MSB=TWDR;
     a1e:	d3 b1       	in	r29, 0x03	; 3
	twi(TWI_RECEIVE_NACK);
     a20:	85 e0       	ldi	r24, 0x05	; 5
     a22:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	LSB=TWDR;
     a26:	c3 b1       	in	r28, 0x03	; 3
	twi(TWI_STOP);
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	
	MD = MSB<<8 | LSB;
     a2e:	9d 2f       	mov	r25, r29
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	8c 2b       	or	r24, r28
     a34:	90 93 bd 00 	sts	0x00BD, r25
     a38:	80 93 bc 00 	sts	0x00BC, r24
		
	return 0;
}
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	df 91       	pop	r29
     a40:	cf 91       	pop	r28
     a42:	1f 91       	pop	r17
     a44:	0f 91       	pop	r16
     a46:	08 95       	ret

00000a48 <BMP085_Calculate>:

void BMP085_Calculate()
{
     a48:	cf 92       	push	r12
     a4a:	df 92       	push	r13
     a4c:	ef 92       	push	r14
     a4e:	ff 92       	push	r15
     a50:	0f 93       	push	r16
     a52:	1f 93       	push	r17
     a54:	cf 93       	push	r28
     a56:	df 93       	push	r29
     a58:	cd b7       	in	r28, 0x3d	; 61
     a5a:	de b7       	in	r29, 0x3e	; 62
     a5c:	a8 97       	sbiw	r28, 0x28	; 40
     a5e:	0f b6       	in	r0, 0x3f	; 63
     a60:	f8 94       	cli
     a62:	de bf       	out	0x3e, r29	; 62
     a64:	0f be       	out	0x3f, r0	; 63
     a66:	cd bf       	out	0x3d, r28	; 61
	volatile int32_t X1, X2, X3, B3, B5, B6, p, tmp;
	volatile uint32_t B4, B7;
	
	X1 = ((int32_t)UT - AC6) * AC5 >> 15;
     a68:	80 91 b2 00 	lds	r24, 0x00B2
     a6c:	90 91 b3 00 	lds	r25, 0x00B3
     a70:	40 91 a0 00 	lds	r20, 0x00A0
     a74:	50 91 a1 00 	lds	r21, 0x00A1
     a78:	60 91 a2 00 	lds	r22, 0x00A2
     a7c:	70 91 a3 00 	lds	r23, 0x00A3
     a80:	9a 01       	movw	r18, r20
     a82:	ab 01       	movw	r20, r22
     a84:	28 1b       	sub	r18, r24
     a86:	39 0b       	sbc	r19, r25
     a88:	41 09       	sbc	r20, r1
     a8a:	51 09       	sbc	r21, r1
     a8c:	a0 91 b0 00 	lds	r26, 0x00B0
     a90:	b0 91 b1 00 	lds	r27, 0x00B1
     a94:	0e 94 c2 2b 	call	0x5784	; 0x5784 <__muluhisi3>
     a98:	dc 01       	movw	r26, r24
     a9a:	cb 01       	movw	r24, r22
     a9c:	07 2e       	mov	r0, r23
     a9e:	7f e0       	ldi	r23, 0x0F	; 15
     aa0:	b5 95       	asr	r27
     aa2:	a7 95       	ror	r26
     aa4:	97 95       	ror	r25
     aa6:	87 95       	ror	r24
     aa8:	7a 95       	dec	r23
     aaa:	d1 f7       	brne	.-12     	; 0xaa0 <BMP085_Calculate+0x58>
     aac:	70 2d       	mov	r23, r0
     aae:	89 83       	std	Y+1, r24	; 0x01
     ab0:	9a 83       	std	Y+2, r25	; 0x02
     ab2:	ab 83       	std	Y+3, r26	; 0x03
     ab4:	bc 83       	std	Y+4, r27	; 0x04
	X2 = ((int32_t)MC << 11) / (X1 + MD);
     ab6:	09 81       	ldd	r16, Y+1	; 0x01
     ab8:	1a 81       	ldd	r17, Y+2	; 0x02
     aba:	2b 81       	ldd	r18, Y+3	; 0x03
     abc:	3c 81       	ldd	r19, Y+4	; 0x04
     abe:	60 91 ba 00 	lds	r22, 0x00BA
     ac2:	70 91 bb 00 	lds	r23, 0x00BB
     ac6:	cb 01       	movw	r24, r22
     ac8:	aa 27       	eor	r26, r26
     aca:	97 fd       	sbrc	r25, 7
     acc:	a0 95       	com	r26
     ace:	ba 2f       	mov	r27, r26
     ad0:	bc 01       	movw	r22, r24
     ad2:	cd 01       	movw	r24, r26
     ad4:	05 2e       	mov	r0, r21
     ad6:	5b e0       	ldi	r21, 0x0B	; 11
     ad8:	66 0f       	add	r22, r22
     ada:	77 1f       	adc	r23, r23
     adc:	88 1f       	adc	r24, r24
     ade:	99 1f       	adc	r25, r25
     ae0:	5a 95       	dec	r21
     ae2:	d1 f7       	brne	.-12     	; 0xad8 <BMP085_Calculate+0x90>
     ae4:	50 2d       	mov	r21, r0
     ae6:	c0 90 bc 00 	lds	r12, 0x00BC
     aea:	d0 90 bd 00 	lds	r13, 0x00BD
     aee:	ee 24       	eor	r14, r14
     af0:	d7 fc       	sbrc	r13, 7
     af2:	e0 94       	com	r14
     af4:	fe 2c       	mov	r15, r14
     af6:	a9 01       	movw	r20, r18
     af8:	98 01       	movw	r18, r16
     afa:	2c 0d       	add	r18, r12
     afc:	3d 1d       	adc	r19, r13
     afe:	4e 1d       	adc	r20, r14
     b00:	5f 1d       	adc	r21, r15
     b02:	0e 94 9a 2b 	call	0x5734	; 0x5734 <__divmodsi4>
     b06:	2d 83       	std	Y+5, r18	; 0x05
     b08:	3e 83       	std	Y+6, r19	; 0x06
     b0a:	4f 83       	std	Y+7, r20	; 0x07
     b0c:	58 87       	std	Y+8, r21	; 0x08
	B5 = X1 + X2;
     b0e:	49 81       	ldd	r20, Y+1	; 0x01
     b10:	5a 81       	ldd	r21, Y+2	; 0x02
     b12:	6b 81       	ldd	r22, Y+3	; 0x03
     b14:	7c 81       	ldd	r23, Y+4	; 0x04
     b16:	8d 81       	ldd	r24, Y+5	; 0x05
     b18:	9e 81       	ldd	r25, Y+6	; 0x06
     b1a:	af 81       	ldd	r26, Y+7	; 0x07
     b1c:	b8 85       	ldd	r27, Y+8	; 0x08
     b1e:	84 0f       	add	r24, r20
     b20:	95 1f       	adc	r25, r21
     b22:	a6 1f       	adc	r26, r22
     b24:	b7 1f       	adc	r27, r23
     b26:	89 8b       	std	Y+17, r24	; 0x11
     b28:	9a 8b       	std	Y+18, r25	; 0x12
     b2a:	ab 8b       	std	Y+19, r26	; 0x13
     b2c:	bc 8b       	std	Y+20, r27	; 0x14
	
	T.value = (double_t)(0.1 * ((B5 + 8) >> 4));
     b2e:	89 89       	ldd	r24, Y+17	; 0x11
     b30:	9a 89       	ldd	r25, Y+18	; 0x12
     b32:	ab 89       	ldd	r26, Y+19	; 0x13
     b34:	bc 89       	ldd	r27, Y+20	; 0x14
     b36:	08 96       	adiw	r24, 0x08	; 8
     b38:	a1 1d       	adc	r26, r1
     b3a:	b1 1d       	adc	r27, r1
     b3c:	bc 01       	movw	r22, r24
     b3e:	cd 01       	movw	r24, r26
     b40:	68 94       	set
     b42:	13 f8       	bld	r1, 3
     b44:	95 95       	asr	r25
     b46:	87 95       	ror	r24
     b48:	77 95       	ror	r23
     b4a:	67 95       	ror	r22
     b4c:	16 94       	lsr	r1
     b4e:	d1 f7       	brne	.-12     	; 0xb44 <BMP085_Calculate+0xfc>
     b50:	0e 94 7b 29 	call	0x52f6	; 0x52f6 <__floatsisf>
     b54:	2d ec       	ldi	r18, 0xCD	; 205
     b56:	3c ec       	ldi	r19, 0xCC	; 204
     b58:	4c ec       	ldi	r20, 0xCC	; 204
     b5a:	5d e3       	ldi	r21, 0x3D	; 61
     b5c:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
     b60:	60 93 d9 02 	sts	0x02D9, r22
     b64:	70 93 da 02 	sts	0x02DA, r23
     b68:	80 93 db 02 	sts	0x02DB, r24
     b6c:	90 93 dc 02 	sts	0x02DC, r25
	
	B6 = B5 - 4000;
     b70:	89 89       	ldd	r24, Y+17	; 0x11
     b72:	9a 89       	ldd	r25, Y+18	; 0x12
     b74:	ab 89       	ldd	r26, Y+19	; 0x13
     b76:	bc 89       	ldd	r27, Y+20	; 0x14
     b78:	80 5a       	subi	r24, 0xA0	; 160
     b7a:	9f 40       	sbci	r25, 0x0F	; 15
     b7c:	a1 09       	sbc	r26, r1
     b7e:	b1 09       	sbc	r27, r1
     b80:	8d 8b       	std	Y+21, r24	; 0x15
     b82:	9e 8b       	std	Y+22, r25	; 0x16
     b84:	af 8b       	std	Y+23, r26	; 0x17
     b86:	b8 8f       	std	Y+24, r27	; 0x18
	X1 = (B2 * (B6 * B6 >> 12)) >> 11;
     b88:	2d 89       	ldd	r18, Y+21	; 0x15
     b8a:	3e 89       	ldd	r19, Y+22	; 0x16
     b8c:	4f 89       	ldd	r20, Y+23	; 0x17
     b8e:	58 8d       	ldd	r21, Y+24	; 0x18
     b90:	6d 89       	ldd	r22, Y+21	; 0x15
     b92:	7e 89       	ldd	r23, Y+22	; 0x16
     b94:	8f 89       	ldd	r24, Y+23	; 0x17
     b96:	98 8d       	ldd	r25, Y+24	; 0x18
     b98:	e0 91 b6 00 	lds	r30, 0x00B6
     b9c:	f0 91 b7 00 	lds	r31, 0x00B7
     ba0:	0e 94 68 2b 	call	0x56d0	; 0x56d0 <__mulsi3>
     ba4:	9b 01       	movw	r18, r22
     ba6:	ac 01       	movw	r20, r24
     ba8:	01 2e       	mov	r0, r17
     baa:	1c e0       	ldi	r17, 0x0C	; 12
     bac:	55 95       	asr	r21
     bae:	47 95       	ror	r20
     bb0:	37 95       	ror	r19
     bb2:	27 95       	ror	r18
     bb4:	1a 95       	dec	r17
     bb6:	d1 f7       	brne	.-12     	; 0xbac <BMP085_Calculate+0x164>
     bb8:	10 2d       	mov	r17, r0
     bba:	df 01       	movw	r26, r30
     bbc:	0e 94 cd 2b 	call	0x579a	; 0x579a <__mulshisi3>
     bc0:	dc 01       	movw	r26, r24
     bc2:	cb 01       	movw	r24, r22
     bc4:	07 2e       	mov	r0, r23
     bc6:	7b e0       	ldi	r23, 0x0B	; 11
     bc8:	b5 95       	asr	r27
     bca:	a7 95       	ror	r26
     bcc:	97 95       	ror	r25
     bce:	87 95       	ror	r24
     bd0:	7a 95       	dec	r23
     bd2:	d1 f7       	brne	.-12     	; 0xbc8 <BMP085_Calculate+0x180>
     bd4:	70 2d       	mov	r23, r0
     bd6:	89 83       	std	Y+1, r24	; 0x01
     bd8:	9a 83       	std	Y+2, r25	; 0x02
     bda:	ab 83       	std	Y+3, r26	; 0x03
     bdc:	bc 83       	std	Y+4, r27	; 0x04
	X2 = AC2 * B6 >> 11;
     bde:	2d 89       	ldd	r18, Y+21	; 0x15
     be0:	3e 89       	ldd	r19, Y+22	; 0x16
     be2:	4f 89       	ldd	r20, Y+23	; 0x17
     be4:	58 8d       	ldd	r21, Y+24	; 0x18
     be6:	a0 91 aa 00 	lds	r26, 0x00AA
     bea:	b0 91 ab 00 	lds	r27, 0x00AB
     bee:	0e 94 cd 2b 	call	0x579a	; 0x579a <__mulshisi3>
     bf2:	dc 01       	movw	r26, r24
     bf4:	cb 01       	movw	r24, r22
     bf6:	07 2e       	mov	r0, r23
     bf8:	7b e0       	ldi	r23, 0x0B	; 11
     bfa:	b5 95       	asr	r27
     bfc:	a7 95       	ror	r26
     bfe:	97 95       	ror	r25
     c00:	87 95       	ror	r24
     c02:	7a 95       	dec	r23
     c04:	d1 f7       	brne	.-12     	; 0xbfa <BMP085_Calculate+0x1b2>
     c06:	70 2d       	mov	r23, r0
     c08:	8d 83       	std	Y+5, r24	; 0x05
     c0a:	9e 83       	std	Y+6, r25	; 0x06
     c0c:	af 83       	std	Y+7, r26	; 0x07
     c0e:	b8 87       	std	Y+8, r27	; 0x08
	X3 = X1 + X2;
     c10:	49 81       	ldd	r20, Y+1	; 0x01
     c12:	5a 81       	ldd	r21, Y+2	; 0x02
     c14:	6b 81       	ldd	r22, Y+3	; 0x03
     c16:	7c 81       	ldd	r23, Y+4	; 0x04
     c18:	8d 81       	ldd	r24, Y+5	; 0x05
     c1a:	9e 81       	ldd	r25, Y+6	; 0x06
     c1c:	af 81       	ldd	r26, Y+7	; 0x07
     c1e:	b8 85       	ldd	r27, Y+8	; 0x08
     c20:	84 0f       	add	r24, r20
     c22:	95 1f       	adc	r25, r21
     c24:	a6 1f       	adc	r26, r22
     c26:	b7 1f       	adc	r27, r23
     c28:	89 87       	std	Y+9, r24	; 0x09
     c2a:	9a 87       	std	Y+10, r25	; 0x0a
     c2c:	ab 87       	std	Y+11, r26	; 0x0b
     c2e:	bc 87       	std	Y+12, r27	; 0x0c
	tmp = AC1;
     c30:	80 91 a8 00 	lds	r24, 0x00A8
     c34:	90 91 a9 00 	lds	r25, 0x00A9
     c38:	aa 27       	eor	r26, r26
     c3a:	97 fd       	sbrc	r25, 7
     c3c:	a0 95       	com	r26
     c3e:	ba 2f       	mov	r27, r26
     c40:	8d 8f       	std	Y+29, r24	; 0x1d
     c42:	9e 8f       	std	Y+30, r25	; 0x1e
     c44:	af 8f       	std	Y+31, r26	; 0x1f
     c46:	b8 a3       	std	Y+32, r27	; 0x20
	tmp = (tmp * 4 + X3) << oss;
     c48:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c4a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c4c:	af 8d       	ldd	r26, Y+31	; 0x1f
     c4e:	b8 a1       	ldd	r27, Y+32	; 0x20
     c50:	49 85       	ldd	r20, Y+9	; 0x09
     c52:	5a 85       	ldd	r21, Y+10	; 0x0a
     c54:	6b 85       	ldd	r22, Y+11	; 0x0b
     c56:	7c 85       	ldd	r23, Y+12	; 0x0c
     c58:	88 0f       	add	r24, r24
     c5a:	99 1f       	adc	r25, r25
     c5c:	aa 1f       	adc	r26, r26
     c5e:	bb 1f       	adc	r27, r27
     c60:	88 0f       	add	r24, r24
     c62:	99 1f       	adc	r25, r25
     c64:	aa 1f       	adc	r26, r26
     c66:	bb 1f       	adc	r27, r27
     c68:	84 0f       	add	r24, r20
     c6a:	95 1f       	adc	r25, r21
     c6c:	a6 1f       	adc	r26, r22
     c6e:	b7 1f       	adc	r27, r23
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	aa 1f       	adc	r26, r26
     c76:	bb 1f       	adc	r27, r27
     c78:	88 0f       	add	r24, r24
     c7a:	99 1f       	adc	r25, r25
     c7c:	aa 1f       	adc	r26, r26
     c7e:	bb 1f       	adc	r27, r27
     c80:	88 0f       	add	r24, r24
     c82:	99 1f       	adc	r25, r25
     c84:	aa 1f       	adc	r26, r26
     c86:	bb 1f       	adc	r27, r27
     c88:	8d 8f       	std	Y+29, r24	; 0x1d
     c8a:	9e 8f       	std	Y+30, r25	; 0x1e
     c8c:	af 8f       	std	Y+31, r26	; 0x1f
     c8e:	b8 a3       	std	Y+32, r27	; 0x20
	B3 = (tmp + 2) / 4;
     c90:	4d 8d       	ldd	r20, Y+29	; 0x1d
     c92:	5e 8d       	ldd	r21, Y+30	; 0x1e
     c94:	6f 8d       	ldd	r22, Y+31	; 0x1f
     c96:	78 a1       	ldd	r23, Y+32	; 0x20
     c98:	4e 5f       	subi	r20, 0xFE	; 254
     c9a:	5f 4f       	sbci	r21, 0xFF	; 255
     c9c:	6f 4f       	sbci	r22, 0xFF	; 255
     c9e:	7f 4f       	sbci	r23, 0xFF	; 255
     ca0:	db 01       	movw	r26, r22
     ca2:	ca 01       	movw	r24, r20
     ca4:	1a f4       	brpl	.+6      	; 0xcac <BMP085_Calculate+0x264>
     ca6:	03 96       	adiw	r24, 0x03	; 3
     ca8:	a1 1d       	adc	r26, r1
     caa:	b1 1d       	adc	r27, r1
     cac:	b5 95       	asr	r27
     cae:	a7 95       	ror	r26
     cb0:	97 95       	ror	r25
     cb2:	87 95       	ror	r24
     cb4:	b5 95       	asr	r27
     cb6:	a7 95       	ror	r26
     cb8:	97 95       	ror	r25
     cba:	87 95       	ror	r24
     cbc:	8d 87       	std	Y+13, r24	; 0x0d
     cbe:	9e 87       	std	Y+14, r25	; 0x0e
     cc0:	af 87       	std	Y+15, r26	; 0x0f
     cc2:	b8 8b       	std	Y+16, r27	; 0x10
	X1 = AC3 * B6 >> 13;
     cc4:	2d 89       	ldd	r18, Y+21	; 0x15
     cc6:	3e 89       	ldd	r19, Y+22	; 0x16
     cc8:	4f 89       	ldd	r20, Y+23	; 0x17
     cca:	58 8d       	ldd	r21, Y+24	; 0x18
     ccc:	a0 91 ac 00 	lds	r26, 0x00AC
     cd0:	b0 91 ad 00 	lds	r27, 0x00AD
     cd4:	0e 94 cd 2b 	call	0x579a	; 0x579a <__mulshisi3>
     cd8:	dc 01       	movw	r26, r24
     cda:	cb 01       	movw	r24, r22
     cdc:	07 2e       	mov	r0, r23
     cde:	7d e0       	ldi	r23, 0x0D	; 13
     ce0:	b5 95       	asr	r27
     ce2:	a7 95       	ror	r26
     ce4:	97 95       	ror	r25
     ce6:	87 95       	ror	r24
     ce8:	7a 95       	dec	r23
     cea:	d1 f7       	brne	.-12     	; 0xce0 <BMP085_Calculate+0x298>
     cec:	70 2d       	mov	r23, r0
     cee:	89 83       	std	Y+1, r24	; 0x01
     cf0:	9a 83       	std	Y+2, r25	; 0x02
     cf2:	ab 83       	std	Y+3, r26	; 0x03
     cf4:	bc 83       	std	Y+4, r27	; 0x04
	X2 = (B1 * (B6 * B6 >> 12)) >> 16;
     cf6:	2d 89       	ldd	r18, Y+21	; 0x15
     cf8:	3e 89       	ldd	r19, Y+22	; 0x16
     cfa:	4f 89       	ldd	r20, Y+23	; 0x17
     cfc:	58 8d       	ldd	r21, Y+24	; 0x18
     cfe:	6d 89       	ldd	r22, Y+21	; 0x15
     d00:	7e 89       	ldd	r23, Y+22	; 0x16
     d02:	8f 89       	ldd	r24, Y+23	; 0x17
     d04:	98 8d       	ldd	r25, Y+24	; 0x18
     d06:	e0 91 b4 00 	lds	r30, 0x00B4
     d0a:	f0 91 b5 00 	lds	r31, 0x00B5
     d0e:	0e 94 68 2b 	call	0x56d0	; 0x56d0 <__mulsi3>
     d12:	9b 01       	movw	r18, r22
     d14:	ac 01       	movw	r20, r24
     d16:	01 2e       	mov	r0, r17
     d18:	1c e0       	ldi	r17, 0x0C	; 12
     d1a:	55 95       	asr	r21
     d1c:	47 95       	ror	r20
     d1e:	37 95       	ror	r19
     d20:	27 95       	ror	r18
     d22:	1a 95       	dec	r17
     d24:	d1 f7       	brne	.-12     	; 0xd1a <BMP085_Calculate+0x2d2>
     d26:	10 2d       	mov	r17, r0
     d28:	df 01       	movw	r26, r30
     d2a:	0e 94 cd 2b 	call	0x579a	; 0x579a <__mulshisi3>
     d2e:	bb 27       	eor	r27, r27
     d30:	97 fd       	sbrc	r25, 7
     d32:	b0 95       	com	r27
     d34:	ab 2f       	mov	r26, r27
     d36:	8d 83       	std	Y+5, r24	; 0x05
     d38:	9e 83       	std	Y+6, r25	; 0x06
     d3a:	af 83       	std	Y+7, r26	; 0x07
     d3c:	b8 87       	std	Y+8, r27	; 0x08
	X3 = ((X1 + X2) + 2) >> 2;
     d3e:	49 81       	ldd	r20, Y+1	; 0x01
     d40:	5a 81       	ldd	r21, Y+2	; 0x02
     d42:	6b 81       	ldd	r22, Y+3	; 0x03
     d44:	7c 81       	ldd	r23, Y+4	; 0x04
     d46:	8d 81       	ldd	r24, Y+5	; 0x05
     d48:	9e 81       	ldd	r25, Y+6	; 0x06
     d4a:	af 81       	ldd	r26, Y+7	; 0x07
     d4c:	b8 85       	ldd	r27, Y+8	; 0x08
     d4e:	84 0f       	add	r24, r20
     d50:	95 1f       	adc	r25, r21
     d52:	a6 1f       	adc	r26, r22
     d54:	b7 1f       	adc	r27, r23
     d56:	02 96       	adiw	r24, 0x02	; 2
     d58:	a1 1d       	adc	r26, r1
     d5a:	b1 1d       	adc	r27, r1
     d5c:	b5 95       	asr	r27
     d5e:	a7 95       	ror	r26
     d60:	97 95       	ror	r25
     d62:	87 95       	ror	r24
     d64:	b5 95       	asr	r27
     d66:	a7 95       	ror	r26
     d68:	97 95       	ror	r25
     d6a:	87 95       	ror	r24
     d6c:	89 87       	std	Y+9, r24	; 0x09
     d6e:	9a 87       	std	Y+10, r25	; 0x0a
     d70:	ab 87       	std	Y+11, r26	; 0x0b
     d72:	bc 87       	std	Y+12, r27	; 0x0c
	B4 = (AC4 * (uint32_t)(X3 + 32768)) >> 15;
     d74:	89 85       	ldd	r24, Y+9	; 0x09
     d76:	9a 85       	ldd	r25, Y+10	; 0x0a
     d78:	ab 85       	ldd	r26, Y+11	; 0x0b
     d7a:	bc 85       	ldd	r27, Y+12	; 0x0c
     d7c:	9c 01       	movw	r18, r24
     d7e:	ad 01       	movw	r20, r26
     d80:	30 58       	subi	r19, 0x80	; 128
     d82:	4f 4f       	sbci	r20, 0xFF	; 255
     d84:	5f 4f       	sbci	r21, 0xFF	; 255
     d86:	a0 91 ae 00 	lds	r26, 0x00AE
     d8a:	b0 91 af 00 	lds	r27, 0x00AF
     d8e:	0e 94 c2 2b 	call	0x5784	; 0x5784 <__muluhisi3>
     d92:	dc 01       	movw	r26, r24
     d94:	cb 01       	movw	r24, r22
     d96:	07 2e       	mov	r0, r23
     d98:	7f e0       	ldi	r23, 0x0F	; 15
     d9a:	b6 95       	lsr	r27
     d9c:	a7 95       	ror	r26
     d9e:	97 95       	ror	r25
     da0:	87 95       	ror	r24
     da2:	7a 95       	dec	r23
     da4:	d1 f7       	brne	.-12     	; 0xd9a <BMP085_Calculate+0x352>
     da6:	70 2d       	mov	r23, r0
     da8:	89 a3       	std	Y+33, r24	; 0x21
     daa:	9a a3       	std	Y+34, r25	; 0x22
     dac:	ab a3       	std	Y+35, r26	; 0x23
     dae:	bc a3       	std	Y+36, r27	; 0x24
	//B7 = ((uint32_t)(UP >> (8 - oss)) - B3) * (50000 >> oss);
	B7 = ((uint32_t) (UP - B3) * (50000 >> oss));
     db0:	8d 85       	ldd	r24, Y+13	; 0x0d
     db2:	9e 85       	ldd	r25, Y+14	; 0x0e
     db4:	af 85       	ldd	r26, Y+15	; 0x0f
     db6:	b8 89       	ldd	r27, Y+16	; 0x10
     db8:	40 91 a4 00 	lds	r20, 0x00A4
     dbc:	50 91 a5 00 	lds	r21, 0x00A5
     dc0:	60 91 a6 00 	lds	r22, 0x00A6
     dc4:	70 91 a7 00 	lds	r23, 0x00A7
     dc8:	9a 01       	movw	r18, r20
     dca:	ab 01       	movw	r20, r22
     dcc:	28 1b       	sub	r18, r24
     dce:	39 0b       	sbc	r19, r25
     dd0:	4a 0b       	sbc	r20, r26
     dd2:	5b 0b       	sbc	r21, r27
     dd4:	aa e6       	ldi	r26, 0x6A	; 106
     dd6:	b8 e1       	ldi	r27, 0x18	; 24
     dd8:	0e 94 c2 2b 	call	0x5784	; 0x5784 <__muluhisi3>
     ddc:	6d a3       	std	Y+37, r22	; 0x25
     dde:	7e a3       	std	Y+38, r23	; 0x26
     de0:	8f a3       	std	Y+39, r24	; 0x27
     de2:	98 a7       	std	Y+40, r25	; 0x28
	p = B7 < 0x80000000 ? (B7 * 2) / B4 : (B7 / B4) * 2;	
     de4:	8d a1       	ldd	r24, Y+37	; 0x25
     de6:	9e a1       	ldd	r25, Y+38	; 0x26
     de8:	af a1       	ldd	r26, Y+39	; 0x27
     dea:	b8 a5       	ldd	r27, Y+40	; 0x28
     dec:	bb 23       	and	r27, r27
     dee:	8c f0       	brlt	.+34     	; 0xe12 <BMP085_Calculate+0x3ca>
     df0:	8d a1       	ldd	r24, Y+37	; 0x25
     df2:	9e a1       	ldd	r25, Y+38	; 0x26
     df4:	af a1       	ldd	r26, Y+39	; 0x27
     df6:	b8 a5       	ldd	r27, Y+40	; 0x28
     df8:	29 a1       	ldd	r18, Y+33	; 0x21
     dfa:	3a a1       	ldd	r19, Y+34	; 0x22
     dfc:	4b a1       	ldd	r20, Y+35	; 0x23
     dfe:	5c a1       	ldd	r21, Y+36	; 0x24
     e00:	bc 01       	movw	r22, r24
     e02:	cd 01       	movw	r24, r26
     e04:	66 0f       	add	r22, r22
     e06:	77 1f       	adc	r23, r23
     e08:	88 1f       	adc	r24, r24
     e0a:	99 1f       	adc	r25, r25
     e0c:	0e 94 78 2b 	call	0x56f0	; 0x56f0 <__udivmodsi4>
     e10:	0e c0       	rjmp	.+28     	; 0xe2e <BMP085_Calculate+0x3e6>
     e12:	6d a1       	ldd	r22, Y+37	; 0x25
     e14:	7e a1       	ldd	r23, Y+38	; 0x26
     e16:	8f a1       	ldd	r24, Y+39	; 0x27
     e18:	98 a5       	ldd	r25, Y+40	; 0x28
     e1a:	29 a1       	ldd	r18, Y+33	; 0x21
     e1c:	3a a1       	ldd	r19, Y+34	; 0x22
     e1e:	4b a1       	ldd	r20, Y+35	; 0x23
     e20:	5c a1       	ldd	r21, Y+36	; 0x24
     e22:	0e 94 78 2b 	call	0x56f0	; 0x56f0 <__udivmodsi4>
     e26:	22 0f       	add	r18, r18
     e28:	33 1f       	adc	r19, r19
     e2a:	44 1f       	adc	r20, r20
     e2c:	55 1f       	adc	r21, r21
     e2e:	29 8f       	std	Y+25, r18	; 0x19
     e30:	3a 8f       	std	Y+26, r19	; 0x1a
     e32:	4b 8f       	std	Y+27, r20	; 0x1b
     e34:	5c 8f       	std	Y+28, r21	; 0x1c
	X1 = (p >> 8) * (p >> 8);
     e36:	49 8d       	ldd	r20, Y+25	; 0x19
     e38:	5a 8d       	ldd	r21, Y+26	; 0x1a
     e3a:	6b 8d       	ldd	r22, Y+27	; 0x1b
     e3c:	7c 8d       	ldd	r23, Y+28	; 0x1c
     e3e:	89 8d       	ldd	r24, Y+25	; 0x19
     e40:	9a 8d       	ldd	r25, Y+26	; 0x1a
     e42:	ab 8d       	ldd	r26, Y+27	; 0x1b
     e44:	bc 8d       	ldd	r27, Y+28	; 0x1c
     e46:	25 2f       	mov	r18, r21
     e48:	36 2f       	mov	r19, r22
     e4a:	47 2f       	mov	r20, r23
     e4c:	55 27       	eor	r21, r21
     e4e:	47 fd       	sbrc	r20, 7
     e50:	5a 95       	dec	r21
     e52:	69 2f       	mov	r22, r25
     e54:	7a 2f       	mov	r23, r26
     e56:	8b 2f       	mov	r24, r27
     e58:	99 27       	eor	r25, r25
     e5a:	87 fd       	sbrc	r24, 7
     e5c:	9a 95       	dec	r25
     e5e:	0e 94 68 2b 	call	0x56d0	; 0x56d0 <__mulsi3>
     e62:	69 83       	std	Y+1, r22	; 0x01
     e64:	7a 83       	std	Y+2, r23	; 0x02
     e66:	8b 83       	std	Y+3, r24	; 0x03
     e68:	9c 83       	std	Y+4, r25	; 0x04
	X1 = (X1 * 3038) >> 16;
     e6a:	29 81       	ldd	r18, Y+1	; 0x01
     e6c:	3a 81       	ldd	r19, Y+2	; 0x02
     e6e:	4b 81       	ldd	r20, Y+3	; 0x03
     e70:	5c 81       	ldd	r21, Y+4	; 0x04
     e72:	ae ed       	ldi	r26, 0xDE	; 222
     e74:	bb e0       	ldi	r27, 0x0B	; 11
     e76:	0e 94 c2 2b 	call	0x5784	; 0x5784 <__muluhisi3>
     e7a:	bb 27       	eor	r27, r27
     e7c:	97 fd       	sbrc	r25, 7
     e7e:	b0 95       	com	r27
     e80:	ab 2f       	mov	r26, r27
     e82:	89 83       	std	Y+1, r24	; 0x01
     e84:	9a 83       	std	Y+2, r25	; 0x02
     e86:	ab 83       	std	Y+3, r26	; 0x03
     e88:	bc 83       	std	Y+4, r27	; 0x04
	X2 = (-7357 * p) >> 16;
     e8a:	29 8d       	ldd	r18, Y+25	; 0x19
     e8c:	3a 8d       	ldd	r19, Y+26	; 0x1a
     e8e:	4b 8d       	ldd	r20, Y+27	; 0x1b
     e90:	5c 8d       	ldd	r21, Y+28	; 0x1c
     e92:	a3 e4       	ldi	r26, 0x43	; 67
     e94:	b3 ee       	ldi	r27, 0xE3	; 227
     e96:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <__mulohisi3>
     e9a:	bb 27       	eor	r27, r27
     e9c:	97 fd       	sbrc	r25, 7
     e9e:	b0 95       	com	r27
     ea0:	ab 2f       	mov	r26, r27
     ea2:	8d 83       	std	Y+5, r24	; 0x05
     ea4:	9e 83       	std	Y+6, r25	; 0x06
     ea6:	af 83       	std	Y+7, r26	; 0x07
     ea8:	b8 87       	std	Y+8, r27	; 0x08
				
	P.value = Pa2mmHg * (double_t)(p + ((X1 + X2 + 3791) >> 4));
     eaa:	09 81       	ldd	r16, Y+1	; 0x01
     eac:	1a 81       	ldd	r17, Y+2	; 0x02
     eae:	2b 81       	ldd	r18, Y+3	; 0x03
     eb0:	3c 81       	ldd	r19, Y+4	; 0x04
     eb2:	4d 81       	ldd	r20, Y+5	; 0x05
     eb4:	5e 81       	ldd	r21, Y+6	; 0x06
     eb6:	6f 81       	ldd	r22, Y+7	; 0x07
     eb8:	78 85       	ldd	r23, Y+8	; 0x08
     eba:	89 8d       	ldd	r24, Y+25	; 0x19
     ebc:	9a 8d       	ldd	r25, Y+26	; 0x1a
     ebe:	ab 8d       	ldd	r26, Y+27	; 0x1b
     ec0:	bc 8d       	ldd	r27, Y+28	; 0x1c
     ec2:	40 0f       	add	r20, r16
     ec4:	51 1f       	adc	r21, r17
     ec6:	62 1f       	adc	r22, r18
     ec8:	73 1f       	adc	r23, r19
     eca:	41 53       	subi	r20, 0x31	; 49
     ecc:	51 4f       	sbci	r21, 0xF1	; 241
     ece:	6f 4f       	sbci	r22, 0xFF	; 255
     ed0:	7f 4f       	sbci	r23, 0xFF	; 255
     ed2:	68 94       	set
     ed4:	13 f8       	bld	r1, 3
     ed6:	75 95       	asr	r23
     ed8:	67 95       	ror	r22
     eda:	57 95       	ror	r21
     edc:	47 95       	ror	r20
     ede:	16 94       	lsr	r1
     ee0:	d1 f7       	brne	.-12     	; 0xed6 <BMP085_Calculate+0x48e>
     ee2:	8a 01       	movw	r16, r20
     ee4:	9b 01       	movw	r18, r22
     ee6:	08 0f       	add	r16, r24
     ee8:	19 1f       	adc	r17, r25
     eea:	2a 1f       	adc	r18, r26
     eec:	3b 1f       	adc	r19, r27
     eee:	c9 01       	movw	r24, r18
     ef0:	b8 01       	movw	r22, r16
     ef2:	0e 94 7b 29 	call	0x52f6	; 0x52f6 <__floatsisf>
     ef6:	20 91 95 00 	lds	r18, 0x0095
     efa:	30 91 96 00 	lds	r19, 0x0096
     efe:	40 91 97 00 	lds	r20, 0x0097
     f02:	50 91 98 00 	lds	r21, 0x0098
     f06:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
     f0a:	60 93 dd 02 	sts	0x02DD, r22
     f0e:	70 93 de 02 	sts	0x02DE, r23
     f12:	80 93 df 02 	sts	0x02DF, r24
     f16:	90 93 e0 02 	sts	0x02E0, r25
}
     f1a:	a8 96       	adiw	r28, 0x28	; 40
     f1c:	0f b6       	in	r0, 0x3f	; 63
     f1e:	f8 94       	cli
     f20:	de bf       	out	0x3e, r29	; 62
     f22:	0f be       	out	0x3f, r0	; 63
     f24:	cd bf       	out	0x3d, r28	; 61
     f26:	df 91       	pop	r29
     f28:	cf 91       	pop	r28
     f2a:	1f 91       	pop	r17
     f2c:	0f 91       	pop	r16
     f2e:	ff 90       	pop	r15
     f30:	ef 90       	pop	r14
     f32:	df 90       	pop	r13
     f34:	cf 90       	pop	r12
     f36:	08 95       	ret

00000f38 <BMP085_GetUP>:
	BMP085_Calculate();
	return 0;
}

uint8_t BMP085_GetUP()
{
     f38:	0f 93       	push	r16
     f3a:	1f 93       	push	r17
     f3c:	cf 93       	push	r28
     f3e:	df 93       	push	r29
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
     f44:	2c 97       	sbiw	r28, 0x0c	; 12
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	de bf       	out	0x3e, r29	; 62
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	cd bf       	out	0x3d, r28	; 61
	volatile int32_t LSB, MSB, XLSB;
	
	twi(TWI_START);
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=BMP085_ADDR|I2C_WRITE;
     f56:	8e ee       	ldi	r24, 0xEE	; 238
     f58:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     f5a:	83 e0       	ldi	r24, 0x03	; 3
     f5c:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=0xF6;
     f60:	86 ef       	ldi	r24, 0xF6	; 246
     f62:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     f64:	83 e0       	ldi	r24, 0x03	; 3
     f66:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	twi(TWI_RESTART);
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=BMP085_ADDR|I2C_READ;
     f70:	8f ee       	ldi	r24, 0xEF	; 239
     f72:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
     f74:	83 e0       	ldi	r24, 0x03	; 3
     f76:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	twi(TWI_RECEIVE_ACK);
     f7a:	84 e0       	ldi	r24, 0x04	; 4
     f7c:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	MSB=TWDR;
     f80:	83 b1       	in	r24, 0x03	; 3
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	a0 e0       	ldi	r26, 0x00	; 0
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	8d 83       	std	Y+5, r24	; 0x05
     f8a:	9e 83       	std	Y+6, r25	; 0x06
     f8c:	af 83       	std	Y+7, r26	; 0x07
     f8e:	b8 87       	std	Y+8, r27	; 0x08
	twi(TWI_RECEIVE_ACK);
     f90:	84 e0       	ldi	r24, 0x04	; 4
     f92:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	LSB=TWDR;
     f96:	83 b1       	in	r24, 0x03	; 3
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	a0 e0       	ldi	r26, 0x00	; 0
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	89 83       	std	Y+1, r24	; 0x01
     fa0:	9a 83       	std	Y+2, r25	; 0x02
     fa2:	ab 83       	std	Y+3, r26	; 0x03
     fa4:	bc 83       	std	Y+4, r27	; 0x04
	twi(TWI_RECEIVE_NACK);
     fa6:	85 e0       	ldi	r24, 0x05	; 5
     fa8:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	XLSB=TWDR;
     fac:	83 b1       	in	r24, 0x03	; 3
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	a0 e0       	ldi	r26, 0x00	; 0
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	89 87       	std	Y+9, r24	; 0x09
     fb6:	9a 87       	std	Y+10, r25	; 0x0a
     fb8:	ab 87       	std	Y+11, r26	; 0x0b
     fba:	bc 87       	std	Y+12, r27	; 0x0c
	twi(TWI_STOP);
     fbc:	82 e0       	ldi	r24, 0x02	; 2
     fbe:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	UP = (MSB<<16 | LSB<<8 | XLSB) >> (8 - oss);
     fc2:	0d 81       	ldd	r16, Y+5	; 0x05
     fc4:	1e 81       	ldd	r17, Y+6	; 0x06
     fc6:	2f 81       	ldd	r18, Y+7	; 0x07
     fc8:	38 85       	ldd	r19, Y+8	; 0x08
     fca:	89 81       	ldd	r24, Y+1	; 0x01
     fcc:	9a 81       	ldd	r25, Y+2	; 0x02
     fce:	ab 81       	ldd	r26, Y+3	; 0x03
     fd0:	bc 81       	ldd	r27, Y+4	; 0x04
     fd2:	49 85       	ldd	r20, Y+9	; 0x09
     fd4:	5a 85       	ldd	r21, Y+10	; 0x0a
     fd6:	6b 85       	ldd	r22, Y+11	; 0x0b
     fd8:	7c 85       	ldd	r23, Y+12	; 0x0c
     fda:	98 01       	movw	r18, r16
     fdc:	11 27       	eor	r17, r17
     fde:	00 27       	eor	r16, r16
     fe0:	ba 2f       	mov	r27, r26
     fe2:	a9 2f       	mov	r26, r25
     fe4:	98 2f       	mov	r25, r24
     fe6:	88 27       	eor	r24, r24
     fe8:	80 2b       	or	r24, r16
     fea:	91 2b       	or	r25, r17
     fec:	a2 2b       	or	r26, r18
     fee:	b3 2b       	or	r27, r19
     ff0:	84 2b       	or	r24, r20
     ff2:	95 2b       	or	r25, r21
     ff4:	a6 2b       	or	r26, r22
     ff6:	b7 2b       	or	r27, r23
     ff8:	68 94       	set
     ffa:	14 f8       	bld	r1, 4
     ffc:	b5 95       	asr	r27
     ffe:	a7 95       	ror	r26
    1000:	97 95       	ror	r25
    1002:	87 95       	ror	r24
    1004:	16 94       	lsr	r1
    1006:	d1 f7       	brne	.-12     	; 0xffc <BMP085_GetUP+0xc4>
    1008:	80 93 a4 00 	sts	0x00A4, r24
    100c:	90 93 a5 00 	sts	0x00A5, r25
    1010:	a0 93 a6 00 	sts	0x00A6, r26
    1014:	b0 93 a7 00 	sts	0x00A7, r27
	BMP085_Calculate();
    1018:	0e 94 24 05 	call	0xa48	; 0xa48 <BMP085_Calculate>
	return 0;
}
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	2c 96       	adiw	r28, 0x0c	; 12
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	cd bf       	out	0x3d, r28	; 61
    102a:	df 91       	pop	r29
    102c:	cf 91       	pop	r28
    102e:	1f 91       	pop	r17
    1030:	0f 91       	pop	r16
    1032:	08 95       	ret

00001034 <BMP085_GetUT>:
	twi(TWI_STOP);
	return 0;
}

uint8_t BMP085_GetUT()
{
    1034:	cf 93       	push	r28
    1036:	df 93       	push	r29
	uint8_t LSB, MSB;	
	//_delay_ms(20);
	
	twi(TWI_START);
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=BMP085_ADDR|I2C_WRITE;
    103e:	8e ee       	ldi	r24, 0xEE	; 238
    1040:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
    1042:	83 e0       	ldi	r24, 0x03	; 3
    1044:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=0xF6;
    1048:	86 ef       	ldi	r24, 0xF6	; 246
    104a:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
    104c:	83 e0       	ldi	r24, 0x03	; 3
    104e:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	twi(TWI_RESTART);
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR=BMP085_ADDR|I2C_READ;
    1058:	8f ee       	ldi	r24, 0xEF	; 239
    105a:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
    105c:	83 e0       	ldi	r24, 0x03	; 3
    105e:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	twi(TWI_RECEIVE_ACK);
    1062:	84 e0       	ldi	r24, 0x04	; 4
    1064:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	MSB=TWDR;
    1068:	d3 b1       	in	r29, 0x03	; 3
	twi(TWI_RECEIVE_NACK);
    106a:	85 e0       	ldi	r24, 0x05	; 5
    106c:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	LSB=TWDR;
    1070:	c3 b1       	in	r28, 0x03	; 3
	twi(TWI_STOP);
    1072:	82 e0       	ldi	r24, 0x02	; 2
    1074:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	UT = (int32_t)(MSB<<8 | LSB);	
    1078:	9d 2f       	mov	r25, r29
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	8c 2b       	or	r24, r28
    107e:	aa 27       	eor	r26, r26
    1080:	97 fd       	sbrc	r25, 7
    1082:	a0 95       	com	r26
    1084:	ba 2f       	mov	r27, r26
    1086:	80 93 a0 00 	sts	0x00A0, r24
    108a:	90 93 a1 00 	sts	0x00A1, r25
    108e:	a0 93 a2 00 	sts	0x00A2, r26
    1092:	b0 93 a3 00 	sts	0x00A3, r27
	BMP085_Calculate();
    1096:	0e 94 24 05 	call	0xa48	; 0xa48 <BMP085_Calculate>
	return 0;
}
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	df 91       	pop	r29
    109e:	cf 91       	pop	r28
    10a0:	08 95       	ret

000010a2 <LowPassFilter>:
#include "Filters.h"
#include "GlobalConstants.h"


double_t LowPassFilter(double_t new_data, double_t previous_value, double_t factor)
{
    10a2:	4f 92       	push	r4
    10a4:	5f 92       	push	r5
    10a6:	6f 92       	push	r6
    10a8:	7f 92       	push	r7
    10aa:	8f 92       	push	r8
    10ac:	9f 92       	push	r9
    10ae:	af 92       	push	r10
    10b0:	bf 92       	push	r11
    10b2:	cf 92       	push	r12
    10b4:	df 92       	push	r13
    10b6:	ef 92       	push	r14
    10b8:	ff 92       	push	r15
    10ba:	0f 93       	push	r16
    10bc:	1f 93       	push	r17
    10be:	2b 01       	movw	r4, r22
    10c0:	3c 01       	movw	r6, r24
    10c2:	49 01       	movw	r8, r18
    10c4:	5a 01       	movw	r10, r20
    10c6:	c8 01       	movw	r24, r16
    10c8:	b7 01       	movw	r22, r14
	//return (new_data * factor) + (previous_value * (1.0 - factor));
	float A = Step / (factor + Step);
    10ca:	c0 90 9b 00 	lds	r12, 0x009B
    10ce:	d0 90 9c 00 	lds	r13, 0x009C
    10d2:	e0 90 9d 00 	lds	r14, 0x009D
    10d6:	f0 90 9e 00 	lds	r15, 0x009E
    10da:	a7 01       	movw	r20, r14
    10dc:	96 01       	movw	r18, r12
    10de:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
    10e2:	9b 01       	movw	r18, r22
    10e4:	ac 01       	movw	r20, r24
    10e6:	c7 01       	movw	r24, r14
    10e8:	b6 01       	movw	r22, r12
    10ea:	0e 94 e5 28 	call	0x51ca	; 0x51ca <__divsf3>
    10ee:	c6 2e       	mov	r12, r22
    10f0:	d7 2e       	mov	r13, r23
    10f2:	e8 2e       	mov	r14, r24
    10f4:	f9 2e       	mov	r15, r25
	return new_data * A + previous_value * (1.0 - A);
    10f6:	76 2f       	mov	r23, r22
    10f8:	27 2f       	mov	r18, r23
    10fa:	3d 2d       	mov	r19, r13
    10fc:	4e 2d       	mov	r20, r14
    10fe:	5f 2d       	mov	r21, r15
    1100:	c3 01       	movw	r24, r6
    1102:	b2 01       	movw	r22, r4
    1104:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    1108:	2b 01       	movw	r4, r22
    110a:	3c 01       	movw	r6, r24
    110c:	2c 2d       	mov	r18, r12
    110e:	3d 2d       	mov	r19, r13
    1110:	4e 2d       	mov	r20, r14
    1112:	5f 2d       	mov	r21, r15
    1114:	60 e0       	ldi	r22, 0x00	; 0
    1116:	70 e0       	ldi	r23, 0x00	; 0
    1118:	80 e8       	ldi	r24, 0x80	; 128
    111a:	9f e3       	ldi	r25, 0x3F	; 63
    111c:	0e 94 17 28 	call	0x502e	; 0x502e <__subsf3>
    1120:	a5 01       	movw	r20, r10
    1122:	94 01       	movw	r18, r8
    1124:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    1128:	9b 01       	movw	r18, r22
    112a:	ac 01       	movw	r20, r24
    112c:	c3 01       	movw	r24, r6
    112e:	b2 01       	movw	r22, r4
    1130:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
}
    1134:	1f 91       	pop	r17
    1136:	0f 91       	pop	r16
    1138:	ff 90       	pop	r15
    113a:	ef 90       	pop	r14
    113c:	df 90       	pop	r13
    113e:	cf 90       	pop	r12
    1140:	bf 90       	pop	r11
    1142:	af 90       	pop	r10
    1144:	9f 90       	pop	r9
    1146:	8f 90       	pop	r8
    1148:	7f 90       	pop	r7
    114a:	6f 90       	pop	r6
    114c:	5f 90       	pop	r5
    114e:	4f 90       	pop	r4
    1150:	08 95       	ret

00001152 <ComplemetaryFilter>:
{
	return new_data - LowPassFilter(new_data, previous_value, factor);
}

double_t ComplemetaryFilter(double_t alpha, double_t beta, double_t factor)
{
    1152:	4f 92       	push	r4
    1154:	5f 92       	push	r5
    1156:	6f 92       	push	r6
    1158:	7f 92       	push	r7
    115a:	8f 92       	push	r8
    115c:	9f 92       	push	r9
    115e:	af 92       	push	r10
    1160:	bf 92       	push	r11
    1162:	cf 92       	push	r12
    1164:	df 92       	push	r13
    1166:	ef 92       	push	r14
    1168:	ff 92       	push	r15
    116a:	0f 93       	push	r16
    116c:	1f 93       	push	r17
    116e:	49 01       	movw	r8, r18
    1170:	5a 01       	movw	r10, r20
    1172:	67 01       	movw	r12, r14
    1174:	78 01       	movw	r14, r16
	return factor * alpha + (1.0 - factor) * beta;
    1176:	9b 01       	movw	r18, r22
    1178:	ac 01       	movw	r20, r24
    117a:	c7 01       	movw	r24, r14
    117c:	b6 01       	movw	r22, r12
    117e:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    1182:	2b 01       	movw	r4, r22
    1184:	3c 01       	movw	r6, r24
    1186:	a7 01       	movw	r20, r14
    1188:	96 01       	movw	r18, r12
    118a:	60 e0       	ldi	r22, 0x00	; 0
    118c:	70 e0       	ldi	r23, 0x00	; 0
    118e:	80 e8       	ldi	r24, 0x80	; 128
    1190:	9f e3       	ldi	r25, 0x3F	; 63
    1192:	0e 94 17 28 	call	0x502e	; 0x502e <__subsf3>
    1196:	a5 01       	movw	r20, r10
    1198:	94 01       	movw	r18, r8
    119a:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    119e:	9b 01       	movw	r18, r22
    11a0:	ac 01       	movw	r20, r24
    11a2:	c3 01       	movw	r24, r6
    11a4:	b2 01       	movw	r22, r4
    11a6:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
    11aa:	1f 91       	pop	r17
    11ac:	0f 91       	pop	r16
    11ae:	ff 90       	pop	r15
    11b0:	ef 90       	pop	r14
    11b2:	df 90       	pop	r13
    11b4:	cf 90       	pop	r12
    11b6:	bf 90       	pop	r11
    11b8:	af 90       	pop	r10
    11ba:	9f 90       	pop	r9
    11bc:	8f 90       	pop	r8
    11be:	7f 90       	pop	r7
    11c0:	6f 90       	pop	r6
    11c2:	5f 90       	pop	r5
    11c4:	4f 90       	pop	r4
    11c6:	08 95       	ret

000011c8 <__vector_1>:

uint8_t HCSR04_Timer_Prescaller;
uint16_t Timer0OverflowCount;

ISR(INT0_vect)
{
    11c8:	1f 92       	push	r1
    11ca:	0f 92       	push	r0
    11cc:	0f b6       	in	r0, 0x3f	; 63
    11ce:	0f 92       	push	r0
    11d0:	11 24       	eor	r1, r1
    11d2:	4f 92       	push	r4
    11d4:	5f 92       	push	r5
    11d6:	6f 92       	push	r6
    11d8:	7f 92       	push	r7
    11da:	8f 92       	push	r8
    11dc:	9f 92       	push	r9
    11de:	af 92       	push	r10
    11e0:	bf 92       	push	r11
    11e2:	cf 92       	push	r12
    11e4:	df 92       	push	r13
    11e6:	ef 92       	push	r14
    11e8:	ff 92       	push	r15
    11ea:	2f 93       	push	r18
    11ec:	3f 93       	push	r19
    11ee:	4f 93       	push	r20
    11f0:	5f 93       	push	r21
    11f2:	6f 93       	push	r22
    11f4:	7f 93       	push	r23
    11f6:	8f 93       	push	r24
    11f8:	9f 93       	push	r25
    11fa:	af 93       	push	r26
    11fc:	bf 93       	push	r27
    11fe:	ef 93       	push	r30
    1200:	ff 93       	push	r31
	H.value = (HCSR04_Timer_Prescaller * Step + TCNT0 * (Step / 256.0)) / 58.0;
    1202:	c0 90 9b 00 	lds	r12, 0x009B
    1206:	d0 90 9c 00 	lds	r13, 0x009C
    120a:	e0 90 9d 00 	lds	r14, 0x009D
    120e:	f0 90 9e 00 	lds	r15, 0x009E
    1212:	72 b6       	in	r7, 0x32	; 50
    1214:	60 91 12 01 	lds	r22, 0x0112
    1218:	70 e0       	ldi	r23, 0x00	; 0
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	0e 94 7b 29 	call	0x52f6	; 0x52f6 <__floatsisf>
    1222:	a7 01       	movw	r20, r14
    1224:	96 01       	movw	r18, r12
    1226:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    122a:	4b 01       	movw	r8, r22
    122c:	5c 01       	movw	r10, r24
    122e:	67 2d       	mov	r22, r7
    1230:	70 e0       	ldi	r23, 0x00	; 0
    1232:	80 e0       	ldi	r24, 0x00	; 0
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	0e 94 7b 29 	call	0x52f6	; 0x52f6 <__floatsisf>
    123a:	2b 01       	movw	r4, r22
    123c:	3c 01       	movw	r6, r24
    123e:	20 e0       	ldi	r18, 0x00	; 0
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	40 e8       	ldi	r20, 0x80	; 128
    1244:	5b e3       	ldi	r21, 0x3B	; 59
    1246:	c7 01       	movw	r24, r14
    1248:	b6 01       	movw	r22, r12
    124a:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    124e:	9b 01       	movw	r18, r22
    1250:	ac 01       	movw	r20, r24
    1252:	c3 01       	movw	r24, r6
    1254:	b2 01       	movw	r22, r4
    1256:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    125a:	9b 01       	movw	r18, r22
    125c:	ac 01       	movw	r20, r24
    125e:	c5 01       	movw	r24, r10
    1260:	b4 01       	movw	r22, r8
    1262:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
    1266:	20 e0       	ldi	r18, 0x00	; 0
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	48 e6       	ldi	r20, 0x68	; 104
    126c:	52 e4       	ldi	r21, 0x42	; 66
    126e:	0e 94 e5 28 	call	0x51ca	; 0x51ca <__divsf3>
    1272:	60 93 e1 02 	sts	0x02E1, r22
    1276:	70 93 e2 02 	sts	0x02E2, r23
    127a:	80 93 e3 02 	sts	0x02E3, r24
    127e:	90 93 e4 02 	sts	0x02E4, r25
}
    1282:	ff 91       	pop	r31
    1284:	ef 91       	pop	r30
    1286:	bf 91       	pop	r27
    1288:	af 91       	pop	r26
    128a:	9f 91       	pop	r25
    128c:	8f 91       	pop	r24
    128e:	7f 91       	pop	r23
    1290:	6f 91       	pop	r22
    1292:	5f 91       	pop	r21
    1294:	4f 91       	pop	r20
    1296:	3f 91       	pop	r19
    1298:	2f 91       	pop	r18
    129a:	ff 90       	pop	r15
    129c:	ef 90       	pop	r14
    129e:	df 90       	pop	r13
    12a0:	cf 90       	pop	r12
    12a2:	bf 90       	pop	r11
    12a4:	af 90       	pop	r10
    12a6:	9f 90       	pop	r9
    12a8:	8f 90       	pop	r8
    12aa:	7f 90       	pop	r7
    12ac:	6f 90       	pop	r6
    12ae:	5f 90       	pop	r5
    12b0:	4f 90       	pop	r4
    12b2:	0f 90       	pop	r0
    12b4:	0f be       	out	0x3f, r0	; 63
    12b6:	0f 90       	pop	r0
    12b8:	1f 90       	pop	r1
    12ba:	18 95       	reti

000012bc <INT0_Init>:

void INT0_Init()
{
	MCUCR = 1<<ISC01 | 1<<ISC00; //растущий фронт
    12bc:	83 e0       	ldi	r24, 0x03	; 3
    12be:	85 bf       	out	0x35, r24	; 53
	GICR = 1<<INT0; 
    12c0:	80 e4       	ldi	r24, 0x40	; 64
    12c2:	8b bf       	out	0x3b, r24	; 59
    12c4:	08 95       	ret

000012c6 <HMC5883L_Init>:
 *  Author: Слава
 */ 
#include "HMC5883L.h"

uint8_t HMC5883L_Init()
{
    12c6:	cf 93       	push	r28
	twi(TWI_START);
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR = HMC5883L_ADDR | I2C_WRITE;
    12ce:	cc e3       	ldi	r28, 0x3C	; 60
    12d0:	c3 b9       	out	0x03, r28	; 3
	twi(TWI_TRANSMIT);
    12d2:	83 e0       	ldi	r24, 0x03	; 3
    12d4:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR = 0x00;	//CRA
    12d8:	13 b8       	out	0x03, r1	; 3
	twi(TWI_TRANSMIT);
    12da:	83 e0       	ldi	r24, 0x03	; 3
    12dc:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR = 0b01110000;	//8-average, 15 Hz default, normal measurement
    12e0:	80 e7       	ldi	r24, 0x70	; 112
    12e2:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
    12e4:	83 e0       	ldi	r24, 0x03	; 3
    12e6:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	twi(TWI_STOP);
    12ea:	82 e0       	ldi	r24, 0x02	; 2
    12ec:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	
	twi(TWI_START);
    12f0:	80 e0       	ldi	r24, 0x00	; 0
    12f2:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR = HMC5883L_ADDR | I2C_WRITE;
    12f6:	c3 b9       	out	0x03, r28	; 3
	twi(TWI_TRANSMIT);
    12f8:	83 e0       	ldi	r24, 0x03	; 3
    12fa:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR = 0x01;	//CRB
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
    1302:	83 e0       	ldi	r24, 0x03	; 3
    1304:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR = 0b00100000;	//Gain=5, or any other desired gain
    1308:	80 e2       	ldi	r24, 0x20	; 32
    130a:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
    130c:	83 e0       	ldi	r24, 0x03	; 3
    130e:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	twi(TWI_STOP);
    1312:	82 e0       	ldi	r24, 0x02	; 2
    1314:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	
	twi(TWI_START);
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR = HMC5883L_ADDR | I2C_WRITE;
    131e:	c3 b9       	out	0x03, r28	; 3
	twi(TWI_TRANSMIT);
    1320:	83 e0       	ldi	r24, 0x03	; 3
    1322:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR = 0x02;	//Mode
    1326:	82 e0       	ldi	r24, 0x02	; 2
    1328:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
    132a:	83 e0       	ldi	r24, 0x03	; 3
    132c:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR = 0b10000000;	//Continuous-measurement mode
    1330:	80 e8       	ldi	r24, 0x80	; 128
    1332:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
    1334:	83 e0       	ldi	r24, 0x03	; 3
    1336:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	twi(TWI_STOP);
    133a:	82 e0       	ldi	r24, 0x02	; 2
    133c:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	
	return 0;
}
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	cf 91       	pop	r28
    1344:	08 95       	ret

00001346 <HMC5883L_Poll>:

uint8_t HMC5883L_Poll()
{
    1346:	ef 92       	push	r14
    1348:	ff 92       	push	r15
    134a:	0f 93       	push	r16
    134c:	1f 93       	push	r17
    134e:	cf 93       	push	r28
    1350:	df 93       	push	r29
	uint8_t MSBX, MSBY, MSBZ, LSBX, LSBY, LSBZ;

	twi(TWI_START);
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR = HMC5883L_ADDR | I2C_WRITE;
    1358:	8c e3       	ldi	r24, 0x3C	; 60
    135a:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
    135c:	83 e0       	ldi	r24, 0x03	; 3
    135e:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR = 0x03;
    1362:	83 e0       	ldi	r24, 0x03	; 3
    1364:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
    1366:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	twi(TWI_RESTART);
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR = HMC5883L_ADDR | I2C_READ;
    1370:	8d e3       	ldi	r24, 0x3D	; 61
    1372:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
    1374:	83 e0       	ldi	r24, 0x03	; 3
    1376:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	twi(TWI_RECEIVE_ACK);	
    137a:	84 e0       	ldi	r24, 0x04	; 4
    137c:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	MSBX = TWDR;
    1380:	e3 b0       	in	r14, 0x03	; 3
	twi(TWI_RECEIVE_ACK);
    1382:	84 e0       	ldi	r24, 0x04	; 4
    1384:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	LSBX = TWDR;
    1388:	f3 b0       	in	r15, 0x03	; 3
	twi(TWI_RECEIVE_ACK);
    138a:	84 e0       	ldi	r24, 0x04	; 4
    138c:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	MSBZ = TWDR;
    1390:	d3 b1       	in	r29, 0x03	; 3
	twi(TWI_RECEIVE_ACK);	
    1392:	84 e0       	ldi	r24, 0x04	; 4
    1394:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	LSBZ = TWDR;
    1398:	c3 b1       	in	r28, 0x03	; 3
	twi(TWI_RECEIVE_ACK);
    139a:	84 e0       	ldi	r24, 0x04	; 4
    139c:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	MSBY =TWDR;
    13a0:	03 b1       	in	r16, 0x03	; 3
	twi(TWI_RECEIVE_NACK);
    13a2:	85 e0       	ldi	r24, 0x05	; 5
    13a4:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	LSBY = TWDR;
    13a8:	13 b1       	in	r17, 0x03	; 3
	twi(TWI_STOP);
    13aa:	82 e0       	ldi	r24, 0x02	; 2
    13ac:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	
	B_x.value = (double)(MSBX << 8 | LSBX) / 1370.0 + coeffs[MAG_OffsetX].value;
    13b0:	7e 2d       	mov	r23, r14
    13b2:	60 e0       	ldi	r22, 0x00	; 0
    13b4:	6f 29       	or	r22, r15
    13b6:	88 27       	eor	r24, r24
    13b8:	77 fd       	sbrc	r23, 7
    13ba:	80 95       	com	r24
    13bc:	98 2f       	mov	r25, r24
    13be:	0e 94 7b 29 	call	0x52f6	; 0x52f6 <__floatsisf>
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	30 e4       	ldi	r19, 0x40	; 64
    13c6:	4b ea       	ldi	r20, 0xAB	; 171
    13c8:	54 e4       	ldi	r21, 0x44	; 68
    13ca:	0e 94 e5 28 	call	0x51ca	; 0x51ca <__divsf3>
    13ce:	20 91 b1 02 	lds	r18, 0x02B1
    13d2:	30 91 b2 02 	lds	r19, 0x02B2
    13d6:	40 91 b3 02 	lds	r20, 0x02B3
    13da:	50 91 b4 02 	lds	r21, 0x02B4
    13de:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
    13e2:	60 93 3d 03 	sts	0x033D, r22
    13e6:	70 93 3e 03 	sts	0x033E, r23
    13ea:	80 93 3f 03 	sts	0x033F, r24
    13ee:	90 93 40 03 	sts	0x0340, r25
	B_y.value = (double)(MSBY << 8 | LSBY) / 1370.0 + coeffs[MAG_OffsetY].value;
    13f2:	70 2f       	mov	r23, r16
    13f4:	60 e0       	ldi	r22, 0x00	; 0
    13f6:	61 2b       	or	r22, r17
    13f8:	88 27       	eor	r24, r24
    13fa:	77 fd       	sbrc	r23, 7
    13fc:	80 95       	com	r24
    13fe:	98 2f       	mov	r25, r24
    1400:	0e 94 7b 29 	call	0x52f6	; 0x52f6 <__floatsisf>
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	30 e4       	ldi	r19, 0x40	; 64
    1408:	4b ea       	ldi	r20, 0xAB	; 171
    140a:	54 e4       	ldi	r21, 0x44	; 68
    140c:	0e 94 e5 28 	call	0x51ca	; 0x51ca <__divsf3>
    1410:	20 91 b5 02 	lds	r18, 0x02B5
    1414:	30 91 b6 02 	lds	r19, 0x02B6
    1418:	40 91 b7 02 	lds	r20, 0x02B7
    141c:	50 91 b8 02 	lds	r21, 0x02B8
    1420:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
    1424:	60 93 41 03 	sts	0x0341, r22
    1428:	70 93 42 03 	sts	0x0342, r23
    142c:	80 93 43 03 	sts	0x0343, r24
    1430:	90 93 44 03 	sts	0x0344, r25
	B_z.value = (double)(MSBZ << 8 | LSBZ) / 1370.0	+ coeffs[MAG_OffsetZ].value;
    1434:	7d 2f       	mov	r23, r29
    1436:	60 e0       	ldi	r22, 0x00	; 0
    1438:	6c 2b       	or	r22, r28
    143a:	88 27       	eor	r24, r24
    143c:	77 fd       	sbrc	r23, 7
    143e:	80 95       	com	r24
    1440:	98 2f       	mov	r25, r24
    1442:	0e 94 7b 29 	call	0x52f6	; 0x52f6 <__floatsisf>
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	30 e4       	ldi	r19, 0x40	; 64
    144a:	4b ea       	ldi	r20, 0xAB	; 171
    144c:	54 e4       	ldi	r21, 0x44	; 68
    144e:	0e 94 e5 28 	call	0x51ca	; 0x51ca <__divsf3>
    1452:	20 91 b9 02 	lds	r18, 0x02B9
    1456:	30 91 ba 02 	lds	r19, 0x02BA
    145a:	40 91 bb 02 	lds	r20, 0x02BB
    145e:	50 91 bc 02 	lds	r21, 0x02BC
    1462:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
    1466:	60 93 45 03 	sts	0x0345, r22
    146a:	70 93 46 03 	sts	0x0346, r23
    146e:	80 93 47 03 	sts	0x0347, r24
    1472:	90 93 48 03 	sts	0x0348, r25
	
	return 0;
}
    1476:	80 e0       	ldi	r24, 0x00	; 0
    1478:	df 91       	pop	r29
    147a:	cf 91       	pop	r28
    147c:	1f 91       	pop	r17
    147e:	0f 91       	pop	r16
    1480:	ff 90       	pop	r15
    1482:	ef 90       	pop	r14
    1484:	08 95       	ret

00001486 <Correction360>:

double_t Correction360(double_t arg)
{
    1486:	0f 93       	push	r16
    1488:	1f 93       	push	r17
    148a:	cf 93       	push	r28
    148c:	df 93       	push	r29
    148e:	06 2f       	mov	r16, r22
    1490:	17 2f       	mov	r17, r23
    1492:	d8 2f       	mov	r29, r24
    1494:	c9 2f       	mov	r28, r25
	while(arg >= 360)
    1496:	20 e0       	ldi	r18, 0x00	; 0
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	44 eb       	ldi	r20, 0xB4	; 180
    149c:	53 e4       	ldi	r21, 0x43	; 67
    149e:	0e 94 89 2a 	call	0x5512	; 0x5512 <__gesf2>
    14a2:	88 23       	and	r24, r24
    14a4:	b4 f0       	brlt	.+44     	; 0x14d2 <Correction360+0x4c>
	{
		arg -= 360;
    14a6:	20 e0       	ldi	r18, 0x00	; 0
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	44 eb       	ldi	r20, 0xB4	; 180
    14ac:	53 e4       	ldi	r21, 0x43	; 67
    14ae:	60 2f       	mov	r22, r16
    14b0:	71 2f       	mov	r23, r17
    14b2:	8d 2f       	mov	r24, r29
    14b4:	9c 2f       	mov	r25, r28
    14b6:	0e 94 17 28 	call	0x502e	; 0x502e <__subsf3>
    14ba:	06 2f       	mov	r16, r22
    14bc:	17 2f       	mov	r17, r23
    14be:	d8 2f       	mov	r29, r24
    14c0:	c9 2f       	mov	r28, r25
	return 0;
}

double_t Correction360(double_t arg)
{
	while(arg >= 360)
    14c2:	20 e0       	ldi	r18, 0x00	; 0
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	44 eb       	ldi	r20, 0xB4	; 180
    14c8:	53 e4       	ldi	r21, 0x43	; 67
    14ca:	0e 94 89 2a 	call	0x5512	; 0x5512 <__gesf2>
    14ce:	88 23       	and	r24, r24
    14d0:	54 f7       	brge	.-44     	; 0x14a6 <Correction360+0x20>
	{
		arg -= 360;
	}
	
	while(arg < 0)
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	a9 01       	movw	r20, r18
    14d8:	60 2f       	mov	r22, r16
    14da:	71 2f       	mov	r23, r17
    14dc:	8d 2f       	mov	r24, r29
    14de:	9c 2f       	mov	r25, r28
    14e0:	0e 94 de 28 	call	0x51bc	; 0x51bc <__cmpsf2>
    14e4:	88 23       	and	r24, r24
    14e6:	ac f4       	brge	.+42     	; 0x1512 <Correction360+0x8c>
	{
		arg += 360;
    14e8:	20 e0       	ldi	r18, 0x00	; 0
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	44 eb       	ldi	r20, 0xB4	; 180
    14ee:	53 e4       	ldi	r21, 0x43	; 67
    14f0:	60 2f       	mov	r22, r16
    14f2:	71 2f       	mov	r23, r17
    14f4:	8d 2f       	mov	r24, r29
    14f6:	9c 2f       	mov	r25, r28
    14f8:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
    14fc:	06 2f       	mov	r16, r22
    14fe:	17 2f       	mov	r17, r23
    1500:	d8 2f       	mov	r29, r24
    1502:	c9 2f       	mov	r28, r25
	while(arg >= 360)
	{
		arg -= 360;
	}
	
	while(arg < 0)
    1504:	20 e0       	ldi	r18, 0x00	; 0
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	a9 01       	movw	r20, r18
    150a:	0e 94 de 28 	call	0x51bc	; 0x51bc <__cmpsf2>
    150e:	88 23       	and	r24, r24
    1510:	5c f3       	brlt	.-42     	; 0x14e8 <Correction360+0x62>
	{
		arg += 360;
	}
	
	return arg;
}
    1512:	60 2f       	mov	r22, r16
    1514:	71 2f       	mov	r23, r17
    1516:	8d 2f       	mov	r24, r29
    1518:	9c 2f       	mov	r25, r28
    151a:	df 91       	pop	r29
    151c:	cf 91       	pop	r28
    151e:	1f 91       	pop	r17
    1520:	0f 91       	pop	r16
    1522:	08 95       	ret

00001524 <Course_Calc>:

uint8_t Course_Calc()
{
    1524:	4f 92       	push	r4
    1526:	5f 92       	push	r5
    1528:	6f 92       	push	r6
    152a:	7f 92       	push	r7
    152c:	8f 92       	push	r8
    152e:	9f 92       	push	r9
    1530:	af 92       	push	r10
    1532:	bf 92       	push	r11
    1534:	cf 92       	push	r12
    1536:	df 92       	push	r13
    1538:	ef 92       	push	r14
    153a:	ff 92       	push	r15
    153c:	cf 93       	push	r28
    153e:	df 93       	push	r29
    1540:	cd b7       	in	r28, 0x3d	; 61
    1542:	de b7       	in	r29, 0x3e	; 62
    1544:	c0 56       	subi	r28, 0x60	; 96
    1546:	d1 09       	sbc	r29, r1
    1548:	0f b6       	in	r0, 0x3f	; 63
    154a:	f8 94       	cli
    154c:	de bf       	out	0x3e, r29	; 62
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	cd bf       	out	0x3d, r28	; 61
		double_t Y;
		double_t Z;	
	}vector;
	
	//Угол отклонения от вертикали в радианах
	Q = (-1.0) * atan((sqrt(k_x.value * k_x.value + k_y.value * k_y.value)/(k_z.value)));
    1552:	c0 90 01 03 	lds	r12, 0x0301
    1556:	d0 90 02 03 	lds	r13, 0x0302
    155a:	e0 90 03 03 	lds	r14, 0x0303
    155e:	f0 90 04 03 	lds	r15, 0x0304
    1562:	80 90 05 03 	lds	r8, 0x0305
    1566:	90 90 06 03 	lds	r9, 0x0306
    156a:	a0 90 07 03 	lds	r10, 0x0307
    156e:	b0 90 08 03 	lds	r11, 0x0308
    1572:	a7 01       	movw	r20, r14
    1574:	96 01       	movw	r18, r12
    1576:	c7 01       	movw	r24, r14
    1578:	b6 01       	movw	r22, r12
    157a:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    157e:	2b 01       	movw	r4, r22
    1580:	3c 01       	movw	r6, r24
    1582:	a5 01       	movw	r20, r10
    1584:	94 01       	movw	r18, r8
    1586:	c5 01       	movw	r24, r10
    1588:	b4 01       	movw	r22, r8
    158a:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    158e:	9b 01       	movw	r18, r22
    1590:	ac 01       	movw	r20, r24
    1592:	c3 01       	movw	r24, r6
    1594:	b2 01       	movw	r22, r4
    1596:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
    159a:	0e 94 01 2b 	call	0x5602	; 0x5602 <sqrt>
    159e:	20 91 09 03 	lds	r18, 0x0309
    15a2:	30 91 0a 03 	lds	r19, 0x030A
    15a6:	40 91 0b 03 	lds	r20, 0x030B
    15aa:	50 91 0c 03 	lds	r21, 0x030C
    15ae:	0e 94 e5 28 	call	0x51ca	; 0x51ca <__divsf3>
    15b2:	0e 94 b6 28 	call	0x516c	; 0x516c <atan>
    15b6:	dc 01       	movw	r26, r24
    15b8:	cb 01       	movw	r24, r22
    15ba:	b0 58       	subi	r27, 0x80	; 128
    15bc:	8d 87       	std	Y+13, r24	; 0x0d
    15be:	9e 87       	std	Y+14, r25	; 0x0e
    15c0:	af 87       	std	Y+15, r26	; 0x0f
    15c2:	b8 8b       	std	Y+16, r27	; 0x10
	//int_Oz.value = Q * 180.0 / M_PI; //УБРАТЬ!!!!!!!!!!!!	
	//Нормаль к вектору (kx, ky, 0) - ось вращения
	volatile vector n;
	
	n.X = k_y.value;
    15c4:	8d 8e       	std	Y+29, r8	; 0x1d
    15c6:	9e 8e       	std	Y+30, r9	; 0x1e
    15c8:	af 8e       	std	Y+31, r10	; 0x1f
    15ca:	b8 a2       	std	Y+32, r11	; 0x20
	n.Y = (-1.0) * k_x.value;
    15cc:	f7 fa       	bst	r15, 7
    15ce:	f0 94       	com	r15
    15d0:	f7 f8       	bld	r15, 7
    15d2:	f0 94       	com	r15
    15d4:	c9 a2       	std	Y+33, r12	; 0x21
    15d6:	da a2       	std	Y+34, r13	; 0x22
    15d8:	eb a2       	std	Y+35, r14	; 0x23
    15da:	fc a2       	std	Y+36, r15	; 0x24
	n.Z = 0.0;	
    15dc:	1d a2       	std	Y+37, r1	; 0x25
    15de:	1e a2       	std	Y+38, r1	; 0x26
    15e0:	1f a2       	std	Y+39, r1	; 0x27
    15e2:	18 a6       	std	Y+40, r1	; 0x28
	
	//Нормализуем вектор нормали
	double_t n_L = sqrt(n.X*n.X+n.Y*n.Y);
    15e4:	6d 8d       	ldd	r22, Y+29	; 0x1d
    15e6:	7e 8d       	ldd	r23, Y+30	; 0x1e
    15e8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15ea:	98 a1       	ldd	r25, Y+32	; 0x20
    15ec:	2d 8d       	ldd	r18, Y+29	; 0x1d
    15ee:	3e 8d       	ldd	r19, Y+30	; 0x1e
    15f0:	4f 8d       	ldd	r20, Y+31	; 0x1f
    15f2:	58 a1       	ldd	r21, Y+32	; 0x20
    15f4:	89 a0       	ldd	r8, Y+33	; 0x21
    15f6:	9a a0       	ldd	r9, Y+34	; 0x22
    15f8:	ab a0       	ldd	r10, Y+35	; 0x23
    15fa:	bc a0       	ldd	r11, Y+36	; 0x24
    15fc:	49 a0       	ldd	r4, Y+33	; 0x21
    15fe:	5a a0       	ldd	r5, Y+34	; 0x22
    1600:	6b a0       	ldd	r6, Y+35	; 0x23
    1602:	7c a0       	ldd	r7, Y+36	; 0x24
    1604:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    1608:	6b 01       	movw	r12, r22
    160a:	7c 01       	movw	r14, r24
    160c:	a3 01       	movw	r20, r6
    160e:	92 01       	movw	r18, r4
    1610:	c5 01       	movw	r24, r10
    1612:	b4 01       	movw	r22, r8
    1614:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    1618:	9b 01       	movw	r18, r22
    161a:	ac 01       	movw	r20, r24
    161c:	c7 01       	movw	r24, r14
    161e:	b6 01       	movw	r22, r12
    1620:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
    1624:	0e 94 01 2b 	call	0x5602	; 0x5602 <sqrt>
    1628:	6b 01       	movw	r12, r22
    162a:	7c 01       	movw	r14, r24
	n.X /= n_L;
    162c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    162e:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1630:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1632:	98 a1       	ldd	r25, Y+32	; 0x20
    1634:	a7 01       	movw	r20, r14
    1636:	96 01       	movw	r18, r12
    1638:	0e 94 e5 28 	call	0x51ca	; 0x51ca <__divsf3>
    163c:	46 2f       	mov	r20, r22
    163e:	57 2f       	mov	r21, r23
    1640:	68 2f       	mov	r22, r24
    1642:	79 2f       	mov	r23, r25
    1644:	4d 8f       	std	Y+29, r20	; 0x1d
    1646:	5e 8f       	std	Y+30, r21	; 0x1e
    1648:	6f 8f       	std	Y+31, r22	; 0x1f
    164a:	78 a3       	std	Y+32, r23	; 0x20
	n.Y /= n_L;
    164c:	69 a1       	ldd	r22, Y+33	; 0x21
    164e:	7a a1       	ldd	r23, Y+34	; 0x22
    1650:	8b a1       	ldd	r24, Y+35	; 0x23
    1652:	9c a1       	ldd	r25, Y+36	; 0x24
    1654:	a7 01       	movw	r20, r14
    1656:	96 01       	movw	r18, r12
    1658:	0e 94 e5 28 	call	0x51ca	; 0x51ca <__divsf3>
    165c:	46 2f       	mov	r20, r22
    165e:	57 2f       	mov	r21, r23
    1660:	68 2f       	mov	r22, r24
    1662:	79 2f       	mov	r23, r25
    1664:	49 a3       	std	Y+33, r20	; 0x21
    1666:	5a a3       	std	Y+34, r21	; 0x22
    1668:	6b a3       	std	Y+35, r22	; 0x23
    166a:	7c a3       	std	Y+36, r23	; 0x24
	
	B_x_read = B_x.value;
    166c:	80 91 3d 03 	lds	r24, 0x033D
    1670:	90 91 3e 03 	lds	r25, 0x033E
    1674:	a0 91 3f 03 	lds	r26, 0x033F
    1678:	b0 91 40 03 	lds	r27, 0x0340
    167c:	89 8b       	std	Y+17, r24	; 0x11
    167e:	9a 8b       	std	Y+18, r25	; 0x12
    1680:	ab 8b       	std	Y+19, r26	; 0x13
    1682:	bc 8b       	std	Y+20, r27	; 0x14
	B_y_read = B_y.value;
    1684:	80 91 41 03 	lds	r24, 0x0341
    1688:	90 91 42 03 	lds	r25, 0x0342
    168c:	a0 91 43 03 	lds	r26, 0x0343
    1690:	b0 91 44 03 	lds	r27, 0x0344
    1694:	8d 8b       	std	Y+21, r24	; 0x15
    1696:	9e 8b       	std	Y+22, r25	; 0x16
    1698:	af 8b       	std	Y+23, r26	; 0x17
    169a:	b8 8f       	std	Y+24, r27	; 0x18
	B_z_read = B_z.value;       
    169c:	80 91 45 03 	lds	r24, 0x0345
    16a0:	90 91 46 03 	lds	r25, 0x0346
    16a4:	a0 91 47 03 	lds	r26, 0x0347
    16a8:	b0 91 48 03 	lds	r27, 0x0348
    16ac:	89 8f       	std	Y+25, r24	; 0x19
    16ae:	9a 8f       	std	Y+26, r25	; 0x1a
    16b0:	ab 8f       	std	Y+27, r26	; 0x1b
    16b2:	bc 8f       	std	Y+28, r27	; 0x1c

	//Поворот вектора В. Компенсация отклонения магнетометра от вертикали
	Bx = B_x_read * (cos(Q) + (1.0 - cos(Q)) * (n.X * n.X)) + B_y_read * ((1.0 - cos(Q)) * n.X * n.Y - (sin(Q)) * n.Z) + B_z_read * ((1.0 - cos(Q)) * n.X * n.Z + sin(Q) * n.Y);
    16b4:	6d 85       	ldd	r22, Y+13	; 0x0d
    16b6:	7e 85       	ldd	r23, Y+14	; 0x0e
    16b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    16ba:	98 89       	ldd	r25, Y+16	; 0x10
    16bc:	0e 94 e2 28 	call	0x51c4	; 0x51c4 <cos>
    16c0:	4b 01       	movw	r8, r22
    16c2:	5c 01       	movw	r10, r24
    16c4:	6d 85       	ldd	r22, Y+13	; 0x0d
    16c6:	7e 85       	ldd	r23, Y+14	; 0x0e
    16c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    16ca:	98 89       	ldd	r25, Y+16	; 0x10
    16cc:	0e 94 e2 28 	call	0x51c4	; 0x51c4 <cos>
    16d0:	6b 01       	movw	r12, r22
    16d2:	7c 01       	movw	r14, r24
    16d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16d6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16d8:	af 8d       	ldd	r26, Y+31	; 0x1f
    16da:	b8 a1       	ldd	r27, Y+32	; 0x20
    16dc:	89 a7       	std	Y+41, r24	; 0x29
    16de:	9a a7       	std	Y+42, r25	; 0x2a
    16e0:	ab a7       	std	Y+43, r26	; 0x2b
    16e2:	bc a7       	std	Y+44, r27	; 0x2c
    16e4:	4d 8c       	ldd	r4, Y+29	; 0x1d
    16e6:	5e 8c       	ldd	r5, Y+30	; 0x1e
    16e8:	6f 8c       	ldd	r6, Y+31	; 0x1f
    16ea:	78 a0       	ldd	r7, Y+32	; 0x20
    16ec:	89 89       	ldd	r24, Y+17	; 0x11
    16ee:	9a 89       	ldd	r25, Y+18	; 0x12
    16f0:	ab 89       	ldd	r26, Y+19	; 0x13
    16f2:	bc 89       	ldd	r27, Y+20	; 0x14
    16f4:	8d a7       	std	Y+45, r24	; 0x2d
    16f6:	9e a7       	std	Y+46, r25	; 0x2e
    16f8:	af a7       	std	Y+47, r26	; 0x2f
    16fa:	b8 ab       	std	Y+48, r27	; 0x30
    16fc:	6d 85       	ldd	r22, Y+13	; 0x0d
    16fe:	7e 85       	ldd	r23, Y+14	; 0x0e
    1700:	8f 85       	ldd	r24, Y+15	; 0x0f
    1702:	98 89       	ldd	r25, Y+16	; 0x10
    1704:	0e 94 e2 28 	call	0x51c4	; 0x51c4 <cos>
    1708:	69 ab       	std	Y+49, r22	; 0x31
    170a:	7a ab       	std	Y+50, r23	; 0x32
    170c:	8b ab       	std	Y+51, r24	; 0x33
    170e:	9c ab       	std	Y+52, r25	; 0x34
    1710:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1712:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1714:	af 8d       	ldd	r26, Y+31	; 0x1f
    1716:	b8 a1       	ldd	r27, Y+32	; 0x20
    1718:	8d ab       	std	Y+53, r24	; 0x35
    171a:	9e ab       	std	Y+54, r25	; 0x36
    171c:	af ab       	std	Y+55, r26	; 0x37
    171e:	b8 af       	std	Y+56, r27	; 0x38
    1720:	89 a1       	ldd	r24, Y+33	; 0x21
    1722:	9a a1       	ldd	r25, Y+34	; 0x22
    1724:	ab a1       	ldd	r26, Y+35	; 0x23
    1726:	bc a1       	ldd	r27, Y+36	; 0x24
    1728:	89 af       	std	Y+57, r24	; 0x39
    172a:	9a af       	std	Y+58, r25	; 0x3a
    172c:	ab af       	std	Y+59, r26	; 0x3b
    172e:	bc af       	std	Y+60, r27	; 0x3c
    1730:	6d 85       	ldd	r22, Y+13	; 0x0d
    1732:	7e 85       	ldd	r23, Y+14	; 0x0e
    1734:	8f 85       	ldd	r24, Y+15	; 0x0f
    1736:	98 89       	ldd	r25, Y+16	; 0x10
    1738:	0e 94 f7 2a 	call	0x55ee	; 0x55ee <sin>
    173c:	21 96       	adiw	r28, 0x01	; 1
    173e:	6c af       	std	Y+60, r22	; 0x3c
    1740:	7d af       	std	Y+61, r23	; 0x3d
    1742:	8e af       	std	Y+62, r24	; 0x3e
    1744:	9f af       	std	Y+63, r25	; 0x3f
    1746:	21 97       	sbiw	r28, 0x01	; 1
    1748:	8d a1       	ldd	r24, Y+37	; 0x25
    174a:	9e a1       	ldd	r25, Y+38	; 0x26
    174c:	af a1       	ldd	r26, Y+39	; 0x27
    174e:	b8 a5       	ldd	r27, Y+40	; 0x28
    1750:	25 96       	adiw	r28, 0x05	; 5
    1752:	8c af       	std	Y+60, r24	; 0x3c
    1754:	9d af       	std	Y+61, r25	; 0x3d
    1756:	ae af       	std	Y+62, r26	; 0x3e
    1758:	bf af       	std	Y+63, r27	; 0x3f
    175a:	25 97       	sbiw	r28, 0x05	; 5
    175c:	8d 89       	ldd	r24, Y+21	; 0x15
    175e:	9e 89       	ldd	r25, Y+22	; 0x16
    1760:	af 89       	ldd	r26, Y+23	; 0x17
    1762:	b8 8d       	ldd	r27, Y+24	; 0x18
    1764:	29 96       	adiw	r28, 0x09	; 9
    1766:	8c af       	std	Y+60, r24	; 0x3c
    1768:	9d af       	std	Y+61, r25	; 0x3d
    176a:	ae af       	std	Y+62, r26	; 0x3e
    176c:	bf af       	std	Y+63, r27	; 0x3f
    176e:	29 97       	sbiw	r28, 0x09	; 9
    1770:	6d 85       	ldd	r22, Y+13	; 0x0d
    1772:	7e 85       	ldd	r23, Y+14	; 0x0e
    1774:	8f 85       	ldd	r24, Y+15	; 0x0f
    1776:	98 89       	ldd	r25, Y+16	; 0x10
    1778:	0e 94 e2 28 	call	0x51c4	; 0x51c4 <cos>
    177c:	2d 96       	adiw	r28, 0x0d	; 13
    177e:	6c af       	std	Y+60, r22	; 0x3c
    1780:	7d af       	std	Y+61, r23	; 0x3d
    1782:	8e af       	std	Y+62, r24	; 0x3e
    1784:	9f af       	std	Y+63, r25	; 0x3f
    1786:	2d 97       	sbiw	r28, 0x0d	; 13
    1788:	8d 8d       	ldd	r24, Y+29	; 0x1d
    178a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    178c:	af 8d       	ldd	r26, Y+31	; 0x1f
    178e:	b8 a1       	ldd	r27, Y+32	; 0x20
    1790:	61 96       	adiw	r28, 0x11	; 17
    1792:	8c af       	std	Y+60, r24	; 0x3c
    1794:	9d af       	std	Y+61, r25	; 0x3d
    1796:	ae af       	std	Y+62, r26	; 0x3e
    1798:	bf af       	std	Y+63, r27	; 0x3f
    179a:	61 97       	sbiw	r28, 0x11	; 17
    179c:	8d a1       	ldd	r24, Y+37	; 0x25
    179e:	9e a1       	ldd	r25, Y+38	; 0x26
    17a0:	af a1       	ldd	r26, Y+39	; 0x27
    17a2:	b8 a5       	ldd	r27, Y+40	; 0x28
    17a4:	65 96       	adiw	r28, 0x15	; 21
    17a6:	8c af       	std	Y+60, r24	; 0x3c
    17a8:	9d af       	std	Y+61, r25	; 0x3d
    17aa:	ae af       	std	Y+62, r26	; 0x3e
    17ac:	bf af       	std	Y+63, r27	; 0x3f
    17ae:	65 97       	sbiw	r28, 0x15	; 21
    17b0:	6d 85       	ldd	r22, Y+13	; 0x0d
    17b2:	7e 85       	ldd	r23, Y+14	; 0x0e
    17b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    17b6:	98 89       	ldd	r25, Y+16	; 0x10
    17b8:	0e 94 f7 2a 	call	0x55ee	; 0x55ee <sin>
    17bc:	69 96       	adiw	r28, 0x19	; 25
    17be:	6c af       	std	Y+60, r22	; 0x3c
    17c0:	7d af       	std	Y+61, r23	; 0x3d
    17c2:	8e af       	std	Y+62, r24	; 0x3e
    17c4:	9f af       	std	Y+63, r25	; 0x3f
    17c6:	69 97       	sbiw	r28, 0x19	; 25
    17c8:	89 a1       	ldd	r24, Y+33	; 0x21
    17ca:	9a a1       	ldd	r25, Y+34	; 0x22
    17cc:	ab a1       	ldd	r26, Y+35	; 0x23
    17ce:	bc a1       	ldd	r27, Y+36	; 0x24
    17d0:	6d 96       	adiw	r28, 0x1d	; 29
    17d2:	8c af       	std	Y+60, r24	; 0x3c
    17d4:	9d af       	std	Y+61, r25	; 0x3d
    17d6:	ae af       	std	Y+62, r26	; 0x3e
    17d8:	bf af       	std	Y+63, r27	; 0x3f
    17da:	6d 97       	sbiw	r28, 0x1d	; 29
    17dc:	89 8d       	ldd	r24, Y+25	; 0x19
    17de:	9a 8d       	ldd	r25, Y+26	; 0x1a
    17e0:	ab 8d       	ldd	r26, Y+27	; 0x1b
    17e2:	bc 8d       	ldd	r27, Y+28	; 0x1c
    17e4:	a1 96       	adiw	r28, 0x21	; 33
    17e6:	8c af       	std	Y+60, r24	; 0x3c
    17e8:	9d af       	std	Y+61, r25	; 0x3d
    17ea:	ae af       	std	Y+62, r26	; 0x3e
    17ec:	bf af       	std	Y+63, r27	; 0x3f
    17ee:	a1 97       	sbiw	r28, 0x21	; 33
    17f0:	a7 01       	movw	r20, r14
    17f2:	96 01       	movw	r18, r12
    17f4:	60 e0       	ldi	r22, 0x00	; 0
    17f6:	70 e0       	ldi	r23, 0x00	; 0
    17f8:	80 e8       	ldi	r24, 0x80	; 128
    17fa:	9f e3       	ldi	r25, 0x3F	; 63
    17fc:	0e 94 17 28 	call	0x502e	; 0x502e <__subsf3>
    1800:	6b 01       	movw	r12, r22
    1802:	7c 01       	movw	r14, r24
    1804:	a3 01       	movw	r20, r6
    1806:	92 01       	movw	r18, r4
    1808:	69 a5       	ldd	r22, Y+41	; 0x29
    180a:	7a a5       	ldd	r23, Y+42	; 0x2a
    180c:	8b a5       	ldd	r24, Y+43	; 0x2b
    180e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1810:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    1814:	9b 01       	movw	r18, r22
    1816:	ac 01       	movw	r20, r24
    1818:	c7 01       	movw	r24, r14
    181a:	b6 01       	movw	r22, r12
    181c:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    1820:	9b 01       	movw	r18, r22
    1822:	ac 01       	movw	r20, r24
    1824:	c5 01       	movw	r24, r10
    1826:	b4 01       	movw	r22, r8
    1828:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
    182c:	2d a5       	ldd	r18, Y+45	; 0x2d
    182e:	3e a5       	ldd	r19, Y+46	; 0x2e
    1830:	4f a5       	ldd	r20, Y+47	; 0x2f
    1832:	58 a9       	ldd	r21, Y+48	; 0x30
    1834:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    1838:	6b 01       	movw	r12, r22
    183a:	7c 01       	movw	r14, r24
    183c:	29 a9       	ldd	r18, Y+49	; 0x31
    183e:	3a a9       	ldd	r19, Y+50	; 0x32
    1840:	4b a9       	ldd	r20, Y+51	; 0x33
    1842:	5c a9       	ldd	r21, Y+52	; 0x34
    1844:	60 e0       	ldi	r22, 0x00	; 0
    1846:	70 e0       	ldi	r23, 0x00	; 0
    1848:	80 e8       	ldi	r24, 0x80	; 128
    184a:	9f e3       	ldi	r25, 0x3F	; 63
    184c:	0e 94 17 28 	call	0x502e	; 0x502e <__subsf3>
    1850:	2d a9       	ldd	r18, Y+53	; 0x35
    1852:	3e a9       	ldd	r19, Y+54	; 0x36
    1854:	4f a9       	ldd	r20, Y+55	; 0x37
    1856:	58 ad       	ldd	r21, Y+56	; 0x38
    1858:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    185c:	29 ad       	ldd	r18, Y+57	; 0x39
    185e:	3a ad       	ldd	r19, Y+58	; 0x3a
    1860:	4b ad       	ldd	r20, Y+59	; 0x3b
    1862:	5c ad       	ldd	r21, Y+60	; 0x3c
    1864:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    1868:	4b 01       	movw	r8, r22
    186a:	5c 01       	movw	r10, r24
    186c:	25 96       	adiw	r28, 0x05	; 5
    186e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1870:	3d ad       	ldd	r19, Y+61	; 0x3d
    1872:	4e ad       	ldd	r20, Y+62	; 0x3e
    1874:	5f ad       	ldd	r21, Y+63	; 0x3f
    1876:	25 97       	sbiw	r28, 0x05	; 5
    1878:	21 96       	adiw	r28, 0x01	; 1
    187a:	6c ad       	ldd	r22, Y+60	; 0x3c
    187c:	7d ad       	ldd	r23, Y+61	; 0x3d
    187e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1880:	9f ad       	ldd	r25, Y+63	; 0x3f
    1882:	21 97       	sbiw	r28, 0x01	; 1
    1884:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    1888:	9b 01       	movw	r18, r22
    188a:	ac 01       	movw	r20, r24
    188c:	c5 01       	movw	r24, r10
    188e:	b4 01       	movw	r22, r8
    1890:	0e 94 17 28 	call	0x502e	; 0x502e <__subsf3>
    1894:	29 96       	adiw	r28, 0x09	; 9
    1896:	2c ad       	ldd	r18, Y+60	; 0x3c
    1898:	3d ad       	ldd	r19, Y+61	; 0x3d
    189a:	4e ad       	ldd	r20, Y+62	; 0x3e
    189c:	5f ad       	ldd	r21, Y+63	; 0x3f
    189e:	29 97       	sbiw	r28, 0x09	; 9
    18a0:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    18a4:	9b 01       	movw	r18, r22
    18a6:	ac 01       	movw	r20, r24
    18a8:	c7 01       	movw	r24, r14
    18aa:	b6 01       	movw	r22, r12
    18ac:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
    18b0:	6b 01       	movw	r12, r22
    18b2:	7c 01       	movw	r14, r24
    18b4:	2d 96       	adiw	r28, 0x0d	; 13
    18b6:	2c ad       	ldd	r18, Y+60	; 0x3c
    18b8:	3d ad       	ldd	r19, Y+61	; 0x3d
    18ba:	4e ad       	ldd	r20, Y+62	; 0x3e
    18bc:	5f ad       	ldd	r21, Y+63	; 0x3f
    18be:	2d 97       	sbiw	r28, 0x0d	; 13
    18c0:	60 e0       	ldi	r22, 0x00	; 0
    18c2:	70 e0       	ldi	r23, 0x00	; 0
    18c4:	80 e8       	ldi	r24, 0x80	; 128
    18c6:	9f e3       	ldi	r25, 0x3F	; 63
    18c8:	0e 94 17 28 	call	0x502e	; 0x502e <__subsf3>
    18cc:	61 96       	adiw	r28, 0x11	; 17
    18ce:	2c ad       	ldd	r18, Y+60	; 0x3c
    18d0:	3d ad       	ldd	r19, Y+61	; 0x3d
    18d2:	4e ad       	ldd	r20, Y+62	; 0x3e
    18d4:	5f ad       	ldd	r21, Y+63	; 0x3f
    18d6:	61 97       	sbiw	r28, 0x11	; 17
    18d8:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    18dc:	65 96       	adiw	r28, 0x15	; 21
    18de:	2c ad       	ldd	r18, Y+60	; 0x3c
    18e0:	3d ad       	ldd	r19, Y+61	; 0x3d
    18e2:	4e ad       	ldd	r20, Y+62	; 0x3e
    18e4:	5f ad       	ldd	r21, Y+63	; 0x3f
    18e6:	65 97       	sbiw	r28, 0x15	; 21
    18e8:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    18ec:	4b 01       	movw	r8, r22
    18ee:	5c 01       	movw	r10, r24
    18f0:	6d 96       	adiw	r28, 0x1d	; 29
    18f2:	2c ad       	ldd	r18, Y+60	; 0x3c
    18f4:	3d ad       	ldd	r19, Y+61	; 0x3d
    18f6:	4e ad       	ldd	r20, Y+62	; 0x3e
    18f8:	5f ad       	ldd	r21, Y+63	; 0x3f
    18fa:	6d 97       	sbiw	r28, 0x1d	; 29
    18fc:	69 96       	adiw	r28, 0x19	; 25
    18fe:	6c ad       	ldd	r22, Y+60	; 0x3c
    1900:	7d ad       	ldd	r23, Y+61	; 0x3d
    1902:	8e ad       	ldd	r24, Y+62	; 0x3e
    1904:	9f ad       	ldd	r25, Y+63	; 0x3f
    1906:	69 97       	sbiw	r28, 0x19	; 25
    1908:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    190c:	9b 01       	movw	r18, r22
    190e:	ac 01       	movw	r20, r24
    1910:	c5 01       	movw	r24, r10
    1912:	b4 01       	movw	r22, r8
    1914:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
    1918:	a1 96       	adiw	r28, 0x21	; 33
    191a:	2c ad       	ldd	r18, Y+60	; 0x3c
    191c:	3d ad       	ldd	r19, Y+61	; 0x3d
    191e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1920:	5f ad       	ldd	r21, Y+63	; 0x3f
    1922:	a1 97       	sbiw	r28, 0x21	; 33
    1924:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    1928:	9b 01       	movw	r18, r22
    192a:	ac 01       	movw	r20, r24
    192c:	c7 01       	movw	r24, r14
    192e:	b6 01       	movw	r22, r12
    1930:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
    1934:	46 2f       	mov	r20, r22
    1936:	57 2f       	mov	r21, r23
    1938:	68 2f       	mov	r22, r24
    193a:	79 2f       	mov	r23, r25
    193c:	49 83       	std	Y+1, r20	; 0x01
    193e:	5a 83       	std	Y+2, r21	; 0x02
    1940:	6b 83       	std	Y+3, r22	; 0x03
    1942:	7c 83       	std	Y+4, r23	; 0x04
	By = B_x_read * ((1.0 - cos(Q)) * n.Y * n.X + sin(Q) * n.Z) + B_y_read * (cos(Q) + (1 - cos(Q)) * n.Y * n.Y) + B_z_read * ((1 - cos(Q)) * n.Y * n.Z - sin(Q) * n.X);
    1944:	6d 85       	ldd	r22, Y+13	; 0x0d
    1946:	7e 85       	ldd	r23, Y+14	; 0x0e
    1948:	8f 85       	ldd	r24, Y+15	; 0x0f
    194a:	98 89       	ldd	r25, Y+16	; 0x10
    194c:	0e 94 e2 28 	call	0x51c4	; 0x51c4 <cos>
    1950:	6b 01       	movw	r12, r22
    1952:	7c 01       	movw	r14, r24
    1954:	49 a0       	ldd	r4, Y+33	; 0x21
    1956:	5a a0       	ldd	r5, Y+34	; 0x22
    1958:	6b a0       	ldd	r6, Y+35	; 0x23
    195a:	7c a0       	ldd	r7, Y+36	; 0x24
    195c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    195e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1960:	af 8d       	ldd	r26, Y+31	; 0x1f
    1962:	b8 a1       	ldd	r27, Y+32	; 0x20
    1964:	89 a7       	std	Y+41, r24	; 0x29
    1966:	9a a7       	std	Y+42, r25	; 0x2a
    1968:	ab a7       	std	Y+43, r26	; 0x2b
    196a:	bc a7       	std	Y+44, r27	; 0x2c
    196c:	6d 85       	ldd	r22, Y+13	; 0x0d
    196e:	7e 85       	ldd	r23, Y+14	; 0x0e
    1970:	8f 85       	ldd	r24, Y+15	; 0x0f
    1972:	98 89       	ldd	r25, Y+16	; 0x10
    1974:	0e 94 f7 2a 	call	0x55ee	; 0x55ee <sin>
    1978:	4b 01       	movw	r8, r22
    197a:	5c 01       	movw	r10, r24
    197c:	8d a1       	ldd	r24, Y+37	; 0x25
    197e:	9e a1       	ldd	r25, Y+38	; 0x26
    1980:	af a1       	ldd	r26, Y+39	; 0x27
    1982:	b8 a5       	ldd	r27, Y+40	; 0x28
    1984:	8d a7       	std	Y+45, r24	; 0x2d
    1986:	9e a7       	std	Y+46, r25	; 0x2e
    1988:	af a7       	std	Y+47, r26	; 0x2f
    198a:	b8 ab       	std	Y+48, r27	; 0x30
    198c:	89 89       	ldd	r24, Y+17	; 0x11
    198e:	9a 89       	ldd	r25, Y+18	; 0x12
    1990:	ab 89       	ldd	r26, Y+19	; 0x13
    1992:	bc 89       	ldd	r27, Y+20	; 0x14
    1994:	89 ab       	std	Y+49, r24	; 0x31
    1996:	9a ab       	std	Y+50, r25	; 0x32
    1998:	ab ab       	std	Y+51, r26	; 0x33
    199a:	bc ab       	std	Y+52, r27	; 0x34
    199c:	6d 85       	ldd	r22, Y+13	; 0x0d
    199e:	7e 85       	ldd	r23, Y+14	; 0x0e
    19a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    19a2:	98 89       	ldd	r25, Y+16	; 0x10
    19a4:	0e 94 e2 28 	call	0x51c4	; 0x51c4 <cos>
    19a8:	6d ab       	std	Y+53, r22	; 0x35
    19aa:	7e ab       	std	Y+54, r23	; 0x36
    19ac:	8f ab       	std	Y+55, r24	; 0x37
    19ae:	98 af       	std	Y+56, r25	; 0x38
    19b0:	6d 85       	ldd	r22, Y+13	; 0x0d
    19b2:	7e 85       	ldd	r23, Y+14	; 0x0e
    19b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    19b6:	98 89       	ldd	r25, Y+16	; 0x10
    19b8:	0e 94 e2 28 	call	0x51c4	; 0x51c4 <cos>
    19bc:	69 af       	std	Y+57, r22	; 0x39
    19be:	7a af       	std	Y+58, r23	; 0x3a
    19c0:	8b af       	std	Y+59, r24	; 0x3b
    19c2:	9c af       	std	Y+60, r25	; 0x3c
    19c4:	89 a1       	ldd	r24, Y+33	; 0x21
    19c6:	9a a1       	ldd	r25, Y+34	; 0x22
    19c8:	ab a1       	ldd	r26, Y+35	; 0x23
    19ca:	bc a1       	ldd	r27, Y+36	; 0x24
    19cc:	21 96       	adiw	r28, 0x01	; 1
    19ce:	8c af       	std	Y+60, r24	; 0x3c
    19d0:	9d af       	std	Y+61, r25	; 0x3d
    19d2:	ae af       	std	Y+62, r26	; 0x3e
    19d4:	bf af       	std	Y+63, r27	; 0x3f
    19d6:	21 97       	sbiw	r28, 0x01	; 1
    19d8:	89 a1       	ldd	r24, Y+33	; 0x21
    19da:	9a a1       	ldd	r25, Y+34	; 0x22
    19dc:	ab a1       	ldd	r26, Y+35	; 0x23
    19de:	bc a1       	ldd	r27, Y+36	; 0x24
    19e0:	25 96       	adiw	r28, 0x05	; 5
    19e2:	8c af       	std	Y+60, r24	; 0x3c
    19e4:	9d af       	std	Y+61, r25	; 0x3d
    19e6:	ae af       	std	Y+62, r26	; 0x3e
    19e8:	bf af       	std	Y+63, r27	; 0x3f
    19ea:	25 97       	sbiw	r28, 0x05	; 5
    19ec:	8d 89       	ldd	r24, Y+21	; 0x15
    19ee:	9e 89       	ldd	r25, Y+22	; 0x16
    19f0:	af 89       	ldd	r26, Y+23	; 0x17
    19f2:	b8 8d       	ldd	r27, Y+24	; 0x18
    19f4:	29 96       	adiw	r28, 0x09	; 9
    19f6:	8c af       	std	Y+60, r24	; 0x3c
    19f8:	9d af       	std	Y+61, r25	; 0x3d
    19fa:	ae af       	std	Y+62, r26	; 0x3e
    19fc:	bf af       	std	Y+63, r27	; 0x3f
    19fe:	29 97       	sbiw	r28, 0x09	; 9
    1a00:	6d 85       	ldd	r22, Y+13	; 0x0d
    1a02:	7e 85       	ldd	r23, Y+14	; 0x0e
    1a04:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a06:	98 89       	ldd	r25, Y+16	; 0x10
    1a08:	0e 94 e2 28 	call	0x51c4	; 0x51c4 <cos>
    1a0c:	2d 96       	adiw	r28, 0x0d	; 13
    1a0e:	6c af       	std	Y+60, r22	; 0x3c
    1a10:	7d af       	std	Y+61, r23	; 0x3d
    1a12:	8e af       	std	Y+62, r24	; 0x3e
    1a14:	9f af       	std	Y+63, r25	; 0x3f
    1a16:	2d 97       	sbiw	r28, 0x0d	; 13
    1a18:	89 a1       	ldd	r24, Y+33	; 0x21
    1a1a:	9a a1       	ldd	r25, Y+34	; 0x22
    1a1c:	ab a1       	ldd	r26, Y+35	; 0x23
    1a1e:	bc a1       	ldd	r27, Y+36	; 0x24
    1a20:	61 96       	adiw	r28, 0x11	; 17
    1a22:	8c af       	std	Y+60, r24	; 0x3c
    1a24:	9d af       	std	Y+61, r25	; 0x3d
    1a26:	ae af       	std	Y+62, r26	; 0x3e
    1a28:	bf af       	std	Y+63, r27	; 0x3f
    1a2a:	61 97       	sbiw	r28, 0x11	; 17
    1a2c:	8d a1       	ldd	r24, Y+37	; 0x25
    1a2e:	9e a1       	ldd	r25, Y+38	; 0x26
    1a30:	af a1       	ldd	r26, Y+39	; 0x27
    1a32:	b8 a5       	ldd	r27, Y+40	; 0x28
    1a34:	65 96       	adiw	r28, 0x15	; 21
    1a36:	8c af       	std	Y+60, r24	; 0x3c
    1a38:	9d af       	std	Y+61, r25	; 0x3d
    1a3a:	ae af       	std	Y+62, r26	; 0x3e
    1a3c:	bf af       	std	Y+63, r27	; 0x3f
    1a3e:	65 97       	sbiw	r28, 0x15	; 21
    1a40:	6d 85       	ldd	r22, Y+13	; 0x0d
    1a42:	7e 85       	ldd	r23, Y+14	; 0x0e
    1a44:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a46:	98 89       	ldd	r25, Y+16	; 0x10
    1a48:	0e 94 f7 2a 	call	0x55ee	; 0x55ee <sin>
    1a4c:	69 96       	adiw	r28, 0x19	; 25
    1a4e:	6c af       	std	Y+60, r22	; 0x3c
    1a50:	7d af       	std	Y+61, r23	; 0x3d
    1a52:	8e af       	std	Y+62, r24	; 0x3e
    1a54:	9f af       	std	Y+63, r25	; 0x3f
    1a56:	69 97       	sbiw	r28, 0x19	; 25
    1a58:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a5a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a5c:	af 8d       	ldd	r26, Y+31	; 0x1f
    1a5e:	b8 a1       	ldd	r27, Y+32	; 0x20
    1a60:	6d 96       	adiw	r28, 0x1d	; 29
    1a62:	8c af       	std	Y+60, r24	; 0x3c
    1a64:	9d af       	std	Y+61, r25	; 0x3d
    1a66:	ae af       	std	Y+62, r26	; 0x3e
    1a68:	bf af       	std	Y+63, r27	; 0x3f
    1a6a:	6d 97       	sbiw	r28, 0x1d	; 29
    1a6c:	89 8d       	ldd	r24, Y+25	; 0x19
    1a6e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1a70:	ab 8d       	ldd	r26, Y+27	; 0x1b
    1a72:	bc 8d       	ldd	r27, Y+28	; 0x1c
    1a74:	a1 96       	adiw	r28, 0x21	; 33
    1a76:	8c af       	std	Y+60, r24	; 0x3c
    1a78:	9d af       	std	Y+61, r25	; 0x3d
    1a7a:	ae af       	std	Y+62, r26	; 0x3e
    1a7c:	bf af       	std	Y+63, r27	; 0x3f
    1a7e:	a1 97       	sbiw	r28, 0x21	; 33
    1a80:	a7 01       	movw	r20, r14
    1a82:	96 01       	movw	r18, r12
    1a84:	60 e0       	ldi	r22, 0x00	; 0
    1a86:	70 e0       	ldi	r23, 0x00	; 0
    1a88:	80 e8       	ldi	r24, 0x80	; 128
    1a8a:	9f e3       	ldi	r25, 0x3F	; 63
    1a8c:	0e 94 17 28 	call	0x502e	; 0x502e <__subsf3>
    1a90:	a3 01       	movw	r20, r6
    1a92:	92 01       	movw	r18, r4
    1a94:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    1a98:	29 a5       	ldd	r18, Y+41	; 0x29
    1a9a:	3a a5       	ldd	r19, Y+42	; 0x2a
    1a9c:	4b a5       	ldd	r20, Y+43	; 0x2b
    1a9e:	5c a5       	ldd	r21, Y+44	; 0x2c
    1aa0:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    1aa4:	6b 01       	movw	r12, r22
    1aa6:	7c 01       	movw	r14, r24
    1aa8:	2d a5       	ldd	r18, Y+45	; 0x2d
    1aaa:	3e a5       	ldd	r19, Y+46	; 0x2e
    1aac:	4f a5       	ldd	r20, Y+47	; 0x2f
    1aae:	58 a9       	ldd	r21, Y+48	; 0x30
    1ab0:	c5 01       	movw	r24, r10
    1ab2:	b4 01       	movw	r22, r8
    1ab4:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    1ab8:	9b 01       	movw	r18, r22
    1aba:	ac 01       	movw	r20, r24
    1abc:	c7 01       	movw	r24, r14
    1abe:	b6 01       	movw	r22, r12
    1ac0:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
    1ac4:	29 a9       	ldd	r18, Y+49	; 0x31
    1ac6:	3a a9       	ldd	r19, Y+50	; 0x32
    1ac8:	4b a9       	ldd	r20, Y+51	; 0x33
    1aca:	5c a9       	ldd	r21, Y+52	; 0x34
    1acc:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    1ad0:	6b 01       	movw	r12, r22
    1ad2:	7c 01       	movw	r14, r24
    1ad4:	29 ad       	ldd	r18, Y+57	; 0x39
    1ad6:	3a ad       	ldd	r19, Y+58	; 0x3a
    1ad8:	4b ad       	ldd	r20, Y+59	; 0x3b
    1ada:	5c ad       	ldd	r21, Y+60	; 0x3c
    1adc:	60 e0       	ldi	r22, 0x00	; 0
    1ade:	70 e0       	ldi	r23, 0x00	; 0
    1ae0:	80 e8       	ldi	r24, 0x80	; 128
    1ae2:	9f e3       	ldi	r25, 0x3F	; 63
    1ae4:	0e 94 17 28 	call	0x502e	; 0x502e <__subsf3>
    1ae8:	21 96       	adiw	r28, 0x01	; 1
    1aea:	2c ad       	ldd	r18, Y+60	; 0x3c
    1aec:	3d ad       	ldd	r19, Y+61	; 0x3d
    1aee:	4e ad       	ldd	r20, Y+62	; 0x3e
    1af0:	5f ad       	ldd	r21, Y+63	; 0x3f
    1af2:	21 97       	sbiw	r28, 0x01	; 1
    1af4:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    1af8:	25 96       	adiw	r28, 0x05	; 5
    1afa:	2c ad       	ldd	r18, Y+60	; 0x3c
    1afc:	3d ad       	ldd	r19, Y+61	; 0x3d
    1afe:	4e ad       	ldd	r20, Y+62	; 0x3e
    1b00:	5f ad       	ldd	r21, Y+63	; 0x3f
    1b02:	25 97       	sbiw	r28, 0x05	; 5
    1b04:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    1b08:	9b 01       	movw	r18, r22
    1b0a:	ac 01       	movw	r20, r24
    1b0c:	6d a9       	ldd	r22, Y+53	; 0x35
    1b0e:	7e a9       	ldd	r23, Y+54	; 0x36
    1b10:	8f a9       	ldd	r24, Y+55	; 0x37
    1b12:	98 ad       	ldd	r25, Y+56	; 0x38
    1b14:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
    1b18:	29 96       	adiw	r28, 0x09	; 9
    1b1a:	2c ad       	ldd	r18, Y+60	; 0x3c
    1b1c:	3d ad       	ldd	r19, Y+61	; 0x3d
    1b1e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1b20:	5f ad       	ldd	r21, Y+63	; 0x3f
    1b22:	29 97       	sbiw	r28, 0x09	; 9
    1b24:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    1b28:	9b 01       	movw	r18, r22
    1b2a:	ac 01       	movw	r20, r24
    1b2c:	c7 01       	movw	r24, r14
    1b2e:	b6 01       	movw	r22, r12
    1b30:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
    1b34:	6b 01       	movw	r12, r22
    1b36:	7c 01       	movw	r14, r24
    1b38:	2d 96       	adiw	r28, 0x0d	; 13
    1b3a:	2c ad       	ldd	r18, Y+60	; 0x3c
    1b3c:	3d ad       	ldd	r19, Y+61	; 0x3d
    1b3e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1b40:	5f ad       	ldd	r21, Y+63	; 0x3f
    1b42:	2d 97       	sbiw	r28, 0x0d	; 13
    1b44:	60 e0       	ldi	r22, 0x00	; 0
    1b46:	70 e0       	ldi	r23, 0x00	; 0
    1b48:	80 e8       	ldi	r24, 0x80	; 128
    1b4a:	9f e3       	ldi	r25, 0x3F	; 63
    1b4c:	0e 94 17 28 	call	0x502e	; 0x502e <__subsf3>
    1b50:	61 96       	adiw	r28, 0x11	; 17
    1b52:	2c ad       	ldd	r18, Y+60	; 0x3c
    1b54:	3d ad       	ldd	r19, Y+61	; 0x3d
    1b56:	4e ad       	ldd	r20, Y+62	; 0x3e
    1b58:	5f ad       	ldd	r21, Y+63	; 0x3f
    1b5a:	61 97       	sbiw	r28, 0x11	; 17
    1b5c:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    1b60:	65 96       	adiw	r28, 0x15	; 21
    1b62:	2c ad       	ldd	r18, Y+60	; 0x3c
    1b64:	3d ad       	ldd	r19, Y+61	; 0x3d
    1b66:	4e ad       	ldd	r20, Y+62	; 0x3e
    1b68:	5f ad       	ldd	r21, Y+63	; 0x3f
    1b6a:	65 97       	sbiw	r28, 0x15	; 21
    1b6c:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    1b70:	4b 01       	movw	r8, r22
    1b72:	5c 01       	movw	r10, r24
    1b74:	6d 96       	adiw	r28, 0x1d	; 29
    1b76:	2c ad       	ldd	r18, Y+60	; 0x3c
    1b78:	3d ad       	ldd	r19, Y+61	; 0x3d
    1b7a:	4e ad       	ldd	r20, Y+62	; 0x3e
    1b7c:	5f ad       	ldd	r21, Y+63	; 0x3f
    1b7e:	6d 97       	sbiw	r28, 0x1d	; 29
    1b80:	69 96       	adiw	r28, 0x19	; 25
    1b82:	6c ad       	ldd	r22, Y+60	; 0x3c
    1b84:	7d ad       	ldd	r23, Y+61	; 0x3d
    1b86:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b88:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b8a:	69 97       	sbiw	r28, 0x19	; 25
    1b8c:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    1b90:	9b 01       	movw	r18, r22
    1b92:	ac 01       	movw	r20, r24
    1b94:	c5 01       	movw	r24, r10
    1b96:	b4 01       	movw	r22, r8
    1b98:	0e 94 17 28 	call	0x502e	; 0x502e <__subsf3>
    1b9c:	a1 96       	adiw	r28, 0x21	; 33
    1b9e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1ba0:	3d ad       	ldd	r19, Y+61	; 0x3d
    1ba2:	4e ad       	ldd	r20, Y+62	; 0x3e
    1ba4:	5f ad       	ldd	r21, Y+63	; 0x3f
    1ba6:	a1 97       	sbiw	r28, 0x21	; 33
    1ba8:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    1bac:	9b 01       	movw	r18, r22
    1bae:	ac 01       	movw	r20, r24
    1bb0:	c7 01       	movw	r24, r14
    1bb2:	b6 01       	movw	r22, r12
    1bb4:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
    1bb8:	46 2f       	mov	r20, r22
    1bba:	57 2f       	mov	r21, r23
    1bbc:	68 2f       	mov	r22, r24
    1bbe:	79 2f       	mov	r23, r25
    1bc0:	4d 83       	std	Y+5, r20	; 0x05
    1bc2:	5e 83       	std	Y+6, r21	; 0x06
    1bc4:	6f 83       	std	Y+7, r22	; 0x07
    1bc6:	78 87       	std	Y+8, r23	; 0x08
	Bz = B_x_read * ((1.0 - cos(Q)) * n.Z * n.X - sin(Q) * n.Y) + B_y_read * ((1 - cos(Q)) * n.Z * n.Y + sin(Q) * n.X) + B_z_read * (cos(Q) + (1.0 - cos(Q)) * (n.Z * n.Z));
    1bc8:	6d 85       	ldd	r22, Y+13	; 0x0d
    1bca:	7e 85       	ldd	r23, Y+14	; 0x0e
    1bcc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bce:	98 89       	ldd	r25, Y+16	; 0x10
    1bd0:	0e 94 e2 28 	call	0x51c4	; 0x51c4 <cos>
    1bd4:	6b 01       	movw	r12, r22
    1bd6:	7c 01       	movw	r14, r24
    1bd8:	4d a0       	ldd	r4, Y+37	; 0x25
    1bda:	5e a0       	ldd	r5, Y+38	; 0x26
    1bdc:	6f a0       	ldd	r6, Y+39	; 0x27
    1bde:	78 a4       	ldd	r7, Y+40	; 0x28
    1be0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1be2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1be4:	af 8d       	ldd	r26, Y+31	; 0x1f
    1be6:	b8 a1       	ldd	r27, Y+32	; 0x20
    1be8:	89 a7       	std	Y+41, r24	; 0x29
    1bea:	9a a7       	std	Y+42, r25	; 0x2a
    1bec:	ab a7       	std	Y+43, r26	; 0x2b
    1bee:	bc a7       	std	Y+44, r27	; 0x2c
    1bf0:	6d 85       	ldd	r22, Y+13	; 0x0d
    1bf2:	7e 85       	ldd	r23, Y+14	; 0x0e
    1bf4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bf6:	98 89       	ldd	r25, Y+16	; 0x10
    1bf8:	0e 94 f7 2a 	call	0x55ee	; 0x55ee <sin>
    1bfc:	4b 01       	movw	r8, r22
    1bfe:	5c 01       	movw	r10, r24
    1c00:	89 a1       	ldd	r24, Y+33	; 0x21
    1c02:	9a a1       	ldd	r25, Y+34	; 0x22
    1c04:	ab a1       	ldd	r26, Y+35	; 0x23
    1c06:	bc a1       	ldd	r27, Y+36	; 0x24
    1c08:	8d a7       	std	Y+45, r24	; 0x2d
    1c0a:	9e a7       	std	Y+46, r25	; 0x2e
    1c0c:	af a7       	std	Y+47, r26	; 0x2f
    1c0e:	b8 ab       	std	Y+48, r27	; 0x30
    1c10:	89 89       	ldd	r24, Y+17	; 0x11
    1c12:	9a 89       	ldd	r25, Y+18	; 0x12
    1c14:	ab 89       	ldd	r26, Y+19	; 0x13
    1c16:	bc 89       	ldd	r27, Y+20	; 0x14
    1c18:	89 ab       	std	Y+49, r24	; 0x31
    1c1a:	9a ab       	std	Y+50, r25	; 0x32
    1c1c:	ab ab       	std	Y+51, r26	; 0x33
    1c1e:	bc ab       	std	Y+52, r27	; 0x34
    1c20:	6d 85       	ldd	r22, Y+13	; 0x0d
    1c22:	7e 85       	ldd	r23, Y+14	; 0x0e
    1c24:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c26:	98 89       	ldd	r25, Y+16	; 0x10
    1c28:	0e 94 e2 28 	call	0x51c4	; 0x51c4 <cos>
    1c2c:	6d ab       	std	Y+53, r22	; 0x35
    1c2e:	7e ab       	std	Y+54, r23	; 0x36
    1c30:	8f ab       	std	Y+55, r24	; 0x37
    1c32:	98 af       	std	Y+56, r25	; 0x38
    1c34:	8d a1       	ldd	r24, Y+37	; 0x25
    1c36:	9e a1       	ldd	r25, Y+38	; 0x26
    1c38:	af a1       	ldd	r26, Y+39	; 0x27
    1c3a:	b8 a5       	ldd	r27, Y+40	; 0x28
    1c3c:	89 af       	std	Y+57, r24	; 0x39
    1c3e:	9a af       	std	Y+58, r25	; 0x3a
    1c40:	ab af       	std	Y+59, r26	; 0x3b
    1c42:	bc af       	std	Y+60, r27	; 0x3c
    1c44:	89 a1       	ldd	r24, Y+33	; 0x21
    1c46:	9a a1       	ldd	r25, Y+34	; 0x22
    1c48:	ab a1       	ldd	r26, Y+35	; 0x23
    1c4a:	bc a1       	ldd	r27, Y+36	; 0x24
    1c4c:	21 96       	adiw	r28, 0x01	; 1
    1c4e:	8c af       	std	Y+60, r24	; 0x3c
    1c50:	9d af       	std	Y+61, r25	; 0x3d
    1c52:	ae af       	std	Y+62, r26	; 0x3e
    1c54:	bf af       	std	Y+63, r27	; 0x3f
    1c56:	21 97       	sbiw	r28, 0x01	; 1
    1c58:	6d 85       	ldd	r22, Y+13	; 0x0d
    1c5a:	7e 85       	ldd	r23, Y+14	; 0x0e
    1c5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c5e:	98 89       	ldd	r25, Y+16	; 0x10
    1c60:	0e 94 f7 2a 	call	0x55ee	; 0x55ee <sin>
    1c64:	25 96       	adiw	r28, 0x05	; 5
    1c66:	6c af       	std	Y+60, r22	; 0x3c
    1c68:	7d af       	std	Y+61, r23	; 0x3d
    1c6a:	8e af       	std	Y+62, r24	; 0x3e
    1c6c:	9f af       	std	Y+63, r25	; 0x3f
    1c6e:	25 97       	sbiw	r28, 0x05	; 5
    1c70:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c72:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c74:	af 8d       	ldd	r26, Y+31	; 0x1f
    1c76:	b8 a1       	ldd	r27, Y+32	; 0x20
    1c78:	29 96       	adiw	r28, 0x09	; 9
    1c7a:	8c af       	std	Y+60, r24	; 0x3c
    1c7c:	9d af       	std	Y+61, r25	; 0x3d
    1c7e:	ae af       	std	Y+62, r26	; 0x3e
    1c80:	bf af       	std	Y+63, r27	; 0x3f
    1c82:	29 97       	sbiw	r28, 0x09	; 9
    1c84:	8d 89       	ldd	r24, Y+21	; 0x15
    1c86:	9e 89       	ldd	r25, Y+22	; 0x16
    1c88:	af 89       	ldd	r26, Y+23	; 0x17
    1c8a:	b8 8d       	ldd	r27, Y+24	; 0x18
    1c8c:	2d 96       	adiw	r28, 0x0d	; 13
    1c8e:	8c af       	std	Y+60, r24	; 0x3c
    1c90:	9d af       	std	Y+61, r25	; 0x3d
    1c92:	ae af       	std	Y+62, r26	; 0x3e
    1c94:	bf af       	std	Y+63, r27	; 0x3f
    1c96:	2d 97       	sbiw	r28, 0x0d	; 13
    1c98:	6d 85       	ldd	r22, Y+13	; 0x0d
    1c9a:	7e 85       	ldd	r23, Y+14	; 0x0e
    1c9c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c9e:	98 89       	ldd	r25, Y+16	; 0x10
    1ca0:	0e 94 e2 28 	call	0x51c4	; 0x51c4 <cos>
    1ca4:	61 96       	adiw	r28, 0x11	; 17
    1ca6:	6c af       	std	Y+60, r22	; 0x3c
    1ca8:	7d af       	std	Y+61, r23	; 0x3d
    1caa:	8e af       	std	Y+62, r24	; 0x3e
    1cac:	9f af       	std	Y+63, r25	; 0x3f
    1cae:	61 97       	sbiw	r28, 0x11	; 17
    1cb0:	6d 85       	ldd	r22, Y+13	; 0x0d
    1cb2:	7e 85       	ldd	r23, Y+14	; 0x0e
    1cb4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cb6:	98 89       	ldd	r25, Y+16	; 0x10
    1cb8:	0e 94 e2 28 	call	0x51c4	; 0x51c4 <cos>
    1cbc:	65 96       	adiw	r28, 0x15	; 21
    1cbe:	6c af       	std	Y+60, r22	; 0x3c
    1cc0:	7d af       	std	Y+61, r23	; 0x3d
    1cc2:	8e af       	std	Y+62, r24	; 0x3e
    1cc4:	9f af       	std	Y+63, r25	; 0x3f
    1cc6:	65 97       	sbiw	r28, 0x15	; 21
    1cc8:	8d a1       	ldd	r24, Y+37	; 0x25
    1cca:	9e a1       	ldd	r25, Y+38	; 0x26
    1ccc:	af a1       	ldd	r26, Y+39	; 0x27
    1cce:	b8 a5       	ldd	r27, Y+40	; 0x28
    1cd0:	69 96       	adiw	r28, 0x19	; 25
    1cd2:	8c af       	std	Y+60, r24	; 0x3c
    1cd4:	9d af       	std	Y+61, r25	; 0x3d
    1cd6:	ae af       	std	Y+62, r26	; 0x3e
    1cd8:	bf af       	std	Y+63, r27	; 0x3f
    1cda:	69 97       	sbiw	r28, 0x19	; 25
    1cdc:	8d a1       	ldd	r24, Y+37	; 0x25
    1cde:	9e a1       	ldd	r25, Y+38	; 0x26
    1ce0:	af a1       	ldd	r26, Y+39	; 0x27
    1ce2:	b8 a5       	ldd	r27, Y+40	; 0x28
    1ce4:	6d 96       	adiw	r28, 0x1d	; 29
    1ce6:	8c af       	std	Y+60, r24	; 0x3c
    1ce8:	9d af       	std	Y+61, r25	; 0x3d
    1cea:	ae af       	std	Y+62, r26	; 0x3e
    1cec:	bf af       	std	Y+63, r27	; 0x3f
    1cee:	6d 97       	sbiw	r28, 0x1d	; 29
    1cf0:	89 8d       	ldd	r24, Y+25	; 0x19
    1cf2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1cf4:	ab 8d       	ldd	r26, Y+27	; 0x1b
    1cf6:	bc 8d       	ldd	r27, Y+28	; 0x1c
    1cf8:	a1 96       	adiw	r28, 0x21	; 33
    1cfa:	8c af       	std	Y+60, r24	; 0x3c
    1cfc:	9d af       	std	Y+61, r25	; 0x3d
    1cfe:	ae af       	std	Y+62, r26	; 0x3e
    1d00:	bf af       	std	Y+63, r27	; 0x3f
    1d02:	a1 97       	sbiw	r28, 0x21	; 33
    1d04:	a7 01       	movw	r20, r14
    1d06:	96 01       	movw	r18, r12
    1d08:	60 e0       	ldi	r22, 0x00	; 0
    1d0a:	70 e0       	ldi	r23, 0x00	; 0
    1d0c:	80 e8       	ldi	r24, 0x80	; 128
    1d0e:	9f e3       	ldi	r25, 0x3F	; 63
    1d10:	0e 94 17 28 	call	0x502e	; 0x502e <__subsf3>
    1d14:	a3 01       	movw	r20, r6
    1d16:	92 01       	movw	r18, r4
    1d18:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    1d1c:	29 a5       	ldd	r18, Y+41	; 0x29
    1d1e:	3a a5       	ldd	r19, Y+42	; 0x2a
    1d20:	4b a5       	ldd	r20, Y+43	; 0x2b
    1d22:	5c a5       	ldd	r21, Y+44	; 0x2c
    1d24:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    1d28:	6b 01       	movw	r12, r22
    1d2a:	7c 01       	movw	r14, r24
    1d2c:	2d a5       	ldd	r18, Y+45	; 0x2d
    1d2e:	3e a5       	ldd	r19, Y+46	; 0x2e
    1d30:	4f a5       	ldd	r20, Y+47	; 0x2f
    1d32:	58 a9       	ldd	r21, Y+48	; 0x30
    1d34:	c5 01       	movw	r24, r10
    1d36:	b4 01       	movw	r22, r8
    1d38:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    1d3c:	9b 01       	movw	r18, r22
    1d3e:	ac 01       	movw	r20, r24
    1d40:	c7 01       	movw	r24, r14
    1d42:	b6 01       	movw	r22, r12
    1d44:	0e 94 17 28 	call	0x502e	; 0x502e <__subsf3>
    1d48:	29 a9       	ldd	r18, Y+49	; 0x31
    1d4a:	3a a9       	ldd	r19, Y+50	; 0x32
    1d4c:	4b a9       	ldd	r20, Y+51	; 0x33
    1d4e:	5c a9       	ldd	r21, Y+52	; 0x34
    1d50:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    1d54:	6b 01       	movw	r12, r22
    1d56:	7c 01       	movw	r14, r24
    1d58:	2d a9       	ldd	r18, Y+53	; 0x35
    1d5a:	3e a9       	ldd	r19, Y+54	; 0x36
    1d5c:	4f a9       	ldd	r20, Y+55	; 0x37
    1d5e:	58 ad       	ldd	r21, Y+56	; 0x38
    1d60:	60 e0       	ldi	r22, 0x00	; 0
    1d62:	70 e0       	ldi	r23, 0x00	; 0
    1d64:	80 e8       	ldi	r24, 0x80	; 128
    1d66:	9f e3       	ldi	r25, 0x3F	; 63
    1d68:	0e 94 17 28 	call	0x502e	; 0x502e <__subsf3>
    1d6c:	29 ad       	ldd	r18, Y+57	; 0x39
    1d6e:	3a ad       	ldd	r19, Y+58	; 0x3a
    1d70:	4b ad       	ldd	r20, Y+59	; 0x3b
    1d72:	5c ad       	ldd	r21, Y+60	; 0x3c
    1d74:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    1d78:	21 96       	adiw	r28, 0x01	; 1
    1d7a:	2c ad       	ldd	r18, Y+60	; 0x3c
    1d7c:	3d ad       	ldd	r19, Y+61	; 0x3d
    1d7e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1d80:	5f ad       	ldd	r21, Y+63	; 0x3f
    1d82:	21 97       	sbiw	r28, 0x01	; 1
    1d84:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    1d88:	4b 01       	movw	r8, r22
    1d8a:	5c 01       	movw	r10, r24
    1d8c:	29 96       	adiw	r28, 0x09	; 9
    1d8e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1d90:	3d ad       	ldd	r19, Y+61	; 0x3d
    1d92:	4e ad       	ldd	r20, Y+62	; 0x3e
    1d94:	5f ad       	ldd	r21, Y+63	; 0x3f
    1d96:	29 97       	sbiw	r28, 0x09	; 9
    1d98:	25 96       	adiw	r28, 0x05	; 5
    1d9a:	6c ad       	ldd	r22, Y+60	; 0x3c
    1d9c:	7d ad       	ldd	r23, Y+61	; 0x3d
    1d9e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1da0:	9f ad       	ldd	r25, Y+63	; 0x3f
    1da2:	25 97       	sbiw	r28, 0x05	; 5
    1da4:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    1da8:	9b 01       	movw	r18, r22
    1daa:	ac 01       	movw	r20, r24
    1dac:	c5 01       	movw	r24, r10
    1dae:	b4 01       	movw	r22, r8
    1db0:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
    1db4:	2d 96       	adiw	r28, 0x0d	; 13
    1db6:	2c ad       	ldd	r18, Y+60	; 0x3c
    1db8:	3d ad       	ldd	r19, Y+61	; 0x3d
    1dba:	4e ad       	ldd	r20, Y+62	; 0x3e
    1dbc:	5f ad       	ldd	r21, Y+63	; 0x3f
    1dbe:	2d 97       	sbiw	r28, 0x0d	; 13
    1dc0:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    1dc4:	9b 01       	movw	r18, r22
    1dc6:	ac 01       	movw	r20, r24
    1dc8:	c7 01       	movw	r24, r14
    1dca:	b6 01       	movw	r22, r12
    1dcc:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
    1dd0:	6b 01       	movw	r12, r22
    1dd2:	7c 01       	movw	r14, r24
    1dd4:	65 96       	adiw	r28, 0x15	; 21
    1dd6:	2c ad       	ldd	r18, Y+60	; 0x3c
    1dd8:	3d ad       	ldd	r19, Y+61	; 0x3d
    1dda:	4e ad       	ldd	r20, Y+62	; 0x3e
    1ddc:	5f ad       	ldd	r21, Y+63	; 0x3f
    1dde:	65 97       	sbiw	r28, 0x15	; 21
    1de0:	60 e0       	ldi	r22, 0x00	; 0
    1de2:	70 e0       	ldi	r23, 0x00	; 0
    1de4:	80 e8       	ldi	r24, 0x80	; 128
    1de6:	9f e3       	ldi	r25, 0x3F	; 63
    1de8:	0e 94 17 28 	call	0x502e	; 0x502e <__subsf3>
    1dec:	4b 01       	movw	r8, r22
    1dee:	5c 01       	movw	r10, r24
    1df0:	6d 96       	adiw	r28, 0x1d	; 29
    1df2:	2c ad       	ldd	r18, Y+60	; 0x3c
    1df4:	3d ad       	ldd	r19, Y+61	; 0x3d
    1df6:	4e ad       	ldd	r20, Y+62	; 0x3e
    1df8:	5f ad       	ldd	r21, Y+63	; 0x3f
    1dfa:	6d 97       	sbiw	r28, 0x1d	; 29
    1dfc:	69 96       	adiw	r28, 0x19	; 25
    1dfe:	6c ad       	ldd	r22, Y+60	; 0x3c
    1e00:	7d ad       	ldd	r23, Y+61	; 0x3d
    1e02:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e04:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e06:	69 97       	sbiw	r28, 0x19	; 25
    1e08:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    1e0c:	9b 01       	movw	r18, r22
    1e0e:	ac 01       	movw	r20, r24
    1e10:	c5 01       	movw	r24, r10
    1e12:	b4 01       	movw	r22, r8
    1e14:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    1e18:	9b 01       	movw	r18, r22
    1e1a:	ac 01       	movw	r20, r24
    1e1c:	61 96       	adiw	r28, 0x11	; 17
    1e1e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1e20:	7d ad       	ldd	r23, Y+61	; 0x3d
    1e22:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e24:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e26:	61 97       	sbiw	r28, 0x11	; 17
    1e28:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
    1e2c:	a1 96       	adiw	r28, 0x21	; 33
    1e2e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1e30:	3d ad       	ldd	r19, Y+61	; 0x3d
    1e32:	4e ad       	ldd	r20, Y+62	; 0x3e
    1e34:	5f ad       	ldd	r21, Y+63	; 0x3f
    1e36:	a1 97       	sbiw	r28, 0x21	; 33
    1e38:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    1e3c:	9b 01       	movw	r18, r22
    1e3e:	ac 01       	movw	r20, r24
    1e40:	c7 01       	movw	r24, r14
    1e42:	b6 01       	movw	r22, r12
    1e44:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
    1e48:	46 2f       	mov	r20, r22
    1e4a:	57 2f       	mov	r21, r23
    1e4c:	68 2f       	mov	r22, r24
    1e4e:	79 2f       	mov	r23, r25
    1e50:	49 87       	std	Y+9, r20	; 0x09
    1e52:	5a 87       	std	Y+10, r21	; 0x0a
    1e54:	6b 87       	std	Y+11, r22	; 0x0b
    1e56:	7c 87       	std	Y+12, r23	; 0x0c
	
	//Расчет магнитного курса в радианах
	A = atan2(By, Bx);
    1e58:	29 81       	ldd	r18, Y+1	; 0x01
    1e5a:	3a 81       	ldd	r19, Y+2	; 0x02
    1e5c:	4b 81       	ldd	r20, Y+3	; 0x03
    1e5e:	5c 81       	ldd	r21, Y+4	; 0x04
    1e60:	6d 81       	ldd	r22, Y+5	; 0x05
    1e62:	7e 81       	ldd	r23, Y+6	; 0x06
    1e64:	8f 81       	ldd	r24, Y+7	; 0x07
    1e66:	98 85       	ldd	r25, Y+8	; 0x08
    1e68:	0e 94 8b 28 	call	0x5116	; 0x5116 <atan2>
    1e6c:	c6 2e       	mov	r12, r22
    1e6e:	d7 2e       	mov	r13, r23
    1e70:	e8 2e       	mov	r14, r24
    1e72:	f9 2e       	mov	r15, r25
	//A = atan2(B_y.value, B_x.value);
	
	//Коррекция на 0-2Пи
	if (A < 0.0)
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	a9 01       	movw	r20, r18
    1e7a:	0e 94 de 28 	call	0x51bc	; 0x51bc <__cmpsf2>
    1e7e:	88 23       	and	r24, r24
    1e80:	7c f4       	brge	.+30     	; 0x1ea0 <Course_Calc+0x97c>
	{
		A += 2 * M_PI;
    1e82:	2b ed       	ldi	r18, 0xDB	; 219
    1e84:	3f e0       	ldi	r19, 0x0F	; 15
    1e86:	49 ec       	ldi	r20, 0xC9	; 201
    1e88:	50 e4       	ldi	r21, 0x40	; 64
    1e8a:	6c 2d       	mov	r22, r12
    1e8c:	7d 2d       	mov	r23, r13
    1e8e:	8e 2d       	mov	r24, r14
    1e90:	9f 2d       	mov	r25, r15
    1e92:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
    1e96:	c6 2e       	mov	r12, r22
    1e98:	d7 2e       	mov	r13, r23
    1e9a:	e8 2e       	mov	r14, r24
    1e9c:	f9 2e       	mov	r15, r25
    1e9e:	1a c0       	rjmp	.+52     	; 0x1ed4 <Course_Calc+0x9b0>
	}
	else if (A > 2 * M_PI)
    1ea0:	2b ed       	ldi	r18, 0xDB	; 219
    1ea2:	3f e0       	ldi	r19, 0x0F	; 15
    1ea4:	49 ec       	ldi	r20, 0xC9	; 201
    1ea6:	50 e4       	ldi	r21, 0x40	; 64
    1ea8:	6c 2d       	mov	r22, r12
    1eaa:	7d 2d       	mov	r23, r13
    1eac:	8e 2d       	mov	r24, r14
    1eae:	9f 2d       	mov	r25, r15
    1eb0:	0e 94 89 2a 	call	0x5512	; 0x5512 <__gesf2>
    1eb4:	18 16       	cp	r1, r24
    1eb6:	74 f4       	brge	.+28     	; 0x1ed4 <Course_Calc+0x9b0>
	{
		A -= 2 * M_PI;
    1eb8:	2b ed       	ldi	r18, 0xDB	; 219
    1eba:	3f e0       	ldi	r19, 0x0F	; 15
    1ebc:	49 ec       	ldi	r20, 0xC9	; 201
    1ebe:	50 e4       	ldi	r21, 0x40	; 64
    1ec0:	6c 2d       	mov	r22, r12
    1ec2:	7d 2d       	mov	r23, r13
    1ec4:	8e 2d       	mov	r24, r14
    1ec6:	9f 2d       	mov	r25, r15
    1ec8:	0e 94 17 28 	call	0x502e	; 0x502e <__subsf3>
    1ecc:	c6 2e       	mov	r12, r22
    1ece:	d7 2e       	mov	r13, r23
    1ed0:	e8 2e       	mov	r14, r24
    1ed2:	f9 2e       	mov	r15, r25
	}
	
	//Перевод в градусы + повернутый магнитометр + магнитная девиация
	//magOz.value = A * 180.0 / M_PI;
	A = A * 180.0 / M_PI - 90.0 + coeffs[Mag_deviat].value;
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	44 e3       	ldi	r20, 0x34	; 52
    1eda:	53 e4       	ldi	r21, 0x43	; 67
    1edc:	6c 2d       	mov	r22, r12
    1ede:	7d 2d       	mov	r23, r13
    1ee0:	8e 2d       	mov	r24, r14
    1ee2:	9f 2d       	mov	r25, r15
    1ee4:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    1ee8:	2b ed       	ldi	r18, 0xDB	; 219
    1eea:	3f e0       	ldi	r19, 0x0F	; 15
    1eec:	49 e4       	ldi	r20, 0x49	; 73
    1eee:	50 e4       	ldi	r21, 0x40	; 64
    1ef0:	0e 94 e5 28 	call	0x51ca	; 0x51ca <__divsf3>
    1ef4:	20 e0       	ldi	r18, 0x00	; 0
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	44 eb       	ldi	r20, 0xB4	; 180
    1efa:	52 e4       	ldi	r21, 0x42	; 66
    1efc:	0e 94 17 28 	call	0x502e	; 0x502e <__subsf3>
    1f00:	20 91 ad 02 	lds	r18, 0x02AD
    1f04:	30 91 ae 02 	lds	r19, 0x02AE
    1f08:	40 91 af 02 	lds	r20, 0x02AF
    1f0c:	50 91 b0 02 	lds	r21, 0x02B0
    1f10:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
    1f14:	86 2e       	mov	r8, r22
    1f16:	97 2e       	mov	r9, r23
    1f18:	a8 2e       	mov	r10, r24
    1f1a:	b9 2e       	mov	r11, r25
    1f1c:	c6 2e       	mov	r12, r22
    1f1e:	d7 2e       	mov	r13, r23
    1f20:	e8 2e       	mov	r14, r24
    1f22:	f9 2e       	mov	r15, r25
	
	if (A >= 360.0)
    1f24:	20 e0       	ldi	r18, 0x00	; 0
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	44 eb       	ldi	r20, 0xB4	; 180
    1f2a:	53 e4       	ldi	r21, 0x43	; 67
    1f2c:	0e 94 89 2a 	call	0x5512	; 0x5512 <__gesf2>
    1f30:	88 23       	and	r24, r24
    1f32:	7c f0       	brlt	.+30     	; 0x1f52 <Course_Calc+0xa2e>
	{
		A -= 360.0;
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	44 eb       	ldi	r20, 0xB4	; 180
    1f3a:	53 e4       	ldi	r21, 0x43	; 67
    1f3c:	68 2d       	mov	r22, r8
    1f3e:	79 2d       	mov	r23, r9
    1f40:	8a 2d       	mov	r24, r10
    1f42:	9b 2d       	mov	r25, r11
    1f44:	0e 94 17 28 	call	0x502e	; 0x502e <__subsf3>
    1f48:	c6 2e       	mov	r12, r22
    1f4a:	d7 2e       	mov	r13, r23
    1f4c:	e8 2e       	mov	r14, r24
    1f4e:	f9 2e       	mov	r15, r25
    1f50:	19 c0       	rjmp	.+50     	; 0x1f84 <Course_Calc+0xa60>
	}
	else if (A < 0)
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	a9 01       	movw	r20, r18
    1f58:	68 2d       	mov	r22, r8
    1f5a:	79 2d       	mov	r23, r9
    1f5c:	8a 2d       	mov	r24, r10
    1f5e:	9b 2d       	mov	r25, r11
    1f60:	0e 94 de 28 	call	0x51bc	; 0x51bc <__cmpsf2>
    1f64:	88 23       	and	r24, r24
    1f66:	74 f4       	brge	.+28     	; 0x1f84 <Course_Calc+0xa60>
	{
		A = 360.0 + A;
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	44 eb       	ldi	r20, 0xB4	; 180
    1f6e:	53 e4       	ldi	r21, 0x43	; 67
    1f70:	68 2d       	mov	r22, r8
    1f72:	79 2d       	mov	r23, r9
    1f74:	8a 2d       	mov	r24, r10
    1f76:	9b 2d       	mov	r25, r11
    1f78:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
    1f7c:	c6 2e       	mov	r12, r22
    1f7e:	d7 2e       	mov	r13, r23
    1f80:	e8 2e       	mov	r14, r24
    1f82:	f9 2e       	mov	r15, r25
	}
	
	magOz.value = A;
    1f84:	4c 2d       	mov	r20, r12
    1f86:	5d 2d       	mov	r21, r13
    1f88:	6e 2d       	mov	r22, r14
    1f8a:	7f 2d       	mov	r23, r15
    1f8c:	40 93 9d 03 	sts	0x039D, r20
    1f90:	50 93 9e 03 	sts	0x039E, r21
    1f94:	60 93 9f 03 	sts	0x039F, r22
    1f98:	70 93 a0 03 	sts	0x03A0, r23
	
	if (fabs(Q * 180.0 / M_PI) < coeffs[INCL_TRUE_HEAD].value)
    1f9c:	6d 85       	ldd	r22, Y+13	; 0x0d
    1f9e:	7e 85       	ldd	r23, Y+14	; 0x0e
    1fa0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fa2:	98 89       	ldd	r25, Y+16	; 0x10
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	44 e3       	ldi	r20, 0x34	; 52
    1faa:	53 e4       	ldi	r21, 0x43	; 67
    1fac:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    1fb0:	2b ed       	ldi	r18, 0xDB	; 219
    1fb2:	3f e0       	ldi	r19, 0x0F	; 15
    1fb4:	49 e4       	ldi	r20, 0x49	; 73
    1fb6:	50 e4       	ldi	r21, 0x40	; 64
    1fb8:	0e 94 e5 28 	call	0x51ca	; 0x51ca <__divsf3>
    1fbc:	9f 77       	andi	r25, 0x7F	; 127
    1fbe:	20 91 c5 02 	lds	r18, 0x02C5
    1fc2:	30 91 c6 02 	lds	r19, 0x02C6
    1fc6:	40 91 c7 02 	lds	r20, 0x02C7
    1fca:	50 91 c8 02 	lds	r21, 0x02C8
    1fce:	0e 94 de 28 	call	0x51bc	; 0x51bc <__cmpsf2>
    1fd2:	88 23       	and	r24, r24
    1fd4:	64 f4       	brge	.+24     	; 0x1fee <Course_Calc+0xaca>
	{
		int_w_z.value = magOz.value;
    1fd6:	8c 2d       	mov	r24, r12
    1fd8:	9d 2d       	mov	r25, r13
    1fda:	ae 2d       	mov	r26, r14
    1fdc:	bf 2d       	mov	r27, r15
    1fde:	80 93 99 03 	sts	0x0399, r24
    1fe2:	90 93 9a 03 	sts	0x039A, r25
    1fe6:	a0 93 9b 03 	sts	0x039B, r26
    1fea:	b0 93 9c 03 	sts	0x039C, r27
	}
	
	return 0;
}
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	c0 5a       	subi	r28, 0xA0	; 160
    1ff2:	df 4f       	sbci	r29, 0xFF	; 255
    1ff4:	0f b6       	in	r0, 0x3f	; 63
    1ff6:	f8 94       	cli
    1ff8:	de bf       	out	0x3e, r29	; 62
    1ffa:	0f be       	out	0x3f, r0	; 63
    1ffc:	cd bf       	out	0x3d, r28	; 61
    1ffe:	df 91       	pop	r29
    2000:	cf 91       	pop	r28
    2002:	ff 90       	pop	r15
    2004:	ef 90       	pop	r14
    2006:	df 90       	pop	r13
    2008:	cf 90       	pop	r12
    200a:	bf 90       	pop	r11
    200c:	af 90       	pop	r10
    200e:	9f 90       	pop	r9
    2010:	8f 90       	pop	r8
    2012:	7f 90       	pop	r7
    2014:	6f 90       	pop	r6
    2016:	5f 90       	pop	r5
    2018:	4f 90       	pop	r4
    201a:	08 95       	ret

0000201c <HMC5883L_Test>:

uint8_t HMC5883L_Test(uint8_t mode)
{
    201c:	cf 93       	push	r28
    201e:	c8 2f       	mov	r28, r24
	twi(TWI_START);
    2020:	80 e0       	ldi	r24, 0x00	; 0
    2022:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR = HMC5883L_ADDR | I2C_WRITE;
    2026:	8c e3       	ldi	r24, 0x3C	; 60
    2028:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
    202a:	83 e0       	ldi	r24, 0x03	; 3
    202c:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR = 0x00;	//CRA
    2030:	13 b8       	out	0x03, r1	; 3
	twi(TWI_TRANSMIT);
    2032:	83 e0       	ldi	r24, 0x03	; 3
    2034:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	
	switch (mode)
    2038:	c1 30       	cpi	r28, 0x01	; 1
    203a:	39 f0       	breq	.+14     	; 0x204a <HMC5883L_Test+0x2e>
    203c:	18 f0       	brcs	.+6      	; 0x2044 <HMC5883L_Test+0x28>
    203e:	c2 30       	cpi	r28, 0x02	; 2
    2040:	51 f4       	brne	.+20     	; 0x2056 <HMC5883L_Test+0x3a>
    2042:	06 c0       	rjmp	.+12     	; 0x2050 <HMC5883L_Test+0x34>
	{
		case 0:
		{
			TWDR = 0b01111000;	//8-average, 15 Hz default, normal measurement
    2044:	88 e7       	ldi	r24, 0x78	; 120
    2046:	83 b9       	out	0x03, r24	; 3
			break;
    2048:	08 c0       	rjmp	.+16     	; 0x205a <HMC5883L_Test+0x3e>
		}
		case 1:
		{
			TWDR = 0b01111001;	//8-average, 15 Hz default, normal measurement. Positive bias configuration for X, Y, and Z axes. 
    204a:	89 e7       	ldi	r24, 0x79	; 121
    204c:	83 b9       	out	0x03, r24	; 3
			break;
    204e:	05 c0       	rjmp	.+10     	; 0x205a <HMC5883L_Test+0x3e>
		}
		case 2:
		{
			TWDR = 0b01111010;	//8-average, 15 Hz default, normal measurement. Negative bias configuration for X, Y and Z axes.
    2050:	8a e7       	ldi	r24, 0x7A	; 122
    2052:	83 b9       	out	0x03, r24	; 3
			break;
    2054:	02 c0       	rjmp	.+4      	; 0x205a <HMC5883L_Test+0x3e>
		}
		default:
		{
			TWDR = 0b01111000;	//8-average, 15 Hz default, normal measurement
    2056:	88 e7       	ldi	r24, 0x78	; 120
    2058:	83 b9       	out	0x03, r24	; 3
		}
	}
	
	twi(TWI_TRANSMIT);
    205a:	83 e0       	ldi	r24, 0x03	; 3
    205c:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	twi(TWI_STOP);
    2060:	82 e0       	ldi	r24, 0x02	; 2
    2062:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	
	return 0;	
    2066:	80 e0       	ldi	r24, 0x00	; 0
    2068:	cf 91       	pop	r28
    206a:	08 95       	ret

0000206c <twi>:

#include "i2c.h"

uint8_t twi(uint8_t action)
{
	switch(action)
    206c:	82 30       	cpi	r24, 0x02	; 2
    206e:	51 f0       	breq	.+20     	; 0x2084 <twi+0x18>
    2070:	30 f0       	brcs	.+12     	; 0x207e <twi+0x12>
    2072:	84 30       	cpi	r24, 0x04	; 4
    2074:	69 f0       	breq	.+26     	; 0x2090 <twi+0x24>
    2076:	48 f0       	brcs	.+18     	; 0x208a <twi+0x1e>
    2078:	85 30       	cpi	r24, 0x05	; 5
    207a:	81 f4       	brne	.+32     	; 0x209c <twi+0x30>
    207c:	0c c0       	rjmp	.+24     	; 0x2096 <twi+0x2a>
	{
		case TWI_START:
		case TWI_RESTART:
		TWCR = _BV(TWSTA) | _BV(TWEN) | _BV(TWINT);// Если нужно прерывание | _BV(TWIE);
    207e:	94 ea       	ldi	r25, 0xA4	; 164
    2080:	96 bf       	out	0x36, r25	; 54
		break;
    2082:	0c c0       	rjmp	.+24     	; 0x209c <twi+0x30>
		case TWI_STOP:
		TWCR = _BV(TWSTO) | _BV(TWEN) | _BV(TWINT);// | _BV(TWIE);
    2084:	84 e9       	ldi	r24, 0x94	; 148
    2086:	86 bf       	out	0x36, r24	; 54
    2088:	0e c0       	rjmp	.+28     	; 0x20a6 <twi+0x3a>
		break;
		case TWI_TRANSMIT:
		TWCR = _BV(TWEN) | _BV(TWINT);// | _BV(TWIE);
    208a:	84 e8       	ldi	r24, 0x84	; 132
    208c:	86 bf       	out	0x36, r24	; 54
		break;
    208e:	08 c0       	rjmp	.+16     	; 0x20a0 <twi+0x34>
		case TWI_RECEIVE_ACK:
		TWCR = _BV(TWEN) | _BV(TWINT) | _BV(TWEA);//| _BV(TWIE);
    2090:	84 ec       	ldi	r24, 0xC4	; 196
    2092:	86 bf       	out	0x36, r24	; 54
		break;
    2094:	05 c0       	rjmp	.+10     	; 0x20a0 <twi+0x34>
		case TWI_RECEIVE_NACK:
		TWCR = _BV(TWEN) | _BV(TWINT);// | _BV(TWIE);
    2096:	84 e8       	ldi	r24, 0x84	; 132
    2098:	86 bf       	out	0x36, r24	; 54
		break;
    209a:	02 c0       	rjmp	.+4      	; 0x20a0 <twi+0x34>
	}
	if(action != TWI_STOP)
    209c:	82 30       	cpi	r24, 0x02	; 2
    209e:	19 f0       	breq	.+6      	; 0x20a6 <twi+0x3a>
		while (!(TWCR & _BV(TWINT)));
    20a0:	06 b6       	in	r0, 0x36	; 54
    20a2:	07 fe       	sbrs	r0, 7
    20a4:	fd cf       	rjmp	.-6      	; 0x20a0 <twi+0x34>
	return (TWSR & 0xF8);
    20a6:	81 b1       	in	r24, 0x01	; 1
    20a8:	88 7f       	andi	r24, 0xF8	; 248
    20aa:	08 95       	ret

000020ac <L3G4200D_Init>:
 *  Author: Слава
 */ 
#include "L3G4200D.h"

uint8_t L3G4200D_Init()
{
    20ac:	cf 93       	push	r28
	twi(TWI_START);
    20ae:	80 e0       	ldi	r24, 0x00	; 0
    20b0:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR = L3G4200D_ADDR | I2C_WRITE;
    20b4:	c2 ed       	ldi	r28, 0xD2	; 210
    20b6:	c3 b9       	out	0x03, r28	; 3
	twi(TWI_TRANSMIT);
    20b8:	83 e0       	ldi	r24, 0x03	; 3
    20ba:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR = 0x20; //CTRL_REG1
    20be:	80 e2       	ldi	r24, 0x20	; 32
    20c0:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
    20c2:	83 e0       	ldi	r24, 0x03	; 3
    20c4:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR = 0<<DR1 | 1<<DR0 | 0<<BW1 | 0<<BW0 | 1<<PD | 1<<Zen | 1<<Yen | 1<<Xen;	
    20c8:	8f e4       	ldi	r24, 0x4F	; 79
    20ca:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
    20cc:	83 e0       	ldi	r24, 0x03	; 3
    20ce:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	twi(TWI_STOP);
    20d2:	82 e0       	ldi	r24, 0x02	; 2
    20d4:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	
	twi(TWI_START);
    20d8:	80 e0       	ldi	r24, 0x00	; 0
    20da:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR = L3G4200D_ADDR | I2C_WRITE;
    20de:	c3 b9       	out	0x03, r28	; 3
	twi(TWI_TRANSMIT);
    20e0:	83 e0       	ldi	r24, 0x03	; 3
    20e2:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR = 0x21; //CTRL_REG2
    20e6:	81 e2       	ldi	r24, 0x21	; 33
    20e8:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
    20ea:	83 e0       	ldi	r24, 0x03	; 3
    20ec:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR = 0;
    20f0:	13 b8       	out	0x03, r1	; 3
	twi(TWI_TRANSMIT);
    20f2:	83 e0       	ldi	r24, 0x03	; 3
    20f4:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	twi(TWI_STOP);
    20f8:	82 e0       	ldi	r24, 0x02	; 2
    20fa:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	
	twi(TWI_START);
    20fe:	80 e0       	ldi	r24, 0x00	; 0
    2100:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR = L3G4200D_ADDR | I2C_WRITE;
    2104:	c3 b9       	out	0x03, r28	; 3
	twi(TWI_TRANSMIT);
    2106:	83 e0       	ldi	r24, 0x03	; 3
    2108:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR = 0x22; //CTRL_REG3
    210c:	82 e2       	ldi	r24, 0x22	; 34
    210e:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
    2110:	83 e0       	ldi	r24, 0x03	; 3
    2112:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR = 0;
    2116:	13 b8       	out	0x03, r1	; 3
	twi(TWI_TRANSMIT);
    2118:	83 e0       	ldi	r24, 0x03	; 3
    211a:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	twi(TWI_STOP);
    211e:	82 e0       	ldi	r24, 0x02	; 2
    2120:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	
	twi(TWI_START);
    2124:	80 e0       	ldi	r24, 0x00	; 0
    2126:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR = L3G4200D_ADDR | I2C_WRITE;
    212a:	c3 b9       	out	0x03, r28	; 3
	twi(TWI_TRANSMIT);
    212c:	83 e0       	ldi	r24, 0x03	; 3
    212e:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR = 0x23; //CTRL_REG4
    2132:	83 e2       	ldi	r24, 0x23	; 35
    2134:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
    2136:	83 e0       	ldi	r24, 0x03	; 3
    2138:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR = 0<<BDU | 0<<BLE | 1<<FS1 | 1<<FS0 | 0<<ST1 | 0<<ST0 | 0<<SIM;	//TWDR = 1<<BDU | 0<<BLE | 0<<FS1 | 0<<FS0 | 0<<ST1 | 0<<ST0 | 0<<SIM;
    213c:	80 e3       	ldi	r24, 0x30	; 48
    213e:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
    2140:	83 e0       	ldi	r24, 0x03	; 3
    2142:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	twi(TWI_STOP);
    2146:	82 e0       	ldi	r24, 0x02	; 2
    2148:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	
	twi(TWI_START);
    214c:	80 e0       	ldi	r24, 0x00	; 0
    214e:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR = L3G4200D_ADDR | I2C_WRITE;
    2152:	c3 b9       	out	0x03, r28	; 3
	twi(TWI_TRANSMIT);
    2154:	83 e0       	ldi	r24, 0x03	; 3
    2156:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR = 0x24; //CTRL_REG5
    215a:	84 e2       	ldi	r24, 0x24	; 36
    215c:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
    215e:	83 e0       	ldi	r24, 0x03	; 3
    2160:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR = 0<<BOOT | 0<<FIFO_EN | 0<<HPen | 0<<INT1_Sel1 | 0<<INT1_Sel0 | 1<<Out_Sel1 | 0<<Out_Sel0;	//TWDR = 0<<BOOT | 0<<FIFO_EN | 0<<HPen | 0<<INT1_Sel1 | 0<<INT1_Sel0 | 0<<Out_Sel1 | 0<<Out_Sel0;
    2164:	82 e0       	ldi	r24, 0x02	; 2
    2166:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
    2168:	83 e0       	ldi	r24, 0x03	; 3
    216a:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	twi(TWI_STOP);		
    216e:	82 e0       	ldi	r24, 0x02	; 2
    2170:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	
	twi(TWI_START);
    2174:	80 e0       	ldi	r24, 0x00	; 0
    2176:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR = L3G4200D_ADDR | I2C_WRITE;
    217a:	c3 b9       	out	0x03, r28	; 3
	twi(TWI_TRANSMIT);
    217c:	83 e0       	ldi	r24, 0x03	; 3
    217e:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR = 0x2E; //FIFO_CTRL_REG
    2182:	8e e2       	ldi	r24, 0x2E	; 46
    2184:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
    2186:	83 e0       	ldi	r24, 0x03	; 3
    2188:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR = 0<<FM2 | 0<<FM1 | 0<<FM0 | 0<<WTM4 | 0<<WTM3 | 0<<WTM2 | 0<<WTM1 | 0<<WTM0;
    218c:	13 b8       	out	0x03, r1	; 3
	twi(TWI_TRANSMIT);
    218e:	83 e0       	ldi	r24, 0x03	; 3
    2190:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	twi(TWI_STOP);
    2194:	82 e0       	ldi	r24, 0x02	; 2
    2196:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	return 0;
	
}
    219a:	80 e0       	ldi	r24, 0x00	; 0
    219c:	cf 91       	pop	r28
    219e:	08 95       	ret

000021a0 <L3G4200D_Poll>:

uint8_t L3G4200D_Poll()
{
    21a0:	8f 92       	push	r8
    21a2:	9f 92       	push	r9
    21a4:	af 92       	push	r10
    21a6:	bf 92       	push	r11
    21a8:	cf 92       	push	r12
    21aa:	df 92       	push	r13
    21ac:	ef 92       	push	r14
    21ae:	ff 92       	push	r15
    21b0:	cf 93       	push	r28
    21b2:	df 93       	push	r29
	uint8_t MSB, LSB;
	
	
	
	twi(TWI_START);
    21b4:	80 e0       	ldi	r24, 0x00	; 0
    21b6:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR = L3G4200D_ADDR | I2C_WRITE;
    21ba:	d2 ed       	ldi	r29, 0xD2	; 210
    21bc:	d3 b9       	out	0x03, r29	; 3
	twi(TWI_TRANSMIT);
    21be:	83 e0       	ldi	r24, 0x03	; 3
    21c0:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR = 0x26; //OUT_TEMP
    21c4:	86 e2       	ldi	r24, 0x26	; 38
    21c6:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
    21c8:	83 e0       	ldi	r24, 0x03	; 3
    21ca:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	twi(TWI_RESTART);
    21ce:	81 e0       	ldi	r24, 0x01	; 1
    21d0:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR = L3G4200D_ADDR | I2C_READ;
    21d4:	c3 ed       	ldi	r28, 0xD3	; 211
    21d6:	c3 b9       	out	0x03, r28	; 3
	twi(TWI_TRANSMIT);
    21d8:	83 e0       	ldi	r24, 0x03	; 3
    21da:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	twi(TWI_RECEIVE_NACK);
    21de:	85 e0       	ldi	r24, 0x05	; 5
    21e0:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	LSB = TWDR;
    21e4:	f3 b0       	in	r15, 0x03	; 3
	twi(TWI_STOP);	
    21e6:	82 e0       	ldi	r24, 0x02	; 2
    21e8:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	
	Talt.value = (int8_t)LSB;
    21ec:	6f 2d       	mov	r22, r15
    21ee:	77 27       	eor	r23, r23
    21f0:	67 fd       	sbrc	r22, 7
    21f2:	70 95       	com	r23
    21f4:	87 2f       	mov	r24, r23
    21f6:	97 2f       	mov	r25, r23
    21f8:	0e 94 7b 29 	call	0x52f6	; 0x52f6 <__floatsisf>
    21fc:	60 93 5d 03 	sts	0x035D, r22
    2200:	70 93 5e 03 	sts	0x035E, r23
    2204:	80 93 5f 03 	sts	0x035F, r24
    2208:	90 93 60 03 	sts	0x0360, r25
	
	twi(TWI_START);
    220c:	80 e0       	ldi	r24, 0x00	; 0
    220e:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR = L3G4200D_ADDR | I2C_WRITE;
    2212:	d3 b9       	out	0x03, r29	; 3
	twi(TWI_TRANSMIT);
    2214:	83 e0       	ldi	r24, 0x03	; 3
    2216:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR = 0x28 | 0b10000000; //OUT_X_L
    221a:	88 ea       	ldi	r24, 0xA8	; 168
    221c:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
    221e:	83 e0       	ldi	r24, 0x03	; 3
    2220:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	twi(TWI_RESTART);
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR = L3G4200D_ADDR | I2C_READ;
    222a:	c3 b9       	out	0x03, r28	; 3
	twi(TWI_TRANSMIT);
    222c:	83 e0       	ldi	r24, 0x03	; 3
    222e:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	twi(TWI_RECEIVE_ACK);
    2232:	84 e0       	ldi	r24, 0x04	; 4
    2234:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	LSB = TWDR;
    2238:	c3 b1       	in	r28, 0x03	; 3
	twi(TWI_RECEIVE_ACK);
    223a:	84 e0       	ldi	r24, 0x04	; 4
    223c:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	MSB = TWDR;	
    2240:	83 b1       	in	r24, 0x03	; 3
	p_w_y.value = w_y.value;
    2242:	c0 90 29 03 	lds	r12, 0x0329
    2246:	d0 90 2a 03 	lds	r13, 0x032A
    224a:	e0 90 2b 03 	lds	r14, 0x032B
    224e:	f0 90 2c 03 	lds	r15, 0x032C
    2252:	c0 92 35 03 	sts	0x0335, r12
    2256:	d0 92 36 03 	sts	0x0336, r13
    225a:	e0 92 37 03 	sts	0x0337, r14
    225e:	f0 92 38 03 	sts	0x0338, r15
	if(fabs((MSB << 8 | LSB) * 0.00875 - p_w_y.value) > coeffs[L3G4200D_OFFY].value)
    2262:	78 2f       	mov	r23, r24
    2264:	60 e0       	ldi	r22, 0x00	; 0
    2266:	6c 2b       	or	r22, r28
    2268:	88 27       	eor	r24, r24
    226a:	77 fd       	sbrc	r23, 7
    226c:	80 95       	com	r24
    226e:	98 2f       	mov	r25, r24
    2270:	0e 94 7b 29 	call	0x52f6	; 0x52f6 <__floatsisf>
    2274:	29 e2       	ldi	r18, 0x29	; 41
    2276:	3c e5       	ldi	r19, 0x5C	; 92
    2278:	4f e0       	ldi	r20, 0x0F	; 15
    227a:	5c e3       	ldi	r21, 0x3C	; 60
    227c:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    2280:	86 2e       	mov	r8, r22
    2282:	97 2e       	mov	r9, r23
    2284:	a8 2e       	mov	r10, r24
    2286:	b9 2e       	mov	r11, r25
    2288:	a7 01       	movw	r20, r14
    228a:	96 01       	movw	r18, r12
    228c:	0e 94 17 28 	call	0x502e	; 0x502e <__subsf3>
    2290:	9f 77       	andi	r25, 0x7F	; 127
    2292:	20 91 6d 02 	lds	r18, 0x026D
    2296:	30 91 6e 02 	lds	r19, 0x026E
    229a:	40 91 6f 02 	lds	r20, 0x026F
    229e:	50 91 70 02 	lds	r21, 0x0270
    22a2:	0e 94 89 2a 	call	0x5512	; 0x5512 <__gesf2>
    22a6:	18 16       	cp	r1, r24
    22a8:	64 f4       	brge	.+24     	; 0x22c2 <L3G4200D_Poll+0x122>
	{
		w_y.value = (MSB << 8 | LSB) * 0.00875;
    22aa:	88 2d       	mov	r24, r8
    22ac:	99 2d       	mov	r25, r9
    22ae:	aa 2d       	mov	r26, r10
    22b0:	bb 2d       	mov	r27, r11
    22b2:	80 93 29 03 	sts	0x0329, r24
    22b6:	90 93 2a 03 	sts	0x032A, r25
    22ba:	a0 93 2b 03 	sts	0x032B, r26
    22be:	b0 93 2c 03 	sts	0x032C, r27
	}
	
	//Measure_Push((MSB << 8 | LSB) * 0.00875, WY);
	//Measure_Push((MSB << 8 | LSB), WY);
	
	twi(TWI_RECEIVE_ACK);
    22c2:	84 e0       	ldi	r24, 0x04	; 4
    22c4:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	LSB = TWDR;
    22c8:	c3 b1       	in	r28, 0x03	; 3
	twi(TWI_RECEIVE_ACK);
    22ca:	84 e0       	ldi	r24, 0x04	; 4
    22cc:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	MSB = TWDR;
    22d0:	83 b1       	in	r24, 0x03	; 3
	
	p_w_x.value = w_x.value;
    22d2:	c0 90 25 03 	lds	r12, 0x0325
    22d6:	d0 90 26 03 	lds	r13, 0x0326
    22da:	e0 90 27 03 	lds	r14, 0x0327
    22de:	f0 90 28 03 	lds	r15, 0x0328
    22e2:	c0 92 31 03 	sts	0x0331, r12
    22e6:	d0 92 32 03 	sts	0x0332, r13
    22ea:	e0 92 33 03 	sts	0x0333, r14
    22ee:	f0 92 34 03 	sts	0x0334, r15
	if(fabs((MSB << 8 | LSB) * 0.00875 - p_w_x.value) > coeffs[L3G4200D_OFFX].value)
    22f2:	78 2f       	mov	r23, r24
    22f4:	60 e0       	ldi	r22, 0x00	; 0
    22f6:	6c 2b       	or	r22, r28
    22f8:	88 27       	eor	r24, r24
    22fa:	77 fd       	sbrc	r23, 7
    22fc:	80 95       	com	r24
    22fe:	98 2f       	mov	r25, r24
    2300:	0e 94 7b 29 	call	0x52f6	; 0x52f6 <__floatsisf>
    2304:	29 e2       	ldi	r18, 0x29	; 41
    2306:	3c e5       	ldi	r19, 0x5C	; 92
    2308:	4f e0       	ldi	r20, 0x0F	; 15
    230a:	5c e3       	ldi	r21, 0x3C	; 60
    230c:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    2310:	86 2e       	mov	r8, r22
    2312:	97 2e       	mov	r9, r23
    2314:	a8 2e       	mov	r10, r24
    2316:	b9 2e       	mov	r11, r25
    2318:	a7 01       	movw	r20, r14
    231a:	96 01       	movw	r18, r12
    231c:	0e 94 17 28 	call	0x502e	; 0x502e <__subsf3>
    2320:	9f 77       	andi	r25, 0x7F	; 127
    2322:	20 91 69 02 	lds	r18, 0x0269
    2326:	30 91 6a 02 	lds	r19, 0x026A
    232a:	40 91 6b 02 	lds	r20, 0x026B
    232e:	50 91 6c 02 	lds	r21, 0x026C
    2332:	0e 94 89 2a 	call	0x5512	; 0x5512 <__gesf2>
    2336:	18 16       	cp	r1, r24
    2338:	64 f4       	brge	.+24     	; 0x2352 <L3G4200D_Poll+0x1b2>
	{
		w_x.value = (MSB << 8 | LSB) * 0.00875;
    233a:	88 2d       	mov	r24, r8
    233c:	99 2d       	mov	r25, r9
    233e:	aa 2d       	mov	r26, r10
    2340:	bb 2d       	mov	r27, r11
    2342:	80 93 25 03 	sts	0x0325, r24
    2346:	90 93 26 03 	sts	0x0326, r25
    234a:	a0 93 27 03 	sts	0x0327, r26
    234e:	b0 93 28 03 	sts	0x0328, r27
	}
	
	//Measure_Push((MSB << 8 | LSB) * 0.00875, WX);
	//Measure_Push((MSB << 8 | LSB), WX);
	
	twi(TWI_RECEIVE_ACK);
    2352:	84 e0       	ldi	r24, 0x04	; 4
    2354:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	LSB = TWDR;
    2358:	c3 b1       	in	r28, 0x03	; 3
	twi(TWI_RECEIVE_NACK);
    235a:	85 e0       	ldi	r24, 0x05	; 5
    235c:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	MSB = TWDR;
    2360:	83 b1       	in	r24, 0x03	; 3
	
	p_w_z.value = w_z.value;
    2362:	c0 90 2d 03 	lds	r12, 0x032D
    2366:	d0 90 2e 03 	lds	r13, 0x032E
    236a:	e0 90 2f 03 	lds	r14, 0x032F
    236e:	f0 90 30 03 	lds	r15, 0x0330
    2372:	c0 92 39 03 	sts	0x0339, r12
    2376:	d0 92 3a 03 	sts	0x033A, r13
    237a:	e0 92 3b 03 	sts	0x033B, r14
    237e:	f0 92 3c 03 	sts	0x033C, r15
	if(fabs((MSB << 8 | LSB) * 0.00875 - p_w_z.value) > coeffs[L3G4200D_OFFZ].value)
    2382:	78 2f       	mov	r23, r24
    2384:	60 e0       	ldi	r22, 0x00	; 0
    2386:	6c 2b       	or	r22, r28
    2388:	88 27       	eor	r24, r24
    238a:	77 fd       	sbrc	r23, 7
    238c:	80 95       	com	r24
    238e:	98 2f       	mov	r25, r24
    2390:	0e 94 7b 29 	call	0x52f6	; 0x52f6 <__floatsisf>
    2394:	4b 01       	movw	r8, r22
    2396:	5c 01       	movw	r10, r24
    2398:	29 e2       	ldi	r18, 0x29	; 41
    239a:	3c e5       	ldi	r19, 0x5C	; 92
    239c:	4f e0       	ldi	r20, 0x0F	; 15
    239e:	5c e3       	ldi	r21, 0x3C	; 60
    23a0:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    23a4:	a7 01       	movw	r20, r14
    23a6:	96 01       	movw	r18, r12
    23a8:	0e 94 17 28 	call	0x502e	; 0x502e <__subsf3>
    23ac:	9f 77       	andi	r25, 0x7F	; 127
    23ae:	20 91 71 02 	lds	r18, 0x0271
    23b2:	30 91 72 02 	lds	r19, 0x0272
    23b6:	40 91 73 02 	lds	r20, 0x0273
    23ba:	50 91 74 02 	lds	r21, 0x0274
    23be:	0e 94 89 2a 	call	0x5512	; 0x5512 <__gesf2>
    23c2:	18 16       	cp	r1, r24
    23c4:	84 f4       	brge	.+32     	; 0x23e6 <L3G4200D_Poll+0x246>
	{
		w_z.value = (MSB << 8 | LSB) * -0.00875;
    23c6:	29 e2       	ldi	r18, 0x29	; 41
    23c8:	3c e5       	ldi	r19, 0x5C	; 92
    23ca:	4f e0       	ldi	r20, 0x0F	; 15
    23cc:	5c eb       	ldi	r21, 0xBC	; 188
    23ce:	c5 01       	movw	r24, r10
    23d0:	b4 01       	movw	r22, r8
    23d2:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    23d6:	60 93 2d 03 	sts	0x032D, r22
    23da:	70 93 2e 03 	sts	0x032E, r23
    23de:	80 93 2f 03 	sts	0x032F, r24
    23e2:	90 93 30 03 	sts	0x0330, r25
	}
	
	//Measure_Push((MSB << 8 | LSB) * 0.00875, WZ);
	//Measure_Push((MSB << 8 | LSB), WZ);
	
	twi(TWI_STOP);
    23e6:	82 e0       	ldi	r24, 0x02	; 2
    23e8:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	return 0;
}
    23ec:	80 e0       	ldi	r24, 0x00	; 0
    23ee:	df 91       	pop	r29
    23f0:	cf 91       	pop	r28
    23f2:	ff 90       	pop	r15
    23f4:	ef 90       	pop	r14
    23f6:	df 90       	pop	r13
    23f8:	cf 90       	pop	r12
    23fa:	bf 90       	pop	r11
    23fc:	af 90       	pop	r10
    23fe:	9f 90       	pop	r9
    2400:	8f 90       	pop	r8
    2402:	08 95       	ret

00002404 <L3G4200D_Test>:

uint8_t L3G4200D_Test(uint8_t mode)
{
    2404:	cf 93       	push	r28
    2406:	c8 2f       	mov	r28, r24
	twi(TWI_START);
    2408:	80 e0       	ldi	r24, 0x00	; 0
    240a:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR = L3G4200D_ADDR | I2C_WRITE;
    240e:	82 ed       	ldi	r24, 0xD2	; 210
    2410:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
    2412:	83 e0       	ldi	r24, 0x03	; 3
    2414:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	TWDR = 0x23; //CTRL_REG4
    2418:	83 e2       	ldi	r24, 0x23	; 35
    241a:	83 b9       	out	0x03, r24	; 3
	twi(TWI_TRANSMIT);
    241c:	83 e0       	ldi	r24, 0x03	; 3
    241e:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	
	switch (mode)
    2422:	c1 30       	cpi	r28, 0x01	; 1
    2424:	39 f0       	breq	.+14     	; 0x2434 <L3G4200D_Test+0x30>
    2426:	18 f0       	brcs	.+6      	; 0x242e <L3G4200D_Test+0x2a>
    2428:	c2 30       	cpi	r28, 0x02	; 2
    242a:	51 f4       	brne	.+20     	; 0x2440 <L3G4200D_Test+0x3c>
    242c:	06 c0       	rjmp	.+12     	; 0x243a <L3G4200D_Test+0x36>
	{
		case 0:
		{
			TWDR = 1<<BDU | 0<<BLE | 0<<FS1 | 0<<FS0 | 0<<ST1 | 0<<ST0 | 0<<SIM;
    242e:	80 e8       	ldi	r24, 0x80	; 128
    2430:	83 b9       	out	0x03, r24	; 3
			break;
    2432:	08 c0       	rjmp	.+16     	; 0x2444 <L3G4200D_Test+0x40>
		}
		case 1:
		{
			TWDR = 1<<BDU | 0<<BLE | 0<<FS1 | 0<<FS0 | 0<<ST1 | 1<<ST0 | 0<<SIM;
    2434:	82 e8       	ldi	r24, 0x82	; 130
    2436:	83 b9       	out	0x03, r24	; 3
			break;
    2438:	05 c0       	rjmp	.+10     	; 0x2444 <L3G4200D_Test+0x40>
		}
		case 2:
		{
			TWDR = 1<<BDU | 0<<BLE | 0<<FS1 | 0<<FS0 | 1<<ST1 | 1<<ST0 | 0<<SIM;
    243a:	86 e8       	ldi	r24, 0x86	; 134
    243c:	83 b9       	out	0x03, r24	; 3
			break;
    243e:	02 c0       	rjmp	.+4      	; 0x2444 <L3G4200D_Test+0x40>
		}
		default:
		{
			TWDR = 1<<BDU | 0<<BLE | 0<<FS1 | 0<<FS0 | 0<<ST1 | 0<<ST0 | 0<<SIM;
    2440:	80 e8       	ldi	r24, 0x80	; 128
    2442:	83 b9       	out	0x03, r24	; 3
		}
	}	
	
	twi(TWI_TRANSMIT);
    2444:	83 e0       	ldi	r24, 0x03	; 3
    2446:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	twi(TWI_STOP);
    244a:	82 e0       	ldi	r24, 0x02	; 2
    244c:	0e 94 36 10 	call	0x206c	; 0x206c <twi>
	
	return 0;
    2450:	80 e0       	ldi	r24, 0x00	; 0
    2452:	cf 91       	pop	r28
    2454:	08 95       	ret

00002456 <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
    2456:	ef 92       	push	r14
    2458:	0f 93       	push	r16
    245a:	1f 93       	push	r17
    245c:	cf 93       	push	r28
    245e:	df 93       	push	r29
    2460:	c8 2f       	mov	r28, r24
    2462:	86 2f       	mov	r24, r22
    2464:	64 2f       	mov	r22, r20
    2466:	a9 01       	movw	r20, r18
    2468:	98 01       	movw	r18, r16
    eMBErrorCode    eStatus = MB_ENOERR;

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
    246a:	98 2f       	mov	r25, r24
    246c:	91 50       	subi	r25, 0x01	; 1
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
    eMBErrorCode    eStatus = MB_ENOERR;

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
    246e:	97 3f       	cpi	r25, 0xF7	; 247
    2470:	08 f0       	brcs	.+2      	; 0x2474 <eMBInit+0x1e>
    2472:	7b c0       	rjmp	.+246    	; 0x256a <eMBInit+0x114>
    {
        eStatus = MB_EINVAL;
    }
    else
    {
        ucMBAddress = ucSlaveAddress;
    2474:	80 93 be 00 	sts	0x00BE, r24

        switch ( eMode )
    2478:	cc 23       	and	r28, r28
    247a:	21 f0       	breq	.+8      	; 0x2484 <eMBInit+0x2e>
    247c:	c1 30       	cpi	r28, 0x01	; 1
    247e:	09 f0       	breq	.+2      	; 0x2482 <eMBInit+0x2c>
    2480:	67 c0       	rjmp	.+206    	; 0x2550 <eMBInit+0xfa>
    2482:	33 c0       	rjmp	.+102    	; 0x24ea <eMBInit+0x94>
        {
#if MB_RTU_ENABLED > 0
        case MB_RTU:
            pvMBFrameStartCur = eMBRTUStart;
    2484:	ef eb       	ldi	r30, 0xBF	; 191
    2486:	f8 e1       	ldi	r31, 0x18	; 24
    2488:	f0 93 c0 00 	sts	0x00C0, r31
    248c:	e0 93 bf 00 	sts	0x00BF, r30
            pvMBFrameStopCur = eMBRTUStop;
    2490:	ea ec       	ldi	r30, 0xCA	; 202
    2492:	f8 e1       	ldi	r31, 0x18	; 24
    2494:	f0 93 c2 00 	sts	0x00C2, r31
    2498:	e0 93 c1 00 	sts	0x00C1, r30
            peMBFrameSendCur = eMBRTUSend;
    249c:	eb e0       	ldi	r30, 0x0B	; 11
    249e:	f9 e1       	ldi	r31, 0x19	; 25
    24a0:	f0 93 c4 00 	sts	0x00C4, r31
    24a4:	e0 93 c3 00 	sts	0x00C3, r30
            peMBFrameReceiveCur = eMBRTUReceive;
    24a8:	e3 ed       	ldi	r30, 0xD3	; 211
    24aa:	f8 e1       	ldi	r31, 0x18	; 24
    24ac:	f0 93 c6 00 	sts	0x00C6, r31
    24b0:	e0 93 c5 00 	sts	0x00C5, r30
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
    24b4:	10 92 c8 00 	sts	0x00C8, r1
    24b8:	10 92 c7 00 	sts	0x00C7, r1
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
    24bc:	e7 e5       	ldi	r30, 0x57	; 87
    24be:	f9 e1       	ldi	r31, 0x19	; 25
    24c0:	f0 93 18 01 	sts	0x0118, r31
    24c4:	e0 93 17 01 	sts	0x0117, r30
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
    24c8:	e9 ea       	ldi	r30, 0xA9	; 169
    24ca:	f9 e1       	ldi	r31, 0x19	; 25
    24cc:	f0 93 14 01 	sts	0x0114, r31
    24d0:	e0 93 13 01 	sts	0x0113, r30
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
    24d4:	e7 ee       	ldi	r30, 0xE7	; 231
    24d6:	f9 e1       	ldi	r31, 0x19	; 25
    24d8:	f0 93 16 01 	sts	0x0116, r31
    24dc:	e0 93 15 01 	sts	0x0115, r30

            eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
    24e0:	0e 2d       	mov	r16, r14
    24e2:	0e 94 86 18 	call	0x310c	; 0x310c <eMBRTUInit>
    24e6:	d8 2f       	mov	r29, r24
            break;
    24e8:	34 c0       	rjmp	.+104    	; 0x2552 <eMBInit+0xfc>
#endif
#if MB_ASCII_ENABLED > 0
        case MB_ASCII:
            pvMBFrameStartCur = eMBASCIIStart;
    24ea:	e5 ea       	ldi	r30, 0xA5	; 165
    24ec:	f3 e1       	ldi	r31, 0x13	; 19
    24ee:	f0 93 c0 00 	sts	0x00C0, r31
    24f2:	e0 93 bf 00 	sts	0x00BF, r30
            pvMBFrameStopCur = eMBASCIIStop;
    24f6:	e1 eb       	ldi	r30, 0xB1	; 177
    24f8:	f3 e1       	ldi	r31, 0x13	; 19
    24fa:	f0 93 c2 00 	sts	0x00C2, r31
    24fe:	e0 93 c1 00 	sts	0x00C1, r30
            peMBFrameSendCur = eMBASCIISend;
    2502:	e2 ef       	ldi	r30, 0xF2	; 242
    2504:	f3 e1       	ldi	r31, 0x13	; 19
    2506:	f0 93 c4 00 	sts	0x00C4, r31
    250a:	e0 93 c3 00 	sts	0x00C3, r30
            peMBFrameReceiveCur = eMBASCIIReceive;
    250e:	ea eb       	ldi	r30, 0xBA	; 186
    2510:	f3 e1       	ldi	r31, 0x13	; 19
    2512:	f0 93 c6 00 	sts	0x00C6, r31
    2516:	e0 93 c5 00 	sts	0x00C5, r30
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
    251a:	10 92 c8 00 	sts	0x00C8, r1
    251e:	10 92 c7 00 	sts	0x00C7, r1
            pxMBFrameCBByteReceived = xMBASCIIReceiveFSM;
    2522:	ef e2       	ldi	r30, 0x2F	; 47
    2524:	f4 e1       	ldi	r31, 0x14	; 20
    2526:	f0 93 18 01 	sts	0x0118, r31
    252a:	e0 93 17 01 	sts	0x0117, r30
            pxMBFrameCBTransmitterEmpty = xMBASCIITransmitFSM;
    252e:	e4 ed       	ldi	r30, 0xD4	; 212
    2530:	f4 e1       	ldi	r31, 0x14	; 20
    2532:	f0 93 14 01 	sts	0x0114, r31
    2536:	e0 93 13 01 	sts	0x0113, r30
            pxMBPortCBTimerExpired = xMBASCIITimerT1SExpired;
    253a:	ea e5       	ldi	r30, 0x5A	; 90
    253c:	f5 e1       	ldi	r31, 0x15	; 21
    253e:	f0 93 16 01 	sts	0x0116, r31
    2542:	e0 93 15 01 	sts	0x0115, r30

            eStatus = eMBASCIIInit( ucMBAddress, ucPort, ulBaudRate, eParity );
    2546:	0e 2d       	mov	r16, r14
    2548:	0e 94 8a 13 	call	0x2714	; 0x2714 <eMBASCIIInit>
    254c:	d8 2f       	mov	r29, r24
            break;
    254e:	01 c0       	rjmp	.+2      	; 0x2552 <eMBInit+0xfc>
#endif
        default:
            eStatus = MB_EINVAL;
    2550:	d2 e0       	ldi	r29, 0x02	; 2
        }

        if( eStatus == MB_ENOERR )
    2552:	d1 11       	cpse	r29, r1
    2554:	0d c0       	rjmp	.+26     	; 0x2570 <eMBInit+0x11a>
        {
            if( !xMBPortEventInit(  ) )
    2556:	0e 94 10 1a 	call	0x3420	; 0x3420 <xMBPortEventInit>
    255a:	88 23       	and	r24, r24
    255c:	41 f0       	breq	.+16     	; 0x256e <eMBInit+0x118>
                /* port dependent event module initalization failed. */
                eStatus = MB_EPORTERR;
            }
            else
            {
                eMBCurrentMode = eMode;
    255e:	c0 93 c9 00 	sts	0x00C9, r28
                eMBState = STATE_DISABLED;
    2562:	81 e0       	ldi	r24, 0x01	; 1
    2564:	80 93 60 00 	sts	0x0060, r24
    2568:	03 c0       	rjmp	.+6      	; 0x2570 <eMBInit+0x11a>

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
    {
        eStatus = MB_EINVAL;
    256a:	d2 e0       	ldi	r29, 0x02	; 2
    256c:	01 c0       	rjmp	.+2      	; 0x2570 <eMBInit+0x11a>
        if( eStatus == MB_ENOERR )
        {
            if( !xMBPortEventInit(  ) )
            {
                /* port dependent event module initalization failed. */
                eStatus = MB_EPORTERR;
    256e:	d3 e0       	ldi	r29, 0x03	; 3
                eMBState = STATE_DISABLED;
            }
        }
    }
    return eStatus;
}
    2570:	8d 2f       	mov	r24, r29
    2572:	df 91       	pop	r29
    2574:	cf 91       	pop	r28
    2576:	1f 91       	pop	r17
    2578:	0f 91       	pop	r16
    257a:	ef 90       	pop	r14
    257c:	08 95       	ret

0000257e <eMBEnable>:
eMBErrorCode
eMBEnable( void )
{
    eMBErrorCode    eStatus = MB_ENOERR;

    if( eMBState == STATE_DISABLED )
    257e:	80 91 60 00 	lds	r24, 0x0060
    2582:	81 30       	cpi	r24, 0x01	; 1
    2584:	49 f4       	brne	.+18     	; 0x2598 <eMBEnable+0x1a>
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
    2586:	e0 91 bf 00 	lds	r30, 0x00BF
    258a:	f0 91 c0 00 	lds	r31, 0x00C0
    258e:	09 95       	icall
        eMBState = STATE_ENABLED;
    2590:	10 92 60 00 	sts	0x0060, r1
}

eMBErrorCode
eMBEnable( void )
{
    eMBErrorCode    eStatus = MB_ENOERR;
    2594:	80 e0       	ldi	r24, 0x00	; 0
    2596:	08 95       	ret
        pvMBFrameStartCur(  );
        eMBState = STATE_ENABLED;
    }
    else
    {
        eStatus = MB_EILLSTATE;
    2598:	86 e0       	ldi	r24, 0x06	; 6
    }
    return eStatus;
}
    259a:	08 95       	ret

0000259c <eMBPoll>:
    return eStatus;
}

eMBErrorCode
eMBPoll( void )
{
    259c:	cf 93       	push	r28
    259e:	df 93       	push	r29
    25a0:	1f 92       	push	r1
    25a2:	cd b7       	in	r28, 0x3d	; 61
    25a4:	de b7       	in	r29, 0x3e	; 62
    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
    25a6:	80 91 60 00 	lds	r24, 0x0060
    25aa:	81 11       	cpse	r24, r1
    25ac:	88 c0       	rjmp	.+272    	; 0x26be <eMBPoll+0x122>
        return MB_EILLSTATE;
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
    25ae:	ce 01       	movw	r24, r28
    25b0:	01 96       	adiw	r24, 0x01	; 1
    25b2:	0e 94 1b 1a 	call	0x3436	; 0x3436 <xMBPortEventGet>
    25b6:	81 30       	cpi	r24, 0x01	; 1
    25b8:	09 f0       	breq	.+2      	; 0x25bc <eMBPoll+0x20>
    25ba:	83 c0       	rjmp	.+262    	; 0x26c2 <eMBPoll+0x126>
    {
        switch ( eEvent )
    25bc:	89 81       	ldd	r24, Y+1	; 0x01
    25be:	81 30       	cpi	r24, 0x01	; 1
    25c0:	21 f0       	breq	.+8      	; 0x25ca <eMBPoll+0x2e>
    25c2:	82 30       	cpi	r24, 0x02	; 2
    25c4:	09 f0       	breq	.+2      	; 0x25c8 <eMBPoll+0x2c>
    25c6:	7f c0       	rjmp	.+254    	; 0x26c6 <eMBPoll+0x12a>
    25c8:	1a c0       	rjmp	.+52     	; 0x25fe <eMBPoll+0x62>
        {
        case EV_READY:
            break;

        case EV_FRAME_RECEIVED:
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
    25ca:	e0 91 c5 00 	lds	r30, 0x00C5
    25ce:	f0 91 c6 00 	lds	r31, 0x00C6
    25d2:	4d ec       	ldi	r20, 0xCD	; 205
    25d4:	50 e0       	ldi	r21, 0x00	; 0
    25d6:	6b ec       	ldi	r22, 0xCB	; 203
    25d8:	70 e0       	ldi	r23, 0x00	; 0
    25da:	8a ec       	ldi	r24, 0xCA	; 202
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	09 95       	icall
            if( eStatus == MB_ENOERR )
    25e0:	81 11       	cpse	r24, r1
    25e2:	73 c0       	rjmp	.+230    	; 0x26ca <eMBPoll+0x12e>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
    25e4:	80 91 ca 00 	lds	r24, 0x00CA
    25e8:	90 91 be 00 	lds	r25, 0x00BE
    25ec:	89 17       	cp	r24, r25
    25ee:	11 f0       	breq	.+4      	; 0x25f4 <eMBPoll+0x58>
    25f0:	81 11       	cpse	r24, r1
    25f2:	6d c0       	rjmp	.+218    	; 0x26ce <eMBPoll+0x132>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );
    25f4:	82 e0       	ldi	r24, 0x02	; 2
    25f6:	0e 94 14 1a 	call	0x3428	; 0x3428 <xMBPortEventPost>

        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
    25fa:	80 e0       	ldi	r24, 0x00	; 0
    25fc:	6b c0       	rjmp	.+214    	; 0x26d4 <eMBPoll+0x138>
                }
            }
            break;

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
    25fe:	a0 91 cb 00 	lds	r26, 0x00CB
    2602:	b0 91 cc 00 	lds	r27, 0x00CC
    2606:	9c 91       	ld	r25, X
    2608:	90 93 cf 00 	sts	0x00CF, r25
            eException = MB_EX_ILLEGAL_FUNCTION;
    260c:	81 e0       	ldi	r24, 0x01	; 1
    260e:	80 93 d0 00 	sts	0x00D0, r24
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
    2612:	80 91 61 00 	lds	r24, 0x0061
    2616:	88 23       	and	r24, r24
    2618:	31 f1       	breq	.+76     	; 0x2666 <eMBPoll+0xca>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
    261a:	98 17       	cp	r25, r24
    261c:	51 f0       	breq	.+20     	; 0x2632 <eMBPoll+0x96>
    261e:	e4 e6       	ldi	r30, 0x64	; 100
    2620:	f0 e0       	ldi	r31, 0x00	; 0
            break;

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
            eException = MB_EX_ILLEGAL_FUNCTION;
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
    2622:	21 e0       	ldi	r18, 0x01	; 1
    2624:	30 e0       	ldi	r19, 0x00	; 0
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
    2626:	80 81       	ld	r24, Z
    2628:	88 23       	and	r24, r24
    262a:	e9 f0       	breq	.+58     	; 0x2666 <eMBPoll+0xca>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
    262c:	98 13       	cpse	r25, r24
    262e:	15 c0       	rjmp	.+42     	; 0x265a <eMBPoll+0xbe>
    2630:	02 c0       	rjmp	.+4      	; 0x2636 <eMBPoll+0x9a>
            break;

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
            eException = MB_EX_ILLEGAL_FUNCTION;
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
    2632:	20 e0       	ldi	r18, 0x00	; 0
    2634:	30 e0       	ldi	r19, 0x00	; 0
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
    2636:	f9 01       	movw	r30, r18
    2638:	ee 0f       	add	r30, r30
    263a:	ff 1f       	adc	r31, r31
    263c:	2e 0f       	add	r18, r30
    263e:	3f 1f       	adc	r19, r31
    2640:	f9 01       	movw	r30, r18
    2642:	ef 59       	subi	r30, 0x9F	; 159
    2644:	ff 4f       	sbci	r31, 0xFF	; 255
    2646:	01 80       	ldd	r0, Z+1	; 0x01
    2648:	f2 81       	ldd	r31, Z+2	; 0x02
    264a:	e0 2d       	mov	r30, r0
    264c:	6d ec       	ldi	r22, 0xCD	; 205
    264e:	70 e0       	ldi	r23, 0x00	; 0
    2650:	cd 01       	movw	r24, r26
    2652:	09 95       	icall
    2654:	80 93 d0 00 	sts	0x00D0, r24
                    break;
    2658:	06 c0       	rjmp	.+12     	; 0x2666 <eMBPoll+0xca>
            break;

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
            eException = MB_EX_ILLEGAL_FUNCTION;
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
    265a:	2f 5f       	subi	r18, 0xFF	; 255
    265c:	3f 4f       	sbci	r19, 0xFF	; 255
    265e:	33 96       	adiw	r30, 0x03	; 3
    2660:	20 31       	cpi	r18, 0x10	; 16
    2662:	31 05       	cpc	r19, r1
    2664:	01 f7       	brne	.-64     	; 0x2626 <eMBPoll+0x8a>
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
    2666:	80 91 ca 00 	lds	r24, 0x00CA
    266a:	88 23       	and	r24, r24
    266c:	91 f1       	breq	.+100    	; 0x26d2 <eMBPoll+0x136>
            {
                if( eException != MB_EX_NONE )
    266e:	80 91 d0 00 	lds	r24, 0x00D0
    2672:	88 23       	and	r24, r24
    2674:	99 f0       	breq	.+38     	; 0x269c <eMBPoll+0x100>
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
    2676:	e0 91 cb 00 	lds	r30, 0x00CB
    267a:	f0 91 cc 00 	lds	r31, 0x00CC
    267e:	90 91 cf 00 	lds	r25, 0x00CF
    2682:	90 68       	ori	r25, 0x80	; 128
    2684:	90 83       	st	Z, r25
                    ucMBFrame[usLength++] = eException;
    2686:	e0 91 cb 00 	lds	r30, 0x00CB
    268a:	f0 91 cc 00 	lds	r31, 0x00CC
    268e:	81 83       	std	Z+1, r24	; 0x01
    2690:	82 e0       	ldi	r24, 0x02	; 2
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	90 93 ce 00 	sts	0x00CE, r25
    2698:	80 93 cd 00 	sts	0x00CD, r24
                }
                if( ( eMBCurrentMode == MB_ASCII ) && MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS )
                {
                    vMBPortTimersDelay( MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS );
                }                
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
    269c:	40 91 cd 00 	lds	r20, 0x00CD
    26a0:	50 91 ce 00 	lds	r21, 0x00CE
    26a4:	60 91 cb 00 	lds	r22, 0x00CB
    26a8:	70 91 cc 00 	lds	r23, 0x00CC
    26ac:	e0 91 c3 00 	lds	r30, 0x00C3
    26b0:	f0 91 c4 00 	lds	r31, 0x00C4
    26b4:	80 91 be 00 	lds	r24, 0x00BE
    26b8:	09 95       	icall

        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
    26ba:	80 e0       	ldi	r24, 0x00	; 0
    26bc:	0b c0       	rjmp	.+22     	; 0x26d4 <eMBPoll+0x138>
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
    {
        return MB_EILLSTATE;
    26be:	86 e0       	ldi	r24, 0x06	; 6
    26c0:	09 c0       	rjmp	.+18     	; 0x26d4 <eMBPoll+0x138>

        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
    26c2:	80 e0       	ldi	r24, 0x00	; 0
    26c4:	07 c0       	rjmp	.+14     	; 0x26d4 <eMBPoll+0x138>
    26c6:	80 e0       	ldi	r24, 0x00	; 0
    26c8:	05 c0       	rjmp	.+10     	; 0x26d4 <eMBPoll+0x138>
    26ca:	80 e0       	ldi	r24, 0x00	; 0
    26cc:	03 c0       	rjmp	.+6      	; 0x26d4 <eMBPoll+0x138>
    26ce:	80 e0       	ldi	r24, 0x00	; 0
    26d0:	01 c0       	rjmp	.+2      	; 0x26d4 <eMBPoll+0x138>
    26d2:	80 e0       	ldi	r24, 0x00	; 0
}
    26d4:	0f 90       	pop	r0
    26d6:	df 91       	pop	r29
    26d8:	cf 91       	pop	r28
    26da:	08 95       	ret

000026dc <prvucMBBIN2CHAR>:
}

static          UCHAR
prvucMBBIN2CHAR( UCHAR ucByte )
{
    if( ucByte <= 0x09 )
    26dc:	8a 30       	cpi	r24, 0x0A	; 10
    26de:	10 f4       	brcc	.+4      	; 0x26e4 <prvucMBBIN2CHAR+0x8>
    {
        return ( UCHAR )( '0' + ucByte );
    26e0:	80 5d       	subi	r24, 0xD0	; 208
    26e2:	08 95       	ret
    }
    else if( ( ucByte >= 0x0A ) && ( ucByte <= 0x0F ) )
    26e4:	98 2f       	mov	r25, r24
    26e6:	9a 50       	subi	r25, 0x0A	; 10
    26e8:	96 30       	cpi	r25, 0x06	; 6
    26ea:	10 f4       	brcc	.+4      	; 0x26f0 <prvucMBBIN2CHAR+0x14>
    {
        return ( UCHAR )( ucByte - 0x0A + 'A' );
    26ec:	89 5c       	subi	r24, 0xC9	; 201
    26ee:	08 95       	ret
    else
    {
        /* Programming error. */
        assert( 0 );
    }
    return '0';
    26f0:	80 e3       	ldi	r24, 0x30	; 48
}
    26f2:	08 95       	ret

000026f4 <prvucMBLRC>:


static          UCHAR
prvucMBLRC( UCHAR * pucFrame, USHORT usLen )
{
    26f4:	fc 01       	movw	r30, r24
    UCHAR           ucLRC = 0;  /* LRC char initialized */

    while( usLen-- )
    26f6:	61 15       	cp	r22, r1
    26f8:	71 05       	cpc	r23, r1
    26fa:	49 f0       	breq	.+18     	; 0x270e <prvucMBLRC+0x1a>
    return '0';
}


static          UCHAR
prvucMBLRC( UCHAR * pucFrame, USHORT usLen )
    26fc:	68 0f       	add	r22, r24
    26fe:	79 1f       	adc	r23, r25
{
    UCHAR           ucLRC = 0;  /* LRC char initialized */
    2700:	80 e0       	ldi	r24, 0x00	; 0

    while( usLen-- )
    {
        ucLRC += *pucFrame++;   /* Add buffer byte without carry */
    2702:	91 91       	ld	r25, Z+
    2704:	89 0f       	add	r24, r25
static          UCHAR
prvucMBLRC( UCHAR * pucFrame, USHORT usLen )
{
    UCHAR           ucLRC = 0;  /* LRC char initialized */

    while( usLen-- )
    2706:	e6 17       	cp	r30, r22
    2708:	f7 07       	cpc	r31, r23
    270a:	d9 f7       	brne	.-10     	; 0x2702 <prvucMBLRC+0xe>
    270c:	01 c0       	rjmp	.+2      	; 0x2710 <prvucMBLRC+0x1c>


static          UCHAR
prvucMBLRC( UCHAR * pucFrame, USHORT usLen )
{
    UCHAR           ucLRC = 0;  /* LRC char initialized */
    270e:	80 e0       	ldi	r24, 0x00	; 0
    }

    /* Return twos complement */
    ucLRC = ( UCHAR ) ( -( ( CHAR ) ucLRC ) );
    return ucLRC;
}
    2710:	81 95       	neg	r24
    2712:	08 95       	ret

00002714 <eMBASCIIInit>:
static volatile UCHAR ucMBLFCharacter;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBASCIIInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
    2714:	0f 93       	push	r16
    2716:	86 2f       	mov	r24, r22
    2718:	ba 01       	movw	r22, r20
    271a:	a9 01       	movw	r20, r18
    eMBErrorCode    eStatus = MB_ENOERR;
    ( void )ucSlaveAddress;
    
    ENTER_CRITICAL_SECTION(  );
    271c:	f8 94       	cli
    ucMBLFCharacter = MB_ASCII_DEFAULT_LF;
    271e:	9a e0       	ldi	r25, 0x0A	; 10
    2720:	90 93 d1 00 	sts	0x00D1, r25

    if( xMBPortSerialInit( ucPort, ulBaudRate, 7, eParity ) != TRUE )
    2724:	27 e0       	ldi	r18, 0x07	; 7
    2726:	0e 94 3b 1a 	call	0x3476	; 0x3476 <xMBPortSerialInit>
    272a:	81 30       	cpi	r24, 0x01	; 1
    272c:	41 f4       	brne	.+16     	; 0x273e <eMBASCIIInit+0x2a>
    {
        eStatus = MB_EPORTERR;
    }
    else if( xMBPortTimersInit( MB_ASCII_TIMEOUT_SEC * 20000UL ) != TRUE )
    272e:	80 e2       	ldi	r24, 0x20	; 32
    2730:	9e e4       	ldi	r25, 0x4E	; 78
    2732:	0e 94 ca 1a 	call	0x3594	; 0x3594 <xMBPortTimersInit>
    2736:	81 30       	cpi	r24, 0x01	; 1
    2738:	21 f4       	brne	.+8      	; 0x2742 <eMBASCIIInit+0x2e>

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBASCIIInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
    eMBErrorCode    eStatus = MB_ENOERR;
    273a:	80 e0       	ldi	r24, 0x00	; 0
    273c:	03 c0       	rjmp	.+6      	; 0x2744 <eMBASCIIInit+0x30>
    ENTER_CRITICAL_SECTION(  );
    ucMBLFCharacter = MB_ASCII_DEFAULT_LF;

    if( xMBPortSerialInit( ucPort, ulBaudRate, 7, eParity ) != TRUE )
    {
        eStatus = MB_EPORTERR;
    273e:	83 e0       	ldi	r24, 0x03	; 3
    2740:	01 c0       	rjmp	.+2      	; 0x2744 <eMBASCIIInit+0x30>
    }
    else if( xMBPortTimersInit( MB_ASCII_TIMEOUT_SEC * 20000UL ) != TRUE )
    {
        eStatus = MB_EPORTERR;
    2742:	83 e0       	ldi	r24, 0x03	; 3
    }

    EXIT_CRITICAL_SECTION(  );
    2744:	78 94       	sei

    return eStatus;
}
    2746:	0f 91       	pop	r16
    2748:	08 95       	ret

0000274a <eMBASCIIStart>:

void
eMBASCIIStart( void )
{
    ENTER_CRITICAL_SECTION(  );
    274a:	f8 94       	cli
    vMBPortSerialEnable( TRUE, FALSE );
    274c:	60 e0       	ldi	r22, 0x00	; 0
    274e:	81 e0       	ldi	r24, 0x01	; 1
    2750:	0e 94 29 1a 	call	0x3452	; 0x3452 <vMBPortSerialEnable>
    eRcvState = STATE_RX_IDLE;
    2754:	10 92 d7 00 	sts	0x00D7, r1
    EXIT_CRITICAL_SECTION(  );
    2758:	78 94       	sei

    /* No special startup required for ASCII. */
    ( void )xMBPortEventPost( EV_READY );
    275a:	80 e0       	ldi	r24, 0x00	; 0
    275c:	0e 94 14 1a 	call	0x3428	; 0x3428 <xMBPortEventPost>
    2760:	08 95       	ret

00002762 <eMBASCIIStop>:
}

void
eMBASCIIStop( void )
{
    ENTER_CRITICAL_SECTION(  );
    2762:	f8 94       	cli
    vMBPortSerialEnable( FALSE, FALSE );
    2764:	60 e0       	ldi	r22, 0x00	; 0
    2766:	80 e0       	ldi	r24, 0x00	; 0
    2768:	0e 94 29 1a 	call	0x3452	; 0x3452 <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
    276c:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <vMBPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
    2770:	78 94       	sei
    2772:	08 95       	ret

00002774 <eMBASCIIReceive>:
}

eMBErrorCode
eMBASCIIReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
    2774:	ef 92       	push	r14
    2776:	ff 92       	push	r15
    2778:	0f 93       	push	r16
    277a:	1f 93       	push	r17
    277c:	cf 93       	push	r28
    277e:	df 93       	push	r29
    2780:	7c 01       	movw	r14, r24
    2782:	eb 01       	movw	r28, r22
    2784:	8a 01       	movw	r16, r20
    eMBErrorCode    eStatus = MB_ENOERR;

    ENTER_CRITICAL_SECTION(  );
    2786:	f8 94       	cli
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
    2788:	20 91 d5 00 	lds	r18, 0x00D5
    278c:	30 91 d6 00 	lds	r19, 0x00D6
    2790:	23 30       	cpi	r18, 0x03	; 3
    2792:	31 05       	cpc	r19, r1
    2794:	e0 f0       	brcs	.+56     	; 0x27ce <eMBASCIIReceive+0x5a>
        && ( prvucMBLRC( ( UCHAR * ) ucASCIIBuf, usRcvBufferPos ) == 0 ) )
    2796:	60 91 d5 00 	lds	r22, 0x00D5
    279a:	70 91 d6 00 	lds	r23, 0x00D6
    279e:	8d e1       	ldi	r24, 0x1D	; 29
    27a0:	91 e0       	ldi	r25, 0x01	; 1
    27a2:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <prvucMBLRC>
    27a6:	81 11       	cpse	r24, r1
    27a8:	14 c0       	rjmp	.+40     	; 0x27d2 <eMBASCIIReceive+0x5e>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucASCIIBuf[MB_SER_PDU_ADDR_OFF];
    27aa:	80 91 1d 01 	lds	r24, 0x011D
    27ae:	f7 01       	movw	r30, r14
    27b0:	80 83       	st	Z, r24

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_LRC );
    27b2:	80 91 d5 00 	lds	r24, 0x00D5
    27b6:	90 91 d6 00 	lds	r25, 0x00D6
    27ba:	02 97       	sbiw	r24, 0x02	; 2
    27bc:	f8 01       	movw	r30, r16
    27be:	91 83       	std	Z+1, r25	; 0x01
    27c0:	80 83       	st	Z, r24

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucASCIIBuf[MB_SER_PDU_PDU_OFF];
    27c2:	8e e1       	ldi	r24, 0x1E	; 30
    27c4:	91 e0       	ldi	r25, 0x01	; 1
    27c6:	99 83       	std	Y+1, r25	; 0x01
    27c8:	88 83       	st	Y, r24
}

eMBErrorCode
eMBASCIIReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
    eMBErrorCode    eStatus = MB_ENOERR;
    27ca:	80 e0       	ldi	r24, 0x00	; 0
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_LRC );

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucASCIIBuf[MB_SER_PDU_PDU_OFF];
    27cc:	03 c0       	rjmp	.+6      	; 0x27d4 <eMBASCIIReceive+0x60>
    }
    else
    {
        eStatus = MB_EIO;
    27ce:	85 e0       	ldi	r24, 0x05	; 5
    27d0:	01 c0       	rjmp	.+2      	; 0x27d4 <eMBASCIIReceive+0x60>
    27d2:	85 e0       	ldi	r24, 0x05	; 5
    }
    EXIT_CRITICAL_SECTION(  );
    27d4:	78 94       	sei
    return eStatus;
}
    27d6:	df 91       	pop	r29
    27d8:	cf 91       	pop	r28
    27da:	1f 91       	pop	r17
    27dc:	0f 91       	pop	r16
    27de:	ff 90       	pop	r15
    27e0:	ef 90       	pop	r14
    27e2:	08 95       	ret

000027e4 <eMBASCIISend>:
eMBASCIISend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
    eMBErrorCode    eStatus = MB_ENOERR;
    UCHAR           usLRC;

    ENTER_CRITICAL_SECTION(  );
    27e4:	f8 94       	cli
    /* Check if the receiver is still in idle state. If not we where too
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
    27e6:	90 91 d7 00 	lds	r25, 0x00D7
    27ea:	91 11       	cpse	r25, r1
    27ec:	35 c0       	rjmp	.+106    	; 0x2858 <eMBASCIISend+0x74>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
    27ee:	fb 01       	movw	r30, r22
    27f0:	31 97       	sbiw	r30, 0x01	; 1
    27f2:	f0 93 da 00 	sts	0x00DA, r31
    27f6:	e0 93 d9 00 	sts	0x00D9, r30
        usSndBufferCount = 1;
    27fa:	21 e0       	ldi	r18, 0x01	; 1
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	30 93 d3 00 	sts	0x00D3, r19
    2802:	20 93 d2 00 	sts	0x00D2, r18

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
    2806:	80 83       	st	Z, r24
        usSndBufferCount += usLength;
    2808:	80 91 d2 00 	lds	r24, 0x00D2
    280c:	90 91 d3 00 	lds	r25, 0x00D3
    2810:	48 0f       	add	r20, r24
    2812:	59 1f       	adc	r21, r25
    2814:	50 93 d3 00 	sts	0x00D3, r21
    2818:	40 93 d2 00 	sts	0x00D2, r20

        /* Calculate LRC checksum for Modbus-Serial-Line-PDU. */
        usLRC = prvucMBLRC( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
    281c:	60 91 d2 00 	lds	r22, 0x00D2
    2820:	70 91 d3 00 	lds	r23, 0x00D3
    2824:	cf 01       	movw	r24, r30
    2826:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <prvucMBLRC>
        ucASCIIBuf[usSndBufferCount++] = usLRC;
    282a:	20 91 d2 00 	lds	r18, 0x00D2
    282e:	30 91 d3 00 	lds	r19, 0x00D3
    2832:	f9 01       	movw	r30, r18
    2834:	e3 5e       	subi	r30, 0xE3	; 227
    2836:	fe 4f       	sbci	r31, 0xFE	; 254
    2838:	80 83       	st	Z, r24
    283a:	2f 5f       	subi	r18, 0xFF	; 255
    283c:	3f 4f       	sbci	r19, 0xFF	; 255
    283e:	30 93 d3 00 	sts	0x00D3, r19
    2842:	20 93 d2 00 	sts	0x00D2, r18

        /* Activate the transmitter. */
        eSndState = STATE_TX_START;
    2846:	81 e0       	ldi	r24, 0x01	; 1
    2848:	80 93 d8 00 	sts	0x00D8, r24
        vMBPortSerialEnable( FALSE, TRUE );
    284c:	61 e0       	ldi	r22, 0x01	; 1
    284e:	80 e0       	ldi	r24, 0x00	; 0
    2850:	0e 94 29 1a 	call	0x3452	; 0x3452 <vMBPortSerialEnable>
}

eMBErrorCode
eMBASCIISend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
    eMBErrorCode    eStatus = MB_ENOERR;
    2854:	80 e0       	ldi	r24, 0x00	; 0
    2856:	01 c0       	rjmp	.+2      	; 0x285a <eMBASCIISend+0x76>
        eSndState = STATE_TX_START;
        vMBPortSerialEnable( FALSE, TRUE );
    }
    else
    {
        eStatus = MB_EIO;
    2858:	85 e0       	ldi	r24, 0x05	; 5
    }
    EXIT_CRITICAL_SECTION(  );
    285a:	78 94       	sei
    return eStatus;
}
    285c:	08 95       	ret

0000285e <xMBASCIIReceiveFSM>:

BOOL
xMBASCIIReceiveFSM( void )
{
    285e:	cf 93       	push	r28
    2860:	df 93       	push	r29
    2862:	1f 92       	push	r1
    2864:	cd b7       	in	r28, 0x3d	; 61
    2866:	de b7       	in	r29, 0x3e	; 62
    UCHAR           ucByte;
    UCHAR           ucResult;

    assert( eSndState == STATE_TX_IDLE );

    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
    2868:	ce 01       	movw	r24, r28
    286a:	01 96       	adiw	r24, 0x01	; 1
    286c:	0e 94 77 1a 	call	0x34ee	; 0x34ee <xMBPortSerialGetByte>
    switch ( eRcvState )
    2870:	80 91 d7 00 	lds	r24, 0x00D7
    2874:	81 30       	cpi	r24, 0x01	; 1
    2876:	31 f0       	breq	.+12     	; 0x2884 <xMBASCIIReceiveFSM+0x26>
    2878:	08 f4       	brcc	.+2      	; 0x287c <xMBASCIIReceiveFSM+0x1e>
    287a:	7d c0       	rjmp	.+250    	; 0x2976 <xMBASCIIReceiveFSM+0x118>
    287c:	82 30       	cpi	r24, 0x02	; 2
    287e:	09 f0       	breq	.+2      	; 0x2882 <xMBASCIIReceiveFSM+0x24>
    2880:	8a c0       	rjmp	.+276    	; 0x2996 <xMBASCIIReceiveFSM+0x138>
    2882:	59 c0       	rjmp	.+178    	; 0x2936 <xMBASCIIReceiveFSM+0xd8>
         * block. Other characters are part of the data block and their
         * ASCII value is converted back to a binary representation.
         */
    case STATE_RX_RCV:
        /* Enable timer for character timeout. */
        vMBPortTimersEnable(  );
    2884:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <vMBPortTimersEnable>
        if( ucByte == ':' )
    2888:	89 81       	ldd	r24, Y+1	; 0x01
    288a:	8a 33       	cpi	r24, 0x3A	; 58
    288c:	41 f4       	brne	.+16     	; 0x289e <xMBASCIIReceiveFSM+0x40>
        {
            /* Empty receive buffer. */
            eBytePos = BYTE_HIGH_NIBBLE;
    288e:	10 92 d4 00 	sts	0x00D4, r1
            usRcvBufferPos = 0;
    2892:	10 92 d6 00 	sts	0x00D6, r1
    2896:	10 92 d5 00 	sts	0x00D5, r1
}

BOOL
xMBASCIIReceiveFSM( void )
{
    BOOL            xNeedPoll = FALSE;
    289a:	80 e0       	ldi	r24, 0x00	; 0
    289c:	81 c0       	rjmp	.+258    	; 0x29a0 <xMBASCIIReceiveFSM+0x142>
        {
            /* Empty receive buffer. */
            eBytePos = BYTE_HIGH_NIBBLE;
            usRcvBufferPos = 0;
        }
        else if( ucByte == MB_ASCII_DEFAULT_CR )
    289e:	8d 30       	cpi	r24, 0x0D	; 13
    28a0:	29 f4       	brne	.+10     	; 0x28ac <xMBASCIIReceiveFSM+0x4e>
        {
            eRcvState = STATE_RX_WAIT_EOF;
    28a2:	82 e0       	ldi	r24, 0x02	; 2
    28a4:	80 93 d7 00 	sts	0x00D7, r24
}

BOOL
xMBASCIIReceiveFSM( void )
{
    BOOL            xNeedPoll = FALSE;
    28a8:	80 e0       	ldi	r24, 0x00	; 0
    28aa:	7a c0       	rjmp	.+244    	; 0x29a0 <xMBASCIIReceiveFSM+0x142>


static          UCHAR
prvucMBCHAR2BIN( UCHAR ucCharacter )
{
    if( ( ucCharacter >= '0' ) && ( ucCharacter <= '9' ) )
    28ac:	28 2f       	mov	r18, r24
    28ae:	20 53       	subi	r18, 0x30	; 48
    28b0:	2a 30       	cpi	r18, 0x0A	; 10
    28b2:	38 f0       	brcs	.+14     	; 0x28c2 <xMBASCIIReceiveFSM+0x64>
    {
        return ( UCHAR )( ucCharacter - '0' );
    }
    else if( ( ucCharacter >= 'A' ) && ( ucCharacter <= 'F' ) )
    28b4:	98 2f       	mov	r25, r24
    28b6:	91 54       	subi	r25, 0x41	; 65
    28b8:	96 30       	cpi	r25, 0x06	; 6
    28ba:	10 f4       	brcc	.+4      	; 0x28c0 <xMBASCIIReceiveFSM+0x62>
    {
        return ( UCHAR )( ucCharacter - 'A' + 0x0A );
    28bc:	27 50       	subi	r18, 0x07	; 7
    28be:	01 c0       	rjmp	.+2      	; 0x28c2 <xMBASCIIReceiveFSM+0x64>
    }
    else
    {
        return 0xFF;
    28c0:	2f ef       	ldi	r18, 0xFF	; 255
            eRcvState = STATE_RX_WAIT_EOF;
        }
        else
        {
            ucResult = prvucMBCHAR2BIN( ucByte );
            switch ( eBytePos )
    28c2:	80 91 d4 00 	lds	r24, 0x00D4
    28c6:	88 23       	and	r24, r24
    28c8:	21 f0       	breq	.+8      	; 0x28d2 <xMBASCIIReceiveFSM+0x74>
    28ca:	81 30       	cpi	r24, 0x01	; 1
    28cc:	09 f0       	breq	.+2      	; 0x28d0 <xMBASCIIReceiveFSM+0x72>
    28ce:	65 c0       	rjmp	.+202    	; 0x299a <xMBASCIIReceiveFSM+0x13c>
    28d0:	1c c0       	rjmp	.+56     	; 0x290a <xMBASCIIReceiveFSM+0xac>
            {
                /* High nibble of the byte comes first. We check for
                 * a buffer overflow here. */
            case BYTE_HIGH_NIBBLE:
                if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
    28d2:	80 91 d5 00 	lds	r24, 0x00D5
    28d6:	90 91 d6 00 	lds	r25, 0x00D6
    28da:	8f 3f       	cpi	r24, 0xFF	; 255
    28dc:	91 05       	cpc	r25, r1
    28de:	09 f0       	breq	.+2      	; 0x28e2 <xMBASCIIReceiveFSM+0x84>
    28e0:	70 f4       	brcc	.+28     	; 0x28fe <xMBASCIIReceiveFSM+0xa0>
                {
                    ucASCIIBuf[usRcvBufferPos] = ( UCHAR )( ucResult << 4 );
    28e2:	e0 91 d5 00 	lds	r30, 0x00D5
    28e6:	f0 91 d6 00 	lds	r31, 0x00D6
    28ea:	e3 5e       	subi	r30, 0xE3	; 227
    28ec:	fe 4f       	sbci	r31, 0xFE	; 254
    28ee:	22 95       	swap	r18
    28f0:	20 7f       	andi	r18, 0xF0	; 240
    28f2:	20 83       	st	Z, r18
                    eBytePos = BYTE_LOW_NIBBLE;
    28f4:	81 e0       	ldi	r24, 0x01	; 1
    28f6:	80 93 d4 00 	sts	0x00D4, r24
}

BOOL
xMBASCIIReceiveFSM( void )
{
    BOOL            xNeedPoll = FALSE;
    28fa:	80 e0       	ldi	r24, 0x00	; 0
            case BYTE_HIGH_NIBBLE:
                if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
                {
                    ucASCIIBuf[usRcvBufferPos] = ( UCHAR )( ucResult << 4 );
                    eBytePos = BYTE_LOW_NIBBLE;
                    break;
    28fc:	51 c0       	rjmp	.+162    	; 0x29a0 <xMBASCIIReceiveFSM+0x142>
                }
                else
                {
                    /* not handled in Modbus specification but seems
                     * a resonable implementation. */
                    eRcvState = STATE_RX_IDLE;
    28fe:	10 92 d7 00 	sts	0x00D7, r1
                    /* Disable previously activated timer because of error state. */
                    vMBPortTimersDisable(  );
    2902:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <vMBPortTimersDisable>
}

BOOL
xMBASCIIReceiveFSM( void )
{
    BOOL            xNeedPoll = FALSE;
    2906:	80 e0       	ldi	r24, 0x00	; 0
                     * a resonable implementation. */
                    eRcvState = STATE_RX_IDLE;
                    /* Disable previously activated timer because of error state. */
                    vMBPortTimersDisable(  );
                }
                break;
    2908:	4b c0       	rjmp	.+150    	; 0x29a0 <xMBASCIIReceiveFSM+0x142>

            case BYTE_LOW_NIBBLE:
                ucASCIIBuf[usRcvBufferPos] |= ucResult;
    290a:	e0 91 d5 00 	lds	r30, 0x00D5
    290e:	f0 91 d6 00 	lds	r31, 0x00D6
    2912:	e3 5e       	subi	r30, 0xE3	; 227
    2914:	fe 4f       	sbci	r31, 0xFE	; 254
    2916:	80 81       	ld	r24, Z
    2918:	28 2b       	or	r18, r24
    291a:	20 83       	st	Z, r18
                usRcvBufferPos++;
    291c:	80 91 d5 00 	lds	r24, 0x00D5
    2920:	90 91 d6 00 	lds	r25, 0x00D6
    2924:	01 96       	adiw	r24, 0x01	; 1
    2926:	90 93 d6 00 	sts	0x00D6, r25
    292a:	80 93 d5 00 	sts	0x00D5, r24
                eBytePos = BYTE_HIGH_NIBBLE;
    292e:	10 92 d4 00 	sts	0x00D4, r1
}

BOOL
xMBASCIIReceiveFSM( void )
{
    BOOL            xNeedPoll = FALSE;
    2932:	80 e0       	ldi	r24, 0x00	; 0

            case BYTE_LOW_NIBBLE:
                ucASCIIBuf[usRcvBufferPos] |= ucResult;
                usRcvBufferPos++;
                eBytePos = BYTE_HIGH_NIBBLE;
                break;
    2934:	35 c0       	rjmp	.+106    	; 0x29a0 <xMBASCIIReceiveFSM+0x142>
            }
        }
        break;

    case STATE_RX_WAIT_EOF:
        if( ucByte == ucMBLFCharacter )
    2936:	89 81       	ldd	r24, Y+1	; 0x01
    2938:	90 91 d1 00 	lds	r25, 0x00D1
    293c:	89 13       	cpse	r24, r25
    293e:	08 c0       	rjmp	.+16     	; 0x2950 <xMBASCIIReceiveFSM+0xf2>
        {
            /* Disable character timeout timer because all characters are
             * received. */
            vMBPortTimersDisable(  );
    2940:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <vMBPortTimersDisable>
            /* Receiver is again in idle state. */
            eRcvState = STATE_RX_IDLE;
    2944:	10 92 d7 00 	sts	0x00D7, r1

            /* Notify the caller of eMBASCIIReceive that a new frame
             * was received. */
            xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
    2948:	81 e0       	ldi	r24, 0x01	; 1
    294a:	0e 94 14 1a 	call	0x3428	; 0x3428 <xMBPortEventPost>
    294e:	28 c0       	rjmp	.+80     	; 0x29a0 <xMBASCIIReceiveFSM+0x142>
        }
        else if( ucByte == ':' )
    2950:	8a 33       	cpi	r24, 0x3A	; 58
    2952:	69 f4       	brne	.+26     	; 0x296e <xMBASCIIReceiveFSM+0x110>
        {
            /* Empty receive buffer and back to receive state. */
            eBytePos = BYTE_HIGH_NIBBLE;
    2954:	10 92 d4 00 	sts	0x00D4, r1
            usRcvBufferPos = 0;
    2958:	10 92 d6 00 	sts	0x00D6, r1
    295c:	10 92 d5 00 	sts	0x00D5, r1
            eRcvState = STATE_RX_RCV;
    2960:	81 e0       	ldi	r24, 0x01	; 1
    2962:	80 93 d7 00 	sts	0x00D7, r24

            /* Enable timer for character timeout. */
            vMBPortTimersEnable(  );
    2966:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <vMBPortTimersEnable>
}

BOOL
xMBASCIIReceiveFSM( void )
{
    BOOL            xNeedPoll = FALSE;
    296a:	80 e0       	ldi	r24, 0x00	; 0
    296c:	19 c0       	rjmp	.+50     	; 0x29a0 <xMBASCIIReceiveFSM+0x142>
            vMBPortTimersEnable(  );
        }
        else
        {
            /* Frame is not okay. Delete entire frame. */
            eRcvState = STATE_RX_IDLE;
    296e:	10 92 d7 00 	sts	0x00D7, r1
}

BOOL
xMBASCIIReceiveFSM( void )
{
    BOOL            xNeedPoll = FALSE;
    2972:	80 e0       	ldi	r24, 0x00	; 0
    2974:	15 c0       	rjmp	.+42     	; 0x29a0 <xMBASCIIReceiveFSM+0x142>
            eRcvState = STATE_RX_IDLE;
        }
        break;

    case STATE_RX_IDLE:
        if( ucByte == ':' )
    2976:	89 81       	ldd	r24, Y+1	; 0x01
    2978:	8a 33       	cpi	r24, 0x3A	; 58
    297a:	89 f4       	brne	.+34     	; 0x299e <xMBASCIIReceiveFSM+0x140>
        {
            /* Enable timer for character timeout. */
            vMBPortTimersEnable(  );
    297c:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <vMBPortTimersEnable>
            /* Reset the input buffers to store the frame. */
            usRcvBufferPos = 0;;
    2980:	10 92 d6 00 	sts	0x00D6, r1
    2984:	10 92 d5 00 	sts	0x00D5, r1
            eBytePos = BYTE_HIGH_NIBBLE;
    2988:	10 92 d4 00 	sts	0x00D4, r1
            eRcvState = STATE_RX_RCV;
    298c:	81 e0       	ldi	r24, 0x01	; 1
    298e:	80 93 d7 00 	sts	0x00D7, r24
}

BOOL
xMBASCIIReceiveFSM( void )
{
    BOOL            xNeedPoll = FALSE;
    2992:	80 e0       	ldi	r24, 0x00	; 0
    2994:	05 c0       	rjmp	.+10     	; 0x29a0 <xMBASCIIReceiveFSM+0x142>
    2996:	80 e0       	ldi	r24, 0x00	; 0
    2998:	03 c0       	rjmp	.+6      	; 0x29a0 <xMBASCIIReceiveFSM+0x142>
    299a:	80 e0       	ldi	r24, 0x00	; 0
    299c:	01 c0       	rjmp	.+2      	; 0x29a0 <xMBASCIIReceiveFSM+0x142>
    299e:	80 e0       	ldi	r24, 0x00	; 0
        }
        break;
    }

    return xNeedPoll;
}
    29a0:	0f 90       	pop	r0
    29a2:	df 91       	pop	r29
    29a4:	cf 91       	pop	r28
    29a6:	08 95       	ret

000029a8 <xMBASCIITransmitFSM>:

BOOL
xMBASCIITransmitFSM( void )
{
    29a8:	cf 93       	push	r28
    BOOL            xNeedPoll = FALSE;
    UCHAR           ucByte;

    assert( eRcvState == STATE_RX_IDLE );
    switch ( eSndState )
    29aa:	80 91 d8 00 	lds	r24, 0x00D8
    29ae:	82 30       	cpi	r24, 0x02	; 2
    29b0:	c9 f0       	breq	.+50     	; 0x29e4 <xMBASCIITransmitFSM+0x3c>
    29b2:	38 f4       	brcc	.+14     	; 0x29c2 <xMBASCIITransmitFSM+0x1a>
    29b4:	88 23       	and	r24, r24
    29b6:	09 f4       	brne	.+2      	; 0x29ba <xMBASCIITransmitFSM+0x12>
    29b8:	71 c0       	rjmp	.+226    	; 0x2a9c <xMBASCIITransmitFSM+0xf4>
    29ba:	81 30       	cpi	r24, 0x01	; 1
    29bc:	09 f0       	breq	.+2      	; 0x29c0 <xMBASCIITransmitFSM+0x18>
    29be:	74 c0       	rjmp	.+232    	; 0x2aa8 <xMBASCIITransmitFSM+0x100>
    29c0:	07 c0       	rjmp	.+14     	; 0x29d0 <xMBASCIITransmitFSM+0x28>
    29c2:	83 30       	cpi	r24, 0x03	; 3
    29c4:	09 f4       	brne	.+2      	; 0x29c8 <xMBASCIITransmitFSM+0x20>
    29c6:	54 c0       	rjmp	.+168    	; 0x2a70 <xMBASCIITransmitFSM+0xc8>
    29c8:	84 30       	cpi	r24, 0x04	; 4
    29ca:	09 f0       	breq	.+2      	; 0x29ce <xMBASCIITransmitFSM+0x26>
    29cc:	6d c0       	rjmp	.+218    	; 0x2aa8 <xMBASCIITransmitFSM+0x100>
    29ce:	59 c0       	rjmp	.+178    	; 0x2a82 <xMBASCIITransmitFSM+0xda>
    {
        /* Start of transmission. The start of a frame is defined by sending
         * the character ':'. */
    case STATE_TX_START:
        ucByte = ':';
        xMBPortSerialPutByte( ( CHAR )ucByte );
    29d0:	8a e3       	ldi	r24, 0x3A	; 58
    29d2:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <xMBPortSerialPutByte>
        eSndState = STATE_TX_DATA;
    29d6:	82 e0       	ldi	r24, 0x02	; 2
    29d8:	80 93 d8 00 	sts	0x00D8, r24
        eBytePos = BYTE_HIGH_NIBBLE;
    29dc:	10 92 d4 00 	sts	0x00D4, r1
}

BOOL
xMBASCIITransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
    29e0:	c0 e0       	ldi	r28, 0x00	; 0
    case STATE_TX_START:
        ucByte = ':';
        xMBPortSerialPutByte( ( CHAR )ucByte );
        eSndState = STATE_TX_DATA;
        eBytePos = BYTE_HIGH_NIBBLE;
        break;
    29e2:	65 c0       	rjmp	.+202    	; 0x2aae <xMBASCIITransmitFSM+0x106>
        /* Send the data block. Each data byte is encoded as a character hex
         * stream with the high nibble sent first and the low nibble sent
         * last. If all data bytes are exhausted we send a '\r' character
         * to end the transmission. */
    case STATE_TX_DATA:
        if( usSndBufferCount > 0 )
    29e4:	80 91 d2 00 	lds	r24, 0x00D2
    29e8:	90 91 d3 00 	lds	r25, 0x00D3
    29ec:	89 2b       	or	r24, r25
    29ee:	c1 f1       	breq	.+112    	; 0x2a60 <xMBASCIITransmitFSM+0xb8>
        {
            switch ( eBytePos )
    29f0:	80 91 d4 00 	lds	r24, 0x00D4
    29f4:	88 23       	and	r24, r24
    29f6:	21 f0       	breq	.+8      	; 0x2a00 <xMBASCIITransmitFSM+0x58>
    29f8:	81 30       	cpi	r24, 0x01	; 1
    29fa:	09 f0       	breq	.+2      	; 0x29fe <xMBASCIITransmitFSM+0x56>
    29fc:	57 c0       	rjmp	.+174    	; 0x2aac <xMBASCIITransmitFSM+0x104>
    29fe:	10 c0       	rjmp	.+32     	; 0x2a20 <xMBASCIITransmitFSM+0x78>
            {
            case BYTE_HIGH_NIBBLE:
                ucByte = prvucMBBIN2CHAR( ( UCHAR )( *pucSndBufferCur >> 4 ) );
    2a00:	e0 91 d9 00 	lds	r30, 0x00D9
    2a04:	f0 91 da 00 	lds	r31, 0x00DA
    2a08:	80 81       	ld	r24, Z
    2a0a:	82 95       	swap	r24
    2a0c:	8f 70       	andi	r24, 0x0F	; 15
    2a0e:	0e 94 6e 13 	call	0x26dc	; 0x26dc <prvucMBBIN2CHAR>
                xMBPortSerialPutByte( ( CHAR ) ucByte );
    2a12:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <xMBPortSerialPutByte>
                eBytePos = BYTE_LOW_NIBBLE;
    2a16:	81 e0       	ldi	r24, 0x01	; 1
    2a18:	80 93 d4 00 	sts	0x00D4, r24
}

BOOL
xMBASCIITransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
    2a1c:	c0 e0       	ldi	r28, 0x00	; 0
            {
            case BYTE_HIGH_NIBBLE:
                ucByte = prvucMBBIN2CHAR( ( UCHAR )( *pucSndBufferCur >> 4 ) );
                xMBPortSerialPutByte( ( CHAR ) ucByte );
                eBytePos = BYTE_LOW_NIBBLE;
                break;
    2a1e:	47 c0       	rjmp	.+142    	; 0x2aae <xMBASCIITransmitFSM+0x106>

            case BYTE_LOW_NIBBLE:
                ucByte = prvucMBBIN2CHAR( ( UCHAR )( *pucSndBufferCur & 0x0F ) );
    2a20:	e0 91 d9 00 	lds	r30, 0x00D9
    2a24:	f0 91 da 00 	lds	r31, 0x00DA
    2a28:	80 81       	ld	r24, Z
    2a2a:	8f 70       	andi	r24, 0x0F	; 15
    2a2c:	0e 94 6e 13 	call	0x26dc	; 0x26dc <prvucMBBIN2CHAR>
                xMBPortSerialPutByte( ( CHAR )ucByte );
    2a30:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <xMBPortSerialPutByte>
                pucSndBufferCur++;
    2a34:	80 91 d9 00 	lds	r24, 0x00D9
    2a38:	90 91 da 00 	lds	r25, 0x00DA
    2a3c:	01 96       	adiw	r24, 0x01	; 1
    2a3e:	90 93 da 00 	sts	0x00DA, r25
    2a42:	80 93 d9 00 	sts	0x00D9, r24
                eBytePos = BYTE_HIGH_NIBBLE;
    2a46:	10 92 d4 00 	sts	0x00D4, r1
                usSndBufferCount--;
    2a4a:	80 91 d2 00 	lds	r24, 0x00D2
    2a4e:	90 91 d3 00 	lds	r25, 0x00D3
    2a52:	01 97       	sbiw	r24, 0x01	; 1
    2a54:	90 93 d3 00 	sts	0x00D3, r25
    2a58:	80 93 d2 00 	sts	0x00D2, r24
}

BOOL
xMBASCIITransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
    2a5c:	c0 e0       	ldi	r28, 0x00	; 0
                ucByte = prvucMBBIN2CHAR( ( UCHAR )( *pucSndBufferCur & 0x0F ) );
                xMBPortSerialPutByte( ( CHAR )ucByte );
                pucSndBufferCur++;
                eBytePos = BYTE_HIGH_NIBBLE;
                usSndBufferCount--;
                break;
    2a5e:	27 c0       	rjmp	.+78     	; 0x2aae <xMBASCIITransmitFSM+0x106>
            }
        }
        else
        {
            xMBPortSerialPutByte( MB_ASCII_DEFAULT_CR );
    2a60:	8d e0       	ldi	r24, 0x0D	; 13
    2a62:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <xMBPortSerialPutByte>
            eSndState = STATE_TX_END;
    2a66:	83 e0       	ldi	r24, 0x03	; 3
    2a68:	80 93 d8 00 	sts	0x00D8, r24
}

BOOL
xMBASCIITransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
    2a6c:	c0 e0       	ldi	r28, 0x00	; 0
    2a6e:	1f c0       	rjmp	.+62     	; 0x2aae <xMBASCIITransmitFSM+0x106>
        }
        break;

        /* Finish the frame by sending a LF character. */
    case STATE_TX_END:
        xMBPortSerialPutByte( ( CHAR )ucMBLFCharacter );
    2a70:	80 91 d1 00 	lds	r24, 0x00D1
    2a74:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <xMBPortSerialPutByte>
        /* We need another state to make sure that the CR character has
         * been sent. */
        eSndState = STATE_TX_NOTIFY;
    2a78:	84 e0       	ldi	r24, 0x04	; 4
    2a7a:	80 93 d8 00 	sts	0x00D8, r24
}

BOOL
xMBASCIITransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
    2a7e:	c0 e0       	ldi	r28, 0x00	; 0
    case STATE_TX_END:
        xMBPortSerialPutByte( ( CHAR )ucMBLFCharacter );
        /* We need another state to make sure that the CR character has
         * been sent. */
        eSndState = STATE_TX_NOTIFY;
        break;
    2a80:	16 c0       	rjmp	.+44     	; 0x2aae <xMBASCIITransmitFSM+0x106>

        /* Notify the task which called eMBASCIISend that the frame has
         * been sent. */
    case STATE_TX_NOTIFY:
        eSndState = STATE_TX_IDLE;
    2a82:	10 92 d8 00 	sts	0x00D8, r1
        xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
    2a86:	83 e0       	ldi	r24, 0x03	; 3
    2a88:	0e 94 14 1a 	call	0x3428	; 0x3428 <xMBPortEventPost>
    2a8c:	c8 2f       	mov	r28, r24

        /* Disable transmitter. This prevents another transmit buffer
         * empty interrupt. */
        vMBPortSerialEnable( TRUE, FALSE );
    2a8e:	60 e0       	ldi	r22, 0x00	; 0
    2a90:	81 e0       	ldi	r24, 0x01	; 1
    2a92:	0e 94 29 1a 	call	0x3452	; 0x3452 <vMBPortSerialEnable>
        eSndState = STATE_TX_IDLE;
    2a96:	10 92 d8 00 	sts	0x00D8, r1
        break;
    2a9a:	09 c0       	rjmp	.+18     	; 0x2aae <xMBASCIITransmitFSM+0x106>

        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
    2a9c:	60 e0       	ldi	r22, 0x00	; 0
    2a9e:	81 e0       	ldi	r24, 0x01	; 1
    2aa0:	0e 94 29 1a 	call	0x3452	; 0x3452 <vMBPortSerialEnable>
}

BOOL
xMBASCIITransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
    2aa4:	c0 e0       	ldi	r28, 0x00	; 0
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
        break;
    2aa6:	03 c0       	rjmp	.+6      	; 0x2aae <xMBASCIITransmitFSM+0x106>
}

BOOL
xMBASCIITransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
    2aa8:	c0 e0       	ldi	r28, 0x00	; 0
    2aaa:	01 c0       	rjmp	.+2      	; 0x2aae <xMBASCIITransmitFSM+0x106>
    2aac:	c0 e0       	ldi	r28, 0x00	; 0
        vMBPortSerialEnable( TRUE, FALSE );
        break;
    }

    return xNeedPoll;
}
    2aae:	8c 2f       	mov	r24, r28
    2ab0:	cf 91       	pop	r28
    2ab2:	08 95       	ret

00002ab4 <xMBASCIITimerT1SExpired>:

BOOL
xMBASCIITimerT1SExpired( void )
{
    switch ( eRcvState )
    2ab4:	80 91 d7 00 	lds	r24, 0x00D7
    2ab8:	81 50       	subi	r24, 0x01	; 1
    2aba:	82 30       	cpi	r24, 0x02	; 2
    2abc:	10 f4       	brcc	.+4      	; 0x2ac2 <xMBASCIITimerT1SExpired+0xe>
        /* If we have a timeout we go back to the idle state and wait for
         * the next frame.
         */
    case STATE_RX_RCV:
    case STATE_RX_WAIT_EOF:
        eRcvState = STATE_RX_IDLE;
    2abe:	10 92 d7 00 	sts	0x00D7, r1

    default:
        assert( ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_WAIT_EOF ) );
        break;
    }
    vMBPortTimersDisable(  );
    2ac2:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <vMBPortTimersDisable>

    /* no context switch required. */
    return FALSE;
}
    2ac6:	80 e0       	ldi	r24, 0x00	; 0
    2ac8:	08 95       	ret

00002aca <usMBCRC16>:
    0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
    2aca:	dc 01       	movw	r26, r24
    UCHAR           ucCRCHi = 0xFF;
    UCHAR           ucCRCLo = 0xFF;
    int             iIndex;

    while( usLen-- )
    2acc:	61 15       	cp	r22, r1
    2ace:	71 05       	cpc	r23, r1
    2ad0:	b1 f0       	breq	.+44     	; 0x2afe <usMBCRC16+0x34>
    0x41, 0x81, 0x80,
    0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
    2ad2:	68 0f       	add	r22, r24
    2ad4:	79 1f       	adc	r23, r25
{
    UCHAR           ucCRCHi = 0xFF;
    UCHAR           ucCRCLo = 0xFF;
    2ad6:	4f ef       	ldi	r20, 0xFF	; 255
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
    UCHAR           ucCRCHi = 0xFF;
    2ad8:	2f ef       	ldi	r18, 0xFF	; 255
    UCHAR           ucCRCLo = 0xFF;
    int             iIndex;

    while( usLen-- )
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
    2ada:	8d 91       	ld	r24, X+
    2adc:	48 27       	eor	r20, r24
    2ade:	84 2f       	mov	r24, r20
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
        ucCRCLo = ucCRCHi ^ pgm_read_byte( &aucCRCHi[iIndex] );
    2ae2:	fc 01       	movw	r30, r24
    2ae4:	e1 56       	subi	r30, 0x61	; 97
    2ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae8:	44 91       	lpm	r20, Z
    2aea:	42 27       	eor	r20, r18
        ucCRCHi = pgm_read_byte( &aucCRCLo[iIndex] );;
    2aec:	fc 01       	movw	r30, r24
    2aee:	e1 56       	subi	r30, 0x61	; 97
    2af0:	fe 4f       	sbci	r31, 0xFE	; 254
    2af2:	e4 91       	lpm	r30, Z
    2af4:	2e 2f       	mov	r18, r30
{
    UCHAR           ucCRCHi = 0xFF;
    UCHAR           ucCRCLo = 0xFF;
    int             iIndex;

    while( usLen-- )
    2af6:	a6 17       	cp	r26, r22
    2af8:	b7 07       	cpc	r27, r23
    2afa:	79 f7       	brne	.-34     	; 0x2ada <usMBCRC16+0x10>
    2afc:	02 c0       	rjmp	.+4      	; 0x2b02 <usMBCRC16+0x38>

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
    UCHAR           ucCRCHi = 0xFF;
    UCHAR           ucCRCLo = 0xFF;
    2afe:	4f ef       	ldi	r20, 0xFF	; 255
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
    UCHAR           ucCRCHi = 0xFF;
    2b00:	ef ef       	ldi	r30, 0xFF	; 255
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
        ucCRCLo = ucCRCHi ^ pgm_read_byte( &aucCRCHi[iIndex] );
        ucCRCHi = pgm_read_byte( &aucCRCLo[iIndex] );;
    }
    return ucCRCHi << 8 | ucCRCLo;
    2b02:	20 e0       	ldi	r18, 0x00	; 0
    2b04:	24 2b       	or	r18, r20
}
    2b06:	82 2f       	mov	r24, r18
    2b08:	9e 2f       	mov	r25, r30
    2b0a:	08 95       	ret

00002b0c <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
    2b0c:	1f 93       	push	r17
    2b0e:	cf 93       	push	r28
    2b10:	df 93       	push	r29
    2b12:	eb 01       	movw	r28, r22
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    2b14:	28 81       	ld	r18, Y
    2b16:	39 81       	ldd	r19, Y+1	; 0x01
    2b18:	25 30       	cpi	r18, 0x05	; 5
    2b1a:	31 05       	cpc	r19, r1
    2b1c:	09 f0       	breq	.+2      	; 0x2b20 <eMBFuncReadCoils+0x14>
    2b1e:	56 c0       	rjmp	.+172    	; 0x2bcc <eMBFuncReadCoils+0xc0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
    2b20:	dc 01       	movw	r26, r24
    2b22:	11 96       	adiw	r26, 0x01	; 1
    2b24:	fc 91       	ld	r31, X
    2b26:	11 97       	sbiw	r26, 0x01	; 1
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
    2b28:	12 96       	adiw	r26, 0x02	; 2
    2b2a:	ec 91       	ld	r30, X
    2b2c:	12 97       	sbiw	r26, 0x02	; 2
        usRegAddress++;

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
    2b2e:	13 96       	adiw	r26, 0x03	; 3
    2b30:	5c 91       	ld	r21, X
    2b32:	13 97       	sbiw	r26, 0x03	; 3
    2b34:	40 e0       	ldi	r20, 0x00	; 0
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
    2b36:	14 96       	adiw	r26, 0x04	; 4
    2b38:	2c 91       	ld	r18, X
    2b3a:	42 2b       	or	r20, r18

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
    2b3c:	9a 01       	movw	r18, r20
    2b3e:	21 50       	subi	r18, 0x01	; 1
    2b40:	31 09       	sbc	r19, r1
    2b42:	2f 3c       	cpi	r18, 0xCF	; 207
    2b44:	37 40       	sbci	r19, 0x07	; 7
    2b46:	08 f0       	brcs	.+2      	; 0x2b4a <eMBFuncReadCoils+0x3e>
    2b48:	43 c0       	rjmp	.+134    	; 0x2bd0 <eMBFuncReadCoils+0xc4>
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
    2b4a:	19 82       	std	Y+1, r1	; 0x01
    2b4c:	18 82       	st	Y, r1

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
    2b4e:	21 e0       	ldi	r18, 0x01	; 1
    2b50:	dc 01       	movw	r26, r24
    2b52:	2c 93       	st	X, r18
            *usLen += 1;
    2b54:	28 81       	ld	r18, Y
    2b56:	39 81       	ldd	r19, Y+1	; 0x01
    2b58:	2f 5f       	subi	r18, 0xFF	; 255
    2b5a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b5c:	39 83       	std	Y+1, r19	; 0x01
    2b5e:	28 83       	st	Y, r18

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
    2b60:	9a 01       	movw	r18, r20
    2b62:	27 70       	andi	r18, 0x07	; 7
    2b64:	33 27       	eor	r19, r19
    2b66:	23 2b       	or	r18, r19
    2b68:	51 f0       	breq	.+20     	; 0x2b7e <eMBFuncReadCoils+0x72>
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
    2b6a:	9a 01       	movw	r18, r20
    2b6c:	36 95       	lsr	r19
    2b6e:	27 95       	ror	r18
    2b70:	36 95       	lsr	r19
    2b72:	27 95       	ror	r18
    2b74:	36 95       	lsr	r19
    2b76:	27 95       	ror	r18
    2b78:	12 2f       	mov	r17, r18
    2b7a:	1f 5f       	subi	r17, 0xFF	; 255
    2b7c:	08 c0       	rjmp	.+16     	; 0x2b8e <eMBFuncReadCoils+0x82>
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
    2b7e:	9a 01       	movw	r18, r20
    2b80:	36 95       	lsr	r19
    2b82:	27 95       	ror	r18
    2b84:	36 95       	lsr	r19
    2b86:	27 95       	ror	r18
    2b88:	36 95       	lsr	r19
    2b8a:	27 95       	ror	r18
    2b8c:	12 2f       	mov	r17, r18
            }
            *pucFrameCur++ = ucNBytes;
    2b8e:	dc 01       	movw	r26, r24
    2b90:	11 96       	adiw	r26, 0x01	; 1
    2b92:	1c 93       	st	X, r17
            *usLen += 1;
    2b94:	28 81       	ld	r18, Y
    2b96:	39 81       	ldd	r19, Y+1	; 0x01
    2b98:	2f 5f       	subi	r18, 0xFF	; 255
    2b9a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b9c:	39 83       	std	Y+1, r19	; 0x01
    2b9e:	28 83       	st	Y, r18
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
    2ba0:	7f 2f       	mov	r23, r31
    2ba2:	60 e0       	ldi	r22, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
    2ba4:	6e 2b       	or	r22, r30
        usRegAddress++;
    2ba6:	6f 5f       	subi	r22, 0xFF	; 255
    2ba8:	7f 4f       	sbci	r23, 0xFF	; 255
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
            }
            *pucFrameCur++ = ucNBytes;
            *usLen += 1;

            eRegStatus =
    2baa:	20 e0       	ldi	r18, 0x00	; 0
    2bac:	02 96       	adiw	r24, 0x02	; 2
    2bae:	0e 94 1a 20 	call	0x4034	; 0x4034 <eMBRegCoilsCB>
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
    2bb2:	88 23       	and	r24, r24
    2bb4:	19 f0       	breq	.+6      	; 0x2bbc <eMBFuncReadCoils+0xb0>
            {
                eStatus = prveMBError2Exception( eRegStatus );
    2bb6:	0e 94 02 1a 	call	0x3404	; 0x3404 <prveMBError2Exception>
    2bba:	0b c0       	rjmp	.+22     	; 0x2bd2 <eMBFuncReadCoils+0xc6>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
    2bbc:	88 81       	ld	r24, Y
    2bbe:	99 81       	ldd	r25, Y+1	; 0x01
    2bc0:	81 0f       	add	r24, r17
    2bc2:	91 1d       	adc	r25, r1
    2bc4:	99 83       	std	Y+1, r25	; 0x01
    2bc6:	88 83       	st	Y, r24
    USHORT          usRegAddress;
    USHORT          usCoilCount;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    2bc8:	80 e0       	ldi	r24, 0x00	; 0
    2bca:	03 c0       	rjmp	.+6      	; 0x2bd2 <eMBFuncReadCoils+0xc6>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    2bcc:	83 e0       	ldi	r24, 0x03	; 3
    2bce:	01 c0       	rjmp	.+2      	; 0x2bd2 <eMBFuncReadCoils+0xc6>
                *usLen += ucNBytes;;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    2bd0:	83 e0       	ldi	r24, 0x03	; 3
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    2bd2:	df 91       	pop	r29
    2bd4:	cf 91       	pop	r28
    2bd6:	1f 91       	pop	r17
    2bd8:	08 95       	ret

00002bda <eMBFuncWriteCoil>:

#if MB_FUNC_WRITE_COIL_ENABLED > 0
eMBException
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
    2bda:	cf 93       	push	r28
    2bdc:	df 93       	push	r29
    2bde:	00 d0       	rcall	.+0      	; 0x2be0 <eMBFuncWriteCoil+0x6>
    2be0:	cd b7       	in	r28, 0x3d	; 61
    2be2:	de b7       	in	r29, 0x3e	; 62
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    2be4:	fb 01       	movw	r30, r22
    2be6:	20 81       	ld	r18, Z
    2be8:	31 81       	ldd	r19, Z+1	; 0x01
    2bea:	25 30       	cpi	r18, 0x05	; 5
    2bec:	31 05       	cpc	r19, r1
    2bee:	19 f5       	brne	.+70     	; 0x2c36 <eMBFuncWriteCoil+0x5c>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
    2bf0:	fc 01       	movw	r30, r24
    2bf2:	41 81       	ldd	r20, Z+1	; 0x01
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
    2bf4:	32 81       	ldd	r19, Z+2	; 0x02
        usRegAddress++;

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
    2bf6:	24 81       	ldd	r18, Z+4	; 0x04
    2bf8:	21 11       	cpse	r18, r1
    2bfa:	1f c0       	rjmp	.+62     	; 0x2c3a <eMBFuncWriteCoil+0x60>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
    2bfc:	83 81       	ldd	r24, Z+3	; 0x03
    2bfe:	98 2f       	mov	r25, r24
    2c00:	91 50       	subi	r25, 0x01	; 1
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
        usRegAddress++;

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
    2c02:	9e 3f       	cpi	r25, 0xFE	; 254
    2c04:	e0 f0       	brcs	.+56     	; 0x2c3e <eMBFuncWriteCoil+0x64>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
        {
            ucBuf[1] = 0;
    2c06:	1a 82       	std	Y+2, r1	; 0x02
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
    2c08:	8f 3f       	cpi	r24, 0xFF	; 255
    2c0a:	19 f4       	brne	.+6      	; 0x2c12 <eMBFuncWriteCoil+0x38>
            {
                ucBuf[0] = 1;
    2c0c:	81 e0       	ldi	r24, 0x01	; 1
    2c0e:	89 83       	std	Y+1, r24	; 0x01
    2c10:	01 c0       	rjmp	.+2      	; 0x2c14 <eMBFuncWriteCoil+0x3a>
            }
            else
            {
                ucBuf[0] = 0;
    2c12:	19 82       	std	Y+1, r1	; 0x01
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
    2c14:	74 2f       	mov	r23, r20
    2c16:	60 e0       	ldi	r22, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
    2c18:	63 2b       	or	r22, r19
        usRegAddress++;
    2c1a:	6f 5f       	subi	r22, 0xFF	; 255
    2c1c:	7f 4f       	sbci	r23, 0xFF	; 255
            }
            else
            {
                ucBuf[0] = 0;
            }
            eRegStatus =
    2c1e:	21 e0       	ldi	r18, 0x01	; 1
    2c20:	41 e0       	ldi	r20, 0x01	; 1
    2c22:	50 e0       	ldi	r21, 0x00	; 0
    2c24:	ce 01       	movw	r24, r28
    2c26:	01 96       	adiw	r24, 0x01	; 1
    2c28:	0e 94 1a 20 	call	0x4034	; 0x4034 <eMBRegCoilsCB>
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
    2c2c:	88 23       	and	r24, r24
    2c2e:	49 f0       	breq	.+18     	; 0x2c42 <eMBFuncWriteCoil+0x68>
            {
                eStatus = prveMBError2Exception( eRegStatus );
    2c30:	0e 94 02 1a 	call	0x3404	; 0x3404 <prveMBError2Exception>
    2c34:	07 c0       	rjmp	.+14     	; 0x2c44 <eMBFuncWriteCoil+0x6a>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    2c36:	83 e0       	ldi	r24, 0x03	; 3
    2c38:	05 c0       	rjmp	.+10     	; 0x2c44 <eMBFuncWriteCoil+0x6a>
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    2c3a:	83 e0       	ldi	r24, 0x03	; 3
    2c3c:	03 c0       	rjmp	.+6      	; 0x2c44 <eMBFuncWriteCoil+0x6a>
    2c3e:	83 e0       	ldi	r24, 0x03	; 3
    2c40:	01 c0       	rjmp	.+2      	; 0x2c44 <eMBFuncWriteCoil+0x6a>
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
    USHORT          usRegAddress;
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    2c42:	80 e0       	ldi	r24, 0x00	; 0
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    2c44:	0f 90       	pop	r0
    2c46:	0f 90       	pop	r0
    2c48:	df 91       	pop	r29
    2c4a:	cf 91       	pop	r28
    2c4c:	08 95       	ret

00002c4e <eMBFuncWriteMultipleCoils>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
    2c4e:	cf 93       	push	r28
    2c50:	df 93       	push	r29
    2c52:	eb 01       	movw	r28, r22
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    2c54:	28 81       	ld	r18, Y
    2c56:	39 81       	ldd	r19, Y+1	; 0x01
    2c58:	26 30       	cpi	r18, 0x06	; 6
    2c5a:	31 05       	cpc	r19, r1
    2c5c:	08 f4       	brcc	.+2      	; 0x2c60 <eMBFuncWriteMultipleCoils+0x12>
    2c5e:	45 c0       	rjmp	.+138    	; 0x2cea <eMBFuncWriteMultipleCoils+0x9c>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
    2c60:	dc 01       	movw	r26, r24
    2c62:	11 96       	adiw	r26, 0x01	; 1
    2c64:	fc 91       	ld	r31, X
    2c66:	11 97       	sbiw	r26, 0x01	; 1
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
    2c68:	12 96       	adiw	r26, 0x02	; 2
    2c6a:	ec 91       	ld	r30, X
    2c6c:	12 97       	sbiw	r26, 0x02	; 2
        usRegAddress++;

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
    2c6e:	13 96       	adiw	r26, 0x03	; 3
    2c70:	5c 91       	ld	r21, X
    2c72:	13 97       	sbiw	r26, 0x03	; 3
    2c74:	40 e0       	ldi	r20, 0x00	; 0
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
    2c76:	14 96       	adiw	r26, 0x04	; 4
    2c78:	2c 91       	ld	r18, X
    2c7a:	14 97       	sbiw	r26, 0x04	; 4
    2c7c:	42 2b       	or	r20, r18

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
    2c7e:	15 96       	adiw	r26, 0x05	; 5
    2c80:	6c 91       	ld	r22, X

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
    2c82:	9a 01       	movw	r18, r20
    2c84:	27 70       	andi	r18, 0x07	; 7
    2c86:	33 27       	eor	r19, r19
    2c88:	23 2b       	or	r18, r19
    2c8a:	51 f0       	breq	.+20     	; 0x2ca0 <eMBFuncWriteMultipleCoils+0x52>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
    2c8c:	9a 01       	movw	r18, r20
    2c8e:	36 95       	lsr	r19
    2c90:	27 95       	ror	r18
    2c92:	36 95       	lsr	r19
    2c94:	27 95       	ror	r18
    2c96:	36 95       	lsr	r19
    2c98:	27 95       	ror	r18
    2c9a:	72 2f       	mov	r23, r18
    2c9c:	7f 5f       	subi	r23, 0xFF	; 255
    2c9e:	08 c0       	rjmp	.+16     	; 0x2cb0 <eMBFuncWriteMultipleCoils+0x62>
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
    2ca0:	9a 01       	movw	r18, r20
    2ca2:	36 95       	lsr	r19
    2ca4:	27 95       	ror	r18
    2ca6:	36 95       	lsr	r19
    2ca8:	27 95       	ror	r18
    2caa:	36 95       	lsr	r19
    2cac:	27 95       	ror	r18
    2cae:	72 2f       	mov	r23, r18
        }

        if( ( usCoilCnt >= 1 ) &&
    2cb0:	9a 01       	movw	r18, r20
    2cb2:	21 50       	subi	r18, 0x01	; 1
    2cb4:	31 09       	sbc	r19, r1
    2cb6:	20 3b       	cpi	r18, 0xB0	; 176
    2cb8:	37 40       	sbci	r19, 0x07	; 7
    2cba:	c8 f4       	brcc	.+50     	; 0x2cee <eMBFuncWriteMultipleCoils+0xa0>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
    2cbc:	76 13       	cpse	r23, r22
    2cbe:	19 c0       	rjmp	.+50     	; 0x2cf2 <eMBFuncWriteMultipleCoils+0xa4>
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
    2cc0:	3f 2f       	mov	r19, r31
    2cc2:	20 e0       	ldi	r18, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
    2cc4:	2e 2b       	or	r18, r30
        usRegAddress++;
    2cc6:	b9 01       	movw	r22, r18
    2cc8:	6f 5f       	subi	r22, 0xFF	; 255
    2cca:	7f 4f       	sbci	r23, 0xFF	; 255

        if( ( usCoilCnt >= 1 ) &&
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
    2ccc:	21 e0       	ldi	r18, 0x01	; 1
    2cce:	06 96       	adiw	r24, 0x06	; 6
    2cd0:	0e 94 1a 20 	call	0x4034	; 0x4034 <eMBRegCoilsCB>
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
    2cd4:	88 23       	and	r24, r24
    2cd6:	19 f0       	breq	.+6      	; 0x2cde <eMBFuncWriteMultipleCoils+0x90>
            {
                eStatus = prveMBError2Exception( eRegStatus );
    2cd8:	0e 94 02 1a 	call	0x3404	; 0x3404 <prveMBError2Exception>
    2cdc:	0b c0       	rjmp	.+22     	; 0x2cf4 <eMBFuncWriteMultipleCoils+0xa6>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
    2cde:	85 e0       	ldi	r24, 0x05	; 5
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	99 83       	std	Y+1, r25	; 0x01
    2ce4:	88 83       	st	Y, r24
    USHORT          usRegAddress;
    USHORT          usCoilCnt;
    UCHAR           ucByteCount;
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
    2ce6:	80 e0       	ldi	r24, 0x00	; 0
    2ce8:	05 c0       	rjmp	.+10     	; 0x2cf4 <eMBFuncWriteMultipleCoils+0xa6>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    2cea:	83 e0       	ldi	r24, 0x03	; 3
    2cec:	03 c0       	rjmp	.+6      	; 0x2cf4 <eMBFuncWriteMultipleCoils+0xa6>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    2cee:	83 e0       	ldi	r24, 0x03	; 3
    2cf0:	01 c0       	rjmp	.+2      	; 0x2cf4 <eMBFuncWriteMultipleCoils+0xa6>
    2cf2:	83 e0       	ldi	r24, 0x03	; 3
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    2cf4:	df 91       	pop	r29
    2cf6:	cf 91       	pop	r28
    2cf8:	08 95       	ret

00002cfa <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
    2cfa:	1f 93       	push	r17
    2cfc:	cf 93       	push	r28
    2cfe:	df 93       	push	r29
    2d00:	eb 01       	movw	r28, r22
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    2d02:	28 81       	ld	r18, Y
    2d04:	39 81       	ldd	r19, Y+1	; 0x01
    2d06:	25 30       	cpi	r18, 0x05	; 5
    2d08:	31 05       	cpc	r19, r1
    2d0a:	09 f0       	breq	.+2      	; 0x2d0e <eMBFuncReadDiscreteInputs+0x14>
    2d0c:	55 c0       	rjmp	.+170    	; 0x2db8 <eMBFuncReadDiscreteInputs+0xbe>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
    2d0e:	dc 01       	movw	r26, r24
    2d10:	11 96       	adiw	r26, 0x01	; 1
    2d12:	fc 91       	ld	r31, X
    2d14:	11 97       	sbiw	r26, 0x01	; 1
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
    2d16:	12 96       	adiw	r26, 0x02	; 2
    2d18:	ec 91       	ld	r30, X
    2d1a:	12 97       	sbiw	r26, 0x02	; 2
        usRegAddress++;

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
    2d1c:	13 96       	adiw	r26, 0x03	; 3
    2d1e:	5c 91       	ld	r21, X
    2d20:	13 97       	sbiw	r26, 0x03	; 3
    2d22:	40 e0       	ldi	r20, 0x00	; 0
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
    2d24:	14 96       	adiw	r26, 0x04	; 4
    2d26:	2c 91       	ld	r18, X
    2d28:	42 2b       	or	r20, r18

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
    2d2a:	9a 01       	movw	r18, r20
    2d2c:	21 50       	subi	r18, 0x01	; 1
    2d2e:	31 09       	sbc	r19, r1
    2d30:	2f 3c       	cpi	r18, 0xCF	; 207
    2d32:	37 40       	sbci	r19, 0x07	; 7
    2d34:	08 f0       	brcs	.+2      	; 0x2d38 <eMBFuncReadDiscreteInputs+0x3e>
    2d36:	42 c0       	rjmp	.+132    	; 0x2dbc <eMBFuncReadDiscreteInputs+0xc2>
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
    2d38:	19 82       	std	Y+1, r1	; 0x01
    2d3a:	18 82       	st	Y, r1

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
    2d3c:	22 e0       	ldi	r18, 0x02	; 2
    2d3e:	dc 01       	movw	r26, r24
    2d40:	2c 93       	st	X, r18
            *usLen += 1;
    2d42:	28 81       	ld	r18, Y
    2d44:	39 81       	ldd	r19, Y+1	; 0x01
    2d46:	2f 5f       	subi	r18, 0xFF	; 255
    2d48:	3f 4f       	sbci	r19, 0xFF	; 255
    2d4a:	39 83       	std	Y+1, r19	; 0x01
    2d4c:	28 83       	st	Y, r18

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
    2d4e:	9a 01       	movw	r18, r20
    2d50:	27 70       	andi	r18, 0x07	; 7
    2d52:	33 27       	eor	r19, r19
    2d54:	23 2b       	or	r18, r19
    2d56:	51 f0       	breq	.+20     	; 0x2d6c <eMBFuncReadDiscreteInputs+0x72>
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
    2d58:	9a 01       	movw	r18, r20
    2d5a:	36 95       	lsr	r19
    2d5c:	27 95       	ror	r18
    2d5e:	36 95       	lsr	r19
    2d60:	27 95       	ror	r18
    2d62:	36 95       	lsr	r19
    2d64:	27 95       	ror	r18
    2d66:	12 2f       	mov	r17, r18
    2d68:	1f 5f       	subi	r17, 0xFF	; 255
    2d6a:	08 c0       	rjmp	.+16     	; 0x2d7c <eMBFuncReadDiscreteInputs+0x82>
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
    2d6c:	9a 01       	movw	r18, r20
    2d6e:	36 95       	lsr	r19
    2d70:	27 95       	ror	r18
    2d72:	36 95       	lsr	r19
    2d74:	27 95       	ror	r18
    2d76:	36 95       	lsr	r19
    2d78:	27 95       	ror	r18
    2d7a:	12 2f       	mov	r17, r18
            }
            *pucFrameCur++ = ucNBytes;
    2d7c:	dc 01       	movw	r26, r24
    2d7e:	11 96       	adiw	r26, 0x01	; 1
    2d80:	1c 93       	st	X, r17
            *usLen += 1;
    2d82:	28 81       	ld	r18, Y
    2d84:	39 81       	ldd	r19, Y+1	; 0x01
    2d86:	2f 5f       	subi	r18, 0xFF	; 255
    2d88:	3f 4f       	sbci	r19, 0xFF	; 255
    2d8a:	39 83       	std	Y+1, r19	; 0x01
    2d8c:	28 83       	st	Y, r18
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
    2d8e:	7f 2f       	mov	r23, r31
    2d90:	60 e0       	ldi	r22, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
    2d92:	6e 2b       	or	r22, r30
        usRegAddress++;
    2d94:	6f 5f       	subi	r22, 0xFF	; 255
    2d96:	7f 4f       	sbci	r23, 0xFF	; 255
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
            }
            *pucFrameCur++ = ucNBytes;
            *usLen += 1;

            eRegStatus =
    2d98:	02 96       	adiw	r24, 0x02	; 2
    2d9a:	0e 94 1c 20 	call	0x4038	; 0x4038 <eMBRegDiscreteCB>
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
    2d9e:	88 23       	and	r24, r24
    2da0:	19 f0       	breq	.+6      	; 0x2da8 <eMBFuncReadDiscreteInputs+0xae>
            {
                eStatus = prveMBError2Exception( eRegStatus );
    2da2:	0e 94 02 1a 	call	0x3404	; 0x3404 <prveMBError2Exception>
    2da6:	0b c0       	rjmp	.+22     	; 0x2dbe <eMBFuncReadDiscreteInputs+0xc4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
    2da8:	88 81       	ld	r24, Y
    2daa:	99 81       	ldd	r25, Y+1	; 0x01
    2dac:	81 0f       	add	r24, r17
    2dae:	91 1d       	adc	r25, r1
    2db0:	99 83       	std	Y+1, r25	; 0x01
    2db2:	88 83       	st	Y, r24
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    2db4:	80 e0       	ldi	r24, 0x00	; 0
    2db6:	03 c0       	rjmp	.+6      	; 0x2dbe <eMBFuncReadDiscreteInputs+0xc4>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    2db8:	83 e0       	ldi	r24, 0x03	; 3
    2dba:	01 c0       	rjmp	.+2      	; 0x2dbe <eMBFuncReadDiscreteInputs+0xc4>
                *usLen += ucNBytes;;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    2dbc:	83 e0       	ldi	r24, 0x03	; 3
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    2dbe:	df 91       	pop	r29
    2dc0:	cf 91       	pop	r28
    2dc2:	1f 91       	pop	r17
    2dc4:	08 95       	ret

00002dc6 <eMBFuncWriteHoldingRegister>:
{
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    2dc6:	fb 01       	movw	r30, r22
    2dc8:	20 81       	ld	r18, Z
    2dca:	31 81       	ldd	r19, Z+1	; 0x01
    2dcc:	25 30       	cpi	r18, 0x05	; 5
    2dce:	31 05       	cpc	r19, r1
    2dd0:	91 f4       	brne	.+36     	; 0x2df6 <eMBFuncWriteHoldingRegister+0x30>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
    2dd2:	fc 01       	movw	r30, r24
    2dd4:	71 81       	ldd	r23, Z+1	; 0x01
    2dd6:	60 e0       	ldi	r22, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
    2dd8:	22 81       	ldd	r18, Z+2	; 0x02
    2dda:	62 2b       	or	r22, r18
        usRegAddress++;
    2ddc:	6f 5f       	subi	r22, 0xFF	; 255
    2dde:	7f 4f       	sbci	r23, 0xFF	; 255

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
    2de0:	21 e0       	ldi	r18, 0x01	; 1
    2de2:	41 e0       	ldi	r20, 0x01	; 1
    2de4:	50 e0       	ldi	r21, 0x00	; 0
    2de6:	03 96       	adiw	r24, 0x03	; 3
    2de8:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <eMBRegHoldingCB>
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
    2dec:	88 23       	and	r24, r24
    2dee:	29 f0       	breq	.+10     	; 0x2dfa <eMBFuncWriteHoldingRegister+0x34>
        {
            eStatus = prveMBError2Exception( eRegStatus );
    2df0:	0e 94 02 1a 	call	0x3404	; 0x3404 <prveMBError2Exception>
    2df4:	08 95       	ret
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    2df6:	83 e0       	ldi	r24, 0x03	; 3
    2df8:	08 95       	ret

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
    2dfa:	80 e0       	ldi	r24, 0x00	; 0
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    2dfc:	08 95       	ret

00002dfe <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
    2dfe:	cf 93       	push	r28
    2e00:	df 93       	push	r29
    2e02:	eb 01       	movw	r28, r22
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
    2e04:	28 81       	ld	r18, Y
    2e06:	39 81       	ldd	r19, Y+1	; 0x01
    2e08:	26 30       	cpi	r18, 0x06	; 6
    2e0a:	31 05       	cpc	r19, r1
    2e0c:	80 f1       	brcs	.+96     	; 0x2e6e <eMBFuncWriteMultipleHoldingRegister+0x70>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
    2e0e:	dc 01       	movw	r26, r24
    2e10:	11 96       	adiw	r26, 0x01	; 1
    2e12:	ec 91       	ld	r30, X
    2e14:	11 97       	sbiw	r26, 0x01	; 1
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
    2e16:	12 96       	adiw	r26, 0x02	; 2
    2e18:	7c 91       	ld	r23, X
    2e1a:	12 97       	sbiw	r26, 0x02	; 2
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
    2e1c:	13 96       	adiw	r26, 0x03	; 3
    2e1e:	5c 91       	ld	r21, X
    2e20:	13 97       	sbiw	r26, 0x03	; 3
    2e22:	40 e0       	ldi	r20, 0x00	; 0
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
    2e24:	14 96       	adiw	r26, 0x04	; 4
    2e26:	2c 91       	ld	r18, X
    2e28:	14 97       	sbiw	r26, 0x04	; 4
    2e2a:	42 2b       	or	r20, r18

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
    2e2c:	15 96       	adiw	r26, 0x05	; 5
    2e2e:	6c 91       	ld	r22, X

        if( ( usRegCount >= 1 ) &&
    2e30:	9a 01       	movw	r18, r20
    2e32:	21 50       	subi	r18, 0x01	; 1
    2e34:	31 09       	sbc	r19, r1
    2e36:	28 37       	cpi	r18, 0x78	; 120
    2e38:	31 05       	cpc	r19, r1
    2e3a:	d8 f4       	brcc	.+54     	; 0x2e72 <eMBFuncWriteMultipleHoldingRegister+0x74>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
    2e3c:	24 2f       	mov	r18, r20
    2e3e:	22 0f       	add	r18, r18
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];

        if( ( usRegCount >= 1 ) &&
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
    2e40:	26 13       	cpse	r18, r22
    2e42:	19 c0       	rjmp	.+50     	; 0x2e76 <eMBFuncWriteMultipleHoldingRegister+0x78>
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
    2e44:	3e 2f       	mov	r19, r30
    2e46:	20 e0       	ldi	r18, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
    2e48:	27 2b       	or	r18, r23
        usRegAddress++;
    2e4a:	b9 01       	movw	r22, r18
    2e4c:	6f 5f       	subi	r22, 0xFF	; 255
    2e4e:	7f 4f       	sbci	r23, 0xFF	; 255
        if( ( usRegCount >= 1 ) &&
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
        {
            /* Make callback to update the register values. */
            eRegStatus =
    2e50:	21 e0       	ldi	r18, 0x01	; 1
    2e52:	06 96       	adiw	r24, 0x06	; 6
    2e54:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <eMBRegHoldingCB>
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
    2e58:	88 23       	and	r24, r24
    2e5a:	19 f0       	breq	.+6      	; 0x2e62 <eMBFuncWriteMultipleHoldingRegister+0x64>
            {
                eStatus = prveMBError2Exception( eRegStatus );
    2e5c:	0e 94 02 1a 	call	0x3404	; 0x3404 <prveMBError2Exception>
    2e60:	0b c0       	rjmp	.+22     	; 0x2e78 <eMBFuncWriteMultipleHoldingRegister+0x7a>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
    2e62:	85 e0       	ldi	r24, 0x05	; 5
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	99 83       	std	Y+1, r25	; 0x01
    2e68:	88 83       	st	Y, r24
{
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
    2e6a:	80 e0       	ldi	r24, 0x00	; 0
    2e6c:	05 c0       	rjmp	.+10     	; 0x2e78 <eMBFuncWriteMultipleHoldingRegister+0x7a>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    2e6e:	83 e0       	ldi	r24, 0x03	; 3
    2e70:	03 c0       	rjmp	.+6      	; 0x2e78 <eMBFuncWriteMultipleHoldingRegister+0x7a>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    2e72:	83 e0       	ldi	r24, 0x03	; 3
    2e74:	01 c0       	rjmp	.+2      	; 0x2e78 <eMBFuncWriteMultipleHoldingRegister+0x7a>
    2e76:	83 e0       	ldi	r24, 0x03	; 3
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    2e78:	df 91       	pop	r29
    2e7a:	cf 91       	pop	r28
    2e7c:	08 95       	ret

00002e7e <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
    2e7e:	0f 93       	push	r16
    2e80:	1f 93       	push	r17
    2e82:	cf 93       	push	r28
    2e84:	df 93       	push	r29
    2e86:	eb 01       	movw	r28, r22
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    2e88:	28 81       	ld	r18, Y
    2e8a:	39 81       	ldd	r19, Y+1	; 0x01
    2e8c:	25 30       	cpi	r18, 0x05	; 5
    2e8e:	31 05       	cpc	r19, r1
    2e90:	f1 f5       	brne	.+124    	; 0x2f0e <eMBFuncReadHoldingRegister+0x90>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
    2e92:	dc 01       	movw	r26, r24
    2e94:	11 96       	adiw	r26, 0x01	; 1
    2e96:	ec 91       	ld	r30, X
    2e98:	11 97       	sbiw	r26, 0x01	; 1
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
    2e9a:	12 96       	adiw	r26, 0x02	; 2
    2e9c:	5c 91       	ld	r21, X
    2e9e:	12 97       	sbiw	r26, 0x02	; 2
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
    2ea0:	14 96       	adiw	r26, 0x04	; 4
    2ea2:	4c 91       	ld	r20, X
    2ea4:	14 97       	sbiw	r26, 0x04	; 4
    2ea6:	04 2f       	mov	r16, r20
    2ea8:	10 e0       	ldi	r17, 0x00	; 0

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
    2eaa:	98 01       	movw	r18, r16
    2eac:	21 50       	subi	r18, 0x01	; 1
    2eae:	31 09       	sbc	r19, r1
    2eb0:	2d 37       	cpi	r18, 0x7D	; 125
    2eb2:	31 05       	cpc	r19, r1
    2eb4:	70 f5       	brcc	.+92     	; 0x2f12 <eMBFuncReadHoldingRegister+0x94>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
    2eb6:	19 82       	std	Y+1, r1	; 0x01
    2eb8:	18 82       	st	Y, r1

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
    2eba:	23 e0       	ldi	r18, 0x03	; 3
    2ebc:	2c 93       	st	X, r18
            *usLen += 1;
    2ebe:	28 81       	ld	r18, Y
    2ec0:	39 81       	ldd	r19, Y+1	; 0x01
    2ec2:	2f 5f       	subi	r18, 0xFF	; 255
    2ec4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ec6:	39 83       	std	Y+1, r19	; 0x01
    2ec8:	28 83       	st	Y, r18

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
    2eca:	44 0f       	add	r20, r20
    2ecc:	11 96       	adiw	r26, 0x01	; 1
    2ece:	4c 93       	st	X, r20
            *usLen += 1;
    2ed0:	28 81       	ld	r18, Y
    2ed2:	39 81       	ldd	r19, Y+1	; 0x01
    2ed4:	2f 5f       	subi	r18, 0xFF	; 255
    2ed6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ed8:	39 83       	std	Y+1, r19	; 0x01
    2eda:	28 83       	st	Y, r18
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
    2edc:	7e 2f       	mov	r23, r30
    2ede:	60 e0       	ldi	r22, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
    2ee0:	65 2b       	or	r22, r21
        usRegAddress++;
    2ee2:	6f 5f       	subi	r22, 0xFF	; 255
    2ee4:	7f 4f       	sbci	r23, 0xFF	; 255
            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
            *usLen += 1;

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
    2ee6:	20 e0       	ldi	r18, 0x00	; 0
    2ee8:	a8 01       	movw	r20, r16
    2eea:	02 96       	adiw	r24, 0x02	; 2
    2eec:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <eMBRegHoldingCB>
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
    2ef0:	88 23       	and	r24, r24
    2ef2:	19 f0       	breq	.+6      	; 0x2efa <eMBFuncReadHoldingRegister+0x7c>
            {
                eStatus = prveMBError2Exception( eRegStatus );
    2ef4:	0e 94 02 1a 	call	0x3404	; 0x3404 <prveMBError2Exception>
    2ef8:	0d c0       	rjmp	.+26     	; 0x2f14 <eMBFuncReadHoldingRegister+0x96>
            }
            else
            {
                *usLen += usRegCount * 2;
    2efa:	00 0f       	add	r16, r16
    2efc:	11 1f       	adc	r17, r17
    2efe:	88 81       	ld	r24, Y
    2f00:	99 81       	ldd	r25, Y+1	; 0x01
    2f02:	08 0f       	add	r16, r24
    2f04:	19 1f       	adc	r17, r25
    2f06:	19 83       	std	Y+1, r17	; 0x01
    2f08:	08 83       	st	Y, r16
{
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    2f0a:	80 e0       	ldi	r24, 0x00	; 0
    2f0c:	03 c0       	rjmp	.+6      	; 0x2f14 <eMBFuncReadHoldingRegister+0x96>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    2f0e:	83 e0       	ldi	r24, 0x03	; 3
    2f10:	01 c0       	rjmp	.+2      	; 0x2f14 <eMBFuncReadHoldingRegister+0x96>
                *usLen += usRegCount * 2;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    2f12:	83 e0       	ldi	r24, 0x03	; 3
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    2f14:	df 91       	pop	r29
    2f16:	cf 91       	pop	r28
    2f18:	1f 91       	pop	r17
    2f1a:	0f 91       	pop	r16
    2f1c:	08 95       	ret

00002f1e <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
    2f1e:	cf 92       	push	r12
    2f20:	df 92       	push	r13
    2f22:	ef 92       	push	r14
    2f24:	ff 92       	push	r15
    2f26:	0f 93       	push	r16
    2f28:	1f 93       	push	r17
    2f2a:	cf 93       	push	r28
    2f2c:	df 93       	push	r29
    2f2e:	ec 01       	movw	r28, r24
    2f30:	8b 01       	movw	r16, r22
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
    2f32:	fb 01       	movw	r30, r22
    2f34:	80 81       	ld	r24, Z
    2f36:	91 81       	ldd	r25, Z+1	; 0x01
    2f38:	0a 97       	sbiw	r24, 0x0a	; 10
    2f3a:	08 f4       	brcc	.+2      	; 0x2f3e <eMBFuncReadWriteMultipleHoldingRegister+0x20>
    2f3c:	5d c0       	rjmp	.+186    	; 0x2ff8 <eMBFuncReadWriteMultipleHoldingRegister+0xda>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
    2f3e:	c9 80       	ldd	r12, Y+1	; 0x01
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
    2f40:	da 80       	ldd	r13, Y+2	; 0x02
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
    2f42:	9b 81       	ldd	r25, Y+3	; 0x03
    2f44:	80 e0       	ldi	r24, 0x00	; 0
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
    2f46:	2c 81       	ldd	r18, Y+4	; 0x04
    2f48:	7c 01       	movw	r14, r24
    2f4a:	e2 2a       	or	r14, r18

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
    2f4c:	7d 81       	ldd	r23, Y+5	; 0x05
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
    2f4e:	6e 81       	ldd	r22, Y+6	; 0x06
        usRegWriteAddress++;

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
    2f50:	4f 81       	ldd	r20, Y+7	; 0x07
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
    2f52:	38 85       	ldd	r19, Y+8	; 0x08

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
    2f54:	29 85       	ldd	r18, Y+9	; 0x09

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
    2f56:	c7 01       	movw	r24, r14
    2f58:	01 97       	sbiw	r24, 0x01	; 1
    2f5a:	8d 37       	cpi	r24, 0x7D	; 125
    2f5c:	91 05       	cpc	r25, r1
    2f5e:	08 f0       	brcs	.+2      	; 0x2f62 <eMBFuncReadWriteMultipleHoldingRegister+0x44>
    2f60:	4d c0       	rjmp	.+154    	; 0x2ffc <eMBFuncReadWriteMultipleHoldingRegister+0xde>

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
        usRegWriteAddress++;

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
    2f62:	94 2f       	mov	r25, r20
    2f64:	80 e0       	ldi	r24, 0x00	; 0
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
    2f66:	83 2b       	or	r24, r19

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
    2f68:	00 97       	sbiw	r24, 0x00	; 0
    2f6a:	09 f4       	brne	.+2      	; 0x2f6e <eMBFuncReadWriteMultipleHoldingRegister+0x50>
    2f6c:	49 c0       	rjmp	.+146    	; 0x3000 <eMBFuncReadWriteMultipleHoldingRegister+0xe2>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
    2f6e:	8a 37       	cpi	r24, 0x7A	; 122
    2f70:	91 05       	cpc	r25, r1
    2f72:	08 f0       	brcs	.+2      	; 0x2f76 <eMBFuncReadWriteMultipleHoldingRegister+0x58>
    2f74:	47 c0       	rjmp	.+142    	; 0x3004 <eMBFuncReadWriteMultipleHoldingRegister+0xe6>
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
    2f76:	ac 01       	movw	r20, r24
    2f78:	44 0f       	add	r20, r20
    2f7a:	55 1f       	adc	r21, r21
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
    2f7e:	42 17       	cp	r20, r18
    2f80:	53 07       	cpc	r21, r19
    2f82:	09 f0       	breq	.+2      	; 0x2f86 <eMBFuncReadWriteMultipleHoldingRegister+0x68>
    2f84:	41 c0       	rjmp	.+130    	; 0x3008 <eMBFuncReadWriteMultipleHoldingRegister+0xea>
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
    2f86:	37 2f       	mov	r19, r23
    2f88:	20 e0       	ldi	r18, 0x00	; 0
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
    2f8a:	26 2b       	or	r18, r22
        usRegWriteAddress++;
    2f8c:	b9 01       	movw	r22, r18
    2f8e:	6f 5f       	subi	r22, 0xFF	; 255
    2f90:	7f 4f       	sbci	r23, 0xFF	; 255
        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
    2f92:	21 e0       	ldi	r18, 0x01	; 1
    2f94:	ac 01       	movw	r20, r24
    2f96:	ce 01       	movw	r24, r28
    2f98:	0a 96       	adiw	r24, 0x0a	; 10
    2f9a:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <eMBRegHoldingCB>
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
    2f9e:	81 11       	cpse	r24, r1
    2fa0:	35 c0       	rjmp	.+106    	; 0x300c <eMBFuncReadWriteMultipleHoldingRegister+0xee>
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
                *usLen = MB_PDU_FUNC_OFF;
    2fa2:	f8 01       	movw	r30, r16
    2fa4:	11 82       	std	Z+1, r1	; 0x01
    2fa6:	10 82       	st	Z, r1

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
    2fa8:	87 e1       	ldi	r24, 0x17	; 23
    2faa:	88 83       	st	Y, r24
                *usLen += 1;
    2fac:	80 81       	ld	r24, Z
    2fae:	91 81       	ldd	r25, Z+1	; 0x01
    2fb0:	01 96       	adiw	r24, 0x01	; 1
    2fb2:	91 83       	std	Z+1, r25	; 0x01
    2fb4:	80 83       	st	Z, r24

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
    2fb6:	8e 2d       	mov	r24, r14
    2fb8:	88 0f       	add	r24, r24
    2fba:	89 83       	std	Y+1, r24	; 0x01
                *usLen += 1;
    2fbc:	80 81       	ld	r24, Z
    2fbe:	91 81       	ldd	r25, Z+1	; 0x01
    2fc0:	01 96       	adiw	r24, 0x01	; 1
    2fc2:	91 83       	std	Z+1, r25	; 0x01
    2fc4:	80 83       	st	Z, r24
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
    2fc6:	9c 2d       	mov	r25, r12
    2fc8:	80 e0       	ldi	r24, 0x00	; 0
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
    2fca:	8d 29       	or	r24, r13
        usRegReadAddress++;
    2fcc:	bc 01       	movw	r22, r24
    2fce:	6f 5f       	subi	r22, 0xFF	; 255
    2fd0:	7f 4f       	sbci	r23, 0xFF	; 255
                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
                *usLen += 1;

                /* Make the read callback. */
                eRegStatus =
    2fd2:	20 e0       	ldi	r18, 0x00	; 0
    2fd4:	a7 01       	movw	r20, r14
    2fd6:	ce 01       	movw	r24, r28
    2fd8:	02 96       	adiw	r24, 0x02	; 2
    2fda:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <eMBRegHoldingCB>
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
                if( eRegStatus == MB_ENOERR )
    2fde:	81 11       	cpse	r24, r1
    2fe0:	15 c0       	rjmp	.+42     	; 0x300c <eMBFuncReadWriteMultipleHoldingRegister+0xee>
                {
                    *usLen += 2 * usRegReadCount;
    2fe2:	ee 0c       	add	r14, r14
    2fe4:	ff 1c       	adc	r15, r15
    2fe6:	f8 01       	movw	r30, r16
    2fe8:	80 81       	ld	r24, Z
    2fea:	91 81       	ldd	r25, Z+1	; 0x01
    2fec:	8e 0d       	add	r24, r14
    2fee:	9f 1d       	adc	r25, r15
    2ff0:	91 83       	std	Z+1, r25	; 0x01
    2ff2:	80 83       	st	Z, r24
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR           ucRegWriteByteCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    2ff4:	80 e0       	ldi	r24, 0x00	; 0
    2ff6:	0c c0       	rjmp	.+24     	; 0x3010 <eMBFuncReadWriteMultipleHoldingRegister+0xf2>
    2ff8:	80 e0       	ldi	r24, 0x00	; 0
    2ffa:	0a c0       	rjmp	.+20     	; 0x3010 <eMBFuncReadWriteMultipleHoldingRegister+0xf2>
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    2ffc:	83 e0       	ldi	r24, 0x03	; 3
    2ffe:	08 c0       	rjmp	.+16     	; 0x3010 <eMBFuncReadWriteMultipleHoldingRegister+0xf2>
    3000:	83 e0       	ldi	r24, 0x03	; 3
    3002:	06 c0       	rjmp	.+12     	; 0x3010 <eMBFuncReadWriteMultipleHoldingRegister+0xf2>
    3004:	83 e0       	ldi	r24, 0x03	; 3
    3006:	04 c0       	rjmp	.+8      	; 0x3010 <eMBFuncReadWriteMultipleHoldingRegister+0xf2>
    3008:	83 e0       	ldi	r24, 0x03	; 3
    300a:	02 c0       	rjmp	.+4      	; 0x3010 <eMBFuncReadWriteMultipleHoldingRegister+0xf2>
                    *usLen += 2 * usRegReadCount;
                }
            }
            if( eRegStatus != MB_ENOERR )
            {
                eStatus = prveMBError2Exception( eRegStatus );
    300c:	0e 94 02 1a 	call	0x3404	; 0x3404 <prveMBError2Exception>
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
        }
    }
    return eStatus;
}
    3010:	df 91       	pop	r29
    3012:	cf 91       	pop	r28
    3014:	1f 91       	pop	r17
    3016:	0f 91       	pop	r16
    3018:	ff 90       	pop	r15
    301a:	ef 90       	pop	r14
    301c:	df 90       	pop	r13
    301e:	cf 90       	pop	r12
    3020:	08 95       	ret

00003022 <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
    3022:	0f 93       	push	r16
    3024:	1f 93       	push	r17
    3026:	cf 93       	push	r28
    3028:	df 93       	push	r29
    302a:	eb 01       	movw	r28, r22
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    302c:	28 81       	ld	r18, Y
    302e:	39 81       	ldd	r19, Y+1	; 0x01
    3030:	25 30       	cpi	r18, 0x05	; 5
    3032:	31 05       	cpc	r19, r1
    3034:	09 f0       	breq	.+2      	; 0x3038 <eMBFuncReadInputRegister+0x16>
    3036:	42 c0       	rjmp	.+132    	; 0x30bc <eMBFuncReadInputRegister+0x9a>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
    3038:	dc 01       	movw	r26, r24
    303a:	11 96       	adiw	r26, 0x01	; 1
    303c:	fc 91       	ld	r31, X
    303e:	11 97       	sbiw	r26, 0x01	; 1
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
    3040:	12 96       	adiw	r26, 0x02	; 2
    3042:	ec 91       	ld	r30, X
    3044:	12 97       	sbiw	r26, 0x02	; 2
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
    3046:	13 96       	adiw	r26, 0x03	; 3
    3048:	5c 91       	ld	r21, X
    304a:	13 97       	sbiw	r26, 0x03	; 3
    304c:	40 e0       	ldi	r20, 0x00	; 0
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
    304e:	14 96       	adiw	r26, 0x04	; 4
    3050:	2c 91       	ld	r18, X
    3052:	14 97       	sbiw	r26, 0x04	; 4
    3054:	8a 01       	movw	r16, r20
    3056:	02 2b       	or	r16, r18

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
    3058:	98 01       	movw	r18, r16
    305a:	21 50       	subi	r18, 0x01	; 1
    305c:	31 09       	sbc	r19, r1
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
    305e:	2c 37       	cpi	r18, 0x7C	; 124
    3060:	31 05       	cpc	r19, r1
    3062:	70 f5       	brcc	.+92     	; 0x30c0 <eMBFuncReadInputRegister+0x9e>
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
    3064:	19 82       	std	Y+1, r1	; 0x01
    3066:	18 82       	st	Y, r1

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
    3068:	24 e0       	ldi	r18, 0x04	; 4
    306a:	2c 93       	st	X, r18
            *usLen += 1;
    306c:	28 81       	ld	r18, Y
    306e:	39 81       	ldd	r19, Y+1	; 0x01
    3070:	2f 5f       	subi	r18, 0xFF	; 255
    3072:	3f 4f       	sbci	r19, 0xFF	; 255
    3074:	39 83       	std	Y+1, r19	; 0x01
    3076:	28 83       	st	Y, r18

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
    3078:	20 2f       	mov	r18, r16
    307a:	22 0f       	add	r18, r18
    307c:	11 96       	adiw	r26, 0x01	; 1
    307e:	2c 93       	st	X, r18
            *usLen += 1;
    3080:	28 81       	ld	r18, Y
    3082:	39 81       	ldd	r19, Y+1	; 0x01
    3084:	2f 5f       	subi	r18, 0xFF	; 255
    3086:	3f 4f       	sbci	r19, 0xFF	; 255
    3088:	39 83       	std	Y+1, r19	; 0x01
    308a:	28 83       	st	Y, r18
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
    308c:	7f 2f       	mov	r23, r31
    308e:	60 e0       	ldi	r22, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
    3090:	6e 2b       	or	r22, r30
        usRegAddress++;
    3092:	6f 5f       	subi	r22, 0xFF	; 255
    3094:	7f 4f       	sbci	r23, 0xFF	; 255

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
            *usLen += 1;

            eRegStatus =
    3096:	a8 01       	movw	r20, r16
    3098:	02 96       	adiw	r24, 0x02	; 2
    309a:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <eMBRegInputCB>
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
    309e:	88 23       	and	r24, r24
    30a0:	19 f0       	breq	.+6      	; 0x30a8 <eMBFuncReadInputRegister+0x86>
            {
                eStatus = prveMBError2Exception( eRegStatus );
    30a2:	0e 94 02 1a 	call	0x3404	; 0x3404 <prveMBError2Exception>
    30a6:	0d c0       	rjmp	.+26     	; 0x30c2 <eMBFuncReadInputRegister+0xa0>
            }
            else
            {
                *usLen += usRegCount * 2;
    30a8:	00 0f       	add	r16, r16
    30aa:	11 1f       	adc	r17, r17
    30ac:	88 81       	ld	r24, Y
    30ae:	99 81       	ldd	r25, Y+1	; 0x01
    30b0:	08 0f       	add	r16, r24
    30b2:	19 1f       	adc	r17, r25
    30b4:	19 83       	std	Y+1, r17	; 0x01
    30b6:	08 83       	st	Y, r16
{
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    30b8:	80 e0       	ldi	r24, 0x00	; 0
    30ba:	03 c0       	rjmp	.+6      	; 0x30c2 <eMBFuncReadInputRegister+0xa0>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    30bc:	83 e0       	ldi	r24, 0x03	; 3
    30be:	01 c0       	rjmp	.+2      	; 0x30c2 <eMBFuncReadInputRegister+0xa0>
                *usLen += usRegCount * 2;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    30c0:	83 e0       	ldi	r24, 0x03	; 3
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    30c2:	df 91       	pop	r29
    30c4:	cf 91       	pop	r28
    30c6:	1f 91       	pop	r17
    30c8:	0f 91       	pop	r16
    30ca:	08 95       	ret

000030cc <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
    30cc:	0f 93       	push	r16
    30ce:	1f 93       	push	r17
    30d0:	cf 93       	push	r28
    30d2:	df 93       	push	r29
    30d4:	8b 01       	movw	r16, r22
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
    30d6:	c0 91 db 00 	lds	r28, 0x00DB
    30da:	d0 91 dc 00 	lds	r29, 0x00DC
    30de:	9c 01       	movw	r18, r24
    30e0:	2f 5f       	subi	r18, 0xFF	; 255
    30e2:	3f 4f       	sbci	r19, 0xFF	; 255
    30e4:	8d ed       	ldi	r24, 0xDD	; 221
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	4c 2f       	mov	r20, r28
    30ea:	5d 2f       	mov	r21, r29
    30ec:	68 2f       	mov	r22, r24
    30ee:	79 2f       	mov	r23, r25
    30f0:	82 2f       	mov	r24, r18
    30f2:	93 2f       	mov	r25, r19
    30f4:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
    30f8:	21 96       	adiw	r28, 0x01	; 1
    30fa:	f8 01       	movw	r30, r16
    30fc:	d1 83       	std	Z+1, r29	; 0x01
    30fe:	c0 83       	st	Z, r28
    return MB_EX_NONE;
}
    3100:	80 e0       	ldi	r24, 0x00	; 0
    3102:	df 91       	pop	r29
    3104:	cf 91       	pop	r28
    3106:	1f 91       	pop	r17
    3108:	0f 91       	pop	r16
    310a:	08 95       	ret

0000310c <eMBRTUInit>:
static volatile USHORT usRcvBufferPos;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
    310c:	cf 92       	push	r12
    310e:	df 92       	push	r13
    3110:	ef 92       	push	r14
    3112:	ff 92       	push	r15
    3114:	0f 93       	push	r16
    3116:	86 2f       	mov	r24, r22
    3118:	69 01       	movw	r12, r18
    311a:	7a 01       	movw	r14, r20
    eMBErrorCode    eStatus = MB_ENOERR;
    ULONG           usTimerT35_50us;

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );
    311c:	f8 94       	cli

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
    311e:	28 e0       	ldi	r18, 0x08	; 8
    3120:	b7 01       	movw	r22, r14
    3122:	a6 01       	movw	r20, r12
    3124:	0e 94 3b 1a 	call	0x3476	; 0x3476 <xMBPortSerialInit>
    3128:	81 30       	cpi	r24, 0x01	; 1
    312a:	f9 f4       	brne	.+62     	; 0x316a <eMBRTUInit+0x5e>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
    312c:	81 e0       	ldi	r24, 0x01	; 1
    312e:	c8 16       	cp	r12, r24
    3130:	8b e4       	ldi	r24, 0x4B	; 75
    3132:	d8 06       	cpc	r13, r24
    3134:	e1 04       	cpc	r14, r1
    3136:	f1 04       	cpc	r15, r1
    3138:	68 f4       	brcc	.+26     	; 0x3154 <eMBRTUInit+0x48>
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
    313a:	a7 01       	movw	r20, r14
    313c:	96 01       	movw	r18, r12
    313e:	22 0f       	add	r18, r18
    3140:	33 1f       	adc	r19, r19
    3142:	44 1f       	adc	r20, r20
    3144:	55 1f       	adc	r21, r21
    3146:	60 ea       	ldi	r22, 0xA0	; 160
    3148:	7f e7       	ldi	r23, 0x7F	; 127
    314a:	87 e1       	ldi	r24, 0x17	; 23
    314c:	90 e0       	ldi	r25, 0x00	; 0
    314e:	0e 94 78 2b 	call	0x56f0	; 0x56f0 <__udivmodsi4>
    3152:	04 c0       	rjmp	.+8      	; 0x315c <eMBRTUInit+0x50>
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
        {
            usTimerT35_50us = 35;       /* 1800us. */
    3154:	23 e2       	ldi	r18, 0x23	; 35
    3156:	30 e0       	ldi	r19, 0x00	; 0
    3158:	40 e0       	ldi	r20, 0x00	; 0
    315a:	50 e0       	ldi	r21, 0x00	; 0
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
        }
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
    315c:	c9 01       	movw	r24, r18
    315e:	0e 94 ca 1a 	call	0x3594	; 0x3594 <xMBPortTimersInit>
    3162:	81 30       	cpi	r24, 0x01	; 1
    3164:	21 f4       	brne	.+8      	; 0x316e <eMBRTUInit+0x62>

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
    eMBErrorCode    eStatus = MB_ENOERR;
    3166:	80 e0       	ldi	r24, 0x00	; 0
    3168:	03 c0       	rjmp	.+6      	; 0x3170 <eMBRTUInit+0x64>
    ENTER_CRITICAL_SECTION(  );

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
    {
        eStatus = MB_EPORTERR;
    316a:	83 e0       	ldi	r24, 0x03	; 3
    316c:	01 c0       	rjmp	.+2      	; 0x3170 <eMBRTUInit+0x64>
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
        }
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
        {
            eStatus = MB_EPORTERR;
    316e:	83 e0       	ldi	r24, 0x03	; 3
        }
    }
    EXIT_CRITICAL_SECTION(  );
    3170:	78 94       	sei

    return eStatus;
}
    3172:	0f 91       	pop	r16
    3174:	ff 90       	pop	r15
    3176:	ef 90       	pop	r14
    3178:	df 90       	pop	r13
    317a:	cf 90       	pop	r12
    317c:	08 95       	ret

0000317e <eMBRTUStart>:

void
eMBRTUStart( void )
{
    ENTER_CRITICAL_SECTION(  );
    317e:	f8 94       	cli
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
    3180:	10 92 01 01 	sts	0x0101, r1
    vMBPortSerialEnable( TRUE, FALSE );
    3184:	60 e0       	ldi	r22, 0x00	; 0
    3186:	81 e0       	ldi	r24, 0x01	; 1
    3188:	0e 94 29 1a 	call	0x3452	; 0x3452 <vMBPortSerialEnable>
    vMBPortTimersEnable(  );
    318c:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <vMBPortTimersEnable>

    EXIT_CRITICAL_SECTION(  );
    3190:	78 94       	sei
    3192:	08 95       	ret

00003194 <eMBRTUStop>:
}

void
eMBRTUStop( void )
{
    ENTER_CRITICAL_SECTION(  );
    3194:	f8 94       	cli
    vMBPortSerialEnable( FALSE, FALSE );
    3196:	60 e0       	ldi	r22, 0x00	; 0
    3198:	80 e0       	ldi	r24, 0x00	; 0
    319a:	0e 94 29 1a 	call	0x3452	; 0x3452 <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
    319e:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <vMBPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
    31a2:	78 94       	sei
    31a4:	08 95       	ret

000031a6 <eMBRTUReceive>:
}

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
    31a6:	ef 92       	push	r14
    31a8:	ff 92       	push	r15
    31aa:	0f 93       	push	r16
    31ac:	1f 93       	push	r17
    31ae:	cf 93       	push	r28
    31b0:	df 93       	push	r29
    31b2:	7c 01       	movw	r14, r24
    31b4:	eb 01       	movw	r28, r22
    31b6:	8a 01       	movw	r16, r20
    BOOL            xFrameReceived = FALSE;
    eMBErrorCode    eStatus = MB_ENOERR;

    ENTER_CRITICAL_SECTION(  );
    31b8:	f8 94       	cli
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
    31ba:	20 91 fd 00 	lds	r18, 0x00FD
    31be:	30 91 fe 00 	lds	r19, 0x00FE
    31c2:	24 30       	cpi	r18, 0x04	; 4
    31c4:	31 05       	cpc	r19, r1
    31c6:	e0 f0       	brcs	.+56     	; 0x3200 <eMBRTUReceive+0x5a>
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
    31c8:	60 91 fd 00 	lds	r22, 0x00FD
    31cc:	70 91 fe 00 	lds	r23, 0x00FE
    31d0:	8d e1       	ldi	r24, 0x1D	; 29
    31d2:	91 e0       	ldi	r25, 0x01	; 1
    31d4:	0e 94 65 15 	call	0x2aca	; 0x2aca <usMBCRC16>
    31d8:	89 2b       	or	r24, r25
    31da:	a1 f4       	brne	.+40     	; 0x3204 <eMBRTUReceive+0x5e>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
    31dc:	80 91 1d 01 	lds	r24, 0x011D
    31e0:	f7 01       	movw	r30, r14
    31e2:	80 83       	st	Z, r24

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
    31e4:	80 91 fd 00 	lds	r24, 0x00FD
    31e8:	90 91 fe 00 	lds	r25, 0x00FE
    31ec:	03 97       	sbiw	r24, 0x03	; 3
    31ee:	f8 01       	movw	r30, r16
    31f0:	91 83       	std	Z+1, r25	; 0x01
    31f2:	80 83       	st	Z, r24

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
    31f4:	8e e1       	ldi	r24, 0x1E	; 30
    31f6:	91 e0       	ldi	r25, 0x01	; 1
    31f8:	99 83       	std	Y+1, r25	; 0x01
    31fa:	88 83       	st	Y, r24

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
    BOOL            xFrameReceived = FALSE;
    eMBErrorCode    eStatus = MB_ENOERR;
    31fc:	80 e0       	ldi	r24, 0x00	; 0
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
        xFrameReceived = TRUE;
    31fe:	03 c0       	rjmp	.+6      	; 0x3206 <eMBRTUReceive+0x60>
    }
    else
    {
        eStatus = MB_EIO;
    3200:	85 e0       	ldi	r24, 0x05	; 5
    3202:	01 c0       	rjmp	.+2      	; 0x3206 <eMBRTUReceive+0x60>
    3204:	85 e0       	ldi	r24, 0x05	; 5
    }

    EXIT_CRITICAL_SECTION(  );
    3206:	78 94       	sei
    return eStatus;
}
    3208:	df 91       	pop	r29
    320a:	cf 91       	pop	r28
    320c:	1f 91       	pop	r17
    320e:	0f 91       	pop	r16
    3210:	ff 90       	pop	r15
    3212:	ef 90       	pop	r14
    3214:	08 95       	ret

00003216 <eMBRTUSend>:
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
    eMBErrorCode    eStatus = MB_ENOERR;
    USHORT          usCRC16;

    ENTER_CRITICAL_SECTION(  );
    3216:	f8 94       	cli

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
    3218:	90 91 01 01 	lds	r25, 0x0101
    321c:	91 30       	cpi	r25, 0x01	; 1
    321e:	09 f0       	breq	.+2      	; 0x3222 <eMBRTUSend+0xc>
    3220:	43 c0       	rjmp	.+134    	; 0x32a8 <eMBRTUSend+0x92>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
    3222:	fb 01       	movw	r30, r22
    3224:	31 97       	sbiw	r30, 0x01	; 1
    3226:	f0 93 04 01 	sts	0x0104, r31
    322a:	e0 93 03 01 	sts	0x0103, r30
        usSndBufferCount = 1;
    322e:	21 e0       	ldi	r18, 0x01	; 1
    3230:	30 e0       	ldi	r19, 0x00	; 0
    3232:	30 93 00 01 	sts	0x0100, r19
    3236:	20 93 ff 00 	sts	0x00FF, r18

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
    323a:	80 83       	st	Z, r24
        usSndBufferCount += usLength;
    323c:	80 91 ff 00 	lds	r24, 0x00FF
    3240:	90 91 00 01 	lds	r25, 0x0100
    3244:	48 0f       	add	r20, r24
    3246:	59 1f       	adc	r21, r25
    3248:	50 93 00 01 	sts	0x0100, r21
    324c:	40 93 ff 00 	sts	0x00FF, r20

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
    3250:	60 91 ff 00 	lds	r22, 0x00FF
    3254:	70 91 00 01 	lds	r23, 0x0100
    3258:	cf 01       	movw	r24, r30
    325a:	0e 94 65 15 	call	0x2aca	; 0x2aca <usMBCRC16>
    325e:	49 2f       	mov	r20, r25
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
    3260:	20 91 ff 00 	lds	r18, 0x00FF
    3264:	30 91 00 01 	lds	r19, 0x0100
    3268:	f9 01       	movw	r30, r18
    326a:	e3 5e       	subi	r30, 0xE3	; 227
    326c:	fe 4f       	sbci	r31, 0xFE	; 254
    326e:	80 83       	st	Z, r24
    3270:	2f 5f       	subi	r18, 0xFF	; 255
    3272:	3f 4f       	sbci	r19, 0xFF	; 255
    3274:	30 93 00 01 	sts	0x0100, r19
    3278:	20 93 ff 00 	sts	0x00FF, r18
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
    327c:	80 91 ff 00 	lds	r24, 0x00FF
    3280:	90 91 00 01 	lds	r25, 0x0100
    3284:	fc 01       	movw	r30, r24
    3286:	e3 5e       	subi	r30, 0xE3	; 227
    3288:	fe 4f       	sbci	r31, 0xFE	; 254
    328a:	40 83       	st	Z, r20
    328c:	01 96       	adiw	r24, 0x01	; 1
    328e:	90 93 00 01 	sts	0x0100, r25
    3292:	80 93 ff 00 	sts	0x00FF, r24

        /* Activate the transmitter. */
        eSndState = STATE_TX_XMIT;
    3296:	81 e0       	ldi	r24, 0x01	; 1
    3298:	80 93 02 01 	sts	0x0102, r24
        vMBPortSerialEnable( FALSE, TRUE );
    329c:	61 e0       	ldi	r22, 0x01	; 1
    329e:	80 e0       	ldi	r24, 0x00	; 0
    32a0:	0e 94 29 1a 	call	0x3452	; 0x3452 <vMBPortSerialEnable>
}

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
    eMBErrorCode    eStatus = MB_ENOERR;
    32a4:	80 e0       	ldi	r24, 0x00	; 0
    32a6:	01 c0       	rjmp	.+2      	; 0x32aa <eMBRTUSend+0x94>
        eSndState = STATE_TX_XMIT;
        vMBPortSerialEnable( FALSE, TRUE );
    }
    else
    {
        eStatus = MB_EIO;
    32a8:	85 e0       	ldi	r24, 0x05	; 5
    }
    EXIT_CRITICAL_SECTION(  );
    32aa:	78 94       	sei
    return eStatus;
}
    32ac:	08 95       	ret

000032ae <xMBRTUReceiveFSM>:

BOOL
xMBRTUReceiveFSM( void )
{
    32ae:	cf 93       	push	r28
    32b0:	df 93       	push	r29
    32b2:	1f 92       	push	r1
    32b4:	cd b7       	in	r28, 0x3d	; 61
    32b6:	de b7       	in	r29, 0x3e	; 62
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );

    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
    32b8:	ce 01       	movw	r24, r28
    32ba:	01 96       	adiw	r24, 0x01	; 1
    32bc:	0e 94 77 1a 	call	0x34ee	; 0x34ee <xMBPortSerialGetByte>

    switch ( eRcvState )
    32c0:	80 91 01 01 	lds	r24, 0x0101
    32c4:	81 30       	cpi	r24, 0x01	; 1
    32c6:	61 f0       	breq	.+24     	; 0x32e0 <xMBRTUReceiveFSM+0x32>
    32c8:	28 f0       	brcs	.+10     	; 0x32d4 <xMBRTUReceiveFSM+0x26>
    32ca:	82 30       	cpi	r24, 0x02	; 2
    32cc:	09 f1       	breq	.+66     	; 0x3310 <xMBRTUReceiveFSM+0x62>
    32ce:	83 30       	cpi	r24, 0x03	; 3
    32d0:	d9 f5       	brne	.+118    	; 0x3348 <xMBRTUReceiveFSM+0x9a>
    32d2:	03 c0       	rjmp	.+6      	; 0x32da <xMBRTUReceiveFSM+0x2c>
    {
        /* If we have received a character in the init state we have to
         * wait until the frame is finished.
         */
    case STATE_RX_INIT:
        vMBPortTimersEnable(  );
    32d4:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <vMBPortTimersEnable>
        break;
    32d8:	37 c0       	rjmp	.+110    	; 0x3348 <xMBRTUReceiveFSM+0x9a>

        /* In the error state we wait until all characters in the
         * damaged frame are transmitted.
         */
    case STATE_RX_ERROR:
        vMBPortTimersEnable(  );
    32da:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <vMBPortTimersEnable>
        break;
    32de:	34 c0       	rjmp	.+104    	; 0x3348 <xMBRTUReceiveFSM+0x9a>
        /* In the idle state we wait for a new character. If a character
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
        usRcvBufferPos = 0;
    32e0:	10 92 fe 00 	sts	0x00FE, r1
    32e4:	10 92 fd 00 	sts	0x00FD, r1
        ucRTUBuf[usRcvBufferPos++] = ucByte;
    32e8:	80 91 fd 00 	lds	r24, 0x00FD
    32ec:	90 91 fe 00 	lds	r25, 0x00FE
    32f0:	29 81       	ldd	r18, Y+1	; 0x01
    32f2:	fc 01       	movw	r30, r24
    32f4:	e3 5e       	subi	r30, 0xE3	; 227
    32f6:	fe 4f       	sbci	r31, 0xFE	; 254
    32f8:	20 83       	st	Z, r18
    32fa:	01 96       	adiw	r24, 0x01	; 1
    32fc:	90 93 fe 00 	sts	0x00FE, r25
    3300:	80 93 fd 00 	sts	0x00FD, r24
        eRcvState = STATE_RX_RCV;
    3304:	82 e0       	ldi	r24, 0x02	; 2
    3306:	80 93 01 01 	sts	0x0101, r24

        /* Enable t3.5 timers. */
        vMBPortTimersEnable(  );
    330a:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <vMBPortTimersEnable>
        break;
    330e:	1c c0       	rjmp	.+56     	; 0x3348 <xMBRTUReceiveFSM+0x9a>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_RX_RCV:
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
    3310:	80 91 fd 00 	lds	r24, 0x00FD
    3314:	90 91 fe 00 	lds	r25, 0x00FE
    3318:	8f 3f       	cpi	r24, 0xFF	; 255
    331a:	91 05       	cpc	r25, r1
    331c:	09 f0       	breq	.+2      	; 0x3320 <xMBRTUReceiveFSM+0x72>
    331e:	78 f4       	brcc	.+30     	; 0x333e <xMBRTUReceiveFSM+0x90>
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
    3320:	80 91 fd 00 	lds	r24, 0x00FD
    3324:	90 91 fe 00 	lds	r25, 0x00FE
    3328:	29 81       	ldd	r18, Y+1	; 0x01
    332a:	fc 01       	movw	r30, r24
    332c:	e3 5e       	subi	r30, 0xE3	; 227
    332e:	fe 4f       	sbci	r31, 0xFE	; 254
    3330:	20 83       	st	Z, r18
    3332:	01 96       	adiw	r24, 0x01	; 1
    3334:	90 93 fe 00 	sts	0x00FE, r25
    3338:	80 93 fd 00 	sts	0x00FD, r24
    333c:	03 c0       	rjmp	.+6      	; 0x3344 <xMBRTUReceiveFSM+0x96>
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
    333e:	83 e0       	ldi	r24, 0x03	; 3
    3340:	80 93 01 01 	sts	0x0101, r24
        }
        vMBPortTimersEnable(  );
    3344:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <vMBPortTimersEnable>
        break;
    }
    return xTaskNeedSwitch;
}
    3348:	80 e0       	ldi	r24, 0x00	; 0
    334a:	0f 90       	pop	r0
    334c:	df 91       	pop	r29
    334e:	cf 91       	pop	r28
    3350:	08 95       	ret

00003352 <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )
{
    3352:	cf 93       	push	r28
    BOOL            xNeedPoll = FALSE;

    assert( eRcvState == STATE_RX_IDLE );

    switch ( eSndState )
    3354:	80 91 02 01 	lds	r24, 0x0102
    3358:	88 23       	and	r24, r24
    335a:	19 f0       	breq	.+6      	; 0x3362 <xMBRTUTransmitFSM+0x10>
    335c:	81 30       	cpi	r24, 0x01	; 1
    335e:	99 f5       	brne	.+102    	; 0x33c6 <xMBRTUTransmitFSM+0x74>
    3360:	06 c0       	rjmp	.+12     	; 0x336e <xMBRTUTransmitFSM+0x1c>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
    3362:	60 e0       	ldi	r22, 0x00	; 0
    3364:	81 e0       	ldi	r24, 0x01	; 1
    3366:	0e 94 29 1a 	call	0x3452	; 0x3452 <vMBPortSerialEnable>
}

BOOL
xMBRTUTransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
    336a:	c0 e0       	ldi	r28, 0x00	; 0
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
        break;
    336c:	2d c0       	rjmp	.+90     	; 0x33c8 <xMBRTUTransmitFSM+0x76>

    case STATE_TX_XMIT:
        /* check if we are finished. */
        if( usSndBufferCount != 0 )
    336e:	80 91 ff 00 	lds	r24, 0x00FF
    3372:	90 91 00 01 	lds	r25, 0x0100
    3376:	89 2b       	or	r24, r25
    3378:	d9 f0       	breq	.+54     	; 0x33b0 <xMBRTUTransmitFSM+0x5e>
        {
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
    337a:	e0 91 03 01 	lds	r30, 0x0103
    337e:	f0 91 04 01 	lds	r31, 0x0104
    3382:	80 81       	ld	r24, Z
    3384:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <xMBPortSerialPutByte>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
    3388:	80 91 03 01 	lds	r24, 0x0103
    338c:	90 91 04 01 	lds	r25, 0x0104
    3390:	01 96       	adiw	r24, 0x01	; 1
    3392:	90 93 04 01 	sts	0x0104, r25
    3396:	80 93 03 01 	sts	0x0103, r24
            usSndBufferCount--;
    339a:	80 91 ff 00 	lds	r24, 0x00FF
    339e:	90 91 00 01 	lds	r25, 0x0100
    33a2:	01 97       	sbiw	r24, 0x01	; 1
    33a4:	90 93 00 01 	sts	0x0100, r25
    33a8:	80 93 ff 00 	sts	0x00FF, r24
}

BOOL
xMBRTUTransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
    33ac:	c0 e0       	ldi	r28, 0x00	; 0
    33ae:	0c c0       	rjmp	.+24     	; 0x33c8 <xMBRTUTransmitFSM+0x76>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
            usSndBufferCount--;
        }
        else
        {
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
    33b0:	83 e0       	ldi	r24, 0x03	; 3
    33b2:	0e 94 14 1a 	call	0x3428	; 0x3428 <xMBPortEventPost>
    33b6:	c8 2f       	mov	r28, r24
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */
            vMBPortSerialEnable( TRUE, FALSE );
    33b8:	60 e0       	ldi	r22, 0x00	; 0
    33ba:	81 e0       	ldi	r24, 0x01	; 1
    33bc:	0e 94 29 1a 	call	0x3452	; 0x3452 <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
    33c0:	10 92 02 01 	sts	0x0102, r1
    33c4:	01 c0       	rjmp	.+2      	; 0x33c8 <xMBRTUTransmitFSM+0x76>
}

BOOL
xMBRTUTransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
    33c6:	c0 e0       	ldi	r28, 0x00	; 0
        }
        break;
    }

    return xNeedPoll;
}
    33c8:	8c 2f       	mov	r24, r28
    33ca:	cf 91       	pop	r28
    33cc:	08 95       	ret

000033ce <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )
{
    33ce:	cf 93       	push	r28
    BOOL            xNeedPoll = FALSE;

    switch ( eRcvState )
    33d0:	80 91 01 01 	lds	r24, 0x0101
    33d4:	88 23       	and	r24, r24
    33d6:	19 f0       	breq	.+6      	; 0x33de <xMBRTUTimerT35Expired+0x10>
    33d8:	82 30       	cpi	r24, 0x02	; 2
    33da:	59 f4       	brne	.+22     	; 0x33f2 <xMBRTUTimerT35Expired+0x24>
    33dc:	05 c0       	rjmp	.+10     	; 0x33e8 <xMBRTUTimerT35Expired+0x1a>
    {
        /* Timer t35 expired. Startup phase is finished. */
    case STATE_RX_INIT:
        xNeedPoll = xMBPortEventPost( EV_READY );
    33de:	80 e0       	ldi	r24, 0x00	; 0
    33e0:	0e 94 14 1a 	call	0x3428	; 0x3428 <xMBPortEventPost>
    33e4:	c8 2f       	mov	r28, r24
        break;
    33e6:	06 c0       	rjmp	.+12     	; 0x33f4 <xMBRTUTimerT35Expired+0x26>

        /* A frame was received and t35 expired. Notify the listener that
         * a new frame was received. */
    case STATE_RX_RCV:
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
    33e8:	81 e0       	ldi	r24, 0x01	; 1
    33ea:	0e 94 14 1a 	call	0x3428	; 0x3428 <xMBPortEventPost>
    33ee:	c8 2f       	mov	r28, r24
        break;
    33f0:	01 c0       	rjmp	.+2      	; 0x33f4 <xMBRTUTimerT35Expired+0x26>
}

BOOL
xMBRTUTimerT35Expired( void )
{
    BOOL            xNeedPoll = FALSE;
    33f2:	c0 e0       	ldi	r28, 0x00	; 0
    default:
        assert( ( eRcvState == STATE_RX_INIT ) ||
                ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
    }

    vMBPortTimersDisable(  );
    33f4:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
    33f8:	81 e0       	ldi	r24, 0x01	; 1
    33fa:	80 93 01 01 	sts	0x0101, r24

    return xNeedPoll;
}
    33fe:	8c 2f       	mov	r24, r28
    3400:	cf 91       	pop	r28
    3402:	08 95       	ret

00003404 <prveMBError2Exception>:
eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
    eMBException    eStatus;

    switch ( eErrorCode )
    3404:	81 30       	cpi	r24, 0x01	; 1
    3406:	51 f0       	breq	.+20     	; 0x341c <prveMBError2Exception+0x18>
    3408:	18 f0       	brcs	.+6      	; 0x3410 <prveMBError2Exception+0xc>
    340a:	87 30       	cpi	r24, 0x07	; 7
    340c:	29 f4       	brne	.+10     	; 0x3418 <prveMBError2Exception+0x14>
    340e:	02 c0       	rjmp	.+4      	; 0x3414 <prveMBError2Exception+0x10>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
    3410:	80 e0       	ldi	r24, 0x00	; 0
    3412:	08 95       	ret
        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
            break;

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
    3414:	86 e0       	ldi	r24, 0x06	; 6
            break;
    3416:	08 95       	ret

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
    3418:	84 e0       	ldi	r24, 0x04	; 4
            break;
    341a:	08 95       	ret
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
            break;

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
    341c:	82 e0       	ldi	r24, 0x02	; 2
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
            break;
    }

    return eStatus;
}
    341e:	08 95       	ret

00003420 <xMBPortEventInit>:

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
    xEventInQueue = FALSE;
    3420:	10 92 05 01 	sts	0x0105, r1
    return TRUE;
}
    3424:	81 e0       	ldi	r24, 0x01	; 1
    3426:	08 95       	ret

00003428 <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
    xEventInQueue = TRUE;
    3428:	91 e0       	ldi	r25, 0x01	; 1
    342a:	90 93 05 01 	sts	0x0105, r25
    eQueuedEvent = eEvent;
    342e:	80 93 06 01 	sts	0x0106, r24
    return TRUE;
}
    3432:	81 e0       	ldi	r24, 0x01	; 1
    3434:	08 95       	ret

00003436 <xMBPortEventGet>:
BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
    BOOL            xEventHappened = FALSE;

    if( xEventInQueue )
    3436:	20 91 05 01 	lds	r18, 0x0105
    343a:	22 23       	and	r18, r18
    343c:	41 f0       	breq	.+16     	; 0x344e <xMBPortEventGet+0x18>
    {
        *eEvent = eQueuedEvent;
    343e:	20 91 06 01 	lds	r18, 0x0106
    3442:	fc 01       	movw	r30, r24
    3444:	20 83       	st	Z, r18
        xEventInQueue = FALSE;
    3446:	10 92 05 01 	sts	0x0105, r1
        xEventHappened = TRUE;
    344a:	81 e0       	ldi	r24, 0x01	; 1
    344c:	08 95       	ret
}

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
    BOOL            xEventHappened = FALSE;
    344e:	80 e0       	ldi	r24, 0x00	; 0
        *eEvent = eQueuedEvent;
        xEventInQueue = FALSE;
        xEventHappened = TRUE;
    }
    return xEventHappened;
}
    3450:	08 95       	ret

00003452 <vMBPortSerialEnable>:
vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
#ifdef RTS_ENABLE
    UCSRB |= _BV( TXEN ) | _BV(TXCIE);
#else
    UCSRB |= _BV( TXEN );
    3452:	53 9a       	sbi	0x0a, 3	; 10
#endif

    if( xRxEnable )
    3454:	88 23       	and	r24, r24
    3456:	21 f0       	breq	.+8      	; 0x3460 <vMBPortSerialEnable+0xe>
    {
        UCSRB |= _BV( RXEN ) | _BV( RXCIE );
    3458:	8a b1       	in	r24, 0x0a	; 10
    345a:	80 69       	ori	r24, 0x90	; 144
    345c:	8a b9       	out	0x0a, r24	; 10
    345e:	03 c0       	rjmp	.+6      	; 0x3466 <vMBPortSerialEnable+0x14>
    }
    else
    {
        UCSRB &= ~( _BV( RXEN ) | _BV( RXCIE ) );
    3460:	8a b1       	in	r24, 0x0a	; 10
    3462:	8f 76       	andi	r24, 0x6F	; 111
    3464:	8a b9       	out	0x0a, r24	; 10
    }

    if( xTxEnable )
    3466:	66 23       	and	r22, r22
    3468:	21 f0       	breq	.+8      	; 0x3472 <vMBPortSerialEnable+0x20>
    {
        UCSRB |= _BV( TXEN ) | _BV( UDRE );
    346a:	8a b1       	in	r24, 0x0a	; 10
    346c:	88 62       	ori	r24, 0x28	; 40
    346e:	8a b9       	out	0x0a, r24	; 10
    3470:	08 95       	ret
        RTS_HIGH;
#endif
    }
    else
    {
        UCSRB &= ~( _BV( UDRE ) );
    3472:	55 98       	cbi	0x0a, 5	; 10
    3474:	08 95       	ret

00003476 <xMBPortSerialInit>:
    }
}

BOOL
xMBPortSerialInit( UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity )
{
    3476:	0f 93       	push	r16
    3478:	cf 93       	push	r28
    347a:	c2 2f       	mov	r28, r18
    UCHAR ucUCSRC = 0;

    /* prevent compiler warning. */
    (void)ucPORT;
	
    UBRR = UART_BAUD_CALC( ulBaudRate, F_CPU );
    347c:	db 01       	movw	r26, r22
    347e:	ca 01       	movw	r24, r20
    3480:	88 0f       	add	r24, r24
    3482:	99 1f       	adc	r25, r25
    3484:	aa 1f       	adc	r26, r26
    3486:	bb 1f       	adc	r27, r27
    3488:	88 0f       	add	r24, r24
    348a:	99 1f       	adc	r25, r25
    348c:	aa 1f       	adc	r26, r26
    348e:	bb 1f       	adc	r27, r27
    3490:	9c 01       	movw	r18, r24
    3492:	ad 01       	movw	r20, r26
    3494:	22 0f       	add	r18, r18
    3496:	33 1f       	adc	r19, r19
    3498:	44 1f       	adc	r20, r20
    349a:	55 1f       	adc	r21, r21
    349c:	22 0f       	add	r18, r18
    349e:	33 1f       	adc	r19, r19
    34a0:	44 1f       	adc	r20, r20
    34a2:	55 1f       	adc	r21, r21
    34a4:	60 e0       	ldi	r22, 0x00	; 0
    34a6:	74 e2       	ldi	r23, 0x24	; 36
    34a8:	84 ef       	ldi	r24, 0xF4	; 244
    34aa:	90 e0       	ldi	r25, 0x00	; 0
    34ac:	0e 94 78 2b 	call	0x56f0	; 0x56f0 <__udivmodsi4>
    34b0:	21 50       	subi	r18, 0x01	; 1
    34b2:	29 b9       	out	0x09, r18	; 9

    switch ( eParity )
    34b4:	01 30       	cpi	r16, 0x01	; 1
    34b6:	21 f0       	breq	.+8      	; 0x34c0 <xMBPortSerialInit+0x4a>
    34b8:	02 30       	cpi	r16, 0x02	; 2
    34ba:	21 f0       	breq	.+8      	; 0x34c4 <xMBPortSerialInit+0x4e>
}

BOOL
xMBPortSerialInit( UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity )
{
    UCHAR ucUCSRC = 0;
    34bc:	80 e0       	ldi	r24, 0x00	; 0
    34be:	03 c0       	rjmp	.+6      	; 0x34c6 <xMBPortSerialInit+0x50>
    {
        case MB_PAR_EVEN:
            ucUCSRC |= _BV( UPM1 );
            break;
        case MB_PAR_ODD:
            ucUCSRC |= _BV( UPM1 ) | _BV( UPM0 );
    34c0:	80 e3       	ldi	r24, 0x30	; 48
            break;
    34c2:	01 c0       	rjmp	.+2      	; 0x34c6 <xMBPortSerialInit+0x50>
    UBRR = UART_BAUD_CALC( ulBaudRate, F_CPU );

    switch ( eParity )
    {
        case MB_PAR_EVEN:
            ucUCSRC |= _BV( UPM1 );
    34c4:	80 e2       	ldi	r24, 0x20	; 32
            break;
        case MB_PAR_NONE:
            break;
    }

    switch ( ucDataBits )
    34c6:	c7 30       	cpi	r28, 0x07	; 7
    34c8:	21 f0       	breq	.+8      	; 0x34d2 <xMBPortSerialInit+0x5c>
    34ca:	c8 30       	cpi	r28, 0x08	; 8
    34cc:	19 f4       	brne	.+6      	; 0x34d4 <xMBPortSerialInit+0x5e>
    {
        case 8:
            ucUCSRC |= _BV( UCSZ0 ) | _BV( UCSZ1 );
    34ce:	86 60       	ori	r24, 0x06	; 6
            break;
    34d0:	01 c0       	rjmp	.+2      	; 0x34d4 <xMBPortSerialInit+0x5e>
        case 7:
            ucUCSRC |= _BV( UCSZ1 );
    34d2:	84 60       	ori	r24, 0x04	; 4
#elif defined (__AVR_ATmega16__)
    UCSRC = _BV( URSEL ) | ucUCSRC;
#elif defined (__AVR_ATmega32__)
    UCSRC = _BV( URSEL ) | ucUCSRC;
#elif defined (__AVR_ATmega32A__)
	UCSRC = _BV( URSEL ) | ucUCSRC;
    34d4:	80 68       	ori	r24, 0x80	; 128
    34d6:	80 bd       	out	0x20, r24	; 32
#elif defined (__AVR_ATmega128__)
    UCSRC |= ucUCSRC;
#endif

    vMBPortSerialEnable( FALSE, FALSE );
    34d8:	60 e0       	ldi	r22, 0x00	; 0
    34da:	80 e0       	ldi	r24, 0x00	; 0
    34dc:	0e 94 29 1a 	call	0x3452	; 0x3452 <vMBPortSerialEnable>

#ifdef RTS_ENABLE
    RTS_INIT;
#endif
    return TRUE;
}
    34e0:	81 e0       	ldi	r24, 0x01	; 1
    34e2:	cf 91       	pop	r28
    34e4:	0f 91       	pop	r16
    34e6:	08 95       	ret

000034e8 <xMBPortSerialPutByte>:

BOOL
xMBPortSerialPutByte( CHAR ucByte )
{
    UDR = ucByte;
    34e8:	8c b9       	out	0x0c, r24	; 12
    return TRUE;
}
    34ea:	81 e0       	ldi	r24, 0x01	; 1
    34ec:	08 95       	ret

000034ee <xMBPortSerialGetByte>:

BOOL
xMBPortSerialGetByte( CHAR * pucByte )
{
    *pucByte = UDR;
    34ee:	2c b1       	in	r18, 0x0c	; 12
    34f0:	fc 01       	movw	r30, r24
    34f2:	20 83       	st	Z, r18
    return TRUE;
}
    34f4:	81 e0       	ldi	r24, 0x01	; 1
    34f6:	08 95       	ret

000034f8 <__vector_14>:

ISR( USART_UDRE_vect )
{
    34f8:	1f 92       	push	r1
    34fa:	0f 92       	push	r0
    34fc:	0f b6       	in	r0, 0x3f	; 63
    34fe:	0f 92       	push	r0
    3500:	11 24       	eor	r1, r1
    3502:	2f 93       	push	r18
    3504:	3f 93       	push	r19
    3506:	4f 93       	push	r20
    3508:	5f 93       	push	r21
    350a:	6f 93       	push	r22
    350c:	7f 93       	push	r23
    350e:	8f 93       	push	r24
    3510:	9f 93       	push	r25
    3512:	af 93       	push	r26
    3514:	bf 93       	push	r27
    3516:	ef 93       	push	r30
    3518:	ff 93       	push	r31
    pxMBFrameCBTransmitterEmpty(  );
    351a:	e0 91 13 01 	lds	r30, 0x0113
    351e:	f0 91 14 01 	lds	r31, 0x0114
    3522:	09 95       	icall
}
    3524:	ff 91       	pop	r31
    3526:	ef 91       	pop	r30
    3528:	bf 91       	pop	r27
    352a:	af 91       	pop	r26
    352c:	9f 91       	pop	r25
    352e:	8f 91       	pop	r24
    3530:	7f 91       	pop	r23
    3532:	6f 91       	pop	r22
    3534:	5f 91       	pop	r21
    3536:	4f 91       	pop	r20
    3538:	3f 91       	pop	r19
    353a:	2f 91       	pop	r18
    353c:	0f 90       	pop	r0
    353e:	0f be       	out	0x3f, r0	; 63
    3540:	0f 90       	pop	r0
    3542:	1f 90       	pop	r1
    3544:	18 95       	reti

00003546 <__vector_13>:

ISR( USART_RXC_vect )
{
    3546:	1f 92       	push	r1
    3548:	0f 92       	push	r0
    354a:	0f b6       	in	r0, 0x3f	; 63
    354c:	0f 92       	push	r0
    354e:	11 24       	eor	r1, r1
    3550:	2f 93       	push	r18
    3552:	3f 93       	push	r19
    3554:	4f 93       	push	r20
    3556:	5f 93       	push	r21
    3558:	6f 93       	push	r22
    355a:	7f 93       	push	r23
    355c:	8f 93       	push	r24
    355e:	9f 93       	push	r25
    3560:	af 93       	push	r26
    3562:	bf 93       	push	r27
    3564:	ef 93       	push	r30
    3566:	ff 93       	push	r31
	pxMBFrameCBByteReceived(  );
    3568:	e0 91 17 01 	lds	r30, 0x0117
    356c:	f0 91 18 01 	lds	r31, 0x0118
    3570:	09 95       	icall
}
    3572:	ff 91       	pop	r31
    3574:	ef 91       	pop	r30
    3576:	bf 91       	pop	r27
    3578:	af 91       	pop	r26
    357a:	9f 91       	pop	r25
    357c:	8f 91       	pop	r24
    357e:	7f 91       	pop	r23
    3580:	6f 91       	pop	r22
    3582:	5f 91       	pop	r21
    3584:	4f 91       	pop	r20
    3586:	3f 91       	pop	r19
    3588:	2f 91       	pop	r18
    358a:	0f 90       	pop	r0
    358c:	0f be       	out	0x3f, r0	; 63
    358e:	0f 90       	pop	r0
    3590:	1f 90       	pop	r1
    3592:	18 95       	reti

00003594 <xMBPortTimersInit>:
BOOL
xMBPortTimersInit( USHORT usTim1Timerout50us )
{
    /* Calculate overflow counter an OCR values for Timer1. */
    usTimerOCRADelta =
        ( MB_TIMER_TICKS * usTim1Timerout50us ) / ( MB_50US_TICKS );
    3594:	9c 01       	movw	r18, r24
    3596:	a9 e0       	ldi	r26, 0x09	; 9
    3598:	bd e3       	ldi	r27, 0x3D	; 61
    359a:	0e 94 b6 2b 	call	0x576c	; 0x576c <__umulhisi3>
    359e:	20 e2       	ldi	r18, 0x20	; 32
    35a0:	3e e4       	ldi	r19, 0x4E	; 78
    35a2:	40 e0       	ldi	r20, 0x00	; 0
    35a4:	50 e0       	ldi	r21, 0x00	; 0
    35a6:	0e 94 78 2b 	call	0x56f0	; 0x56f0 <__udivmodsi4>
/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortTimersInit( USHORT usTim1Timerout50us )
{
    /* Calculate overflow counter an OCR values for Timer1. */
    usTimerOCRADelta =
    35aa:	30 93 08 01 	sts	0x0108, r19
    35ae:	20 93 07 01 	sts	0x0107, r18
    TCCR1A = 0x00;
    TCCR1B = 0x00;
    TCCR1C = 0x00;
	*/
	
	TCCR2=0x00;
    35b2:	15 bc       	out	0x25, r1	; 37

inline void
vMBPortTimersDisable(  )
{
    /* Disable the timer. */
    TCCR2 &= ~( _BV( CS22 ) | _BV( CS21 ) | _BV( CS20 ) );
    35b4:	85 b5       	in	r24, 0x25	; 37
    35b6:	88 7f       	andi	r24, 0xF8	; 248
    35b8:	85 bd       	out	0x25, r24	; 37
    /* Disable the output compare interrupts for channel A/B. */
    TIMSK &= ~( _BV( OCIE2 ) );
    35ba:	89 b7       	in	r24, 0x39	; 57
    35bc:	8f 77       	andi	r24, 0x7F	; 127
    35be:	89 bf       	out	0x39, r24	; 57
    /* Clear output compare flags for channel A/B. */
    TIFR1 |= _BV( OCF2 ) ;
    35c0:	88 b7       	in	r24, 0x38	; 56
    35c2:	80 68       	ori	r24, 0x80	; 128
    35c4:	88 bf       	out	0x38, r24	; 56
	TCCR2=0x00;
	
    vMBPortTimersDisable(  );

    return TRUE;
}
    35c6:	81 e0       	ldi	r24, 0x01	; 1
    35c8:	08 95       	ret

000035ca <vMBPortTimersEnable>:


inline void
vMBPortTimersEnable(  )
{
    TCNT2 = 0x0000;
    35ca:	14 bc       	out	0x24, r1	; 36
    if( usTimerOCRADelta > 0 )
    35cc:	80 91 07 01 	lds	r24, 0x0107
    35d0:	90 91 08 01 	lds	r25, 0x0108
    35d4:	89 2b       	or	r24, r25
    35d6:	31 f0       	breq	.+12     	; 0x35e4 <vMBPortTimersEnable+0x1a>
    {
        TIMSK |= _BV( OCIE2 );
    35d8:	89 b7       	in	r24, 0x39	; 57
    35da:	80 68       	ori	r24, 0x80	; 128
    35dc:	89 bf       	out	0x39, r24	; 57
        OCR2 = (uint8_t)usTimerOCRADelta;
    35de:	80 91 07 01 	lds	r24, 0x0107
    35e2:	83 bd       	out	0x23, r24	; 35
    }

    TCCR2 |= _BV( CS22 ) | _BV( CS21 ) | _BV( CS20 );
    35e4:	85 b5       	in	r24, 0x25	; 37
    35e6:	87 60       	ori	r24, 0x07	; 7
    35e8:	85 bd       	out	0x25, r24	; 37
    35ea:	08 95       	ret

000035ec <vMBPortTimersDisable>:

inline void
vMBPortTimersDisable(  )
{
    /* Disable the timer. */
    TCCR2 &= ~( _BV( CS22 ) | _BV( CS21 ) | _BV( CS20 ) );
    35ec:	85 b5       	in	r24, 0x25	; 37
    35ee:	88 7f       	andi	r24, 0xF8	; 248
    35f0:	85 bd       	out	0x25, r24	; 37
    /* Disable the output compare interrupts for channel A/B. */
    TIMSK &= ~( _BV( OCIE2 ) );
    35f2:	89 b7       	in	r24, 0x39	; 57
    35f4:	8f 77       	andi	r24, 0x7F	; 127
    35f6:	89 bf       	out	0x39, r24	; 57
    /* Clear output compare flags for channel A/B. */
    TIFR1 |= _BV( OCF2 ) ;
    35f8:	88 b7       	in	r24, 0x38	; 56
    35fa:	80 68       	ori	r24, 0x80	; 128
    35fc:	88 bf       	out	0x38, r24	; 56
    35fe:	08 95       	ret

00003600 <__vector_4>:
}

ISR( TIMER2_COMP_vect, ISR_NOBLOCK )
{
    3600:	78 94       	sei
    3602:	1f 92       	push	r1
    3604:	0f 92       	push	r0
    3606:	0f b6       	in	r0, 0x3f	; 63
    3608:	0f 92       	push	r0
    360a:	11 24       	eor	r1, r1
    360c:	2f 93       	push	r18
    360e:	3f 93       	push	r19
    3610:	4f 93       	push	r20
    3612:	5f 93       	push	r21
    3614:	6f 93       	push	r22
    3616:	7f 93       	push	r23
    3618:	8f 93       	push	r24
    361a:	9f 93       	push	r25
    361c:	af 93       	push	r26
    361e:	bf 93       	push	r27
    3620:	ef 93       	push	r30
    3622:	ff 93       	push	r31
    ( void )pxMBPortCBTimerExpired(  );
    3624:	e0 91 15 01 	lds	r30, 0x0115
    3628:	f0 91 16 01 	lds	r31, 0x0116
    362c:	09 95       	icall
}
    362e:	ff 91       	pop	r31
    3630:	ef 91       	pop	r30
    3632:	bf 91       	pop	r27
    3634:	af 91       	pop	r26
    3636:	9f 91       	pop	r25
    3638:	8f 91       	pop	r24
    363a:	7f 91       	pop	r23
    363c:	6f 91       	pop	r22
    363e:	5f 91       	pop	r21
    3640:	4f 91       	pop	r20
    3642:	3f 91       	pop	r19
    3644:	2f 91       	pop	r18
    3646:	0f 90       	pop	r0
    3648:	0f be       	out	0x3f, r0	; 63
    364a:	0f 90       	pop	r0
    364c:	1f 90       	pop	r1
    364e:	18 95       	reti

00003650 <SetMotors>:

uint8_t motor_index = 0;
volatile uint16_t counter[CHANNELS_COUNT];

void SetMotors(double_t* motors)
{
    3650:	cf 92       	push	r12
    3652:	df 92       	push	r13
    3654:	ef 92       	push	r14
    3656:	ff 92       	push	r15
    3658:	0f 93       	push	r16
    365a:	1f 93       	push	r17
    365c:	cf 93       	push	r28
    365e:	df 93       	push	r29
    3660:	08 2f       	mov	r16, r24
    3662:	19 2f       	mov	r17, r25
    3664:	c0 e0       	ldi	r28, 0x00	; 0
    3666:	d0 e0       	ldi	r29, 0x00	; 0
        {
            counter[i] = LOW;
        }
        else if (sum > HIGH)
        {
            counter[i] = HIGH;
    3668:	0f 2e       	mov	r0, r31
    366a:	c1 2c       	mov	r12, r1
    366c:	fd e7       	ldi	r31, 0x7D	; 125
    366e:	df 2e       	mov	r13, r31
    3670:	f0 2d       	mov	r31, r0
        {
            counter[i] = sum;
        }
        else if (sum < LOW)
        {
            counter[i] = LOW;
    3672:	0f 2e       	mov	r0, r31
    3674:	f0 e8       	ldi	r31, 0x80	; 128
    3676:	ef 2e       	mov	r14, r31
    3678:	fe e3       	ldi	r31, 0x3E	; 62
    367a:	ff 2e       	mov	r15, r31
    367c:	f0 2d       	mov	r31, r0

void SetMotors(double_t* motors)
{
    for (uint8_t i = 0; i < MOTORS_COUNT; ++i)
    {
        uint16_t sum = (uint16_t)motors[i];
    367e:	f8 01       	movw	r30, r16
    3680:	61 91       	ld	r22, Z+
    3682:	71 91       	ld	r23, Z+
    3684:	81 91       	ld	r24, Z+
    3686:	91 91       	ld	r25, Z+
    3688:	8f 01       	movw	r16, r30
    368a:	0e 94 4d 29 	call	0x529a	; 0x529a <__fixunssfsi>

        if (sum > LOW && sum < HIGH)
    368e:	cb 01       	movw	r24, r22
    3690:	81 58       	subi	r24, 0x81	; 129
    3692:	9e 43       	sbci	r25, 0x3E	; 62
    3694:	8f 37       	cpi	r24, 0x7F	; 127
    3696:	9e 43       	sbci	r25, 0x3E	; 62
    3698:	40 f4       	brcc	.+16     	; 0x36aa <SetMotors+0x5a>
        {
            counter[i] = sum;
    369a:	fe 01       	movw	r30, r28
    369c:	ee 0f       	add	r30, r30
    369e:	ff 1f       	adc	r31, r31
    36a0:	e3 5e       	subi	r30, 0xE3	; 227
    36a2:	fd 4f       	sbci	r31, 0xFD	; 253
    36a4:	71 83       	std	Z+1, r23	; 0x01
    36a6:	60 83       	st	Z, r22
    36a8:	16 c0       	rjmp	.+44     	; 0x36d6 <SetMotors+0x86>
        }
        else if (sum < LOW)
    36aa:	60 38       	cpi	r22, 0x80	; 128
    36ac:	2e e3       	ldi	r18, 0x3E	; 62
    36ae:	72 07       	cpc	r23, r18
    36b0:	40 f4       	brcc	.+16     	; 0x36c2 <SetMotors+0x72>
        {
            counter[i] = LOW;
    36b2:	fe 01       	movw	r30, r28
    36b4:	ee 0f       	add	r30, r30
    36b6:	ff 1f       	adc	r31, r31
    36b8:	e3 5e       	subi	r30, 0xE3	; 227
    36ba:	fd 4f       	sbci	r31, 0xFD	; 253
    36bc:	f1 82       	std	Z+1, r15	; 0x01
    36be:	e0 82       	st	Z, r14
    36c0:	0a c0       	rjmp	.+20     	; 0x36d6 <SetMotors+0x86>
        }
        else if (sum > HIGH)
    36c2:	61 30       	cpi	r22, 0x01	; 1
    36c4:	7d 47       	sbci	r23, 0x7D	; 125
    36c6:	38 f0       	brcs	.+14     	; 0x36d6 <SetMotors+0x86>
        {
            counter[i] = HIGH;
    36c8:	fe 01       	movw	r30, r28
    36ca:	ee 0f       	add	r30, r30
    36cc:	ff 1f       	adc	r31, r31
    36ce:	e3 5e       	subi	r30, 0xE3	; 227
    36d0:	fd 4f       	sbci	r31, 0xFD	; 253
    36d2:	d1 82       	std	Z+1, r13	; 0x01
    36d4:	c0 82       	st	Z, r12
    36d6:	21 96       	adiw	r28, 0x01	; 1
uint8_t motor_index = 0;
volatile uint16_t counter[CHANNELS_COUNT];

void SetMotors(double_t* motors)
{
    for (uint8_t i = 0; i < MOTORS_COUNT; ++i)
    36d8:	c4 30       	cpi	r28, 0x04	; 4
    36da:	d1 05       	cpc	r29, r1
    36dc:	81 f6       	brne	.-96     	; 0x367e <SetMotors+0x2e>
        else if (sum > HIGH)
        {
            counter[i] = HIGH;
        }
    }
}
    36de:	df 91       	pop	r29
    36e0:	cf 91       	pop	r28
    36e2:	1f 91       	pop	r17
    36e4:	0f 91       	pop	r16
    36e6:	ff 90       	pop	r15
    36e8:	ef 90       	pop	r14
    36ea:	df 90       	pop	r13
    36ec:	cf 90       	pop	r12
    36ee:	08 95       	ret

000036f0 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    36f0:	1f 92       	push	r1
    36f2:	0f 92       	push	r0
    36f4:	0f b6       	in	r0, 0x3f	; 63
    36f6:	0f 92       	push	r0
    36f8:	11 24       	eor	r1, r1
    36fa:	8f 93       	push	r24
    36fc:	9f 93       	push	r25
    36fe:	ef 93       	push	r30
    3700:	ff 93       	push	r31
    
    if (motor_index <= 7)
    3702:	e0 91 09 01 	lds	r30, 0x0109
    3706:	e8 30       	cpi	r30, 0x08	; 8
    3708:	50 f4       	brcc	.+20     	; 0x371e <__vector_7+0x2e>
    {
        OCR1B = counter[motor_index];
    370a:	f0 e0       	ldi	r31, 0x00	; 0
    370c:	ee 0f       	add	r30, r30
    370e:	ff 1f       	adc	r31, r31
    3710:	e3 5e       	subi	r30, 0xE3	; 227
    3712:	fd 4f       	sbci	r31, 0xFD	; 253
    3714:	80 81       	ld	r24, Z
    3716:	91 81       	ldd	r25, Z+1	; 0x01
    3718:	99 bd       	out	0x29, r25	; 41
    371a:	88 bd       	out	0x28, r24	; 40
    371c:	02 c0       	rjmp	.+4      	; 0x3722 <__vector_7+0x32>
    }
    else
    {
        OCR1B = 0;
    371e:	19 bc       	out	0x29, r1	; 41
    3720:	18 bc       	out	0x28, r1	; 40
    }
    
}
    3722:	ff 91       	pop	r31
    3724:	ef 91       	pop	r30
    3726:	9f 91       	pop	r25
    3728:	8f 91       	pop	r24
    372a:	0f 90       	pop	r0
    372c:	0f be       	out	0x3f, r0	; 63
    372e:	0f 90       	pop	r0
    3730:	1f 90       	pop	r1
    3732:	18 95       	reti

00003734 <__vector_8>:

ISR(TIMER1_COMPB_vect, ISR_NOBLOCK)
{
    3734:	78 94       	sei
    3736:	1f 92       	push	r1
    3738:	0f 92       	push	r0
    373a:	0f b6       	in	r0, 0x3f	; 63
    373c:	0f 92       	push	r0
    373e:	11 24       	eor	r1, r1
    3740:	8f 93       	push	r24
    3742:	9f 93       	push	r25
    if (motor_index <= 7)
    3744:	80 91 09 01 	lds	r24, 0x0109
    3748:	88 30       	cpi	r24, 0x08	; 8
    374a:	20 f4       	brcc	.+8      	; 0x3754 <__vector_8+0x20>
    {
        PORTB = motor_index | PORTB & 0b11111000;
    374c:	98 b3       	in	r25, 0x18	; 24
    374e:	98 7f       	andi	r25, 0xF8	; 248
    3750:	89 2b       	or	r24, r25
    3752:	88 bb       	out	0x18, r24	; 24
    }
    
    if (motor_index >= 9)
    3754:	80 91 09 01 	lds	r24, 0x0109
    3758:	89 30       	cpi	r24, 0x09	; 9
    375a:	18 f0       	brcs	.+6      	; 0x3762 <__vector_8+0x2e>
    {
        motor_index = 0;
    375c:	10 92 09 01 	sts	0x0109, r1
    3760:	03 c0       	rjmp	.+6      	; 0x3768 <__vector_8+0x34>
    }
    else
    {
        motor_index++;
    3762:	8f 5f       	subi	r24, 0xFF	; 255
    3764:	80 93 09 01 	sts	0x0109, r24
    }
    3768:	9f 91       	pop	r25
    376a:	8f 91       	pop	r24
    376c:	0f 90       	pop	r0
    376e:	0f be       	out	0x3f, r0	; 63
    3770:	0f 90       	pop	r0
    3772:	1f 90       	pop	r1
    3774:	18 95       	reti

00003776 <LED_On>:
 */ 
#include "Output.h"

void LED_On(uint8_t LED)
{
	switch (LED)
    3776:	82 30       	cpi	r24, 0x02	; 2
    3778:	31 f0       	breq	.+12     	; 0x3786 <LED_On+0x10>
    377a:	83 30       	cpi	r24, 0x03	; 3
    377c:	31 f0       	breq	.+12     	; 0x378a <LED_On+0x14>
    377e:	81 30       	cpi	r24, 0x01	; 1
    3780:	29 f4       	brne	.+10     	; 0x378c <LED_On+0x16>
	{
		case LED_RED: 
		{
			PORTB |= 0b00100000;
    3782:	c5 9a       	sbi	0x18, 5	; 24
			break;
    3784:	08 95       	ret
		}
		case LED_BLUE:
		{
			PORTB |= 0b01000000;
    3786:	c6 9a       	sbi	0x18, 6	; 24
			break;
    3788:	08 95       	ret
		}
		case LED_GREEN:
		{
			PORTB |= 0b10000000;
    378a:	c7 9a       	sbi	0x18, 7	; 24
    378c:	08 95       	ret

0000378e <LED_Off>:
	}
}

void LED_Off(uint8_t LED)
{
	switch (LED)
    378e:	82 30       	cpi	r24, 0x02	; 2
    3790:	31 f0       	breq	.+12     	; 0x379e <LED_Off+0x10>
    3792:	83 30       	cpi	r24, 0x03	; 3
    3794:	31 f0       	breq	.+12     	; 0x37a2 <LED_Off+0x14>
    3796:	81 30       	cpi	r24, 0x01	; 1
    3798:	29 f4       	brne	.+10     	; 0x37a4 <LED_Off+0x16>
	{
		case LED_RED:
		{
			PORTB &= ~0b00100000;
    379a:	c5 98       	cbi	0x18, 5	; 24
			break;
    379c:	08 95       	ret
		}
		case LED_BLUE:
		{
			PORTB &= ~0b01000000;
    379e:	c6 98       	cbi	0x18, 6	; 24
			break;
    37a0:	08 95       	ret
		}
		case LED_GREEN:
		{
			PORTB &= ~0b10000000;
    37a2:	c7 98       	cbi	0x18, 7	; 24
    37a4:	08 95       	ret

000037a6 <Sound_On>:
}


void Sound_On()
{
	PORTB |= 0b00001000;
    37a6:	c3 9a       	sbi	0x18, 3	; 24
    37a8:	08 95       	ret

000037aa <Sound_Off>:
}

void Sound_Off()
{
	PORTB &= ~0b00001000;
    37aa:	c3 98       	cbi	0x18, 3	; 24
    37ac:	08 95       	ret

000037ae <ModbusLoader>:

//Выводим телеметрию и т.п. в Inputs
void ModbusLoader()
{
	
	usRegInputBuf[1]=T.array[0];
    37ae:	80 91 d9 02 	lds	r24, 0x02D9
    37b2:	90 91 da 02 	lds	r25, 0x02DA
    37b6:	90 93 b0 03 	sts	0x03B0, r25
    37ba:	80 93 af 03 	sts	0x03AF, r24
	usRegInputBuf[2]=T.array[1];
    37be:	80 91 db 02 	lds	r24, 0x02DB
    37c2:	90 91 dc 02 	lds	r25, 0x02DC
    37c6:	90 93 b2 03 	sts	0x03B2, r25
    37ca:	80 93 b1 03 	sts	0x03B1, r24
	
	usRegInputBuf[3]=P.array[0];
    37ce:	80 91 dd 02 	lds	r24, 0x02DD
    37d2:	90 91 de 02 	lds	r25, 0x02DE
    37d6:	90 93 b4 03 	sts	0x03B4, r25
    37da:	80 93 b3 03 	sts	0x03B3, r24
	usRegInputBuf[4]=P.array[1];
    37de:	80 91 df 02 	lds	r24, 0x02DF
    37e2:	90 91 e0 02 	lds	r25, 0x02E0
    37e6:	90 93 b6 03 	sts	0x03B6, r25
    37ea:	80 93 b5 03 	sts	0x03B5, r24
	//usRegInputBuf[3]=(uint16_t)EEE;
	
	usRegInputBuf[5]=k_x.array[0];
    37ee:	80 91 01 03 	lds	r24, 0x0301
    37f2:	90 91 02 03 	lds	r25, 0x0302
    37f6:	90 93 b8 03 	sts	0x03B8, r25
    37fa:	80 93 b7 03 	sts	0x03B7, r24
	usRegInputBuf[6]=k_x.array[1];
    37fe:	80 91 03 03 	lds	r24, 0x0303
    3802:	90 91 04 03 	lds	r25, 0x0304
    3806:	90 93 ba 03 	sts	0x03BA, r25
    380a:	80 93 b9 03 	sts	0x03B9, r24
	
	usRegInputBuf[7]=k_y.array[0];
    380e:	80 91 05 03 	lds	r24, 0x0305
    3812:	90 91 06 03 	lds	r25, 0x0306
    3816:	90 93 bc 03 	sts	0x03BC, r25
    381a:	80 93 bb 03 	sts	0x03BB, r24
	usRegInputBuf[8]=k_y.array[1];
    381e:	80 91 07 03 	lds	r24, 0x0307
    3822:	90 91 08 03 	lds	r25, 0x0308
    3826:	90 93 be 03 	sts	0x03BE, r25
    382a:	80 93 bd 03 	sts	0x03BD, r24
	
	usRegInputBuf[9]=k_z.array[0];
    382e:	80 91 09 03 	lds	r24, 0x0309
    3832:	90 91 0a 03 	lds	r25, 0x030A
    3836:	90 93 c0 03 	sts	0x03C0, r25
    383a:	80 93 bf 03 	sts	0x03BF, r24
	usRegInputBuf[10]=k_z.array[1];
    383e:	80 91 0b 03 	lds	r24, 0x030B
    3842:	90 91 0c 03 	lds	r25, 0x030C
    3846:	90 93 c2 03 	sts	0x03C2, r25
    384a:	80 93 c1 03 	sts	0x03C1, r24
	
	usRegInputBuf[11] = B_x.array[0];
    384e:	80 91 3d 03 	lds	r24, 0x033D
    3852:	90 91 3e 03 	lds	r25, 0x033E
    3856:	90 93 c4 03 	sts	0x03C4, r25
    385a:	80 93 c3 03 	sts	0x03C3, r24
	usRegInputBuf[12] = B_x.array[1];
    385e:	80 91 3f 03 	lds	r24, 0x033F
    3862:	90 91 40 03 	lds	r25, 0x0340
    3866:	90 93 c6 03 	sts	0x03C6, r25
    386a:	80 93 c5 03 	sts	0x03C5, r24
	
	usRegInputBuf[13] = B_y.array[0];
    386e:	80 91 41 03 	lds	r24, 0x0341
    3872:	90 91 42 03 	lds	r25, 0x0342
    3876:	90 93 c8 03 	sts	0x03C8, r25
    387a:	80 93 c7 03 	sts	0x03C7, r24
	usRegInputBuf[14] = B_y.array[1];
    387e:	80 91 43 03 	lds	r24, 0x0343
    3882:	90 91 44 03 	lds	r25, 0x0344
    3886:	90 93 ca 03 	sts	0x03CA, r25
    388a:	80 93 c9 03 	sts	0x03C9, r24
	
	usRegInputBuf[15] = B_z.array[0];
    388e:	80 91 45 03 	lds	r24, 0x0345
    3892:	90 91 46 03 	lds	r25, 0x0346
    3896:	90 93 cc 03 	sts	0x03CC, r25
    389a:	80 93 cb 03 	sts	0x03CB, r24
	usRegInputBuf[16] = B_z.array[1];
    389e:	80 91 47 03 	lds	r24, 0x0347
    38a2:	90 91 48 03 	lds	r25, 0x0348
    38a6:	90 93 ce 03 	sts	0x03CE, r25
    38aa:	80 93 cd 03 	sts	0x03CD, r24
	
	usRegInputBuf[17] = magOz.array[0];
    38ae:	80 91 9d 03 	lds	r24, 0x039D
    38b2:	90 91 9e 03 	lds	r25, 0x039E
    38b6:	90 93 d0 03 	sts	0x03D0, r25
    38ba:	80 93 cf 03 	sts	0x03CF, r24
	usRegInputBuf[18] = magOz.array[1];
    38be:	80 91 9f 03 	lds	r24, 0x039F
    38c2:	90 91 a0 03 	lds	r25, 0x03A0
    38c6:	90 93 d2 03 	sts	0x03D2, r25
    38ca:	80 93 d1 03 	sts	0x03D1, r24
	
	usRegInputBuf[19] = Talt.array[0];	
    38ce:	80 91 5d 03 	lds	r24, 0x035D
    38d2:	90 91 5e 03 	lds	r25, 0x035E
    38d6:	90 93 d4 03 	sts	0x03D4, r25
    38da:	80 93 d3 03 	sts	0x03D3, r24
	usRegInputBuf[20] = Talt.array[1];
    38de:	80 91 5f 03 	lds	r24, 0x035F
    38e2:	90 91 60 03 	lds	r25, 0x0360
    38e6:	90 93 d6 03 	sts	0x03D6, r25
    38ea:	80 93 d5 03 	sts	0x03D5, r24
	
	usRegInputBuf[21] = w_x.array[0];
    38ee:	80 91 25 03 	lds	r24, 0x0325
    38f2:	90 91 26 03 	lds	r25, 0x0326
    38f6:	90 93 d8 03 	sts	0x03D8, r25
    38fa:	80 93 d7 03 	sts	0x03D7, r24
	usRegInputBuf[22] = w_x.array[1];
    38fe:	80 91 27 03 	lds	r24, 0x0327
    3902:	90 91 28 03 	lds	r25, 0x0328
    3906:	90 93 da 03 	sts	0x03DA, r25
    390a:	80 93 d9 03 	sts	0x03D9, r24
	
	usRegInputBuf[23] = w_y.array[0];
    390e:	80 91 29 03 	lds	r24, 0x0329
    3912:	90 91 2a 03 	lds	r25, 0x032A
    3916:	90 93 dc 03 	sts	0x03DC, r25
    391a:	80 93 db 03 	sts	0x03DB, r24
	usRegInputBuf[24] = w_y.array[1];
    391e:	80 91 2b 03 	lds	r24, 0x032B
    3922:	90 91 2c 03 	lds	r25, 0x032C
    3926:	90 93 de 03 	sts	0x03DE, r25
    392a:	80 93 dd 03 	sts	0x03DD, r24
	
	usRegInputBuf[25] = w_z.array[0];
    392e:	80 91 2d 03 	lds	r24, 0x032D
    3932:	90 91 2e 03 	lds	r25, 0x032E
    3936:	90 93 e0 03 	sts	0x03E0, r25
    393a:	80 93 df 03 	sts	0x03DF, r24
	usRegInputBuf[26] = w_z.array[1];
    393e:	80 91 2f 03 	lds	r24, 0x032F
    3942:	90 91 30 03 	lds	r25, 0x0330
    3946:	90 93 e2 03 	sts	0x03E2, r25
    394a:	80 93 e1 03 	sts	0x03E1, r24
	
	usRegInputBuf[27] = Ox.array[0];
    394e:	80 91 65 03 	lds	r24, 0x0365
    3952:	90 91 66 03 	lds	r25, 0x0366
    3956:	90 93 e4 03 	sts	0x03E4, r25
    395a:	80 93 e3 03 	sts	0x03E3, r24
	usRegInputBuf[28] = Ox.array[1];
    395e:	80 91 67 03 	lds	r24, 0x0367
    3962:	90 91 68 03 	lds	r25, 0x0368
    3966:	90 93 e6 03 	sts	0x03E6, r25
    396a:	80 93 e5 03 	sts	0x03E5, r24
	
	usRegInputBuf[29] = Oy.array[0];
    396e:	80 91 69 03 	lds	r24, 0x0369
    3972:	90 91 6a 03 	lds	r25, 0x036A
    3976:	90 93 e8 03 	sts	0x03E8, r25
    397a:	80 93 e7 03 	sts	0x03E7, r24
	usRegInputBuf[30] = Oy.array[1];
    397e:	80 91 6b 03 	lds	r24, 0x036B
    3982:	90 91 6c 03 	lds	r25, 0x036C
    3986:	90 93 ea 03 	sts	0x03EA, r25
    398a:	80 93 e9 03 	sts	0x03E9, r24
	
	usRegInputBuf[31] = int_w_x.array[0];
    398e:	80 91 75 03 	lds	r24, 0x0375
    3992:	90 91 76 03 	lds	r25, 0x0376
    3996:	90 93 ec 03 	sts	0x03EC, r25
    399a:	80 93 eb 03 	sts	0x03EB, r24
	usRegInputBuf[32] = int_w_x.array[1];
    399e:	80 91 77 03 	lds	r24, 0x0377
    39a2:	90 91 78 03 	lds	r25, 0x0378
    39a6:	90 93 ee 03 	sts	0x03EE, r25
    39aa:	80 93 ed 03 	sts	0x03ED, r24
	
	usRegInputBuf[33] = int_w_y.array[0];
    39ae:	80 91 79 03 	lds	r24, 0x0379
    39b2:	90 91 7a 03 	lds	r25, 0x037A
    39b6:	90 93 f0 03 	sts	0x03F0, r25
    39ba:	80 93 ef 03 	sts	0x03EF, r24
	usRegInputBuf[34] = int_w_y.array[1];
    39be:	80 91 7b 03 	lds	r24, 0x037B
    39c2:	90 91 7c 03 	lds	r25, 0x037C
    39c6:	90 93 f2 03 	sts	0x03F2, r25
    39ca:	80 93 f1 03 	sts	0x03F1, r24
	
	usRegInputBuf[35] = acc_Ox.array[0];
    39ce:	80 91 7d 03 	lds	r24, 0x037D
    39d2:	90 91 7e 03 	lds	r25, 0x037E
    39d6:	90 93 f4 03 	sts	0x03F4, r25
    39da:	80 93 f3 03 	sts	0x03F3, r24
	usRegInputBuf[36] = acc_Ox.array[1];
    39de:	80 91 7f 03 	lds	r24, 0x037F
    39e2:	90 91 80 03 	lds	r25, 0x0380
    39e6:	90 93 f6 03 	sts	0x03F6, r25
    39ea:	80 93 f5 03 	sts	0x03F5, r24
	
	usRegInputBuf[37] = acc_Oy.array[0];
    39ee:	80 91 81 03 	lds	r24, 0x0381
    39f2:	90 91 82 03 	lds	r25, 0x0382
    39f6:	90 93 f8 03 	sts	0x03F8, r25
    39fa:	80 93 f7 03 	sts	0x03F7, r24
	usRegInputBuf[38] = acc_Oy.array[1];
    39fe:	80 91 83 03 	lds	r24, 0x0383
    3a02:	90 91 84 03 	lds	r25, 0x0384
    3a06:	90 93 fa 03 	sts	0x03FA, r25
    3a0a:	80 93 f9 03 	sts	0x03F9, r24
	
	usRegInputBuf[39] = U_Batt.array[0];
    3a0e:	80 91 85 03 	lds	r24, 0x0385
    3a12:	90 91 86 03 	lds	r25, 0x0386
    3a16:	90 93 fc 03 	sts	0x03FC, r25
    3a1a:	80 93 fb 03 	sts	0x03FB, r24
	usRegInputBuf[40] = U_Batt.array[1];
    3a1e:	80 91 87 03 	lds	r24, 0x0387
    3a22:	90 91 88 03 	lds	r25, 0x0388
    3a26:	90 93 fe 03 	sts	0x03FE, r25
    3a2a:	80 93 fd 03 	sts	0x03FD, r24
	
	usRegInputBuf[41] = int_Ox.array[0];
    3a2e:	80 91 91 03 	lds	r24, 0x0391
    3a32:	90 91 92 03 	lds	r25, 0x0392
    3a36:	90 93 00 04 	sts	0x0400, r25
    3a3a:	80 93 ff 03 	sts	0x03FF, r24
	usRegInputBuf[42] = int_Ox.array[1];
    3a3e:	80 91 93 03 	lds	r24, 0x0393
    3a42:	90 91 94 03 	lds	r25, 0x0394
    3a46:	90 93 02 04 	sts	0x0402, r25
    3a4a:	80 93 01 04 	sts	0x0401, r24
	
	usRegInputBuf[43] = int_Oy.array[0];
    3a4e:	80 91 95 03 	lds	r24, 0x0395
    3a52:	90 91 96 03 	lds	r25, 0x0396
    3a56:	90 93 04 04 	sts	0x0404, r25
    3a5a:	80 93 03 04 	sts	0x0403, r24
	usRegInputBuf[44] = int_Oy.array[1];
    3a5e:	80 91 97 03 	lds	r24, 0x0397
    3a62:	90 91 98 03 	lds	r25, 0x0398
    3a66:	90 93 06 04 	sts	0x0406, r25
    3a6a:	80 93 05 04 	sts	0x0405, r24
	
	usRegInputBuf[45] = int_w_z.array[0];
    3a6e:	80 91 99 03 	lds	r24, 0x0399
    3a72:	90 91 9a 03 	lds	r25, 0x039A
    3a76:	90 93 08 04 	sts	0x0408, r25
    3a7a:	80 93 07 04 	sts	0x0407, r24
	usRegInputBuf[46] = int_w_z.array[1];
    3a7e:	80 91 9b 03 	lds	r24, 0x039B
    3a82:	90 91 9c 03 	lds	r25, 0x039C
    3a86:	90 93 0a 04 	sts	0x040A, r25
    3a8a:	80 93 09 04 	sts	0x0409, r24
	
	usRegInputBuf[47] = int_Oz.array[0];
    3a8e:	80 91 a1 03 	lds	r24, 0x03A1
    3a92:	90 91 a2 03 	lds	r25, 0x03A2
    3a96:	90 93 0c 04 	sts	0x040C, r25
    3a9a:	80 93 0b 04 	sts	0x040B, r24
	usRegInputBuf[48] = int_Oz.array[1];
    3a9e:	80 91 a3 03 	lds	r24, 0x03A3
    3aa2:	90 91 a4 03 	lds	r25, 0x03A4
    3aa6:	90 93 0e 04 	sts	0x040E, r25
    3aaa:	80 93 0d 04 	sts	0x040D, r24
	
	usRegInputBuf[49] = Oz.array[0];
    3aae:	80 91 59 03 	lds	r24, 0x0359
    3ab2:	90 91 5a 03 	lds	r25, 0x035A
    3ab6:	90 93 10 04 	sts	0x0410, r25
    3aba:	80 93 0f 04 	sts	0x040F, r24
	usRegInputBuf[50] = Oz.array[1];	
    3abe:	80 91 5b 03 	lds	r24, 0x035B
    3ac2:	90 91 5c 03 	lds	r25, 0x035C
    3ac6:	90 93 12 04 	sts	0x0412, r25
    3aca:	80 93 11 04 	sts	0x0411, r24
	
	usRegInputBuf[51] = H.array[0];
    3ace:	80 91 e1 02 	lds	r24, 0x02E1
    3ad2:	90 91 e2 02 	lds	r25, 0x02E2
    3ad6:	90 93 14 04 	sts	0x0414, r25
    3ada:	80 93 13 04 	sts	0x0413, r24
	usRegInputBuf[52] = H.array[1];
    3ade:	80 91 e3 02 	lds	r24, 0x02E3
    3ae2:	90 91 e4 02 	lds	r25, 0x02E4
    3ae6:	90 93 16 04 	sts	0x0416, r25
    3aea:	80 93 15 04 	sts	0x0415, r24
    3aee:	08 95       	ret

00003af0 <ModbusInitValues>:
	ModbusEEPROMLoader();
}

//Загружаем в Holding Registers и в массив параметров значения из EEPROM
void ModbusInitValues()
{	
    3af0:	ef 92       	push	r14
    3af2:	ff 92       	push	r15
    3af4:	0f 93       	push	r16
    3af6:	1f 93       	push	r17
    3af8:	cf 93       	push	r28
    3afa:	df 93       	push	r29
    3afc:	cd e2       	ldi	r28, 0x2D	; 45
    3afe:	d2 e0       	ldi	r29, 0x02	; 2
		
	ModbusEEPROMLoader();
}

//Загружаем в Holding Registers и в массив параметров значения из EEPROM
void ModbusInitValues()
    3b00:	7e 01       	movw	r14, r28
    3b02:	09 ed       	ldi	r16, 0xD9	; 217
    3b04:	12 e0       	ldi	r17, 0x02	; 2
{	
	for(uint8_t i = 0; i < coeff_list_SIZE; i++)
	{
		coeffs[i].value = eeprom_read_float(4 * i);
    3b06:	ce 01       	movw	r24, r28
    3b08:	8e 19       	sub	r24, r14
    3b0a:	9f 09       	sbc	r25, r15
    3b0c:	0e 94 de 2b 	call	0x57bc	; 0x57bc <__eerd_dword_m32a>
    3b10:	69 93       	st	Y+, r22
    3b12:	79 93       	st	Y+, r23
    3b14:	89 93       	st	Y+, r24
    3b16:	99 93       	st	Y+, r25
}

//Загружаем в Holding Registers и в массив параметров значения из EEPROM
void ModbusInitValues()
{	
	for(uint8_t i = 0; i < coeff_list_SIZE; i++)
    3b18:	c0 17       	cp	r28, r16
    3b1a:	d1 07       	cpc	r29, r17
    3b1c:	a1 f7       	brne	.-24     	; 0x3b06 <ModbusInitValues+0x16>
    3b1e:	ed e2       	ldi	r30, 0x2D	; 45
    3b20:	f2 e0       	ldi	r31, 0x02	; 2
    3b22:	ad e9       	ldi	r26, 0x9D	; 157
    3b24:	b4 e0       	ldi	r27, 0x04	; 4
		coeffs[i].value = eeprom_read_float(4 * i);
	}
	
	for (uint8_t i = 0; i < coeff_list_SIZE; i++)
	{
		usRegHoldingBuf[2 * i + MB_OFFSET + MB_Kp_Oz] = coeffs[i].array[0];
    3b26:	80 81       	ld	r24, Z
    3b28:	91 81       	ldd	r25, Z+1	; 0x01
    3b2a:	11 96       	adiw	r26, 0x01	; 1
    3b2c:	9c 93       	st	X, r25
    3b2e:	8e 93       	st	-X, r24
		usRegHoldingBuf[2 * i + MB_OFFSET + MB_Kp_Oz + 1] = coeffs[i].array[1];
    3b30:	82 81       	ldd	r24, Z+2	; 0x02
    3b32:	93 81       	ldd	r25, Z+3	; 0x03
    3b34:	13 96       	adiw	r26, 0x03	; 3
    3b36:	9c 93       	st	X, r25
    3b38:	8e 93       	st	-X, r24
    3b3a:	12 97       	sbiw	r26, 0x02	; 2
    3b3c:	34 96       	adiw	r30, 0x04	; 4
    3b3e:	14 96       	adiw	r26, 0x04	; 4
	for(uint8_t i = 0; i < coeff_list_SIZE; i++)
	{
		coeffs[i].value = eeprom_read_float(4 * i);
	}
	
	for (uint8_t i = 0; i < coeff_list_SIZE; i++)
    3b40:	e0 17       	cp	r30, r16
    3b42:	f1 07       	cpc	r31, r17
    3b44:	81 f7       	brne	.-32     	; 0x3b26 <ModbusInitValues+0x36>
	{
		usRegHoldingBuf[2 * i + MB_OFFSET + MB_Kp_Oz] = coeffs[i].array[0];
		usRegHoldingBuf[2 * i + MB_OFFSET + MB_Kp_Oz + 1] = coeffs[i].array[1];
	}
}
    3b46:	df 91       	pop	r29
    3b48:	cf 91       	pop	r28
    3b4a:	1f 91       	pop	r17
    3b4c:	0f 91       	pop	r16
    3b4e:	ff 90       	pop	r15
    3b50:	ef 90       	pop	r14
    3b52:	08 95       	ret

00003b54 <Uint32Comparrer>:

bool Uint32Comparrer(uint32_t A1, uint32_t A2, uint32_t B1, uint32_t B2)
{
    3b54:	af 92       	push	r10
    3b56:	bf 92       	push	r11
    3b58:	cf 92       	push	r12
    3b5a:	df 92       	push	r13
    3b5c:	ef 92       	push	r14
    3b5e:	ff 92       	push	r15
    3b60:	0f 93       	push	r16
    3b62:	1f 93       	push	r17
	if (A1 != B1 || A2 != B2)
    3b64:	6e 15       	cp	r22, r14
    3b66:	7f 05       	cpc	r23, r15
    3b68:	80 07       	cpc	r24, r16
    3b6a:	91 07       	cpc	r25, r17
    3b6c:	41 f4       	brne	.+16     	; 0x3b7e <Uint32Comparrer+0x2a>
    3b6e:	81 e0       	ldi	r24, 0x01	; 1
    3b70:	2a 15       	cp	r18, r10
    3b72:	3b 05       	cpc	r19, r11
    3b74:	4c 05       	cpc	r20, r12
    3b76:	5d 05       	cpc	r21, r13
    3b78:	19 f0       	breq	.+6      	; 0x3b80 <Uint32Comparrer+0x2c>
    3b7a:	80 e0       	ldi	r24, 0x00	; 0
    3b7c:	01 c0       	rjmp	.+2      	; 0x3b80 <Uint32Comparrer+0x2c>
	{
		return false;
    3b7e:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return true;
}
    3b80:	1f 91       	pop	r17
    3b82:	0f 91       	pop	r16
    3b84:	ff 90       	pop	r15
    3b86:	ef 90       	pop	r14
    3b88:	df 90       	pop	r13
    3b8a:	cf 90       	pop	r12
    3b8c:	bf 90       	pop	r11
    3b8e:	af 90       	pop	r10
    3b90:	08 95       	ret

00003b92 <ModbusEEPROMLoader>:

void ModbusEEPROMLoader()
{
    3b92:	2f 92       	push	r2
    3b94:	3f 92       	push	r3
    3b96:	4f 92       	push	r4
    3b98:	5f 92       	push	r5
    3b9a:	6f 92       	push	r6
    3b9c:	7f 92       	push	r7
    3b9e:	8f 92       	push	r8
    3ba0:	9f 92       	push	r9
    3ba2:	af 92       	push	r10
    3ba4:	bf 92       	push	r11
    3ba6:	cf 92       	push	r12
    3ba8:	df 92       	push	r13
    3baa:	ef 92       	push	r14
    3bac:	ff 92       	push	r15
    3bae:	0f 93       	push	r16
    3bb0:	1f 93       	push	r17
    3bb2:	cf 93       	push	r28
    3bb4:	df 93       	push	r29
    3bb6:	00 d0       	rcall	.+0      	; 0x3bb8 <ModbusEEPROMLoader+0x26>
    3bb8:	1f 92       	push	r1
    3bba:	cd b7       	in	r28, 0x3d	; 61
    3bbc:	de b7       	in	r29, 0x3e	; 62
    3bbe:	0f 2e       	mov	r0, r31
    3bc0:	fd e9       	ldi	r31, 0x9D	; 157
    3bc2:	8f 2e       	mov	r8, r31
    3bc4:	f4 e0       	ldi	r31, 0x04	; 4
    3bc6:	9f 2e       	mov	r9, r31
    3bc8:	f0 2d       	mov	r31, r0
	}
	
	return true;
}

void ModbusEEPROMLoader()
    3bca:	0f 2e       	mov	r0, r31
    3bcc:	f9 ed       	ldi	r31, 0xD9	; 217
    3bce:	2f 2e       	mov	r2, r31
    3bd0:	f2 e0       	ldi	r31, 0x02	; 2
    3bd2:	3f 2e       	mov	r3, r31
    3bd4:	f0 2d       	mov	r31, r0
    3bd6:	8d e2       	ldi	r24, 0x2D	; 45
    3bd8:	92 e0       	ldi	r25, 0x02	; 2
    3bda:	9b 83       	std	Y+3, r25	; 0x03
    3bdc:	8a 83       	std	Y+2, r24	; 0x02
{
	uint8_t sond_flag = 0;
    3bde:	19 82       	std	Y+1, r1	; 0x01

	
	for (uint8_t i = 0; i < coeff_list_SIZE; i++)
	{
		if (!Uint32Comparrer(usRegHoldingBuf[2 * i + MB_OFFSET + MB_Kp_Oz], usRegHoldingBuf[2 * i + MB_OFFSET + MB_Kp_Oz + 1], coeffs[i].array[0], coeffs[i].array[1]))
    3be0:	f4 01       	movw	r30, r8
    3be2:	42 80       	ldd	r4, Z+2	; 0x02
    3be4:	53 80       	ldd	r5, Z+3	; 0x03
    3be6:	60 80       	ld	r6, Z
    3be8:	71 80       	ldd	r7, Z+1	; 0x01
    3bea:	ea 81       	ldd	r30, Y+2	; 0x02
    3bec:	fb 81       	ldd	r31, Y+3	; 0x03
    3bee:	a2 80       	ldd	r10, Z+2	; 0x02
    3bf0:	b3 80       	ldd	r11, Z+3	; 0x03
    3bf2:	c1 2c       	mov	r12, r1
    3bf4:	d1 2c       	mov	r13, r1
    3bf6:	e0 80       	ld	r14, Z
    3bf8:	f1 80       	ldd	r15, Z+1	; 0x01
    3bfa:	00 e0       	ldi	r16, 0x00	; 0
    3bfc:	10 e0       	ldi	r17, 0x00	; 0
    3bfe:	92 01       	movw	r18, r4
    3c00:	40 e0       	ldi	r20, 0x00	; 0
    3c02:	50 e0       	ldi	r21, 0x00	; 0
    3c04:	b3 01       	movw	r22, r6
    3c06:	80 e0       	ldi	r24, 0x00	; 0
    3c08:	90 e0       	ldi	r25, 0x00	; 0
    3c0a:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <Uint32Comparrer>
    3c0e:	81 11       	cpse	r24, r1
    3c10:	11 c0       	rjmp	.+34     	; 0x3c34 <ModbusEEPROMLoader+0xa2>
		{
			coeffs[i].array[0]=usRegHoldingBuf[2 * i + MB_OFFSET + MB_Kp_Oz];
    3c12:	ea 81       	ldd	r30, Y+2	; 0x02
    3c14:	fb 81       	ldd	r31, Y+3	; 0x03
    3c16:	71 82       	std	Z+1, r7	; 0x01
    3c18:	60 82       	st	Z, r6
			coeffs[i].array[1]=usRegHoldingBuf[2 * i + MB_OFFSET + MB_Kp_Oz + 1];
    3c1a:	53 82       	std	Z+3, r5	; 0x03
    3c1c:	42 82       	std	Z+2, r4	; 0x02
			eeprom_write_float(i * 4, coeffs[i].value);
    3c1e:	40 81       	ld	r20, Z
    3c20:	51 81       	ldd	r21, Z+1	; 0x01
    3c22:	62 81       	ldd	r22, Z+2	; 0x02
    3c24:	73 81       	ldd	r23, Z+3	; 0x03
    3c26:	cf 01       	movw	r24, r30
    3c28:	8d 52       	subi	r24, 0x2D	; 45
    3c2a:	92 40       	sbci	r25, 0x02	; 2
    3c2c:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <__eewr_dword_m32a>
			sond_flag = 1;
    3c30:	f1 e0       	ldi	r31, 0x01	; 1
    3c32:	f9 83       	std	Y+1, r31	; 0x01
    3c34:	8a 81       	ldd	r24, Y+2	; 0x02
    3c36:	9b 81       	ldd	r25, Y+3	; 0x03
    3c38:	04 96       	adiw	r24, 0x04	; 4
    3c3a:	9b 83       	std	Y+3, r25	; 0x03
    3c3c:	8a 83       	std	Y+2, r24	; 0x02
    3c3e:	94 e0       	ldi	r25, 0x04	; 4
    3c40:	89 0e       	add	r8, r25
    3c42:	91 1c       	adc	r9, r1
void ModbusEEPROMLoader()
{
	uint8_t sond_flag = 0;

	
	for (uint8_t i = 0; i < coeff_list_SIZE; i++)
    3c44:	ea 81       	ldd	r30, Y+2	; 0x02
    3c46:	fb 81       	ldd	r31, Y+3	; 0x03
    3c48:	e2 15       	cp	r30, r2
    3c4a:	f3 05       	cpc	r31, r3
    3c4c:	49 f6       	brne	.-110    	; 0x3be0 <ModbusEEPROMLoader+0x4e>
			eeprom_write_float(i * 4, coeffs[i].value);
			sond_flag = 1;
		}
	}	
	
	if (sond_flag)
    3c4e:	f9 81       	ldd	r31, Y+1	; 0x01
    3c50:	ff 23       	and	r31, r31
    3c52:	69 f0       	breq	.+26     	; 0x3c6e <ModbusEEPROMLoader+0xdc>
	{
		Sound_On();
    3c54:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <Sound_On>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3c58:	2f ef       	ldi	r18, 0xFF	; 255
    3c5a:	81 ee       	ldi	r24, 0xE1	; 225
    3c5c:	94 e0       	ldi	r25, 0x04	; 4
    3c5e:	21 50       	subi	r18, 0x01	; 1
    3c60:	80 40       	sbci	r24, 0x00	; 0
    3c62:	90 40       	sbci	r25, 0x00	; 0
    3c64:	e1 f7       	brne	.-8      	; 0x3c5e <ModbusEEPROMLoader+0xcc>
    3c66:	00 c0       	rjmp	.+0      	; 0x3c68 <ModbusEEPROMLoader+0xd6>
    3c68:	00 00       	nop
		_delay_ms(100);
		Sound_Off();		
    3c6a:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <Sound_Off>
	}
	
	ModbusInitValues(); 
    3c6e:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <ModbusInitValues>
    3c72:	0f 90       	pop	r0
    3c74:	0f 90       	pop	r0
    3c76:	0f 90       	pop	r0
    3c78:	df 91       	pop	r29
    3c7a:	cf 91       	pop	r28
    3c7c:	1f 91       	pop	r17
    3c7e:	0f 91       	pop	r16
    3c80:	ff 90       	pop	r15
    3c82:	ef 90       	pop	r14
    3c84:	df 90       	pop	r13
    3c86:	cf 90       	pop	r12
    3c88:	bf 90       	pop	r11
    3c8a:	af 90       	pop	r10
    3c8c:	9f 90       	pop	r9
    3c8e:	8f 90       	pop	r8
    3c90:	7f 90       	pop	r7
    3c92:	6f 90       	pop	r6
    3c94:	5f 90       	pop	r5
    3c96:	4f 90       	pop	r4
    3c98:	3f 90       	pop	r3
    3c9a:	2f 90       	pop	r2
    3c9c:	08 95       	ret

00003c9e <ModbusSaver>:
	usRegInputBuf[52] = H.array[1];
}

//Обрабатываем значения HoldingRegisters
void ModbusSaver()
{
    3c9e:	cf 93       	push	r28
    3ca0:	df 93       	push	r29
    3ca2:	cd b7       	in	r28, 0x3d	; 61
    3ca4:	de b7       	in	r29, 0x3e	; 62
    3ca6:	60 97       	sbiw	r28, 0x10	; 16
    3ca8:	0f b6       	in	r0, 0x3f	; 63
    3caa:	f8 94       	cli
    3cac:	de bf       	out	0x3e, r29	; 62
    3cae:	0f be       	out	0x3f, r0	; 63
    3cb0:	cd bf       	out	0x3d, r28	; 61
	if (usRegHoldingBuf[MB_OFFSET+MB_LED_RED])
    3cb2:	80 91 8b 04 	lds	r24, 0x048B
    3cb6:	90 91 8c 04 	lds	r25, 0x048C
    3cba:	89 2b       	or	r24, r25
    3cbc:	21 f0       	breq	.+8      	; 0x3cc6 <ModbusSaver+0x28>
	{
		LED_On(LED_RED);
    3cbe:	81 e0       	ldi	r24, 0x01	; 1
    3cc0:	0e 94 bb 1b 	call	0x3776	; 0x3776 <LED_On>
    3cc4:	03 c0       	rjmp	.+6      	; 0x3ccc <ModbusSaver+0x2e>
	} 
	else
	{
		LED_Off(LED_RED);
    3cc6:	81 e0       	ldi	r24, 0x01	; 1
    3cc8:	0e 94 c7 1b 	call	0x378e	; 0x378e <LED_Off>
	}
	
	if (usRegHoldingBuf[MB_OFFSET+MB_LED_BLUE])
    3ccc:	80 91 8d 04 	lds	r24, 0x048D
    3cd0:	90 91 8e 04 	lds	r25, 0x048E
    3cd4:	89 2b       	or	r24, r25
    3cd6:	21 f0       	breq	.+8      	; 0x3ce0 <ModbusSaver+0x42>
	{
		LED_On(LED_BLUE);
    3cd8:	82 e0       	ldi	r24, 0x02	; 2
    3cda:	0e 94 bb 1b 	call	0x3776	; 0x3776 <LED_On>
    3cde:	03 c0       	rjmp	.+6      	; 0x3ce6 <ModbusSaver+0x48>
	}
	else
	{
		LED_Off(LED_BLUE);
    3ce0:	82 e0       	ldi	r24, 0x02	; 2
    3ce2:	0e 94 c7 1b 	call	0x378e	; 0x378e <LED_Off>
	}
	
	if (usRegHoldingBuf[MB_OFFSET+MB_LED_GREEN])
    3ce6:	80 91 8f 04 	lds	r24, 0x048F
    3cea:	90 91 90 04 	lds	r25, 0x0490
    3cee:	89 2b       	or	r24, r25
    3cf0:	21 f0       	breq	.+8      	; 0x3cfa <ModbusSaver+0x5c>
	{
		LED_On(LED_GREEN);
    3cf2:	83 e0       	ldi	r24, 0x03	; 3
    3cf4:	0e 94 bb 1b 	call	0x3776	; 0x3776 <LED_On>
    3cf8:	03 c0       	rjmp	.+6      	; 0x3d00 <ModbusSaver+0x62>
	}
	else
	{
		LED_Off(LED_GREEN);
    3cfa:	83 e0       	ldi	r24, 0x03	; 3
    3cfc:	0e 94 c7 1b 	call	0x378e	; 0x378e <LED_Off>
	}
	
	if (bit_is_set(usRegHoldingBuf[MB_OFFSET+MB_SOUND], 0))
    3d00:	e5 e7       	ldi	r30, 0x75	; 117
    3d02:	f4 e0       	ldi	r31, 0x04	; 4
    3d04:	84 8d       	ldd	r24, Z+28	; 0x1c
    3d06:	80 ff       	sbrs	r24, 0
    3d08:	03 c0       	rjmp	.+6      	; 0x3d10 <ModbusSaver+0x72>
	{
		Sound_On();
    3d0a:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <Sound_On>
    3d0e:	02 c0       	rjmp	.+4      	; 0x3d14 <ModbusSaver+0x76>
	}
	else
	{
		Sound_Off();
    3d10:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <Sound_Off>
	}
	
	if (usRegHoldingBuf[MB_OFFSET+MB_ALL]<16000UL)
    3d14:	80 91 9b 04 	lds	r24, 0x049B
    3d18:	90 91 9c 04 	lds	r25, 0x049C
    3d1c:	80 38       	cpi	r24, 0x80	; 128
    3d1e:	9e 43       	sbci	r25, 0x3E	; 62
    3d20:	30 f4       	brcc	.+12     	; 0x3d2e <ModbusSaver+0x90>
	{
		usRegHoldingBuf[MB_OFFSET+MB_ALL]=16000UL;
    3d22:	80 e8       	ldi	r24, 0x80	; 128
    3d24:	9e e3       	ldi	r25, 0x3E	; 62
    3d26:	90 93 9c 04 	sts	0x049C, r25
    3d2a:	80 93 9b 04 	sts	0x049B, r24
	}
	
	
	if (bit_is_set(usRegHoldingBuf[MB_OFFSET+MB_MANUAL], 4))
    3d2e:	e5 e7       	ldi	r30, 0x75	; 117
    3d30:	f4 e0       	ldi	r31, 0x04	; 4
    3d32:	84 89       	ldd	r24, Z+20	; 0x14
    3d34:	84 ff       	sbrs	r24, 4
    3d36:	35 c0       	rjmp	.+106    	; 0x3da2 <ModbusSaver+0x104>
	{
		double_t speeds[4];
		speeds[FRONT_LEFT]	= (double_t)usRegHoldingBuf[MB_OFFSET + MB_FRONT_LEFT];
    3d38:	60 91 93 04 	lds	r22, 0x0493
    3d3c:	70 91 94 04 	lds	r23, 0x0494
    3d40:	80 e0       	ldi	r24, 0x00	; 0
    3d42:	90 e0       	ldi	r25, 0x00	; 0
    3d44:	0e 94 79 29 	call	0x52f2	; 0x52f2 <__floatunsisf>
    3d48:	69 87       	std	Y+9, r22	; 0x09
    3d4a:	7a 87       	std	Y+10, r23	; 0x0a
    3d4c:	8b 87       	std	Y+11, r24	; 0x0b
    3d4e:	9c 87       	std	Y+12, r25	; 0x0c
		speeds[FRONT_RIGHT] = (double_t)usRegHoldingBuf[MB_OFFSET + MB_FRONT_RIGHT];
    3d50:	60 91 95 04 	lds	r22, 0x0495
    3d54:	70 91 96 04 	lds	r23, 0x0496
    3d58:	80 e0       	ldi	r24, 0x00	; 0
    3d5a:	90 e0       	ldi	r25, 0x00	; 0
    3d5c:	0e 94 79 29 	call	0x52f2	; 0x52f2 <__floatunsisf>
    3d60:	6d 87       	std	Y+13, r22	; 0x0d
    3d62:	7e 87       	std	Y+14, r23	; 0x0e
    3d64:	8f 87       	std	Y+15, r24	; 0x0f
    3d66:	98 8b       	std	Y+16, r25	; 0x10
		speeds[REAR_LEFT]	= (double_t)usRegHoldingBuf[MB_OFFSET + MB_REAR_LEFT];
    3d68:	60 91 97 04 	lds	r22, 0x0497
    3d6c:	70 91 98 04 	lds	r23, 0x0498
    3d70:	80 e0       	ldi	r24, 0x00	; 0
    3d72:	90 e0       	ldi	r25, 0x00	; 0
    3d74:	0e 94 79 29 	call	0x52f2	; 0x52f2 <__floatunsisf>
    3d78:	6d 83       	std	Y+5, r22	; 0x05
    3d7a:	7e 83       	std	Y+6, r23	; 0x06
    3d7c:	8f 83       	std	Y+7, r24	; 0x07
    3d7e:	98 87       	std	Y+8, r25	; 0x08
		speeds[REAR_RIGHT]	= (double_t)usRegHoldingBuf[MB_OFFSET + MB_REAR_RIGHT];
    3d80:	60 91 99 04 	lds	r22, 0x0499
    3d84:	70 91 9a 04 	lds	r23, 0x049A
    3d88:	80 e0       	ldi	r24, 0x00	; 0
    3d8a:	90 e0       	ldi	r25, 0x00	; 0
    3d8c:	0e 94 79 29 	call	0x52f2	; 0x52f2 <__floatunsisf>
    3d90:	69 83       	std	Y+1, r22	; 0x01
    3d92:	7a 83       	std	Y+2, r23	; 0x02
    3d94:	8b 83       	std	Y+3, r24	; 0x03
    3d96:	9c 83       	std	Y+4, r25	; 0x04
		SetMotors(speeds);	
    3d98:	ce 01       	movw	r24, r28
    3d9a:	01 96       	adiw	r24, 0x01	; 1
    3d9c:	0e 94 28 1b 	call	0x3650	; 0x3650 <SetMotors>
    3da0:	20 c0       	rjmp	.+64     	; 0x3de2 <ModbusSaver+0x144>
	}
	else
	{
		usRegHoldingBuf[MB_OFFSET + MB_FRONT_LEFT] = counter[FRONT_LEFT];
    3da2:	80 91 21 02 	lds	r24, 0x0221
    3da6:	90 91 22 02 	lds	r25, 0x0222
    3daa:	90 93 94 04 	sts	0x0494, r25
    3dae:	80 93 93 04 	sts	0x0493, r24
		usRegHoldingBuf[MB_OFFSET + MB_FRONT_RIGHT] = counter[FRONT_RIGHT];
    3db2:	80 91 23 02 	lds	r24, 0x0223
    3db6:	90 91 24 02 	lds	r25, 0x0224
    3dba:	90 93 96 04 	sts	0x0496, r25
    3dbe:	80 93 95 04 	sts	0x0495, r24
		usRegHoldingBuf[MB_OFFSET + MB_REAR_LEFT] = counter[REAR_LEFT];
    3dc2:	80 91 1f 02 	lds	r24, 0x021F
    3dc6:	90 91 20 02 	lds	r25, 0x0220
    3dca:	90 93 98 04 	sts	0x0498, r25
    3dce:	80 93 97 04 	sts	0x0497, r24
		usRegHoldingBuf[MB_OFFSET + MB_REAR_RIGHT] = counter[REAR_RIGHT];
    3dd2:	80 91 1d 02 	lds	r24, 0x021D
    3dd6:	90 91 1e 02 	lds	r25, 0x021E
    3dda:	90 93 9a 04 	sts	0x049A, r25
    3dde:	80 93 99 04 	sts	0x0499, r24
	}		
	
	//t_Ox.value = 0;
	//t_Oy.value = 0;
	t_Ox.array[0] = usRegHoldingBuf[2];
    3de2:	80 91 79 04 	lds	r24, 0x0479
    3de6:	90 91 7a 04 	lds	r25, 0x047A
    3dea:	90 93 6e 03 	sts	0x036E, r25
    3dee:	80 93 6d 03 	sts	0x036D, r24
	t_Ox.array[1] = usRegHoldingBuf[3];
    3df2:	80 91 7b 04 	lds	r24, 0x047B
    3df6:	90 91 7c 04 	lds	r25, 0x047C
    3dfa:	90 93 70 03 	sts	0x0370, r25
    3dfe:	80 93 6f 03 	sts	0x036F, r24
		
	t_Oy.array[0] = usRegHoldingBuf[4];
    3e02:	80 91 7d 04 	lds	r24, 0x047D
    3e06:	90 91 7e 04 	lds	r25, 0x047E
    3e0a:	90 93 72 03 	sts	0x0372, r25
    3e0e:	80 93 71 03 	sts	0x0371, r24
	t_Oy.array[1] = usRegHoldingBuf[5];
    3e12:	80 91 7f 04 	lds	r24, 0x047F
    3e16:	90 91 80 04 	lds	r25, 0x0480
    3e1a:	90 93 74 03 	sts	0x0374, r25
    3e1e:	80 93 73 03 	sts	0x0373, r24
	
	t_Oz.array[0] = usRegHoldingBuf[6];
    3e22:	80 91 81 04 	lds	r24, 0x0481
    3e26:	90 91 82 04 	lds	r25, 0x0482
    3e2a:	90 93 56 03 	sts	0x0356, r25
    3e2e:	80 93 55 03 	sts	0x0355, r24
	t_Oz.array[1] = usRegHoldingBuf[7];
    3e32:	80 91 83 04 	lds	r24, 0x0483
    3e36:	90 91 84 04 	lds	r25, 0x0484
    3e3a:	90 93 58 03 	sts	0x0358, r25
    3e3e:	80 93 57 03 	sts	0x0357, r24
		
	ModbusEEPROMLoader();
    3e42:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <ModbusEEPROMLoader>
}
    3e46:	60 96       	adiw	r28, 0x10	; 16
    3e48:	0f b6       	in	r0, 0x3f	; 63
    3e4a:	f8 94       	cli
    3e4c:	de bf       	out	0x3e, r29	; 62
    3e4e:	0f be       	out	0x3f, r0	; 63
    3e50:	cd bf       	out	0x3d, r28	; 61
    3e52:	df 91       	pop	r29
    3e54:	cf 91       	pop	r28
    3e56:	08 95       	ret

00003e58 <main>:
    3e58:	2f ef       	ldi	r18, 0xFF	; 255
    3e5a:	31 ee       	ldi	r19, 0xE1	; 225
    3e5c:	84 e0       	ldi	r24, 0x04	; 4
    3e5e:	21 50       	subi	r18, 0x01	; 1
    3e60:	30 40       	sbci	r19, 0x00	; 0
    3e62:	80 40       	sbci	r24, 0x00	; 0
    3e64:	e1 f7       	brne	.-8      	; 0x3e5e <main+0x6>
    3e66:	00 c0       	rjmp	.+0      	; 0x3e68 <main+0x10>
    3e68:	00 00       	nop
{
	/*Ждем пока все включится*/
	_delay_ms(100);
	
	/*Настраиваем порты ввода-вывода*/
	DDRB = 1<<PORTB0|1<<PORTB1|1<<PORTB2|1<<PORTB3|1<<PORTB4|1<<PORTB5|1<<PORTB6|1<<PORTB7;
    3e6a:	8f ef       	ldi	r24, 0xFF	; 255
    3e6c:	87 bb       	out	0x17, r24	; 23
	DDRC = 1<<PORTC0|1<<PORTC1|1<<PORTC2|0<<PORTC3|0<<PORTC4|0<<PORTC5|0<<PORTC6|0<<PORTC7;
    3e6e:	87 e0       	ldi	r24, 0x07	; 7
    3e70:	84 bb       	out	0x14, r24	; 20
	DDRD = 0<<PORTD0|0<<PORTD1|0<<PORTD2|0<<PORTD3|1<<PORTD4|0<<PORTD5|0<<PORTD6|1<<PORTD7;
    3e72:	80 e9       	ldi	r24, 0x90	; 144
    3e74:	81 bb       	out	0x11, r24	; 17

	PORTB = 1;
    3e76:	81 e0       	ldi	r24, 0x01	; 1
    3e78:	88 bb       	out	0x18, r24	; 24
	PORTD = 1 << PORTD2;
    3e7a:	24 e0       	ldi	r18, 0x04	; 4
    3e7c:	22 bb       	out	0x12, r18	; 18
    
	/*Тяга двигателей на минимум*/
    for(uint8_t k = 0; k < CHANNELS_COUNT; ++k)
    {
        counter[k] = LOW;
    3e7e:	80 e8       	ldi	r24, 0x80	; 128
    3e80:	9e e3       	ldi	r25, 0x3E	; 62
    3e82:	90 93 1e 02 	sts	0x021E, r25
    3e86:	80 93 1d 02 	sts	0x021D, r24
    3e8a:	90 93 20 02 	sts	0x0220, r25
    3e8e:	80 93 1f 02 	sts	0x021F, r24
    3e92:	90 93 22 02 	sts	0x0222, r25
    3e96:	80 93 21 02 	sts	0x0221, r24
    3e9a:	90 93 24 02 	sts	0x0224, r25
    3e9e:	80 93 23 02 	sts	0x0223, r24
    3ea2:	90 93 26 02 	sts	0x0226, r25
    3ea6:	80 93 25 02 	sts	0x0225, r24
    3eaa:	90 93 28 02 	sts	0x0228, r25
    3eae:	80 93 27 02 	sts	0x0227, r24
    3eb2:	90 93 2a 02 	sts	0x022A, r25
    3eb6:	80 93 29 02 	sts	0x0229, r24
    3eba:	90 93 2c 02 	sts	0x022C, r25
    3ebe:	80 93 2b 02 	sts	0x022B, r24
    }
	
	/*Настраиваем I2C*/
	TWSR = 0x00;
    3ec2:	11 b8       	out	0x01, r1	; 1
	TWBR = ((F_CPU / I2C_SPEED) - 16) / 2;  
    3ec4:	3c e0       	ldi	r19, 0x0C	; 12
    3ec6:	30 b9       	out	0x00, r19	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3ec8:	35 e3       	ldi	r19, 0x35	; 53
    3eca:	3a 95       	dec	r19
    3ecc:	f1 f7       	brne	.-4      	; 0x3eca <main+0x72>
    3ece:	00 00       	nop
	_delay_us(10);

	/*Включаем Таймер0*/
	TCCR0 = 1<<CS02 | 0<<CS01 | 0<<CS00;
    3ed0:	23 bf       	out	0x33, r18	; 51
	
	/*Включаем Таймер1*/
	OCR1A=HIGH; //TOP
    3ed2:	20 e0       	ldi	r18, 0x00	; 0
    3ed4:	3d e7       	ldi	r19, 0x7D	; 125
    3ed6:	3b bd       	out	0x2b, r19	; 43
    3ed8:	2a bd       	out	0x2a, r18	; 42
	TCCR1A=0<<COM1A1|0<<COM1A0|1<<COM1B1|0<<COM1B0|0<<FOC1A|0<<FOC1B|1<<WGM11|1<<WGM10;
    3eda:	23 e2       	ldi	r18, 0x23	; 35
    3edc:	2f bd       	out	0x2f, r18	; 47
	TCCR1B=0<<ICNC1|0<<ICES1|1<<WGM13|1<<WGM12|0<<CS12|0<<CS11|1<<CS10;
    3ede:	29 e1       	ldi	r18, 0x19	; 25
    3ee0:	2e bd       	out	0x2e, r18	; 46
	TIMSK= 1<<TOIE2 | 1<<OCIE1A|1<<OCIE1B|0<<TOIE1|1<<TOIE0|0<<OCIE0;
    3ee2:	29 e5       	ldi	r18, 0x59	; 89
    3ee4:	29 bf       	out	0x39, r18	; 57
	OCR1B=LOW;
    3ee6:	99 bd       	out	0x29, r25	; 41
    3ee8:	88 bd       	out	0x28, r24	; 40
	
	/*Включаем АЦП*/
	ADC_Init();   
    3eea:	0e 94 b7 01 	call	0x36e	; 0x36e <ADC_Init>
    
	/*Включаем прерывание INT0(высотомер)*/
	INT0_Init();
    3eee:	0e 94 5e 09 	call	0x12bc	; 0x12bc <INT0_Init>
	
	/*Разрешаем работу прерываний*/
	sei();
    3ef2:	78 94       	sei
	
	/*Настраиваем Modbus*/
	eMBErrorCode eStatus = eMBInit( MB_RTU, 0x01, 0, 57600, MB_PAR_NONE );
    3ef4:	e1 2c       	mov	r14, r1
    3ef6:	00 e0       	ldi	r16, 0x00	; 0
    3ef8:	11 ee       	ldi	r17, 0xE1	; 225
    3efa:	20 e0       	ldi	r18, 0x00	; 0
    3efc:	30 e0       	ldi	r19, 0x00	; 0
    3efe:	40 e0       	ldi	r20, 0x00	; 0
    3f00:	61 e0       	ldi	r22, 0x01	; 1
    3f02:	80 e0       	ldi	r24, 0x00	; 0
    3f04:	0e 94 2b 12 	call	0x2456	; 0x2456 <eMBInit>
	eStatus = eMBEnable();
    3f08:	0e 94 bf 12 	call	0x257e	; 0x257e <eMBEnable>
    
	/*Настраиваем сенсоры*/    
	SensorsInit();
    3f0c:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <SensorsInit>
	
	/*Загружаем в Holding Registers и в массив параметров значения из EEPROM*/
	ModbusInitValues();
    3f10:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <ModbusInitValues>
		
	while(1)
	{
		/*Актуализируем значения Modbus-регистров в соответствии со значениями параметров*/
		ModbusLoader();
    3f14:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <ModbusLoader>
		/*Актуализируем значения параметров в соответствии со значениями Holding Registers*/
		ModbusSaver();
    3f18:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <ModbusSaver>
		
		/*Итерация Modbus*/
		eMBPoll();
    3f1c:	0e 94 ce 12 	call	0x259c	; 0x259c <eMBPoll>
		
		/*Ресурсоемкий расчет курса*/		
		Course_Calc();
    3f20:	0e 94 92 0a 	call	0x1524	; 0x1524 <Course_Calc>
    3f24:	f7 cf       	rjmp	.-18     	; 0x3f14 <main+0xbc>

00003f26 <eMBRegInputCB>:
	}
}

eMBErrorCode eMBRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
    3f26:	cf 93       	push	r28
    3f28:	df 93       	push	r29
    3f2a:	fc 01       	movw	r30, r24
	eMBErrorCode    eStatus = MB_ENOERR;
	int             iRegIndex;

	if( ( usAddress >= REG_INPUT_START )
    3f2c:	68 3e       	cpi	r22, 0xE8	; 232
    3f2e:	23 e0       	ldi	r18, 0x03	; 3
    3f30:	72 07       	cpc	r23, r18
    3f32:	08 f1       	brcs	.+66     	; 0x3f76 <eMBRegInputCB+0x50>
	&& ( usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS ) )
    3f34:	ca 01       	movw	r24, r20
    3f36:	86 0f       	add	r24, r22
    3f38:	97 1f       	adc	r25, r23
    3f3a:	8c 34       	cpi	r24, 0x4C	; 76
    3f3c:	94 40       	sbci	r25, 0x04	; 4
    3f3e:	e8 f4       	brcc	.+58     	; 0x3f7a <eMBRegInputCB+0x54>
	{
		iRegIndex = ( int )( usAddress - usRegInputStart );
	        while( usNRegs > 0 )
    3f40:	41 15       	cp	r20, r1
    3f42:	51 05       	cpc	r21, r1
    3f44:	e1 f0       	breq	.+56     	; 0x3f7e <eMBRegInputCB+0x58>
		/*Ресурсоемкий расчет курса*/		
		Course_Calc();
	}
}

eMBErrorCode eMBRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
    3f46:	db 01       	movw	r26, r22
    3f48:	aa 0f       	add	r26, r26
    3f4a:	bb 1f       	adc	r27, r27
    3f4c:	a3 52       	subi	r26, 0x23	; 35
    3f4e:	b4 40       	sbci	r27, 0x04	; 4
    3f50:	ca 01       	movw	r24, r20
    3f52:	88 0f       	add	r24, r24
    3f54:	99 1f       	adc	r25, r25
    3f56:	8e 0f       	add	r24, r30
    3f58:	9f 1f       	adc	r25, r31
    3f5a:	ed 01       	movw	r28, r26
	{
		iRegIndex = ( int )( usAddress - usRegInputStart );
	        while( usNRegs > 0 )
	        {
			*pucRegBuffer++ =
			( unsigned char )( usRegInputBuf[iRegIndex] >> 8 );
    3f5c:	11 96       	adiw	r26, 0x01	; 1
    3f5e:	2c 91       	ld	r18, X
    3f60:	11 97       	sbiw	r26, 0x01	; 1
    3f62:	20 83       	st	Z, r18
    3f64:	12 96       	adiw	r26, 0x02	; 2
			*pucRegBuffer++ =
			( unsigned char )( usRegInputBuf[iRegIndex] & 0xFF );
    3f66:	28 81       	ld	r18, Y
    3f68:	21 83       	std	Z+1, r18	; 0x01
		/*Ресурсоемкий расчет курса*/		
		Course_Calc();
	}
}

eMBErrorCode eMBRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
    3f6a:	32 96       	adiw	r30, 0x02	; 2

	if( ( usAddress >= REG_INPUT_START )
	&& ( usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS ) )
	{
		iRegIndex = ( int )( usAddress - usRegInputStart );
	        while( usNRegs > 0 )
    3f6c:	8e 17       	cp	r24, r30
    3f6e:	9f 07       	cpc	r25, r31
    3f70:	a1 f7       	brne	.-24     	; 0x3f5a <eMBRegInputCB+0x34>
	}
}

eMBErrorCode eMBRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
	eMBErrorCode    eStatus = MB_ENOERR;
    3f72:	80 e0       	ldi	r24, 0x00	; 0
    3f74:	05 c0       	rjmp	.+10     	; 0x3f80 <eMBRegInputCB+0x5a>
			usNRegs--;
		}
	}
	else
	{
		eStatus = MB_ENOREG;
    3f76:	81 e0       	ldi	r24, 0x01	; 1
    3f78:	03 c0       	rjmp	.+6      	; 0x3f80 <eMBRegInputCB+0x5a>
    3f7a:	81 e0       	ldi	r24, 0x01	; 1
    3f7c:	01 c0       	rjmp	.+2      	; 0x3f80 <eMBRegInputCB+0x5a>
	}
}

eMBErrorCode eMBRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
	eMBErrorCode    eStatus = MB_ENOERR;
    3f7e:	80 e0       	ldi	r24, 0x00	; 0
	{
		eStatus = MB_ENOREG;
	}

	return eStatus;
}
    3f80:	df 91       	pop	r29
    3f82:	cf 91       	pop	r28
    3f84:	08 95       	ret

00003f86 <eMBRegHoldingCB>:

eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs,
eMBRegisterMode eMode )
{
    3f86:	cf 93       	push	r28
    3f88:	df 93       	push	r29
    3f8a:	fc 01       	movw	r30, r24
    eMBErrorCode    eStatus = MB_ENOERR;
    int             iRegIndex;

    if( ( usAddress >= REG_HOLDING_START ) &&
    3f8c:	60 3b       	cpi	r22, 0xB0	; 176
    3f8e:	34 e0       	ldi	r19, 0x04	; 4
    3f90:	73 07       	cpc	r23, r19
    3f92:	08 f4       	brcc	.+2      	; 0x3f96 <eMBRegHoldingCB+0x10>
    3f94:	45 c0       	rjmp	.+138    	; 0x4020 <eMBRegHoldingCB+0x9a>
    ( usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS ) )
    3f96:	ca 01       	movw	r24, r20
    3f98:	86 0f       	add	r24, r22
    3f9a:	97 1f       	adc	r25, r23
eMBRegisterMode eMode )
{
    eMBErrorCode    eStatus = MB_ENOERR;
    int             iRegIndex;

    if( ( usAddress >= REG_HOLDING_START ) &&
    3f9c:	8c 3d       	cpi	r24, 0xDC	; 220
    3f9e:	95 40       	sbci	r25, 0x05	; 5
    3fa0:	08 f0       	brcs	.+2      	; 0x3fa4 <eMBRegHoldingCB+0x1e>
    3fa2:	40 c0       	rjmp	.+128    	; 0x4024 <eMBRegHoldingCB+0x9e>
    ( usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS ) )
    {
        iRegIndex = ( int )( usAddress - usRegHoldingStart );
        switch ( eMode )
    3fa4:	22 23       	and	r18, r18
    3fa6:	39 f0       	breq	.+14     	; 0x3fb6 <eMBRegHoldingCB+0x30>
    3fa8:	21 30       	cpi	r18, 0x01	; 1
    3faa:	f1 f5       	brne	.+124    	; 0x4028 <eMBRegHoldingCB+0xa2>
            break;

            /* Update current register values with new values from the
            * protocol stack. */
            case MB_REG_WRITE:
            while( usNRegs > 0 )
    3fac:	41 15       	cp	r20, r1
    3fae:	51 05       	cpc	r21, r1
    3fb0:	e9 f4       	brne	.+58     	; 0x3fec <eMBRegHoldingCB+0x66>

eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs,
eMBRegisterMode eMode )
{
    eMBErrorCode    eStatus = MB_ENOERR;
    3fb2:	80 e0       	ldi	r24, 0x00	; 0
    3fb4:	3c c0       	rjmp	.+120    	; 0x402e <eMBRegHoldingCB+0xa8>
        iRegIndex = ( int )( usAddress - usRegHoldingStart );
        switch ( eMode )
        {
            /* Pass current register values to the protocol stack. */
            case MB_REG_READ:
            while( usNRegs > 0 )
    3fb6:	41 15       	cp	r20, r1
    3fb8:	51 05       	cpc	r21, r1
    3fba:	c1 f1       	breq	.+112    	; 0x402c <eMBRegHoldingCB+0xa6>

	return eStatus;
}

eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs,
    3fbc:	db 01       	movw	r26, r22
    3fbe:	aa 0f       	add	r26, r26
    3fc0:	bb 1f       	adc	r27, r27
    3fc2:	ab 5e       	subi	r26, 0xEB	; 235
    3fc4:	b4 40       	sbci	r27, 0x04	; 4
    3fc6:	ca 01       	movw	r24, r20
    3fc8:	88 0f       	add	r24, r24
    3fca:	99 1f       	adc	r25, r25
    3fcc:	8e 0f       	add	r24, r30
    3fce:	9f 1f       	adc	r25, r31
    3fd0:	ed 01       	movw	r28, r26
        {
            /* Pass current register values to the protocol stack. */
            case MB_REG_READ:
            while( usNRegs > 0 )
            {
                *pucRegBuffer++ = ( UCHAR ) ( usRegHoldingBuf[iRegIndex] >> 8 );
    3fd2:	11 96       	adiw	r26, 0x01	; 1
    3fd4:	2c 91       	ld	r18, X
    3fd6:	11 97       	sbiw	r26, 0x01	; 1
    3fd8:	20 83       	st	Z, r18
    3fda:	12 96       	adiw	r26, 0x02	; 2
                *pucRegBuffer++ = ( UCHAR ) ( usRegHoldingBuf[iRegIndex] & 0xFF );
    3fdc:	28 81       	ld	r18, Y
    3fde:	21 83       	std	Z+1, r18	; 0x01

	return eStatus;
}

eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs,
    3fe0:	32 96       	adiw	r30, 0x02	; 2
        iRegIndex = ( int )( usAddress - usRegHoldingStart );
        switch ( eMode )
        {
            /* Pass current register values to the protocol stack. */
            case MB_REG_READ:
            while( usNRegs > 0 )
    3fe2:	e8 17       	cp	r30, r24
    3fe4:	f9 07       	cpc	r31, r25
    3fe6:	a1 f7       	brne	.-24     	; 0x3fd0 <eMBRegHoldingCB+0x4a>

eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs,
eMBRegisterMode eMode )
{
    eMBErrorCode    eStatus = MB_ENOERR;
    3fe8:	80 e0       	ldi	r24, 0x00	; 0
    3fea:	21 c0       	rjmp	.+66     	; 0x402e <eMBRegHoldingCB+0xa8>

	return eStatus;
}

eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs,
    3fec:	eb 01       	movw	r28, r22
    3fee:	cc 0f       	add	r28, r28
    3ff0:	dd 1f       	adc	r29, r29
    3ff2:	cb 5e       	subi	r28, 0xEB	; 235
    3ff4:	d4 40       	sbci	r29, 0x04	; 4
    3ff6:	9a 01       	movw	r18, r20
    3ff8:	22 0f       	add	r18, r18
    3ffa:	33 1f       	adc	r19, r19
    3ffc:	2e 0f       	add	r18, r30
    3ffe:	3f 1f       	adc	r19, r31
            /* Update current register values with new values from the
            * protocol stack. */
            case MB_REG_WRITE:
            while( usNRegs > 0 )
            {
                usRegHoldingBuf[iRegIndex] = *pucRegBuffer++ << 8;
    4000:	b0 81       	ld	r27, Z
    4002:	a0 e0       	ldi	r26, 0x00	; 0
    4004:	b9 83       	std	Y+1, r27	; 0x01
    4006:	a8 83       	st	Y, r26
                usRegHoldingBuf[iRegIndex] |= *pucRegBuffer++;
    4008:	81 81       	ldd	r24, Z+1	; 0x01
    400a:	ad 01       	movw	r20, r26
    400c:	48 2b       	or	r20, r24
    400e:	ca 01       	movw	r24, r20
    4010:	89 93       	st	Y+, r24
    4012:	99 93       	st	Y+, r25

	return eStatus;
}

eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs,
    4014:	32 96       	adiw	r30, 0x02	; 2
            break;

            /* Update current register values with new values from the
            * protocol stack. */
            case MB_REG_WRITE:
            while( usNRegs > 0 )
    4016:	e2 17       	cp	r30, r18
    4018:	f3 07       	cpc	r31, r19
    401a:	91 f7       	brne	.-28     	; 0x4000 <eMBRegHoldingCB+0x7a>

eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs,
eMBRegisterMode eMode )
{
    eMBErrorCode    eStatus = MB_ENOERR;
    401c:	80 e0       	ldi	r24, 0x00	; 0
    401e:	07 c0       	rjmp	.+14     	; 0x402e <eMBRegHoldingCB+0xa8>
            }
        }
    }
    else
    {
        eStatus = MB_ENOREG;
    4020:	81 e0       	ldi	r24, 0x01	; 1
    4022:	05 c0       	rjmp	.+10     	; 0x402e <eMBRegHoldingCB+0xa8>
    4024:	81 e0       	ldi	r24, 0x01	; 1
    4026:	03 c0       	rjmp	.+6      	; 0x402e <eMBRegHoldingCB+0xa8>

eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs,
eMBRegisterMode eMode )
{
    eMBErrorCode    eStatus = MB_ENOERR;
    4028:	80 e0       	ldi	r24, 0x00	; 0
    402a:	01 c0       	rjmp	.+2      	; 0x402e <eMBRegHoldingCB+0xa8>
    402c:	80 e0       	ldi	r24, 0x00	; 0
    else
    {
        eStatus = MB_ENOREG;
    }
    return eStatus;
}
    402e:	df 91       	pop	r29
    4030:	cf 91       	pop	r28
    4032:	08 95       	ret

00004034 <eMBRegCoilsCB>:
eMBErrorCode
eMBRegCoilsCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNCoils,
eMBRegisterMode eMode )
{
    return MB_ENOREG;
}
    4034:	81 e0       	ldi	r24, 0x01	; 1
    4036:	08 95       	ret

00004038 <eMBRegDiscreteCB>:

eMBErrorCode
eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete )
{
    return MB_ENOREG;
}
    4038:	81 e0       	ldi	r24, 0x01	; 1
    403a:	08 95       	ret

0000403c <PID_Oz>:
#include "PIDs.h"

double_t motors_sum[MOTORS_COUNT];

void PID_Oz()
{
    403c:	2f 92       	push	r2
    403e:	3f 92       	push	r3
    4040:	4f 92       	push	r4
    4042:	5f 92       	push	r5
    4044:	6f 92       	push	r6
    4046:	7f 92       	push	r7
    4048:	8f 92       	push	r8
    404a:	9f 92       	push	r9
    404c:	af 92       	push	r10
    404e:	bf 92       	push	r11
    4050:	cf 92       	push	r12
    4052:	df 92       	push	r13
    4054:	ef 92       	push	r14
    4056:	ff 92       	push	r15
    4058:	0f 93       	push	r16
    405a:	1f 93       	push	r17
    405c:	cf 93       	push	r28
    405e:	df 93       	push	r29
    4060:	00 d0       	rcall	.+0      	; 0x4062 <PID_Oz+0x26>
    4062:	00 d0       	rcall	.+0      	; 0x4064 <PID_Oz+0x28>
    4064:	cd b7       	in	r28, 0x3d	; 61
    4066:	de b7       	in	r29, 0x3e	; 62
	double_t D = Heading_displacement_calc(Oz.value, t_Oz.value);
    4068:	20 91 55 03 	lds	r18, 0x0355
    406c:	30 91 56 03 	lds	r19, 0x0356
    4070:	40 91 57 03 	lds	r20, 0x0357
    4074:	50 91 58 03 	lds	r21, 0x0358
    4078:	60 91 59 03 	lds	r22, 0x0359
    407c:	70 91 5a 03 	lds	r23, 0x035A
    4080:	80 91 5b 03 	lds	r24, 0x035B
    4084:	90 91 5c 03 	lds	r25, 0x035C
    4088:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <Heading_displacement_calc>
	
	motors_sum[FRONT_LEFT] += coeffs[Kp_Oz].value * D * -1.0;
    408c:	20 91 2d 02 	lds	r18, 0x022D
    4090:	30 91 2e 02 	lds	r19, 0x022E
    4094:	40 91 2f 02 	lds	r20, 0x022F
    4098:	50 91 30 02 	lds	r21, 0x0230
    409c:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    40a0:	c6 2e       	mov	r12, r22
    40a2:	d7 2e       	mov	r13, r23
    40a4:	e8 2e       	mov	r14, r24
    40a6:	f9 2e       	mov	r15, r25
	motors_sum[FRONT_RIGHT] += coeffs[Kp_Oz].value * D;
    40a8:	e7 ed       	ldi	r30, 0xD7	; 215
    40aa:	f6 e0       	ldi	r31, 0x06	; 6
    40ac:	20 81       	ld	r18, Z
    40ae:	31 81       	ldd	r19, Z+1	; 0x01
    40b0:	42 81       	ldd	r20, Z+2	; 0x02
    40b2:	53 81       	ldd	r21, Z+3	; 0x03
    40b4:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
    40b8:	26 2e       	mov	r2, r22
    40ba:	37 2e       	mov	r3, r23
    40bc:	48 2e       	mov	r4, r24
    40be:	59 2e       	mov	r5, r25
	motors_sum[REAR_LEFT] += coeffs[Kp_Oz].value * D;
    40c0:	ef ec       	ldi	r30, 0xCF	; 207
    40c2:	f6 e0       	ldi	r31, 0x06	; 6
    40c4:	20 81       	ld	r18, Z
    40c6:	31 81       	ldd	r19, Z+1	; 0x01
    40c8:	42 81       	ldd	r20, Z+2	; 0x02
    40ca:	53 81       	ldd	r21, Z+3	; 0x03
    40cc:	6c 2d       	mov	r22, r12
    40ce:	7d 2d       	mov	r23, r13
    40d0:	8e 2d       	mov	r24, r14
    40d2:	9f 2d       	mov	r25, r15
    40d4:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
    40d8:	66 2e       	mov	r6, r22
    40da:	77 2e       	mov	r7, r23
    40dc:	88 2e       	mov	r8, r24
    40de:	99 2e       	mov	r9, r25
	motors_sum[REAR_RIGHT] += coeffs[Kp_Oz].value * D * -1.0;	
    40e0:	2c 2d       	mov	r18, r12
    40e2:	3d 2d       	mov	r19, r13
    40e4:	4e 2d       	mov	r20, r14
    40e6:	5f 2d       	mov	r21, r15
    40e8:	eb ec       	ldi	r30, 0xCB	; 203
    40ea:	f6 e0       	ldi	r31, 0x06	; 6
    40ec:	60 81       	ld	r22, Z
    40ee:	71 81       	ldd	r23, Z+1	; 0x01
    40f0:	82 81       	ldd	r24, Z+2	; 0x02
    40f2:	93 81       	ldd	r25, Z+3	; 0x03
    40f4:	0e 94 17 28 	call	0x502e	; 0x502e <__subsf3>
    40f8:	a6 2e       	mov	r10, r22
    40fa:	b7 2e       	mov	r11, r23
    40fc:	89 83       	std	Y+1, r24	; 0x01
    40fe:	9a 83       	std	Y+2, r25	; 0x02
	
	motors_sum[FRONT_LEFT] += coeffs[Kd_Oz].value * w_z.value * -1.0;
    4100:	20 91 2d 03 	lds	r18, 0x032D
    4104:	30 91 2e 03 	lds	r19, 0x032E
    4108:	40 91 2f 03 	lds	r20, 0x032F
    410c:	50 91 30 03 	lds	r21, 0x0330
    4110:	60 91 35 02 	lds	r22, 0x0235
    4114:	70 91 36 02 	lds	r23, 0x0236
    4118:	80 91 37 02 	lds	r24, 0x0237
    411c:	90 91 38 02 	lds	r25, 0x0238
    4120:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    4124:	06 2f       	mov	r16, r22
    4126:	17 2f       	mov	r17, r23
    4128:	8c 83       	std	Y+4, r24	; 0x04
    412a:	9b 83       	std	Y+3, r25	; 0x03

void PID_Oz()
{
	double_t D = Heading_displacement_calc(Oz.value, t_Oz.value);
	
	motors_sum[FRONT_LEFT] += coeffs[Kp_Oz].value * D * -1.0;
    412c:	2c 2d       	mov	r18, r12
    412e:	3d 2d       	mov	r19, r13
    4130:	4e 2d       	mov	r20, r14
    4132:	5f 2d       	mov	r21, r15
    4134:	e3 ed       	ldi	r30, 0xD3	; 211
    4136:	f6 e0       	ldi	r31, 0x06	; 6
    4138:	60 81       	ld	r22, Z
    413a:	71 81       	ldd	r23, Z+1	; 0x01
    413c:	82 81       	ldd	r24, Z+2	; 0x02
    413e:	93 81       	ldd	r25, Z+3	; 0x03
    4140:	0e 94 17 28 	call	0x502e	; 0x502e <__subsf3>
	motors_sum[FRONT_RIGHT] += coeffs[Kp_Oz].value * D;
	motors_sum[REAR_LEFT] += coeffs[Kp_Oz].value * D;
	motors_sum[REAR_RIGHT] += coeffs[Kp_Oz].value * D * -1.0;	
	
	motors_sum[FRONT_LEFT] += coeffs[Kd_Oz].value * w_z.value * -1.0;
    4144:	fc 81       	ldd	r31, Y+4	; 0x04
    4146:	eb 81       	ldd	r30, Y+3	; 0x03
    4148:	20 2f       	mov	r18, r16
    414a:	31 2f       	mov	r19, r17
    414c:	4f 2f       	mov	r20, r31
    414e:	5e 2f       	mov	r21, r30
    4150:	0e 94 17 28 	call	0x502e	; 0x502e <__subsf3>
    4154:	e3 ed       	ldi	r30, 0xD3	; 211
    4156:	f6 e0       	ldi	r31, 0x06	; 6
    4158:	60 83       	st	Z, r22
    415a:	71 83       	std	Z+1, r23	; 0x01
    415c:	82 83       	std	Z+2, r24	; 0x02
    415e:	93 83       	std	Z+3, r25	; 0x03
	motors_sum[FRONT_RIGHT] += coeffs[Kd_Oz].value * w_z.value;
    4160:	9c 81       	ldd	r25, Y+4	; 0x04
    4162:	8b 81       	ldd	r24, Y+3	; 0x03
    4164:	20 2f       	mov	r18, r16
    4166:	31 2f       	mov	r19, r17
    4168:	49 2f       	mov	r20, r25
    416a:	58 2f       	mov	r21, r24
    416c:	62 2d       	mov	r22, r2
    416e:	73 2d       	mov	r23, r3
    4170:	84 2d       	mov	r24, r4
    4172:	95 2d       	mov	r25, r5
    4174:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
    4178:	e7 ed       	ldi	r30, 0xD7	; 215
    417a:	f6 e0       	ldi	r31, 0x06	; 6
    417c:	60 83       	st	Z, r22
    417e:	71 83       	std	Z+1, r23	; 0x01
    4180:	82 83       	std	Z+2, r24	; 0x02
    4182:	93 83       	std	Z+3, r25	; 0x03
	motors_sum[REAR_LEFT] += coeffs[Kd_Oz].value * w_z.value;
    4184:	9c 81       	ldd	r25, Y+4	; 0x04
    4186:	8b 81       	ldd	r24, Y+3	; 0x03
    4188:	20 2f       	mov	r18, r16
    418a:	31 2f       	mov	r19, r17
    418c:	49 2f       	mov	r20, r25
    418e:	58 2f       	mov	r21, r24
    4190:	66 2d       	mov	r22, r6
    4192:	77 2d       	mov	r23, r7
    4194:	88 2d       	mov	r24, r8
    4196:	99 2d       	mov	r25, r9
    4198:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
    419c:	ef ec       	ldi	r30, 0xCF	; 207
    419e:	f6 e0       	ldi	r31, 0x06	; 6
    41a0:	60 83       	st	Z, r22
    41a2:	71 83       	std	Z+1, r23	; 0x01
    41a4:	82 83       	std	Z+2, r24	; 0x02
    41a6:	93 83       	std	Z+3, r25	; 0x03
	motors_sum[REAR_RIGHT] += coeffs[Kd_Oz].value * w_z.value * -1.0;
    41a8:	9c 81       	ldd	r25, Y+4	; 0x04
    41aa:	8b 81       	ldd	r24, Y+3	; 0x03
    41ac:	20 2f       	mov	r18, r16
    41ae:	31 2f       	mov	r19, r17
    41b0:	49 2f       	mov	r20, r25
    41b2:	58 2f       	mov	r21, r24
    41b4:	e9 81       	ldd	r30, Y+1	; 0x01
    41b6:	1a 81       	ldd	r17, Y+2	; 0x02
    41b8:	6a 2d       	mov	r22, r10
    41ba:	7b 2d       	mov	r23, r11
    41bc:	8e 2f       	mov	r24, r30
    41be:	91 2f       	mov	r25, r17
    41c0:	0e 94 17 28 	call	0x502e	; 0x502e <__subsf3>
    41c4:	eb ec       	ldi	r30, 0xCB	; 203
    41c6:	f6 e0       	ldi	r31, 0x06	; 6
    41c8:	60 83       	st	Z, r22
    41ca:	71 83       	std	Z+1, r23	; 0x01
    41cc:	82 83       	std	Z+2, r24	; 0x02
    41ce:	93 83       	std	Z+3, r25	; 0x03
}
    41d0:	0f 90       	pop	r0
    41d2:	0f 90       	pop	r0
    41d4:	0f 90       	pop	r0
    41d6:	0f 90       	pop	r0
    41d8:	df 91       	pop	r29
    41da:	cf 91       	pop	r28
    41dc:	1f 91       	pop	r17
    41de:	0f 91       	pop	r16
    41e0:	ff 90       	pop	r15
    41e2:	ef 90       	pop	r14
    41e4:	df 90       	pop	r13
    41e6:	cf 90       	pop	r12
    41e8:	bf 90       	pop	r11
    41ea:	af 90       	pop	r10
    41ec:	9f 90       	pop	r9
    41ee:	8f 90       	pop	r8
    41f0:	7f 90       	pop	r7
    41f2:	6f 90       	pop	r6
    41f4:	5f 90       	pop	r5
    41f6:	4f 90       	pop	r4
    41f8:	3f 90       	pop	r3
    41fa:	2f 90       	pop	r2
    41fc:	08 95       	ret

000041fe <PID_Ox>:

void PID_Ox()
{
    41fe:	2f 92       	push	r2
    4200:	3f 92       	push	r3
    4202:	4f 92       	push	r4
    4204:	5f 92       	push	r5
    4206:	6f 92       	push	r6
    4208:	7f 92       	push	r7
    420a:	8f 92       	push	r8
    420c:	9f 92       	push	r9
    420e:	af 92       	push	r10
    4210:	bf 92       	push	r11
    4212:	cf 92       	push	r12
    4214:	df 92       	push	r13
    4216:	ef 92       	push	r14
    4218:	ff 92       	push	r15
    421a:	0f 93       	push	r16
    421c:	1f 93       	push	r17
    421e:	cf 93       	push	r28
    4220:	df 93       	push	r29
    4222:	cd b7       	in	r28, 0x3d	; 61
    4224:	de b7       	in	r29, 0x3e	; 62
    4226:	28 97       	sbiw	r28, 0x08	; 8
    4228:	0f b6       	in	r0, 0x3f	; 63
    422a:	f8 94       	cli
    422c:	de bf       	out	0x3e, r29	; 62
    422e:	0f be       	out	0x3f, r0	; 63
    4230:	cd bf       	out	0x3d, r28	; 61
	motors_sum[FRONT_LEFT] += coeffs[Kp_Ox].value * (Ox.value - t_Ox.value) * (-1.0);
    4232:	20 91 6d 03 	lds	r18, 0x036D
    4236:	30 91 6e 03 	lds	r19, 0x036E
    423a:	40 91 6f 03 	lds	r20, 0x036F
    423e:	50 91 70 03 	lds	r21, 0x0370
    4242:	60 91 65 03 	lds	r22, 0x0365
    4246:	70 91 66 03 	lds	r23, 0x0366
    424a:	80 91 67 03 	lds	r24, 0x0367
    424e:	90 91 68 03 	lds	r25, 0x0368
    4252:	0e 94 17 28 	call	0x502e	; 0x502e <__subsf3>
    4256:	20 91 39 02 	lds	r18, 0x0239
    425a:	30 91 3a 02 	lds	r19, 0x023A
    425e:	40 91 3b 02 	lds	r20, 0x023B
    4262:	50 91 3c 02 	lds	r21, 0x023C
    4266:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    426a:	86 2e       	mov	r8, r22
    426c:	97 2e       	mov	r9, r23
    426e:	a8 2e       	mov	r10, r24
    4270:	b9 2e       	mov	r11, r25
	motors_sum[FRONT_RIGHT] += coeffs[Kp_Ox].value * (Ox.value - t_Ox.value);
	motors_sum[REAR_LEFT] += coeffs[Kp_Ox].value * (Ox.value - t_Ox.value) * (-1.0);
	motors_sum[REAR_RIGHT] += coeffs[Kp_Ox].value * (Ox.value - t_Ox.value);
	
	motors_sum[FRONT_LEFT] += coeffs[Ki_Ox].value * int_Ox.value * (-1.0);
    4272:	20 91 91 03 	lds	r18, 0x0391
    4276:	30 91 92 03 	lds	r19, 0x0392
    427a:	40 91 93 03 	lds	r20, 0x0393
    427e:	50 91 94 03 	lds	r21, 0x0394
    4282:	60 91 3d 02 	lds	r22, 0x023D
    4286:	70 91 3e 02 	lds	r23, 0x023E
    428a:	80 91 3f 02 	lds	r24, 0x023F
    428e:	90 91 40 02 	lds	r25, 0x0240
    4292:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    4296:	c6 2e       	mov	r12, r22
    4298:	d7 2e       	mov	r13, r23
    429a:	e8 2e       	mov	r14, r24
    429c:	f9 2e       	mov	r15, r25
}

void PID_Ox()
{
	motors_sum[FRONT_LEFT] += coeffs[Kp_Ox].value * (Ox.value - t_Ox.value) * (-1.0);
	motors_sum[FRONT_RIGHT] += coeffs[Kp_Ox].value * (Ox.value - t_Ox.value);
    429e:	e7 ed       	ldi	r30, 0xD7	; 215
    42a0:	f6 e0       	ldi	r31, 0x06	; 6
    42a2:	20 81       	ld	r18, Z
    42a4:	31 81       	ldd	r19, Z+1	; 0x01
    42a6:	42 81       	ldd	r20, Z+2	; 0x02
    42a8:	53 81       	ldd	r21, Z+3	; 0x03
    42aa:	68 2d       	mov	r22, r8
    42ac:	79 2d       	mov	r23, r9
    42ae:	8a 2d       	mov	r24, r10
    42b0:	9b 2d       	mov	r25, r11
    42b2:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
	motors_sum[REAR_LEFT] += coeffs[Kp_Ox].value * (Ox.value - t_Ox.value) * (-1.0);
	motors_sum[REAR_RIGHT] += coeffs[Kp_Ox].value * (Ox.value - t_Ox.value);
	
	motors_sum[FRONT_LEFT] += coeffs[Ki_Ox].value * int_Ox.value * (-1.0);
	motors_sum[FRONT_RIGHT] += coeffs[Ki_Ox].value * int_Ox.value;
    42b6:	2c 2d       	mov	r18, r12
    42b8:	3d 2d       	mov	r19, r13
    42ba:	4e 2d       	mov	r20, r14
    42bc:	5f 2d       	mov	r21, r15
    42be:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
    42c2:	26 2e       	mov	r2, r22
    42c4:	37 2e       	mov	r3, r23
    42c6:	89 83       	std	Y+1, r24	; 0x01
    42c8:	9a 83       	std	Y+2, r25	; 0x02

void PID_Ox()
{
	motors_sum[FRONT_LEFT] += coeffs[Kp_Ox].value * (Ox.value - t_Ox.value) * (-1.0);
	motors_sum[FRONT_RIGHT] += coeffs[Kp_Ox].value * (Ox.value - t_Ox.value);
	motors_sum[REAR_LEFT] += coeffs[Kp_Ox].value * (Ox.value - t_Ox.value) * (-1.0);
    42ca:	28 2d       	mov	r18, r8
    42cc:	39 2d       	mov	r19, r9
    42ce:	4a 2d       	mov	r20, r10
    42d0:	5b 2d       	mov	r21, r11
    42d2:	ef ec       	ldi	r30, 0xCF	; 207
    42d4:	f6 e0       	ldi	r31, 0x06	; 6
    42d6:	60 81       	ld	r22, Z
    42d8:	71 81       	ldd	r23, Z+1	; 0x01
    42da:	82 81       	ldd	r24, Z+2	; 0x02
    42dc:	93 81       	ldd	r25, Z+3	; 0x03
    42de:	0e 94 17 28 	call	0x502e	; 0x502e <__subsf3>
	motors_sum[REAR_RIGHT] += coeffs[Kp_Ox].value * (Ox.value - t_Ox.value);
	
	motors_sum[FRONT_LEFT] += coeffs[Ki_Ox].value * int_Ox.value * (-1.0);
	motors_sum[FRONT_RIGHT] += coeffs[Ki_Ox].value * int_Ox.value;
	motors_sum[REAR_LEFT] += coeffs[Ki_Ox].value * int_Ox.value * (-1.0);
    42e2:	2c 2d       	mov	r18, r12
    42e4:	3d 2d       	mov	r19, r13
    42e6:	4e 2d       	mov	r20, r14
    42e8:	5f 2d       	mov	r21, r15
    42ea:	0e 94 17 28 	call	0x502e	; 0x502e <__subsf3>
    42ee:	6b 83       	std	Y+3, r22	; 0x03
    42f0:	7c 83       	std	Y+4, r23	; 0x04
    42f2:	8d 83       	std	Y+5, r24	; 0x05
    42f4:	9e 83       	std	Y+6, r25	; 0x06
void PID_Ox()
{
	motors_sum[FRONT_LEFT] += coeffs[Kp_Ox].value * (Ox.value - t_Ox.value) * (-1.0);
	motors_sum[FRONT_RIGHT] += coeffs[Kp_Ox].value * (Ox.value - t_Ox.value);
	motors_sum[REAR_LEFT] += coeffs[Kp_Ox].value * (Ox.value - t_Ox.value) * (-1.0);
	motors_sum[REAR_RIGHT] += coeffs[Kp_Ox].value * (Ox.value - t_Ox.value);
    42f6:	eb ec       	ldi	r30, 0xCB	; 203
    42f8:	f6 e0       	ldi	r31, 0x06	; 6
    42fa:	20 81       	ld	r18, Z
    42fc:	31 81       	ldd	r19, Z+1	; 0x01
    42fe:	42 81       	ldd	r20, Z+2	; 0x02
    4300:	53 81       	ldd	r21, Z+3	; 0x03
    4302:	68 2d       	mov	r22, r8
    4304:	79 2d       	mov	r23, r9
    4306:	8a 2d       	mov	r24, r10
    4308:	9b 2d       	mov	r25, r11
    430a:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
	
	motors_sum[FRONT_LEFT] += coeffs[Ki_Ox].value * int_Ox.value * (-1.0);
	motors_sum[FRONT_RIGHT] += coeffs[Ki_Ox].value * int_Ox.value;
	motors_sum[REAR_LEFT] += coeffs[Ki_Ox].value * int_Ox.value * (-1.0);
	motors_sum[REAR_RIGHT] += coeffs[Ki_Ox].value * int_Ox.value;
    430e:	2c 2d       	mov	r18, r12
    4310:	3d 2d       	mov	r19, r13
    4312:	4e 2d       	mov	r20, r14
    4314:	5f 2d       	mov	r21, r15
    4316:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
    431a:	46 2e       	mov	r4, r22
    431c:	57 2e       	mov	r5, r23
    431e:	68 2e       	mov	r6, r24
    4320:	79 2e       	mov	r7, r25
	
	motors_sum[FRONT_LEFT] += coeffs[Kd_Ox].value * w_x.value * (-1.0);
    4322:	20 91 25 03 	lds	r18, 0x0325
    4326:	30 91 26 03 	lds	r19, 0x0326
    432a:	40 91 27 03 	lds	r20, 0x0327
    432e:	50 91 28 03 	lds	r21, 0x0328
    4332:	60 91 41 02 	lds	r22, 0x0241
    4336:	70 91 42 02 	lds	r23, 0x0242
    433a:	80 91 43 02 	lds	r24, 0x0243
    433e:	90 91 44 02 	lds	r25, 0x0244
    4342:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    4346:	06 2f       	mov	r16, r22
    4348:	17 2f       	mov	r17, r23
    434a:	88 87       	std	Y+8, r24	; 0x08
    434c:	9f 83       	std	Y+7, r25	; 0x07
	motors_sum[REAR_RIGHT] += coeffs[Kd_Oz].value * w_z.value * -1.0;
}

void PID_Ox()
{
	motors_sum[FRONT_LEFT] += coeffs[Kp_Ox].value * (Ox.value - t_Ox.value) * (-1.0);
    434e:	28 2d       	mov	r18, r8
    4350:	39 2d       	mov	r19, r9
    4352:	4a 2d       	mov	r20, r10
    4354:	5b 2d       	mov	r21, r11
    4356:	e3 ed       	ldi	r30, 0xD3	; 211
    4358:	f6 e0       	ldi	r31, 0x06	; 6
    435a:	60 81       	ld	r22, Z
    435c:	71 81       	ldd	r23, Z+1	; 0x01
    435e:	82 81       	ldd	r24, Z+2	; 0x02
    4360:	93 81       	ldd	r25, Z+3	; 0x03
    4362:	0e 94 17 28 	call	0x502e	; 0x502e <__subsf3>
	motors_sum[FRONT_RIGHT] += coeffs[Kp_Ox].value * (Ox.value - t_Ox.value);
	motors_sum[REAR_LEFT] += coeffs[Kp_Ox].value * (Ox.value - t_Ox.value) * (-1.0);
	motors_sum[REAR_RIGHT] += coeffs[Kp_Ox].value * (Ox.value - t_Ox.value);
	
	motors_sum[FRONT_LEFT] += coeffs[Ki_Ox].value * int_Ox.value * (-1.0);
    4366:	2c 2d       	mov	r18, r12
    4368:	3d 2d       	mov	r19, r13
    436a:	4e 2d       	mov	r20, r14
    436c:	5f 2d       	mov	r21, r15
    436e:	0e 94 17 28 	call	0x502e	; 0x502e <__subsf3>
	motors_sum[FRONT_RIGHT] += coeffs[Ki_Ox].value * int_Ox.value;
	motors_sum[REAR_LEFT] += coeffs[Ki_Ox].value * int_Ox.value * (-1.0);
	motors_sum[REAR_RIGHT] += coeffs[Ki_Ox].value * int_Ox.value;
	
	motors_sum[FRONT_LEFT] += coeffs[Kd_Ox].value * w_x.value * (-1.0);
    4372:	f8 85       	ldd	r31, Y+8	; 0x08
    4374:	ef 81       	ldd	r30, Y+7	; 0x07
    4376:	20 2f       	mov	r18, r16
    4378:	31 2f       	mov	r19, r17
    437a:	4f 2f       	mov	r20, r31
    437c:	5e 2f       	mov	r21, r30
    437e:	0e 94 17 28 	call	0x502e	; 0x502e <__subsf3>
    4382:	e3 ed       	ldi	r30, 0xD3	; 211
    4384:	f6 e0       	ldi	r31, 0x06	; 6
    4386:	60 83       	st	Z, r22
    4388:	71 83       	std	Z+1, r23	; 0x01
    438a:	82 83       	std	Z+2, r24	; 0x02
    438c:	93 83       	std	Z+3, r25	; 0x03
	motors_sum[FRONT_RIGHT] += coeffs[Kd_Ox].value * w_x.value;
    438e:	98 85       	ldd	r25, Y+8	; 0x08
    4390:	8f 81       	ldd	r24, Y+7	; 0x07
    4392:	20 2f       	mov	r18, r16
    4394:	31 2f       	mov	r19, r17
    4396:	49 2f       	mov	r20, r25
    4398:	58 2f       	mov	r21, r24
    439a:	f9 80       	ldd	r15, Y+1	; 0x01
    439c:	ea 80       	ldd	r14, Y+2	; 0x02
    439e:	62 2d       	mov	r22, r2
    43a0:	73 2d       	mov	r23, r3
    43a2:	8f 2d       	mov	r24, r15
    43a4:	9e 2d       	mov	r25, r14
    43a6:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
    43aa:	e7 ed       	ldi	r30, 0xD7	; 215
    43ac:	f6 e0       	ldi	r31, 0x06	; 6
    43ae:	60 83       	st	Z, r22
    43b0:	71 83       	std	Z+1, r23	; 0x01
    43b2:	82 83       	std	Z+2, r24	; 0x02
    43b4:	93 83       	std	Z+3, r25	; 0x03
	motors_sum[REAR_LEFT] += coeffs[Kd_Ox].value * w_x.value * (-1.0);
    43b6:	98 85       	ldd	r25, Y+8	; 0x08
    43b8:	8f 81       	ldd	r24, Y+7	; 0x07
    43ba:	20 2f       	mov	r18, r16
    43bc:	31 2f       	mov	r19, r17
    43be:	49 2f       	mov	r20, r25
    43c0:	58 2f       	mov	r21, r24
    43c2:	bb 81       	ldd	r27, Y+3	; 0x03
    43c4:	ac 81       	ldd	r26, Y+4	; 0x04
    43c6:	fd 80       	ldd	r15, Y+5	; 0x05
    43c8:	ee 80       	ldd	r14, Y+6	; 0x06
    43ca:	6b 2f       	mov	r22, r27
    43cc:	7a 2f       	mov	r23, r26
    43ce:	8f 2d       	mov	r24, r15
    43d0:	9e 2d       	mov	r25, r14
    43d2:	0e 94 17 28 	call	0x502e	; 0x502e <__subsf3>
    43d6:	ef ec       	ldi	r30, 0xCF	; 207
    43d8:	f6 e0       	ldi	r31, 0x06	; 6
    43da:	60 83       	st	Z, r22
    43dc:	71 83       	std	Z+1, r23	; 0x01
    43de:	82 83       	std	Z+2, r24	; 0x02
    43e0:	93 83       	std	Z+3, r25	; 0x03
	motors_sum[REAR_RIGHT] += coeffs[Kd_Ox].value * w_x.value;
    43e2:	98 85       	ldd	r25, Y+8	; 0x08
    43e4:	8f 81       	ldd	r24, Y+7	; 0x07
    43e6:	20 2f       	mov	r18, r16
    43e8:	31 2f       	mov	r19, r17
    43ea:	49 2f       	mov	r20, r25
    43ec:	58 2f       	mov	r21, r24
    43ee:	64 2d       	mov	r22, r4
    43f0:	75 2d       	mov	r23, r5
    43f2:	86 2d       	mov	r24, r6
    43f4:	97 2d       	mov	r25, r7
    43f6:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
    43fa:	eb ec       	ldi	r30, 0xCB	; 203
    43fc:	f6 e0       	ldi	r31, 0x06	; 6
    43fe:	60 83       	st	Z, r22
    4400:	71 83       	std	Z+1, r23	; 0x01
    4402:	82 83       	std	Z+2, r24	; 0x02
    4404:	93 83       	std	Z+3, r25	; 0x03
}
    4406:	28 96       	adiw	r28, 0x08	; 8
    4408:	0f b6       	in	r0, 0x3f	; 63
    440a:	f8 94       	cli
    440c:	de bf       	out	0x3e, r29	; 62
    440e:	0f be       	out	0x3f, r0	; 63
    4410:	cd bf       	out	0x3d, r28	; 61
    4412:	df 91       	pop	r29
    4414:	cf 91       	pop	r28
    4416:	1f 91       	pop	r17
    4418:	0f 91       	pop	r16
    441a:	ff 90       	pop	r15
    441c:	ef 90       	pop	r14
    441e:	df 90       	pop	r13
    4420:	cf 90       	pop	r12
    4422:	bf 90       	pop	r11
    4424:	af 90       	pop	r10
    4426:	9f 90       	pop	r9
    4428:	8f 90       	pop	r8
    442a:	7f 90       	pop	r7
    442c:	6f 90       	pop	r6
    442e:	5f 90       	pop	r5
    4430:	4f 90       	pop	r4
    4432:	3f 90       	pop	r3
    4434:	2f 90       	pop	r2
    4436:	08 95       	ret

00004438 <PID_Oy>:

void PID_Oy()
{
    4438:	2f 92       	push	r2
    443a:	3f 92       	push	r3
    443c:	4f 92       	push	r4
    443e:	5f 92       	push	r5
    4440:	6f 92       	push	r6
    4442:	7f 92       	push	r7
    4444:	8f 92       	push	r8
    4446:	9f 92       	push	r9
    4448:	af 92       	push	r10
    444a:	bf 92       	push	r11
    444c:	cf 92       	push	r12
    444e:	df 92       	push	r13
    4450:	ef 92       	push	r14
    4452:	ff 92       	push	r15
    4454:	0f 93       	push	r16
    4456:	1f 93       	push	r17
    4458:	cf 93       	push	r28
    445a:	df 93       	push	r29
    445c:	cd b7       	in	r28, 0x3d	; 61
    445e:	de b7       	in	r29, 0x3e	; 62
    4460:	28 97       	sbiw	r28, 0x08	; 8
    4462:	0f b6       	in	r0, 0x3f	; 63
    4464:	f8 94       	cli
    4466:	de bf       	out	0x3e, r29	; 62
    4468:	0f be       	out	0x3f, r0	; 63
    446a:	cd bf       	out	0x3d, r28	; 61
	motors_sum[FRONT_LEFT] += coeffs[Kp_Ox].value * (Oy.value - t_Oy.value) * (-1.0);
    446c:	20 91 71 03 	lds	r18, 0x0371
    4470:	30 91 72 03 	lds	r19, 0x0372
    4474:	40 91 73 03 	lds	r20, 0x0373
    4478:	50 91 74 03 	lds	r21, 0x0374
    447c:	60 91 69 03 	lds	r22, 0x0369
    4480:	70 91 6a 03 	lds	r23, 0x036A
    4484:	80 91 6b 03 	lds	r24, 0x036B
    4488:	90 91 6c 03 	lds	r25, 0x036C
    448c:	0e 94 17 28 	call	0x502e	; 0x502e <__subsf3>
    4490:	20 91 39 02 	lds	r18, 0x0239
    4494:	30 91 3a 02 	lds	r19, 0x023A
    4498:	40 91 3b 02 	lds	r20, 0x023B
    449c:	50 91 3c 02 	lds	r21, 0x023C
    44a0:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    44a4:	86 2e       	mov	r8, r22
    44a6:	97 2e       	mov	r9, r23
    44a8:	a8 2e       	mov	r10, r24
    44aa:	b9 2e       	mov	r11, r25
	motors_sum[FRONT_RIGHT] += coeffs[Kp_Ox].value * (Oy.value - t_Oy.value) * (-1.0);
	motors_sum[REAR_LEFT] += coeffs[Kp_Ox].value * (Oy.value - t_Oy.value);
	motors_sum[REAR_RIGHT] += coeffs[Kp_Ox].value * (Oy.value - t_Oy.value);

	motors_sum[FRONT_LEFT] += coeffs[Ki_Ox].value * int_Oy.value * (-1.0);
    44ac:	20 91 95 03 	lds	r18, 0x0395
    44b0:	30 91 96 03 	lds	r19, 0x0396
    44b4:	40 91 97 03 	lds	r20, 0x0397
    44b8:	50 91 98 03 	lds	r21, 0x0398
    44bc:	60 91 3d 02 	lds	r22, 0x023D
    44c0:	70 91 3e 02 	lds	r23, 0x023E
    44c4:	80 91 3f 02 	lds	r24, 0x023F
    44c8:	90 91 40 02 	lds	r25, 0x0240
    44cc:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    44d0:	c6 2e       	mov	r12, r22
    44d2:	d7 2e       	mov	r13, r23
    44d4:	e8 2e       	mov	r14, r24
    44d6:	f9 2e       	mov	r15, r25
}

void PID_Oy()
{
	motors_sum[FRONT_LEFT] += coeffs[Kp_Ox].value * (Oy.value - t_Oy.value) * (-1.0);
	motors_sum[FRONT_RIGHT] += coeffs[Kp_Ox].value * (Oy.value - t_Oy.value) * (-1.0);
    44d8:	28 2d       	mov	r18, r8
    44da:	39 2d       	mov	r19, r9
    44dc:	4a 2d       	mov	r20, r10
    44de:	5b 2d       	mov	r21, r11
    44e0:	e7 ed       	ldi	r30, 0xD7	; 215
    44e2:	f6 e0       	ldi	r31, 0x06	; 6
    44e4:	60 81       	ld	r22, Z
    44e6:	71 81       	ldd	r23, Z+1	; 0x01
    44e8:	82 81       	ldd	r24, Z+2	; 0x02
    44ea:	93 81       	ldd	r25, Z+3	; 0x03
    44ec:	0e 94 17 28 	call	0x502e	; 0x502e <__subsf3>
	motors_sum[REAR_LEFT] += coeffs[Kp_Ox].value * (Oy.value - t_Oy.value);
	motors_sum[REAR_RIGHT] += coeffs[Kp_Ox].value * (Oy.value - t_Oy.value);

	motors_sum[FRONT_LEFT] += coeffs[Ki_Ox].value * int_Oy.value * (-1.0);
	motors_sum[FRONT_RIGHT] += coeffs[Ki_Ox].value * int_Oy.value * (-1.0);
    44f0:	2c 2d       	mov	r18, r12
    44f2:	3d 2d       	mov	r19, r13
    44f4:	4e 2d       	mov	r20, r14
    44f6:	5f 2d       	mov	r21, r15
    44f8:	0e 94 17 28 	call	0x502e	; 0x502e <__subsf3>
    44fc:	26 2e       	mov	r2, r22
    44fe:	37 2e       	mov	r3, r23
    4500:	89 83       	std	Y+1, r24	; 0x01
    4502:	9a 83       	std	Y+2, r25	; 0x02

void PID_Oy()
{
	motors_sum[FRONT_LEFT] += coeffs[Kp_Ox].value * (Oy.value - t_Oy.value) * (-1.0);
	motors_sum[FRONT_RIGHT] += coeffs[Kp_Ox].value * (Oy.value - t_Oy.value) * (-1.0);
	motors_sum[REAR_LEFT] += coeffs[Kp_Ox].value * (Oy.value - t_Oy.value);
    4504:	ef ec       	ldi	r30, 0xCF	; 207
    4506:	f6 e0       	ldi	r31, 0x06	; 6
    4508:	20 81       	ld	r18, Z
    450a:	31 81       	ldd	r19, Z+1	; 0x01
    450c:	42 81       	ldd	r20, Z+2	; 0x02
    450e:	53 81       	ldd	r21, Z+3	; 0x03
    4510:	68 2d       	mov	r22, r8
    4512:	79 2d       	mov	r23, r9
    4514:	8a 2d       	mov	r24, r10
    4516:	9b 2d       	mov	r25, r11
    4518:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
	motors_sum[REAR_RIGHT] += coeffs[Kp_Ox].value * (Oy.value - t_Oy.value);

	motors_sum[FRONT_LEFT] += coeffs[Ki_Ox].value * int_Oy.value * (-1.0);
	motors_sum[FRONT_RIGHT] += coeffs[Ki_Ox].value * int_Oy.value * (-1.0);
	motors_sum[REAR_LEFT] += coeffs[Ki_Ox].value * int_Oy.value;
    451c:	2c 2d       	mov	r18, r12
    451e:	3d 2d       	mov	r19, r13
    4520:	4e 2d       	mov	r20, r14
    4522:	5f 2d       	mov	r21, r15
    4524:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
    4528:	6b 83       	std	Y+3, r22	; 0x03
    452a:	7c 83       	std	Y+4, r23	; 0x04
    452c:	8d 83       	std	Y+5, r24	; 0x05
    452e:	9e 83       	std	Y+6, r25	; 0x06
void PID_Oy()
{
	motors_sum[FRONT_LEFT] += coeffs[Kp_Ox].value * (Oy.value - t_Oy.value) * (-1.0);
	motors_sum[FRONT_RIGHT] += coeffs[Kp_Ox].value * (Oy.value - t_Oy.value) * (-1.0);
	motors_sum[REAR_LEFT] += coeffs[Kp_Ox].value * (Oy.value - t_Oy.value);
	motors_sum[REAR_RIGHT] += coeffs[Kp_Ox].value * (Oy.value - t_Oy.value);
    4530:	eb ec       	ldi	r30, 0xCB	; 203
    4532:	f6 e0       	ldi	r31, 0x06	; 6
    4534:	20 81       	ld	r18, Z
    4536:	31 81       	ldd	r19, Z+1	; 0x01
    4538:	42 81       	ldd	r20, Z+2	; 0x02
    453a:	53 81       	ldd	r21, Z+3	; 0x03
    453c:	68 2d       	mov	r22, r8
    453e:	79 2d       	mov	r23, r9
    4540:	8a 2d       	mov	r24, r10
    4542:	9b 2d       	mov	r25, r11
    4544:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>

	motors_sum[FRONT_LEFT] += coeffs[Ki_Ox].value * int_Oy.value * (-1.0);
	motors_sum[FRONT_RIGHT] += coeffs[Ki_Ox].value * int_Oy.value * (-1.0);
	motors_sum[REAR_LEFT] += coeffs[Ki_Ox].value * int_Oy.value;
	motors_sum[REAR_RIGHT] += coeffs[Ki_Ox].value * int_Oy.value;
    4548:	2c 2d       	mov	r18, r12
    454a:	3d 2d       	mov	r19, r13
    454c:	4e 2d       	mov	r20, r14
    454e:	5f 2d       	mov	r21, r15
    4550:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
    4554:	46 2e       	mov	r4, r22
    4556:	57 2e       	mov	r5, r23
    4558:	68 2e       	mov	r6, r24
    455a:	79 2e       	mov	r7, r25
	
	motors_sum[FRONT_LEFT] += coeffs[Kd_Ox].value * w_y.value * (-1.0);
    455c:	20 91 29 03 	lds	r18, 0x0329
    4560:	30 91 2a 03 	lds	r19, 0x032A
    4564:	40 91 2b 03 	lds	r20, 0x032B
    4568:	50 91 2c 03 	lds	r21, 0x032C
    456c:	60 91 41 02 	lds	r22, 0x0241
    4570:	70 91 42 02 	lds	r23, 0x0242
    4574:	80 91 43 02 	lds	r24, 0x0243
    4578:	90 91 44 02 	lds	r25, 0x0244
    457c:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    4580:	06 2f       	mov	r16, r22
    4582:	17 2f       	mov	r17, r23
    4584:	88 87       	std	Y+8, r24	; 0x08
    4586:	9f 83       	std	Y+7, r25	; 0x07
	motors_sum[REAR_RIGHT] += coeffs[Kd_Ox].value * w_x.value;
}

void PID_Oy()
{
	motors_sum[FRONT_LEFT] += coeffs[Kp_Ox].value * (Oy.value - t_Oy.value) * (-1.0);
    4588:	28 2d       	mov	r18, r8
    458a:	39 2d       	mov	r19, r9
    458c:	4a 2d       	mov	r20, r10
    458e:	5b 2d       	mov	r21, r11
    4590:	e3 ed       	ldi	r30, 0xD3	; 211
    4592:	f6 e0       	ldi	r31, 0x06	; 6
    4594:	60 81       	ld	r22, Z
    4596:	71 81       	ldd	r23, Z+1	; 0x01
    4598:	82 81       	ldd	r24, Z+2	; 0x02
    459a:	93 81       	ldd	r25, Z+3	; 0x03
    459c:	0e 94 17 28 	call	0x502e	; 0x502e <__subsf3>
	motors_sum[FRONT_RIGHT] += coeffs[Kp_Ox].value * (Oy.value - t_Oy.value) * (-1.0);
	motors_sum[REAR_LEFT] += coeffs[Kp_Ox].value * (Oy.value - t_Oy.value);
	motors_sum[REAR_RIGHT] += coeffs[Kp_Ox].value * (Oy.value - t_Oy.value);

	motors_sum[FRONT_LEFT] += coeffs[Ki_Ox].value * int_Oy.value * (-1.0);
    45a0:	2c 2d       	mov	r18, r12
    45a2:	3d 2d       	mov	r19, r13
    45a4:	4e 2d       	mov	r20, r14
    45a6:	5f 2d       	mov	r21, r15
    45a8:	0e 94 17 28 	call	0x502e	; 0x502e <__subsf3>
	motors_sum[FRONT_RIGHT] += coeffs[Ki_Ox].value * int_Oy.value * (-1.0);
	motors_sum[REAR_LEFT] += coeffs[Ki_Ox].value * int_Oy.value;
	motors_sum[REAR_RIGHT] += coeffs[Ki_Ox].value * int_Oy.value;
	
	motors_sum[FRONT_LEFT] += coeffs[Kd_Ox].value * w_y.value * (-1.0);
    45ac:	f8 85       	ldd	r31, Y+8	; 0x08
    45ae:	ef 81       	ldd	r30, Y+7	; 0x07
    45b0:	20 2f       	mov	r18, r16
    45b2:	31 2f       	mov	r19, r17
    45b4:	4f 2f       	mov	r20, r31
    45b6:	5e 2f       	mov	r21, r30
    45b8:	0e 94 17 28 	call	0x502e	; 0x502e <__subsf3>
    45bc:	e3 ed       	ldi	r30, 0xD3	; 211
    45be:	f6 e0       	ldi	r31, 0x06	; 6
    45c0:	60 83       	st	Z, r22
    45c2:	71 83       	std	Z+1, r23	; 0x01
    45c4:	82 83       	std	Z+2, r24	; 0x02
    45c6:	93 83       	std	Z+3, r25	; 0x03
	motors_sum[FRONT_RIGHT] += coeffs[Kd_Ox].value * w_y.value * (-1.0);
    45c8:	98 85       	ldd	r25, Y+8	; 0x08
    45ca:	8f 81       	ldd	r24, Y+7	; 0x07
    45cc:	20 2f       	mov	r18, r16
    45ce:	31 2f       	mov	r19, r17
    45d0:	49 2f       	mov	r20, r25
    45d2:	58 2f       	mov	r21, r24
    45d4:	f9 80       	ldd	r15, Y+1	; 0x01
    45d6:	ea 80       	ldd	r14, Y+2	; 0x02
    45d8:	62 2d       	mov	r22, r2
    45da:	73 2d       	mov	r23, r3
    45dc:	8f 2d       	mov	r24, r15
    45de:	9e 2d       	mov	r25, r14
    45e0:	0e 94 17 28 	call	0x502e	; 0x502e <__subsf3>
    45e4:	e7 ed       	ldi	r30, 0xD7	; 215
    45e6:	f6 e0       	ldi	r31, 0x06	; 6
    45e8:	60 83       	st	Z, r22
    45ea:	71 83       	std	Z+1, r23	; 0x01
    45ec:	82 83       	std	Z+2, r24	; 0x02
    45ee:	93 83       	std	Z+3, r25	; 0x03
	motors_sum[REAR_LEFT] += coeffs[Kd_Ox].value * w_y.value;
    45f0:	98 85       	ldd	r25, Y+8	; 0x08
    45f2:	8f 81       	ldd	r24, Y+7	; 0x07
    45f4:	20 2f       	mov	r18, r16
    45f6:	31 2f       	mov	r19, r17
    45f8:	49 2f       	mov	r20, r25
    45fa:	58 2f       	mov	r21, r24
    45fc:	bb 81       	ldd	r27, Y+3	; 0x03
    45fe:	ac 81       	ldd	r26, Y+4	; 0x04
    4600:	fd 80       	ldd	r15, Y+5	; 0x05
    4602:	ee 80       	ldd	r14, Y+6	; 0x06
    4604:	6b 2f       	mov	r22, r27
    4606:	7a 2f       	mov	r23, r26
    4608:	8f 2d       	mov	r24, r15
    460a:	9e 2d       	mov	r25, r14
    460c:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
    4610:	ef ec       	ldi	r30, 0xCF	; 207
    4612:	f6 e0       	ldi	r31, 0x06	; 6
    4614:	60 83       	st	Z, r22
    4616:	71 83       	std	Z+1, r23	; 0x01
    4618:	82 83       	std	Z+2, r24	; 0x02
    461a:	93 83       	std	Z+3, r25	; 0x03
	motors_sum[REAR_RIGHT] += coeffs[Kd_Ox].value * w_y.value;
    461c:	98 85       	ldd	r25, Y+8	; 0x08
    461e:	8f 81       	ldd	r24, Y+7	; 0x07
    4620:	20 2f       	mov	r18, r16
    4622:	31 2f       	mov	r19, r17
    4624:	49 2f       	mov	r20, r25
    4626:	58 2f       	mov	r21, r24
    4628:	64 2d       	mov	r22, r4
    462a:	75 2d       	mov	r23, r5
    462c:	86 2d       	mov	r24, r6
    462e:	97 2d       	mov	r25, r7
    4630:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
    4634:	eb ec       	ldi	r30, 0xCB	; 203
    4636:	f6 e0       	ldi	r31, 0x06	; 6
    4638:	60 83       	st	Z, r22
    463a:	71 83       	std	Z+1, r23	; 0x01
    463c:	82 83       	std	Z+2, r24	; 0x02
    463e:	93 83       	std	Z+3, r25	; 0x03
}
    4640:	28 96       	adiw	r28, 0x08	; 8
    4642:	0f b6       	in	r0, 0x3f	; 63
    4644:	f8 94       	cli
    4646:	de bf       	out	0x3e, r29	; 62
    4648:	0f be       	out	0x3f, r0	; 63
    464a:	cd bf       	out	0x3d, r28	; 61
    464c:	df 91       	pop	r29
    464e:	cf 91       	pop	r28
    4650:	1f 91       	pop	r17
    4652:	0f 91       	pop	r16
    4654:	ff 90       	pop	r15
    4656:	ef 90       	pop	r14
    4658:	df 90       	pop	r13
    465a:	cf 90       	pop	r12
    465c:	bf 90       	pop	r11
    465e:	af 90       	pop	r10
    4660:	9f 90       	pop	r9
    4662:	8f 90       	pop	r8
    4664:	7f 90       	pop	r7
    4666:	6f 90       	pop	r6
    4668:	5f 90       	pop	r5
    466a:	4f 90       	pop	r4
    466c:	3f 90       	pop	r3
    466e:	2f 90       	pop	r2
    4670:	08 95       	ret

00004672 <RunPIDs>:

void RunPIDs()
{
	for (uint8_t i = 0; i< MOTORS_COUNT; i++)
	{
		motors_sum[i]=usRegHoldingBuf[MB_OFFSET+MB_ALL];
    4672:	60 91 9b 04 	lds	r22, 0x049B
    4676:	70 91 9c 04 	lds	r23, 0x049C
    467a:	80 e0       	ldi	r24, 0x00	; 0
    467c:	90 e0       	ldi	r25, 0x00	; 0
    467e:	0e 94 79 29 	call	0x52f2	; 0x52f2 <__floatunsisf>
    4682:	60 93 cb 06 	sts	0x06CB, r22
    4686:	70 93 cc 06 	sts	0x06CC, r23
    468a:	80 93 cd 06 	sts	0x06CD, r24
    468e:	90 93 ce 06 	sts	0x06CE, r25
    4692:	60 93 cf 06 	sts	0x06CF, r22
    4696:	70 93 d0 06 	sts	0x06D0, r23
    469a:	80 93 d1 06 	sts	0x06D1, r24
    469e:	90 93 d2 06 	sts	0x06D2, r25
    46a2:	60 93 d3 06 	sts	0x06D3, r22
    46a6:	70 93 d4 06 	sts	0x06D4, r23
    46aa:	80 93 d5 06 	sts	0x06D5, r24
    46ae:	90 93 d6 06 	sts	0x06D6, r25
    46b2:	60 93 d7 06 	sts	0x06D7, r22
    46b6:	70 93 d8 06 	sts	0x06D8, r23
    46ba:	80 93 d9 06 	sts	0x06D9, r24
    46be:	90 93 da 06 	sts	0x06DA, r25
	}
	
	PID_Oz();
    46c2:	0e 94 1e 20 	call	0x403c	; 0x403c <PID_Oz>
	PID_Ox();
    46c6:	0e 94 ff 20 	call	0x41fe	; 0x41fe <PID_Ox>
	PID_Oy();
    46ca:	0e 94 1c 22 	call	0x4438	; 0x4438 <PID_Oy>
		
	SetMotors(motors_sum);
    46ce:	8b ec       	ldi	r24, 0xCB	; 203
    46d0:	96 e0       	ldi	r25, 0x06	; 6
    46d2:	0e 94 28 1b 	call	0x3650	; 0x3650 <SetMotors>
    46d6:	08 95       	ret

000046d8 <SensorsInit>:

#include "SensorsPoll.h"

uint8_t SensorsInit()
{
	BMP085_Get_Coef();
    46d8:	0e 94 81 03 	call	0x702	; 0x702 <BMP085_Get_Coef>
	ADXL345_Init();
    46dc:	0e 94 12 03 	call	0x624	; 0x624 <ADXL345_Init>
	HMC5883L_Init();
    46e0:	0e 94 63 09 	call	0x12c6	; 0x12c6 <HMC5883L_Init>
	L3G4200D_Init();
    46e4:	0e 94 56 10 	call	0x20ac	; 0x20ac <L3G4200D_Init>
	
	peak = 0;
    46e8:	10 92 0f 01 	sts	0x010F, r1
	
	int_w_x.value = 0.0;
    46ec:	10 92 75 03 	sts	0x0375, r1
    46f0:	10 92 76 03 	sts	0x0376, r1
    46f4:	10 92 77 03 	sts	0x0377, r1
    46f8:	10 92 78 03 	sts	0x0378, r1
	int_w_y.value = 0.0;
    46fc:	10 92 79 03 	sts	0x0379, r1
    4700:	10 92 7a 03 	sts	0x037A, r1
    4704:	10 92 7b 03 	sts	0x037B, r1
    4708:	10 92 7c 03 	sts	0x037C, r1
	int_Ox.value = 0.0;
    470c:	10 92 91 03 	sts	0x0391, r1
    4710:	10 92 92 03 	sts	0x0392, r1
    4714:	10 92 93 03 	sts	0x0393, r1
    4718:	10 92 94 03 	sts	0x0394, r1
	int_Oy.value = 0.0;
    471c:	10 92 95 03 	sts	0x0395, r1
    4720:	10 92 96 03 	sts	0x0396, r1
    4724:	10 92 97 03 	sts	0x0397, r1
    4728:	10 92 98 03 	sts	0x0398, r1
	
	return 0;
}
    472c:	80 e0       	ldi	r24, 0x00	; 0
    472e:	08 95       	ret

00004730 <SensorsPoll>:
static uint8_t BMP085PreTimer = 0;
static uint8_t BMP085Flag = 0;

uint8_t SensorsPoll()
{
	BMP085PreTimer++;
    4730:	80 91 0a 01 	lds	r24, 0x010A
    4734:	8f 5f       	subi	r24, 0xFF	; 255
    4736:	80 93 0a 01 	sts	0x010A, r24
	
	if (bit_is_set(usRegHoldingBuf[MB_OFFSET+MB_MANUAL], 0) && BMP085PreTimer >= 4 && BMP085Flag)
    473a:	e5 e7       	ldi	r30, 0x75	; 117
    473c:	f4 e0       	ldi	r31, 0x04	; 4
    473e:	94 89       	ldd	r25, Z+20	; 0x14
    4740:	90 ff       	sbrs	r25, 0
    4742:	11 c0       	rjmp	.+34     	; 0x4766 <SensorsPoll+0x36>
    4744:	84 30       	cpi	r24, 0x04	; 4
    4746:	08 f4       	brcc	.+2      	; 0x474a <SensorsPoll+0x1a>
    4748:	93 c0       	rjmp	.+294    	; 0x4870 <SensorsPoll+0x140>
    474a:	80 91 0b 01 	lds	r24, 0x010B
    474e:	88 23       	and	r24, r24
    4750:	09 f4       	brne	.+2      	; 0x4754 <SensorsPoll+0x24>
    4752:	88 c0       	rjmp	.+272    	; 0x4864 <SensorsPoll+0x134>
	{
		BMP085_GetUT();
    4754:	0e 94 1a 08 	call	0x1034	; 0x1034 <BMP085_GetUT>
		BMP085_StartMeasUP();
    4758:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <BMP085_StartMeasUP>
		BMP085PreTimer = 0;
    475c:	10 92 0a 01 	sts	0x010A, r1
		BMP085Flag = 0;
    4760:	10 92 0b 01 	sts	0x010B, r1
    4764:	14 c0       	rjmp	.+40     	; 0x478e <SensorsPoll+0x5e>
	}		
	else if (bit_is_set(usRegHoldingBuf[MB_OFFSET+MB_MANUAL], 0) && BMP085PreTimer >= 4 && !BMP085Flag)
    4766:	e5 e7       	ldi	r30, 0x75	; 117
    4768:	f4 e0       	ldi	r31, 0x04	; 4
    476a:	94 89       	ldd	r25, Z+20	; 0x14
    476c:	90 ff       	sbrs	r25, 0
    476e:	0f c0       	rjmp	.+30     	; 0x478e <SensorsPoll+0x5e>
    4770:	84 30       	cpi	r24, 0x04	; 4
    4772:	68 f0       	brcs	.+26     	; 0x478e <SensorsPoll+0x5e>
    4774:	80 91 0b 01 	lds	r24, 0x010B
    4778:	81 11       	cpse	r24, r1
    477a:	09 c0       	rjmp	.+18     	; 0x478e <SensorsPoll+0x5e>
	{
		BMP085_GetUP();
    477c:	0e 94 9c 07 	call	0xf38	; 0xf38 <BMP085_GetUP>
		BMP085_StartMeasUT();
    4780:	0e 94 53 03 	call	0x6a6	; 0x6a6 <BMP085_StartMeasUT>
		BMP085PreTimer = 0;
    4784:	10 92 0a 01 	sts	0x010A, r1
		BMP085Flag = 1;
    4788:	81 e0       	ldi	r24, 0x01	; 1
    478a:	80 93 0b 01 	sts	0x010B, r24
	}	
	if (bit_is_set(usRegHoldingBuf[MB_OFFSET+MB_MANUAL], 1))
    478e:	e5 e7       	ldi	r30, 0x75	; 117
    4790:	f4 e0       	ldi	r31, 0x04	; 4
    4792:	84 89       	ldd	r24, Z+20	; 0x14
    4794:	81 fd       	sbrc	r24, 1
	{
		ADXL345_Poll();
    4796:	0e 94 bc 01 	call	0x378	; 0x378 <ADXL345_Poll>
	}	
	if (bit_is_set(usRegHoldingBuf[MB_OFFSET+MB_MANUAL], 2))
    479a:	e5 e7       	ldi	r30, 0x75	; 117
    479c:	f4 e0       	ldi	r31, 0x04	; 4
    479e:	84 89       	ldd	r24, Z+20	; 0x14
    47a0:	82 fd       	sbrc	r24, 2
	{
		HMC5883L_Poll();
    47a2:	0e 94 a3 09 	call	0x1346	; 0x1346 <HMC5883L_Poll>
	}	
	if (bit_is_set(usRegHoldingBuf[MB_OFFSET+MB_MANUAL], 3))
    47a6:	e5 e7       	ldi	r30, 0x75	; 117
    47a8:	f4 e0       	ldi	r31, 0x04	; 4
    47aa:	84 89       	ldd	r24, Z+20	; 0x14
    47ac:	83 fd       	sbrc	r24, 3
	{
		L3G4200D_Poll();
    47ae:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <L3G4200D_Poll>
	}		
	
	if (bit_is_set(usRegHoldingBuf[MB_OFFSET+MB_MANUAL], 5))
    47b2:	e5 e7       	ldi	r30, 0x75	; 117
    47b4:	f4 e0       	ldi	r31, 0x04	; 4
    47b6:	84 89       	ldd	r24, Z+20	; 0x14
    47b8:	85 ff       	sbrs	r24, 5
    47ba:	03 c0       	rjmp	.+6      	; 0x47c2 <SensorsPoll+0x92>
	{
		L3G4200D_Test(1);
    47bc:	81 e0       	ldi	r24, 0x01	; 1
    47be:	0e 94 02 12 	call	0x2404	; 0x2404 <L3G4200D_Test>
	}
	
	if (bit_is_set(usRegHoldingBuf[MB_OFFSET+MB_MANUAL], 6))
    47c2:	e5 e7       	ldi	r30, 0x75	; 117
    47c4:	f4 e0       	ldi	r31, 0x04	; 4
    47c6:	84 89       	ldd	r24, Z+20	; 0x14
    47c8:	86 ff       	sbrs	r24, 6
    47ca:	03 c0       	rjmp	.+6      	; 0x47d2 <SensorsPoll+0xa2>
	{
		L3G4200D_Test(2);
    47cc:	82 e0       	ldi	r24, 0x02	; 2
    47ce:	0e 94 02 12 	call	0x2404	; 0x2404 <L3G4200D_Test>
	}
	
	if (bit_is_clear(usRegHoldingBuf[MB_OFFSET+MB_MANUAL], 5) && bit_is_clear(usRegHoldingBuf[MB_OFFSET+MB_MANUAL], 6))
    47d2:	e5 e7       	ldi	r30, 0x75	; 117
    47d4:	f4 e0       	ldi	r31, 0x04	; 4
    47d6:	84 89       	ldd	r24, Z+20	; 0x14
    47d8:	85 fd       	sbrc	r24, 5
    47da:	06 c0       	rjmp	.+12     	; 0x47e8 <SensorsPoll+0xb8>
    47dc:	84 89       	ldd	r24, Z+20	; 0x14
    47de:	86 fd       	sbrc	r24, 6
    47e0:	03 c0       	rjmp	.+6      	; 0x47e8 <SensorsPoll+0xb8>
	{
		L3G4200D_Test(0);
    47e2:	80 e0       	ldi	r24, 0x00	; 0
    47e4:	0e 94 02 12 	call	0x2404	; 0x2404 <L3G4200D_Test>
	}
	
	if (bit_is_set(usRegHoldingBuf[MB_OFFSET+MB_MANUAL], 7) && bit_is_clear(usRegHoldingBuf[MB_OFFSET+MB_MANUAL], 8))
    47e8:	e5 e7       	ldi	r30, 0x75	; 117
    47ea:	f4 e0       	ldi	r31, 0x04	; 4
    47ec:	84 89       	ldd	r24, Z+20	; 0x14
    47ee:	88 23       	and	r24, r24
    47f0:	24 f4       	brge	.+8      	; 0x47fa <SensorsPoll+0xca>
    47f2:	84 89       	ldd	r24, Z+20	; 0x14
	{
		HMC5883L_Test(1);
    47f4:	81 e0       	ldi	r24, 0x01	; 1
    47f6:	0e 94 0e 10 	call	0x201c	; 0x201c <HMC5883L_Test>
	}
	
	if (bit_is_clear(usRegHoldingBuf[MB_OFFSET+MB_MANUAL], 7) && bit_is_set(usRegHoldingBuf[MB_OFFSET+MB_MANUAL], 8))
    47fa:	e5 e7       	ldi	r30, 0x75	; 117
    47fc:	f4 e0       	ldi	r31, 0x04	; 4
    47fe:	84 89       	ldd	r24, Z+20	; 0x14
    4800:	88 23       	and	r24, r24
    4802:	0c f0       	brlt	.+2      	; 0x4806 <SensorsPoll+0xd6>
    4804:	84 89       	ldd	r24, Z+20	; 0x14
	{
		HMC5883L_Test(2);
	}
	
	if (bit_is_clear(usRegHoldingBuf[MB_OFFSET+MB_MANUAL], 7) && bit_is_clear(usRegHoldingBuf[MB_OFFSET+MB_MANUAL], 8))
    4806:	e5 e7       	ldi	r30, 0x75	; 117
    4808:	f4 e0       	ldi	r31, 0x04	; 4
    480a:	84 89       	ldd	r24, Z+20	; 0x14
    480c:	88 23       	and	r24, r24
    480e:	24 f0       	brlt	.+8      	; 0x4818 <SensorsPoll+0xe8>
    4810:	84 89       	ldd	r24, Z+20	; 0x14
	{
		HMC5883L_Test(0);
    4812:	80 e0       	ldi	r24, 0x00	; 0
    4814:	0e 94 0e 10 	call	0x201c	; 0x201c <HMC5883L_Test>
	}
	
	ADCSRA = 1<<ADEN | 1<<ADSC | 0<<ADATE | 0<<ADIF | 1<<ADIE | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0;
    4818:	8f ec       	ldi	r24, 0xCF	; 207
    481a:	86 b9       	out	0x06, r24	; 6
	
	if (U_Batt.value < coeffs[U_Alarm].value)
    481c:	20 91 c1 02 	lds	r18, 0x02C1
    4820:	30 91 c2 02 	lds	r19, 0x02C2
    4824:	40 91 c3 02 	lds	r20, 0x02C3
    4828:	50 91 c4 02 	lds	r21, 0x02C4
    482c:	60 91 85 03 	lds	r22, 0x0385
    4830:	70 91 86 03 	lds	r23, 0x0386
    4834:	80 91 87 03 	lds	r24, 0x0387
    4838:	90 91 88 03 	lds	r25, 0x0388
    483c:	0e 94 de 28 	call	0x51bc	; 0x51bc <__cmpsf2>
    4840:	88 23       	and	r24, r24
    4842:	44 f4       	brge	.+16     	; 0x4854 <SensorsPoll+0x124>
	{
		usRegHoldingBuf[MB_OFFSET+MB_SOUND] |= 2;
    4844:	e1 e9       	ldi	r30, 0x91	; 145
    4846:	f4 e0       	ldi	r31, 0x04	; 4
    4848:	80 81       	ld	r24, Z
    484a:	91 81       	ldd	r25, Z+1	; 0x01
    484c:	82 60       	ori	r24, 0x02	; 2
    484e:	91 83       	std	Z+1, r25	; 0x01
    4850:	80 83       	st	Z, r24
    4852:	12 c0       	rjmp	.+36     	; 0x4878 <SensorsPoll+0x148>
	}
	else
	{
		usRegHoldingBuf[MB_OFFSET+MB_SOUND] &= ~2;
    4854:	e1 e9       	ldi	r30, 0x91	; 145
    4856:	f4 e0       	ldi	r31, 0x04	; 4
    4858:	80 81       	ld	r24, Z
    485a:	91 81       	ldd	r25, Z+1	; 0x01
    485c:	8d 7f       	andi	r24, 0xFD	; 253
    485e:	91 83       	std	Z+1, r25	; 0x01
    4860:	80 83       	st	Z, r24
    4862:	0a c0       	rjmp	.+20     	; 0x4878 <SensorsPoll+0x148>
		BMP085_GetUT();
		BMP085_StartMeasUP();
		BMP085PreTimer = 0;
		BMP085Flag = 0;
	}		
	else if (bit_is_set(usRegHoldingBuf[MB_OFFSET+MB_MANUAL], 0) && BMP085PreTimer >= 4 && !BMP085Flag)
    4864:	e5 e7       	ldi	r30, 0x75	; 117
    4866:	f4 e0       	ldi	r31, 0x04	; 4
    4868:	84 89       	ldd	r24, Z+20	; 0x14
    486a:	80 fd       	sbrc	r24, 0
    486c:	87 cf       	rjmp	.-242    	; 0x477c <SensorsPoll+0x4c>
    486e:	8f cf       	rjmp	.-226    	; 0x478e <SensorsPoll+0x5e>
    4870:	e5 e7       	ldi	r30, 0x75	; 117
    4872:	f4 e0       	ldi	r31, 0x04	; 4
    4874:	84 89       	ldd	r24, Z+20	; 0x14
    4876:	8b cf       	rjmp	.-234    	; 0x478e <SensorsPoll+0x5e>
		usRegHoldingBuf[MB_OFFSET+MB_SOUND] &= ~2;
	}
		
	
	return 0;
}
    4878:	80 e0       	ldi	r24, 0x00	; 0
    487a:	08 95       	ret

0000487c <Angular_Calc>:

void Angular_Calc()
{
    487c:	4f 92       	push	r4
    487e:	5f 92       	push	r5
    4880:	6f 92       	push	r6
    4882:	7f 92       	push	r7
    4884:	8f 92       	push	r8
    4886:	9f 92       	push	r9
    4888:	af 92       	push	r10
    488a:	bf 92       	push	r11
    488c:	cf 92       	push	r12
    488e:	df 92       	push	r13
    4890:	ef 92       	push	r14
    4892:	ff 92       	push	r15
    4894:	0f 93       	push	r16
    4896:	1f 93       	push	r17
    4898:	cf 93       	push	r28
    489a:	df 93       	push	r29
	acc_Ox.value = -1.0 * (atan2( k_y.value, k_z.value) * 180.0) / M_PI;
    489c:	0f 2e       	mov	r0, r31
    489e:	f9 e0       	ldi	r31, 0x09	; 9
    48a0:	cf 2e       	mov	r12, r31
    48a2:	f3 e0       	ldi	r31, 0x03	; 3
    48a4:	df 2e       	mov	r13, r31
    48a6:	f0 2d       	mov	r31, r0
    48a8:	f6 01       	movw	r30, r12
    48aa:	80 80       	ld	r8, Z
    48ac:	91 80       	ldd	r9, Z+1	; 0x01
    48ae:	a2 80       	ldd	r10, Z+2	; 0x02
    48b0:	b3 80       	ldd	r11, Z+3	; 0x03
    48b2:	05 e0       	ldi	r16, 0x05	; 5
    48b4:	13 e0       	ldi	r17, 0x03	; 3
    48b6:	f8 01       	movw	r30, r16
    48b8:	60 81       	ld	r22, Z
    48ba:	71 81       	ldd	r23, Z+1	; 0x01
    48bc:	82 81       	ldd	r24, Z+2	; 0x02
    48be:	93 81       	ldd	r25, Z+3	; 0x03
    48c0:	a5 01       	movw	r20, r10
    48c2:	94 01       	movw	r18, r8
    48c4:	0e 94 8b 28 	call	0x5116	; 0x5116 <atan2>
    48c8:	20 e0       	ldi	r18, 0x00	; 0
    48ca:	30 e0       	ldi	r19, 0x00	; 0
    48cc:	44 e3       	ldi	r20, 0x34	; 52
    48ce:	53 e4       	ldi	r21, 0x43	; 67
    48d0:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    48d4:	90 58       	subi	r25, 0x80	; 128
    48d6:	2b ed       	ldi	r18, 0xDB	; 219
    48d8:	3f e0       	ldi	r19, 0x0F	; 15
    48da:	49 e4       	ldi	r20, 0x49	; 73
    48dc:	50 e4       	ldi	r21, 0x40	; 64
    48de:	0e 94 e5 28 	call	0x51ca	; 0x51ca <__divsf3>
    48e2:	60 93 7d 03 	sts	0x037D, r22
    48e6:	70 93 7e 03 	sts	0x037E, r23
    48ea:	80 93 7f 03 	sts	0x037F, r24
    48ee:	90 93 80 03 	sts	0x0380, r25
	acc_Oy.value = (atan2( k_x.value, k_z.value) * 180.0) / M_PI;
    48f2:	0f 2e       	mov	r0, r31
    48f4:	f1 e0       	ldi	r31, 0x01	; 1
    48f6:	ef 2e       	mov	r14, r31
    48f8:	f3 e0       	ldi	r31, 0x03	; 3
    48fa:	ff 2e       	mov	r15, r31
    48fc:	f0 2d       	mov	r31, r0
    48fe:	f7 01       	movw	r30, r14
    4900:	60 81       	ld	r22, Z
    4902:	71 81       	ldd	r23, Z+1	; 0x01
    4904:	82 81       	ldd	r24, Z+2	; 0x02
    4906:	93 81       	ldd	r25, Z+3	; 0x03
    4908:	a5 01       	movw	r20, r10
    490a:	94 01       	movw	r18, r8
    490c:	0e 94 8b 28 	call	0x5116	; 0x5116 <atan2>
    4910:	20 e0       	ldi	r18, 0x00	; 0
    4912:	30 e0       	ldi	r19, 0x00	; 0
    4914:	44 e3       	ldi	r20, 0x34	; 52
    4916:	53 e4       	ldi	r21, 0x43	; 67
    4918:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    491c:	2b ed       	ldi	r18, 0xDB	; 219
    491e:	3f e0       	ldi	r19, 0x0F	; 15
    4920:	49 e4       	ldi	r20, 0x49	; 73
    4922:	50 e4       	ldi	r21, 0x40	; 64
    4924:	0e 94 e5 28 	call	0x51ca	; 0x51ca <__divsf3>
    4928:	60 93 81 03 	sts	0x0381, r22
    492c:	70 93 82 03 	sts	0x0382, r23
    4930:	80 93 83 03 	sts	0x0383, r24
    4934:	90 93 84 03 	sts	0x0384, r25
	
	//интеграл за последний период измерения
	int_w_x.value += ((w_x.value + p_w_x.value) / 2.0) * Step;
    4938:	80 90 9b 00 	lds	r8, 0x009B
    493c:	90 90 9c 00 	lds	r9, 0x009C
    4940:	a0 90 9d 00 	lds	r10, 0x009D
    4944:	b0 90 9e 00 	lds	r11, 0x009E
    4948:	c5 e7       	ldi	r28, 0x75	; 117
    494a:	d3 e0       	ldi	r29, 0x03	; 3
    494c:	20 91 31 03 	lds	r18, 0x0331
    4950:	30 91 32 03 	lds	r19, 0x0332
    4954:	40 91 33 03 	lds	r20, 0x0333
    4958:	50 91 34 03 	lds	r21, 0x0334
    495c:	60 91 25 03 	lds	r22, 0x0325
    4960:	70 91 26 03 	lds	r23, 0x0326
    4964:	80 91 27 03 	lds	r24, 0x0327
    4968:	90 91 28 03 	lds	r25, 0x0328
    496c:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
    4970:	20 e0       	ldi	r18, 0x00	; 0
    4972:	30 e0       	ldi	r19, 0x00	; 0
    4974:	40 e0       	ldi	r20, 0x00	; 0
    4976:	5f e3       	ldi	r21, 0x3F	; 63
    4978:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    497c:	a5 01       	movw	r20, r10
    497e:	94 01       	movw	r18, r8
    4980:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    4984:	9b 01       	movw	r18, r22
    4986:	ac 01       	movw	r20, r24
    4988:	68 81       	ld	r22, Y
    498a:	79 81       	ldd	r23, Y+1	; 0x01
    498c:	8a 81       	ldd	r24, Y+2	; 0x02
    498e:	9b 81       	ldd	r25, Y+3	; 0x03
    4990:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
    4994:	68 83       	st	Y, r22
    4996:	79 83       	std	Y+1, r23	; 0x01
    4998:	8a 83       	std	Y+2, r24	; 0x02
    499a:	9b 83       	std	Y+3, r25	; 0x03
	int_w_y.value += ((w_y.value + p_w_y.value) / 2.0) * Step;
    499c:	c9 e7       	ldi	r28, 0x79	; 121
    499e:	d3 e0       	ldi	r29, 0x03	; 3
    49a0:	20 91 35 03 	lds	r18, 0x0335
    49a4:	30 91 36 03 	lds	r19, 0x0336
    49a8:	40 91 37 03 	lds	r20, 0x0337
    49ac:	50 91 38 03 	lds	r21, 0x0338
    49b0:	60 91 29 03 	lds	r22, 0x0329
    49b4:	70 91 2a 03 	lds	r23, 0x032A
    49b8:	80 91 2b 03 	lds	r24, 0x032B
    49bc:	90 91 2c 03 	lds	r25, 0x032C
    49c0:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
    49c4:	20 e0       	ldi	r18, 0x00	; 0
    49c6:	30 e0       	ldi	r19, 0x00	; 0
    49c8:	40 e0       	ldi	r20, 0x00	; 0
    49ca:	5f e3       	ldi	r21, 0x3F	; 63
    49cc:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    49d0:	9b 01       	movw	r18, r22
    49d2:	ac 01       	movw	r20, r24
    49d4:	c5 01       	movw	r24, r10
    49d6:	b4 01       	movw	r22, r8
    49d8:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    49dc:	9b 01       	movw	r18, r22
    49de:	ac 01       	movw	r20, r24
    49e0:	68 81       	ld	r22, Y
    49e2:	79 81       	ldd	r23, Y+1	; 0x01
    49e4:	8a 81       	ldd	r24, Y+2	; 0x02
    49e6:	9b 81       	ldd	r25, Y+3	; 0x03
    49e8:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
    49ec:	68 83       	st	Y, r22
    49ee:	79 83       	std	Y+1, r23	; 0x01
    49f0:	8a 83       	std	Y+2, r24	; 0x02
    49f2:	9b 83       	std	Y+3, r25	; 0x03
	int_w_z.value += ((w_z.value + p_w_z.value) / 2.0) * Step;
    49f4:	c9 e9       	ldi	r28, 0x99	; 153
    49f6:	d3 e0       	ldi	r29, 0x03	; 3
    49f8:	20 91 39 03 	lds	r18, 0x0339
    49fc:	30 91 3a 03 	lds	r19, 0x033A
    4a00:	40 91 3b 03 	lds	r20, 0x033B
    4a04:	50 91 3c 03 	lds	r21, 0x033C
    4a08:	60 91 2d 03 	lds	r22, 0x032D
    4a0c:	70 91 2e 03 	lds	r23, 0x032E
    4a10:	80 91 2f 03 	lds	r24, 0x032F
    4a14:	90 91 30 03 	lds	r25, 0x0330
    4a18:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
    4a1c:	20 e0       	ldi	r18, 0x00	; 0
    4a1e:	30 e0       	ldi	r19, 0x00	; 0
    4a20:	40 e0       	ldi	r20, 0x00	; 0
    4a22:	5f e3       	ldi	r21, 0x3F	; 63
    4a24:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    4a28:	9b 01       	movw	r18, r22
    4a2a:	ac 01       	movw	r20, r24
    4a2c:	c5 01       	movw	r24, r10
    4a2e:	b4 01       	movw	r22, r8
    4a30:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    4a34:	28 81       	ld	r18, Y
    4a36:	39 81       	ldd	r19, Y+1	; 0x01
    4a38:	4a 81       	ldd	r20, Y+2	; 0x02
    4a3a:	5b 81       	ldd	r21, Y+3	; 0x03
    4a3c:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
    4a40:	26 2f       	mov	r18, r22
    4a42:	37 2f       	mov	r19, r23
    4a44:	46 2f       	mov	r20, r22
    4a46:	57 2f       	mov	r21, r23
    4a48:	68 2f       	mov	r22, r24
    4a4a:	79 2f       	mov	r23, r25
    4a4c:	48 83       	st	Y, r20
    4a4e:	59 83       	std	Y+1, r21	; 0x01
    4a50:	6a 83       	std	Y+2, r22	; 0x02
    4a52:	7b 83       	std	Y+3, r23	; 0x03
	//Oz_gyr = ((w_z + p_w_z) / 2.0) * Step;
	int_w_z.value = Correction360(int_w_z.value);
    4a54:	62 2f       	mov	r22, r18
    4a56:	73 2f       	mov	r23, r19
    4a58:	0e 94 43 0a 	call	0x1486	; 0x1486 <Correction360>
    4a5c:	68 83       	st	Y, r22
    4a5e:	79 83       	std	Y+1, r23	; 0x01
    4a60:	8a 83       	std	Y+2, r24	; 0x02
    4a62:	9b 83       	std	Y+3, r25	; 0x03
	
	//Коррекция ошибки интегрирования угловой скорости
	if ((fabs(fabs(k_x.value) + fabs(k_y.value) + fabs(k_z.value) - 1.0) < coeffs[AXL_TRUE_ACC].value) && fabs(int_w_x.value - acc_Ox.value) < coeffs[COR_X_LIM].value && fabs(int_w_y.value - acc_Oy.value) < coeffs[COR_Y_LIM].value)
    4a64:	f7 01       	movw	r30, r14
    4a66:	80 81       	ld	r24, Z
    4a68:	91 81       	ldd	r25, Z+1	; 0x01
    4a6a:	a2 81       	ldd	r26, Z+2	; 0x02
    4a6c:	b3 81       	ldd	r27, Z+3	; 0x03
    4a6e:	bc 01       	movw	r22, r24
    4a70:	cd 01       	movw	r24, r26
    4a72:	9f 77       	andi	r25, 0x7F	; 127
    4a74:	f8 01       	movw	r30, r16
    4a76:	00 81       	ld	r16, Z
    4a78:	11 81       	ldd	r17, Z+1	; 0x01
    4a7a:	22 81       	ldd	r18, Z+2	; 0x02
    4a7c:	33 81       	ldd	r19, Z+3	; 0x03
    4a7e:	a9 01       	movw	r20, r18
    4a80:	98 01       	movw	r18, r16
    4a82:	5f 77       	andi	r21, 0x7F	; 127
    4a84:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
    4a88:	f6 01       	movw	r30, r12
    4a8a:	00 81       	ld	r16, Z
    4a8c:	11 81       	ldd	r17, Z+1	; 0x01
    4a8e:	22 81       	ldd	r18, Z+2	; 0x02
    4a90:	33 81       	ldd	r19, Z+3	; 0x03
    4a92:	a9 01       	movw	r20, r18
    4a94:	98 01       	movw	r18, r16
    4a96:	5f 77       	andi	r21, 0x7F	; 127
    4a98:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
    4a9c:	20 e0       	ldi	r18, 0x00	; 0
    4a9e:	30 e0       	ldi	r19, 0x00	; 0
    4aa0:	40 e8       	ldi	r20, 0x80	; 128
    4aa2:	5f e3       	ldi	r21, 0x3F	; 63
    4aa4:	0e 94 17 28 	call	0x502e	; 0x502e <__subsf3>
    4aa8:	9f 77       	andi	r25, 0x7F	; 127
    4aaa:	20 91 75 02 	lds	r18, 0x0275
    4aae:	30 91 76 02 	lds	r19, 0x0276
    4ab2:	40 91 77 02 	lds	r20, 0x0277
    4ab6:	50 91 78 02 	lds	r21, 0x0278
    4aba:	0e 94 de 28 	call	0x51bc	; 0x51bc <__cmpsf2>
    4abe:	88 23       	and	r24, r24
    4ac0:	0c f0       	brlt	.+2      	; 0x4ac4 <Angular_Calc+0x248>
    4ac2:	52 c0       	rjmp	.+164    	; 0x4b68 <Angular_Calc+0x2ec>
    4ac4:	c0 90 7d 03 	lds	r12, 0x037D
    4ac8:	d0 90 7e 03 	lds	r13, 0x037E
    4acc:	e0 90 7f 03 	lds	r14, 0x037F
    4ad0:	f0 90 80 03 	lds	r15, 0x0380
    4ad4:	a7 01       	movw	r20, r14
    4ad6:	96 01       	movw	r18, r12
    4ad8:	60 91 75 03 	lds	r22, 0x0375
    4adc:	70 91 76 03 	lds	r23, 0x0376
    4ae0:	80 91 77 03 	lds	r24, 0x0377
    4ae4:	90 91 78 03 	lds	r25, 0x0378
    4ae8:	0e 94 17 28 	call	0x502e	; 0x502e <__subsf3>
    4aec:	9f 77       	andi	r25, 0x7F	; 127
    4aee:	20 91 79 02 	lds	r18, 0x0279
    4af2:	30 91 7a 02 	lds	r19, 0x027A
    4af6:	40 91 7b 02 	lds	r20, 0x027B
    4afa:	50 91 7c 02 	lds	r21, 0x027C
    4afe:	0e 94 de 28 	call	0x51bc	; 0x51bc <__cmpsf2>
    4b02:	88 23       	and	r24, r24
    4b04:	8c f5       	brge	.+98     	; 0x4b68 <Angular_Calc+0x2ec>
    4b06:	40 90 81 03 	lds	r4, 0x0381
    4b0a:	50 90 82 03 	lds	r5, 0x0382
    4b0e:	60 90 83 03 	lds	r6, 0x0383
    4b12:	70 90 84 03 	lds	r7, 0x0384
    4b16:	a3 01       	movw	r20, r6
    4b18:	92 01       	movw	r18, r4
    4b1a:	60 91 79 03 	lds	r22, 0x0379
    4b1e:	70 91 7a 03 	lds	r23, 0x037A
    4b22:	80 91 7b 03 	lds	r24, 0x037B
    4b26:	90 91 7c 03 	lds	r25, 0x037C
    4b2a:	0e 94 17 28 	call	0x502e	; 0x502e <__subsf3>
    4b2e:	9f 77       	andi	r25, 0x7F	; 127
    4b30:	20 91 7d 02 	lds	r18, 0x027D
    4b34:	30 91 7e 02 	lds	r19, 0x027E
    4b38:	40 91 7f 02 	lds	r20, 0x027F
    4b3c:	50 91 80 02 	lds	r21, 0x0280
    4b40:	0e 94 de 28 	call	0x51bc	; 0x51bc <__cmpsf2>
    4b44:	88 23       	and	r24, r24
    4b46:	84 f4       	brge	.+32     	; 0x4b68 <Angular_Calc+0x2ec>
	{
		int_w_x.value = acc_Ox.value;
    4b48:	c0 92 75 03 	sts	0x0375, r12
    4b4c:	d0 92 76 03 	sts	0x0376, r13
    4b50:	e0 92 77 03 	sts	0x0377, r14
    4b54:	f0 92 78 03 	sts	0x0378, r15
		int_w_y.value = acc_Oy.value;
    4b58:	40 92 79 03 	sts	0x0379, r4
    4b5c:	50 92 7a 03 	sts	0x037A, r5
    4b60:	60 92 7b 03 	sts	0x037B, r6
    4b64:	70 92 7c 03 	sts	0x037C, r7
	}
	
	p_Ox.value = Ox.value;
    4b68:	0f 2e       	mov	r0, r31
    4b6a:	f9 e8       	ldi	r31, 0x89	; 137
    4b6c:	4f 2e       	mov	r4, r31
    4b6e:	f3 e0       	ldi	r31, 0x03	; 3
    4b70:	5f 2e       	mov	r5, r31
    4b72:	f0 2d       	mov	r31, r0
    4b74:	0f 2e       	mov	r0, r31
    4b76:	f5 e6       	ldi	r31, 0x65	; 101
    4b78:	cf 2e       	mov	r12, r31
    4b7a:	f3 e0       	ldi	r31, 0x03	; 3
    4b7c:	df 2e       	mov	r13, r31
    4b7e:	f0 2d       	mov	r31, r0
    4b80:	f6 01       	movw	r30, r12
    4b82:	80 81       	ld	r24, Z
    4b84:	91 81       	ldd	r25, Z+1	; 0x01
    4b86:	a2 81       	ldd	r26, Z+2	; 0x02
    4b88:	b3 81       	ldd	r27, Z+3	; 0x03
    4b8a:	f2 01       	movw	r30, r4
    4b8c:	80 83       	st	Z, r24
    4b8e:	91 83       	std	Z+1, r25	; 0x01
    4b90:	a2 83       	std	Z+2, r26	; 0x02
    4b92:	b3 83       	std	Z+3, r27	; 0x03
	p_Oy.value = Oy.value;
    4b94:	c9 e6       	ldi	r28, 0x69	; 105
    4b96:	d3 e0       	ldi	r29, 0x03	; 3
    4b98:	88 81       	ld	r24, Y
    4b9a:	99 81       	ldd	r25, Y+1	; 0x01
    4b9c:	aa 81       	ldd	r26, Y+2	; 0x02
    4b9e:	bb 81       	ldd	r27, Y+3	; 0x03
    4ba0:	80 93 8d 03 	sts	0x038D, r24
    4ba4:	90 93 8e 03 	sts	0x038E, r25
    4ba8:	a0 93 8f 03 	sts	0x038F, r26
    4bac:	b0 93 90 03 	sts	0x0390, r27
	p_Oz.value = Oz.value;
    4bb0:	0f 2e       	mov	r0, r31
    4bb2:	f9 e5       	ldi	r31, 0x59	; 89
    4bb4:	6f 2e       	mov	r6, r31
    4bb6:	f3 e0       	ldi	r31, 0x03	; 3
    4bb8:	7f 2e       	mov	r7, r31
    4bba:	f0 2d       	mov	r31, r0
    4bbc:	f3 01       	movw	r30, r6
    4bbe:	80 81       	ld	r24, Z
    4bc0:	91 81       	ldd	r25, Z+1	; 0x01
    4bc2:	a2 81       	ldd	r26, Z+2	; 0x02
    4bc4:	b3 81       	ldd	r27, Z+3	; 0x03
    4bc6:	80 93 61 03 	sts	0x0361, r24
    4bca:	90 93 62 03 	sts	0x0362, r25
    4bce:	a0 93 63 03 	sts	0x0363, r26
    4bd2:	b0 93 64 03 	sts	0x0364, r27
	
	//Комплементарный фильтр
	Ox.value = ComplemetaryFilter(acc_Ox.value, int_w_x.value, coeffs[Kcomp_Ox].value);
    4bd6:	e0 90 5d 02 	lds	r14, 0x025D
    4bda:	f0 90 5e 02 	lds	r15, 0x025E
    4bde:	00 91 5f 02 	lds	r16, 0x025F
    4be2:	10 91 60 02 	lds	r17, 0x0260
    4be6:	20 91 75 03 	lds	r18, 0x0375
    4bea:	30 91 76 03 	lds	r19, 0x0376
    4bee:	40 91 77 03 	lds	r20, 0x0377
    4bf2:	50 91 78 03 	lds	r21, 0x0378
    4bf6:	60 91 7d 03 	lds	r22, 0x037D
    4bfa:	70 91 7e 03 	lds	r23, 0x037E
    4bfe:	80 91 7f 03 	lds	r24, 0x037F
    4c02:	90 91 80 03 	lds	r25, 0x0380
    4c06:	0e 94 a9 08 	call	0x1152	; 0x1152 <ComplemetaryFilter>
    4c0a:	f6 01       	movw	r30, r12
    4c0c:	60 83       	st	Z, r22
    4c0e:	71 83       	std	Z+1, r23	; 0x01
    4c10:	82 83       	std	Z+2, r24	; 0x02
    4c12:	93 83       	std	Z+3, r25	; 0x03
	Oy.value = ComplemetaryFilter(acc_Oy.value, int_w_y.value, coeffs[Kcomp_Oy].value);
    4c14:	e0 90 61 02 	lds	r14, 0x0261
    4c18:	f0 90 62 02 	lds	r15, 0x0262
    4c1c:	00 91 63 02 	lds	r16, 0x0263
    4c20:	10 91 64 02 	lds	r17, 0x0264
    4c24:	20 91 79 03 	lds	r18, 0x0379
    4c28:	30 91 7a 03 	lds	r19, 0x037A
    4c2c:	40 91 7b 03 	lds	r20, 0x037B
    4c30:	50 91 7c 03 	lds	r21, 0x037C
    4c34:	60 91 81 03 	lds	r22, 0x0381
    4c38:	70 91 82 03 	lds	r23, 0x0382
    4c3c:	80 91 83 03 	lds	r24, 0x0383
    4c40:	90 91 84 03 	lds	r25, 0x0384
    4c44:	0e 94 a9 08 	call	0x1152	; 0x1152 <ComplemetaryFilter>
    4c48:	68 83       	st	Y, r22
    4c4a:	79 83       	std	Y+1, r23	; 0x01
    4c4c:	8a 83       	std	Y+2, r24	; 0x02
    4c4e:	9b 83       	std	Y+3, r25	; 0x03
	Oz.value = ComplemetaryFilter(magOz.value, int_w_z.value, coeffs[Kcomp_Oz].value);
    4c50:	e0 90 65 02 	lds	r14, 0x0265
    4c54:	f0 90 66 02 	lds	r15, 0x0266
    4c58:	00 91 67 02 	lds	r16, 0x0267
    4c5c:	10 91 68 02 	lds	r17, 0x0268
    4c60:	20 91 99 03 	lds	r18, 0x0399
    4c64:	30 91 9a 03 	lds	r19, 0x039A
    4c68:	40 91 9b 03 	lds	r20, 0x039B
    4c6c:	50 91 9c 03 	lds	r21, 0x039C
    4c70:	60 91 9d 03 	lds	r22, 0x039D
    4c74:	70 91 9e 03 	lds	r23, 0x039E
    4c78:	80 91 9f 03 	lds	r24, 0x039F
    4c7c:	90 91 a0 03 	lds	r25, 0x03A0
    4c80:	0e 94 a9 08 	call	0x1152	; 0x1152 <ComplemetaryFilter>
    4c84:	f3 01       	movw	r30, r6
    4c86:	60 83       	st	Z, r22
    4c88:	71 83       	std	Z+1, r23	; 0x01
    4c8a:	82 83       	std	Z+2, r24	; 0x02
    4c8c:	93 83       	std	Z+3, r25	; 0x03
	
	//Накапливаем интегральные суммы для И-крена и И-тангажа для ПИДов
	if (p_Ox.value > -90.0 && p_Ox.value < 90.0 && p_Oy.value > -90.0 && p_Oy.value < 90.0)	//проверка значения углов на корректность (включен ли инклинометр?)
    4c8e:	f2 01       	movw	r30, r4
    4c90:	c0 80       	ld	r12, Z
    4c92:	d1 80       	ldd	r13, Z+1	; 0x01
    4c94:	e2 80       	ldd	r14, Z+2	; 0x02
    4c96:	f3 80       	ldd	r15, Z+3	; 0x03
    4c98:	20 e0       	ldi	r18, 0x00	; 0
    4c9a:	30 e0       	ldi	r19, 0x00	; 0
    4c9c:	44 eb       	ldi	r20, 0xB4	; 180
    4c9e:	52 ec       	ldi	r21, 0xC2	; 194
    4ca0:	c7 01       	movw	r24, r14
    4ca2:	b6 01       	movw	r22, r12
    4ca4:	0e 94 89 2a 	call	0x5512	; 0x5512 <__gesf2>
    4ca8:	18 16       	cp	r1, r24
    4caa:	0c f0       	brlt	.+2      	; 0x4cae <Angular_Calc+0x432>
    4cac:	76 c0       	rjmp	.+236    	; 0x4d9a <Angular_Calc+0x51e>
    4cae:	20 e0       	ldi	r18, 0x00	; 0
    4cb0:	30 e0       	ldi	r19, 0x00	; 0
    4cb2:	44 eb       	ldi	r20, 0xB4	; 180
    4cb4:	52 e4       	ldi	r21, 0x42	; 66
    4cb6:	c7 01       	movw	r24, r14
    4cb8:	b6 01       	movw	r22, r12
    4cba:	0e 94 de 28 	call	0x51bc	; 0x51bc <__cmpsf2>
    4cbe:	88 23       	and	r24, r24
    4cc0:	0c f0       	brlt	.+2      	; 0x4cc4 <Angular_Calc+0x448>
    4cc2:	6b c0       	rjmp	.+214    	; 0x4d9a <Angular_Calc+0x51e>
    4cc4:	40 90 8d 03 	lds	r4, 0x038D
    4cc8:	50 90 8e 03 	lds	r5, 0x038E
    4ccc:	60 90 8f 03 	lds	r6, 0x038F
    4cd0:	70 90 90 03 	lds	r7, 0x0390
    4cd4:	20 e0       	ldi	r18, 0x00	; 0
    4cd6:	30 e0       	ldi	r19, 0x00	; 0
    4cd8:	44 eb       	ldi	r20, 0xB4	; 180
    4cda:	52 ec       	ldi	r21, 0xC2	; 194
    4cdc:	c3 01       	movw	r24, r6
    4cde:	b2 01       	movw	r22, r4
    4ce0:	0e 94 89 2a 	call	0x5512	; 0x5512 <__gesf2>
    4ce4:	18 16       	cp	r1, r24
    4ce6:	0c f0       	brlt	.+2      	; 0x4cea <Angular_Calc+0x46e>
    4ce8:	58 c0       	rjmp	.+176    	; 0x4d9a <Angular_Calc+0x51e>
    4cea:	20 e0       	ldi	r18, 0x00	; 0
    4cec:	30 e0       	ldi	r19, 0x00	; 0
    4cee:	44 eb       	ldi	r20, 0xB4	; 180
    4cf0:	52 e4       	ldi	r21, 0x42	; 66
    4cf2:	c3 01       	movw	r24, r6
    4cf4:	b2 01       	movw	r22, r4
    4cf6:	0e 94 de 28 	call	0x51bc	; 0x51bc <__cmpsf2>
    4cfa:	88 23       	and	r24, r24
    4cfc:	0c f0       	brlt	.+2      	; 0x4d00 <Angular_Calc+0x484>
    4cfe:	4d c0       	rjmp	.+154    	; 0x4d9a <Angular_Calc+0x51e>
	{
		int_Ox.value += ((Ox.value + p_Ox.value) / 2.0) * Step;
    4d00:	c1 e9       	ldi	r28, 0x91	; 145
    4d02:	d3 e0       	ldi	r29, 0x03	; 3
    4d04:	20 91 65 03 	lds	r18, 0x0365
    4d08:	30 91 66 03 	lds	r19, 0x0366
    4d0c:	40 91 67 03 	lds	r20, 0x0367
    4d10:	50 91 68 03 	lds	r21, 0x0368
    4d14:	c7 01       	movw	r24, r14
    4d16:	b6 01       	movw	r22, r12
    4d18:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
    4d1c:	20 e0       	ldi	r18, 0x00	; 0
    4d1e:	30 e0       	ldi	r19, 0x00	; 0
    4d20:	40 e0       	ldi	r20, 0x00	; 0
    4d22:	5f e3       	ldi	r21, 0x3F	; 63
    4d24:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    4d28:	9b 01       	movw	r18, r22
    4d2a:	ac 01       	movw	r20, r24
    4d2c:	c5 01       	movw	r24, r10
    4d2e:	b4 01       	movw	r22, r8
    4d30:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    4d34:	9b 01       	movw	r18, r22
    4d36:	ac 01       	movw	r20, r24
    4d38:	68 81       	ld	r22, Y
    4d3a:	79 81       	ldd	r23, Y+1	; 0x01
    4d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    4d3e:	9b 81       	ldd	r25, Y+3	; 0x03
    4d40:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
    4d44:	68 83       	st	Y, r22
    4d46:	79 83       	std	Y+1, r23	; 0x01
    4d48:	8a 83       	std	Y+2, r24	; 0x02
    4d4a:	9b 83       	std	Y+3, r25	; 0x03
		int_Oy.value += ((Oy.value + p_Oy.value) / 2.0) * Step;
    4d4c:	c5 e9       	ldi	r28, 0x95	; 149
    4d4e:	d3 e0       	ldi	r29, 0x03	; 3
    4d50:	20 91 69 03 	lds	r18, 0x0369
    4d54:	30 91 6a 03 	lds	r19, 0x036A
    4d58:	40 91 6b 03 	lds	r20, 0x036B
    4d5c:	50 91 6c 03 	lds	r21, 0x036C
    4d60:	c3 01       	movw	r24, r6
    4d62:	b2 01       	movw	r22, r4
    4d64:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
    4d68:	20 e0       	ldi	r18, 0x00	; 0
    4d6a:	30 e0       	ldi	r19, 0x00	; 0
    4d6c:	40 e0       	ldi	r20, 0x00	; 0
    4d6e:	5f e3       	ldi	r21, 0x3F	; 63
    4d70:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    4d74:	9b 01       	movw	r18, r22
    4d76:	ac 01       	movw	r20, r24
    4d78:	c5 01       	movw	r24, r10
    4d7a:	b4 01       	movw	r22, r8
    4d7c:	0e 94 94 2a 	call	0x5528	; 0x5528 <__mulsf3>
    4d80:	9b 01       	movw	r18, r22
    4d82:	ac 01       	movw	r20, r24
    4d84:	68 81       	ld	r22, Y
    4d86:	79 81       	ldd	r23, Y+1	; 0x01
    4d88:	8a 81       	ldd	r24, Y+2	; 0x02
    4d8a:	9b 81       	ldd	r25, Y+3	; 0x03
    4d8c:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
    4d90:	68 83       	st	Y, r22
    4d92:	79 83       	std	Y+1, r23	; 0x01
    4d94:	8a 83       	std	Y+2, r24	; 0x02
    4d96:	9b 83       	std	Y+3, r25	; 0x03
    4d98:	10 c0       	rjmp	.+32     	; 0x4dba <Angular_Calc+0x53e>
	}
	else 
	{
		int_Ox.value = 0.0;
    4d9a:	10 92 91 03 	sts	0x0391, r1
    4d9e:	10 92 92 03 	sts	0x0392, r1
    4da2:	10 92 93 03 	sts	0x0393, r1
    4da6:	10 92 94 03 	sts	0x0394, r1
		int_Oy.value = 0.0;
    4daa:	10 92 95 03 	sts	0x0395, r1
    4dae:	10 92 96 03 	sts	0x0396, r1
    4db2:	10 92 97 03 	sts	0x0397, r1
    4db6:	10 92 98 03 	sts	0x0398, r1
	}
	
	//Ограничение интегральных сумм ПИДов И-крена и И-тангажа
	if (int_Ox.value > coeffs[IntSum_LIM].value)
    4dba:	c0 90 9d 02 	lds	r12, 0x029D
    4dbe:	d0 90 9e 02 	lds	r13, 0x029E
    4dc2:	e0 90 9f 02 	lds	r14, 0x029F
    4dc6:	f0 90 a0 02 	lds	r15, 0x02A0
    4dca:	a7 01       	movw	r20, r14
    4dcc:	96 01       	movw	r18, r12
    4dce:	60 91 91 03 	lds	r22, 0x0391
    4dd2:	70 91 92 03 	lds	r23, 0x0392
    4dd6:	80 91 93 03 	lds	r24, 0x0393
    4dda:	90 91 94 03 	lds	r25, 0x0394
    4dde:	0e 94 89 2a 	call	0x5512	; 0x5512 <__gesf2>
    4de2:	18 16       	cp	r1, r24
    4de4:	44 f4       	brge	.+16     	; 0x4df6 <Angular_Calc+0x57a>
	{
		int_Ox.value = coeffs[IntSum_LIM].value;
    4de6:	c0 92 91 03 	sts	0x0391, r12
    4dea:	d0 92 92 03 	sts	0x0392, r13
    4dee:	e0 92 93 03 	sts	0x0393, r14
    4df2:	f0 92 94 03 	sts	0x0394, r15
	}
	if (int_Oy.value > coeffs[IntSum_LIM].value)
    4df6:	20 91 95 03 	lds	r18, 0x0395
    4dfa:	30 91 96 03 	lds	r19, 0x0396
    4dfe:	40 91 97 03 	lds	r20, 0x0397
    4e02:	50 91 98 03 	lds	r21, 0x0398
    4e06:	c7 01       	movw	r24, r14
    4e08:	b6 01       	movw	r22, r12
    4e0a:	0e 94 de 28 	call	0x51bc	; 0x51bc <__cmpsf2>
    4e0e:	88 23       	and	r24, r24
    4e10:	44 f4       	brge	.+16     	; 0x4e22 <Angular_Calc+0x5a6>
	{
		int_Oy.value = coeffs[IntSum_LIM].value;
    4e12:	c0 92 95 03 	sts	0x0395, r12
    4e16:	d0 92 96 03 	sts	0x0396, r13
    4e1a:	e0 92 97 03 	sts	0x0397, r14
    4e1e:	f0 92 98 03 	sts	0x0398, r15
	}
	if (int_Ox.value < coeffs[IntSum_LIM].value * (-1.0))
    4e22:	f7 fa       	bst	r15, 7
    4e24:	f0 94       	com	r15
    4e26:	f7 f8       	bld	r15, 7
    4e28:	f0 94       	com	r15
    4e2a:	a7 01       	movw	r20, r14
    4e2c:	96 01       	movw	r18, r12
    4e2e:	60 91 91 03 	lds	r22, 0x0391
    4e32:	70 91 92 03 	lds	r23, 0x0392
    4e36:	80 91 93 03 	lds	r24, 0x0393
    4e3a:	90 91 94 03 	lds	r25, 0x0394
    4e3e:	0e 94 de 28 	call	0x51bc	; 0x51bc <__cmpsf2>
    4e42:	88 23       	and	r24, r24
    4e44:	44 f4       	brge	.+16     	; 0x4e56 <Angular_Calc+0x5da>
	{
		int_Ox.value = coeffs[IntSum_LIM].value * (-1.0);
    4e46:	c0 92 91 03 	sts	0x0391, r12
    4e4a:	d0 92 92 03 	sts	0x0392, r13
    4e4e:	e0 92 93 03 	sts	0x0393, r14
    4e52:	f0 92 94 03 	sts	0x0394, r15
	}
	if (int_Oy.value < coeffs[IntSum_LIM].value * (-1.0))
    4e56:	20 91 95 03 	lds	r18, 0x0395
    4e5a:	30 91 96 03 	lds	r19, 0x0396
    4e5e:	40 91 97 03 	lds	r20, 0x0397
    4e62:	50 91 98 03 	lds	r21, 0x0398
    4e66:	c7 01       	movw	r24, r14
    4e68:	b6 01       	movw	r22, r12
    4e6a:	0e 94 89 2a 	call	0x5512	; 0x5512 <__gesf2>
    4e6e:	18 16       	cp	r1, r24
    4e70:	44 f4       	brge	.+16     	; 0x4e82 <Angular_Calc+0x606>
	{
		int_Oy.value = coeffs[IntSum_LIM].value * (-1.0);
    4e72:	c0 92 95 03 	sts	0x0395, r12
    4e76:	d0 92 96 03 	sts	0x0396, r13
    4e7a:	e0 92 97 03 	sts	0x0397, r14
    4e7e:	f0 92 98 03 	sts	0x0398, r15
	}
	
	//отключаем накопление ошибок на взлете
	if (bit_is_set(usRegHoldingBuf[MB_OFFSET+MB_MANUAL], 9))
    4e82:	e5 e7       	ldi	r30, 0x75	; 117
    4e84:	f4 e0       	ldi	r31, 0x04	; 4
    4e86:	84 89       	ldd	r24, Z+20	; 0x14
	{
		int_Ox.value = coeffs[Takeoff_Int_Lim].value;
		int_Oy.value = coeffs[Takeoff_Int_Lim].value;
	}
}
    4e88:	df 91       	pop	r29
    4e8a:	cf 91       	pop	r28
    4e8c:	1f 91       	pop	r17
    4e8e:	0f 91       	pop	r16
    4e90:	ff 90       	pop	r15
    4e92:	ef 90       	pop	r14
    4e94:	df 90       	pop	r13
    4e96:	cf 90       	pop	r12
    4e98:	bf 90       	pop	r11
    4e9a:	af 90       	pop	r10
    4e9c:	9f 90       	pop	r9
    4e9e:	8f 90       	pop	r8
    4ea0:	7f 90       	pop	r7
    4ea2:	6f 90       	pop	r6
    4ea4:	5f 90       	pop	r5
    4ea6:	4f 90       	pop	r4
    4ea8:	08 95       	ret

00004eaa <Heading_displacement_calc>:

double_t Heading_displacement_calc(double_t Current, double_t Target)
{
    4eaa:	cf 92       	push	r12
    4eac:	df 92       	push	r13
    4eae:	ef 92       	push	r14
    4eb0:	ff 92       	push	r15
    4eb2:	6b 01       	movw	r12, r22
    4eb4:	7c 01       	movw	r14, r24
    4eb6:	ca 01       	movw	r24, r20
    4eb8:	b9 01       	movw	r22, r18
	double_t X = Target - Current;
    4eba:	a7 01       	movw	r20, r14
    4ebc:	96 01       	movw	r18, r12
    4ebe:	0e 94 17 28 	call	0x502e	; 0x502e <__subsf3>
    4ec2:	c6 2e       	mov	r12, r22
    4ec4:	d7 2e       	mov	r13, r23
    4ec6:	e8 2e       	mov	r14, r24
    4ec8:	f9 2e       	mov	r15, r25
	if (fabs(X) < 180.0)
    4eca:	c7 01       	movw	r24, r14
    4ecc:	b6 01       	movw	r22, r12
    4ece:	9f 77       	andi	r25, 0x7F	; 127
    4ed0:	20 e0       	ldi	r18, 0x00	; 0
    4ed2:	30 e0       	ldi	r19, 0x00	; 0
    4ed4:	44 e3       	ldi	r20, 0x34	; 52
    4ed6:	53 e4       	ldi	r21, 0x43	; 67
    4ed8:	0e 94 de 28 	call	0x51bc	; 0x51bc <__cmpsf2>
    4edc:	88 23       	and	r24, r24
    4ede:	14 f1       	brlt	.+68     	; 0x4f24 <Heading_displacement_calc+0x7a>
	return X;

	if (X > 0.0)
    4ee0:	20 e0       	ldi	r18, 0x00	; 0
    4ee2:	30 e0       	ldi	r19, 0x00	; 0
    4ee4:	a9 01       	movw	r20, r18
    4ee6:	c7 01       	movw	r24, r14
    4ee8:	b6 01       	movw	r22, r12
    4eea:	0e 94 89 2a 	call	0x5512	; 0x5512 <__gesf2>
    4eee:	18 16       	cp	r1, r24
    4ef0:	6c f4       	brge	.+26     	; 0x4f0c <Heading_displacement_calc+0x62>
	{
		X -= 360.0;
    4ef2:	20 e0       	ldi	r18, 0x00	; 0
    4ef4:	30 e0       	ldi	r19, 0x00	; 0
    4ef6:	44 eb       	ldi	r20, 0xB4	; 180
    4ef8:	53 e4       	ldi	r21, 0x43	; 67
    4efa:	c7 01       	movw	r24, r14
    4efc:	b6 01       	movw	r22, r12
    4efe:	0e 94 17 28 	call	0x502e	; 0x502e <__subsf3>
    4f02:	c6 2e       	mov	r12, r22
    4f04:	d7 2e       	mov	r13, r23
    4f06:	e8 2e       	mov	r14, r24
    4f08:	f9 2e       	mov	r15, r25
    4f0a:	0c c0       	rjmp	.+24     	; 0x4f24 <Heading_displacement_calc+0x7a>
	}
	else
	{
		X += 360.0;
    4f0c:	20 e0       	ldi	r18, 0x00	; 0
    4f0e:	30 e0       	ldi	r19, 0x00	; 0
    4f10:	44 eb       	ldi	r20, 0xB4	; 180
    4f12:	53 e4       	ldi	r21, 0x43	; 67
    4f14:	c7 01       	movw	r24, r14
    4f16:	b6 01       	movw	r22, r12
    4f18:	0e 94 18 28 	call	0x5030	; 0x5030 <__addsf3>
    4f1c:	c6 2e       	mov	r12, r22
    4f1e:	d7 2e       	mov	r13, r23
    4f20:	e8 2e       	mov	r14, r24
    4f22:	f9 2e       	mov	r15, r25
	}

	return X;
}
    4f24:	6c 2d       	mov	r22, r12
    4f26:	7d 2d       	mov	r23, r13
    4f28:	8e 2d       	mov	r24, r14
    4f2a:	9f 2d       	mov	r25, r15
    4f2c:	ff 90       	pop	r15
    4f2e:	ef 90       	pop	r14
    4f30:	df 90       	pop	r13
    4f32:	cf 90       	pop	r12
    4f34:	08 95       	ret

00004f36 <__vector_11>:

static uint16_t AlarmTimer;

/*Прерывание, возникающее каждые 0,004096сек.*/
ISR (TIMER0_OVF_vect, ISR_NOBLOCK)
{
    4f36:	78 94       	sei
    4f38:	1f 92       	push	r1
    4f3a:	0f 92       	push	r0
    4f3c:	0f b6       	in	r0, 0x3f	; 63
    4f3e:	0f 92       	push	r0
    4f40:	11 24       	eor	r1, r1
    4f42:	2f 93       	push	r18
    4f44:	3f 93       	push	r19
    4f46:	4f 93       	push	r20
    4f48:	5f 93       	push	r21
    4f4a:	6f 93       	push	r22
    4f4c:	7f 93       	push	r23
    4f4e:	8f 93       	push	r24
    4f50:	9f 93       	push	r25
    4f52:	af 93       	push	r26
    4f54:	bf 93       	push	r27
    4f56:	ef 93       	push	r30
    4f58:	ff 93       	push	r31
	if (!BUSY)
    4f5a:	80 91 0c 01 	lds	r24, 0x010C
    4f5e:	81 11       	cpse	r24, r1
    4f60:	10 c0       	rjmp	.+32     	; 0x4f82 <__vector_11+0x4c>
	{
		BUSY = 1;
    4f62:	81 e0       	ldi	r24, 0x01	; 1
    4f64:	80 93 0c 01 	sts	0x010C, r24
		SensorsPoll();
    4f68:	0e 94 98 23 	call	0x4730	; 0x4730 <SensorsPoll>
		if(bit_is_clear(usRegHoldingBuf[MB_OFFSET+MB_MANUAL], 4))	//Автоматическое управление и инклинометр
    4f6c:	e5 e7       	ldi	r30, 0x75	; 117
    4f6e:	f4 e0       	ldi	r31, 0x04	; 4
    4f70:	84 89       	ldd	r24, Z+20	; 0x14
    4f72:	84 ff       	sbrs	r24, 4
		{
			RunPIDs();		
    4f74:	0e 94 39 23 	call	0x4672	; 0x4672 <RunPIDs>
		}
		Angular_Calc();
    4f78:	0e 94 3e 24 	call	0x487c	; 0x487c <Angular_Calc>
		BUSY = 0;
    4f7c:	10 92 0c 01 	sts	0x010C, r1
    4f80:	03 c0       	rjmp	.+6      	; 0x4f88 <__vector_11+0x52>
	}
	else
	{
		LED_On(LED_RED);
    4f82:	81 e0       	ldi	r24, 0x01	; 1
    4f84:	0e 94 bb 1b 	call	0x3776	; 0x3776 <LED_On>
	}
	
	AlarmTimer++;
    4f88:	80 91 0d 01 	lds	r24, 0x010D
    4f8c:	90 91 0e 01 	lds	r25, 0x010E
    4f90:	01 96       	adiw	r24, 0x01	; 1
    4f92:	90 93 0e 01 	sts	0x010E, r25
    4f96:	80 93 0d 01 	sts	0x010D, r24
	if (AlarmTimer>Alarm_Long * 2)
    4f9a:	20 91 99 00 	lds	r18, 0x0099
    4f9e:	30 91 9a 00 	lds	r19, 0x009A
    4fa2:	a9 01       	movw	r20, r18
    4fa4:	44 0f       	add	r20, r20
    4fa6:	55 1f       	adc	r21, r21
    4fa8:	48 17       	cp	r20, r24
    4faa:	59 07       	cpc	r21, r25
    4fac:	28 f4       	brcc	.+10     	; 0x4fb8 <__vector_11+0x82>
	{
		AlarmTimer=0;
    4fae:	10 92 0e 01 	sts	0x010E, r1
    4fb2:	10 92 0d 01 	sts	0x010D, r1
    4fb6:	10 c0       	rjmp	.+32     	; 0x4fd8 <__vector_11+0xa2>
	}
	
	if (AlarmTimer>Alarm_Long && bit_is_set(usRegHoldingBuf[MB_OFFSET+MB_SOUND], 1))
    4fb8:	28 17       	cp	r18, r24
    4fba:	39 07       	cpc	r19, r25
    4fbc:	68 f4       	brcc	.+26     	; 0x4fd8 <__vector_11+0xa2>
    4fbe:	e5 e7       	ldi	r30, 0x75	; 117
    4fc0:	f4 e0       	ldi	r31, 0x04	; 4
    4fc2:	84 8d       	ldd	r24, Z+28	; 0x1c
    4fc4:	81 ff       	sbrs	r24, 1
    4fc6:	08 c0       	rjmp	.+16     	; 0x4fd8 <__vector_11+0xa2>
	{
		usRegHoldingBuf[MB_OFFSET+MB_SOUND] |= 1;
    4fc8:	e1 e9       	ldi	r30, 0x91	; 145
    4fca:	f4 e0       	ldi	r31, 0x04	; 4
    4fcc:	80 81       	ld	r24, Z
    4fce:	91 81       	ldd	r25, Z+1	; 0x01
    4fd0:	81 60       	ori	r24, 0x01	; 1
    4fd2:	91 83       	std	Z+1, r25	; 0x01
    4fd4:	80 83       	st	Z, r24
    4fd6:	07 c0       	rjmp	.+14     	; 0x4fe6 <__vector_11+0xb0>
	}
	else
	{
		usRegHoldingBuf[MB_OFFSET+MB_SOUND] &= ~1;
    4fd8:	e1 e9       	ldi	r30, 0x91	; 145
    4fda:	f4 e0       	ldi	r31, 0x04	; 4
    4fdc:	80 81       	ld	r24, Z
    4fde:	91 81       	ldd	r25, Z+1	; 0x01
    4fe0:	8e 7f       	andi	r24, 0xFE	; 254
    4fe2:	91 83       	std	Z+1, r25	; 0x01
    4fe4:	80 83       	st	Z, r24
	}
	
	if (HCSR04_Timer_Prescaller >= 20)
    4fe6:	80 91 12 01 	lds	r24, 0x0112
    4fea:	84 31       	cpi	r24, 0x14	; 20
    4fec:	48 f0       	brcs	.+18     	; 0x5000 <__vector_11+0xca>
	{
		HCSR04_Timer_Prescaller = 0;
    4fee:	10 92 12 01 	sts	0x0112, r1
		PORTD |= 1<<PORTD7;	
    4ff2:	97 9a       	sbi	0x12, 7	; 18
    4ff4:	8a e3       	ldi	r24, 0x3A	; 58
    4ff6:	8a 95       	dec	r24
    4ff8:	f1 f7       	brne	.-4      	; 0x4ff6 <__vector_11+0xc0>
    4ffa:	00 c0       	rjmp	.+0      	; 0x4ffc <__vector_11+0xc6>
		_delay_us(11);
		PORTD &= ~(1<<PORTD7);	
    4ffc:	97 98       	cbi	0x12, 7	; 18
    4ffe:	06 c0       	rjmp	.+12     	; 0x500c <__vector_11+0xd6>
	} 
	else
	{
		PORTD &= ~(1<<PORTD7);
    5000:	97 98       	cbi	0x12, 7	; 18
		HCSR04_Timer_Prescaller++;
    5002:	80 91 12 01 	lds	r24, 0x0112
    5006:	8f 5f       	subi	r24, 0xFF	; 255
    5008:	80 93 12 01 	sts	0x0112, r24
	}
    500c:	ff 91       	pop	r31
    500e:	ef 91       	pop	r30
    5010:	bf 91       	pop	r27
    5012:	af 91       	pop	r26
    5014:	9f 91       	pop	r25
    5016:	8f 91       	pop	r24
    5018:	7f 91       	pop	r23
    501a:	6f 91       	pop	r22
    501c:	5f 91       	pop	r21
    501e:	4f 91       	pop	r20
    5020:	3f 91       	pop	r19
    5022:	2f 91       	pop	r18
    5024:	0f 90       	pop	r0
    5026:	0f be       	out	0x3f, r0	; 63
    5028:	0f 90       	pop	r0
    502a:	1f 90       	pop	r1
    502c:	18 95       	reti

0000502e <__subsf3>:
    502e:	50 58       	subi	r21, 0x80	; 128

00005030 <__addsf3>:
    5030:	bb 27       	eor	r27, r27
    5032:	aa 27       	eor	r26, r26
    5034:	0e d0       	rcall	.+28     	; 0x5052 <__addsf3x>
    5036:	22 c2       	rjmp	.+1092   	; 0x547c <__fp_round>
    5038:	eb d1       	rcall	.+982    	; 0x5410 <__fp_pscA>
    503a:	30 f0       	brcs	.+12     	; 0x5048 <__addsf3+0x18>
    503c:	f0 d1       	rcall	.+992    	; 0x541e <__fp_pscB>
    503e:	20 f0       	brcs	.+8      	; 0x5048 <__addsf3+0x18>
    5040:	31 f4       	brne	.+12     	; 0x504e <__addsf3+0x1e>
    5042:	9f 3f       	cpi	r25, 0xFF	; 255
    5044:	11 f4       	brne	.+4      	; 0x504a <__addsf3+0x1a>
    5046:	1e f4       	brtc	.+6      	; 0x504e <__addsf3+0x1e>
    5048:	bb c1       	rjmp	.+886    	; 0x53c0 <__fp_nan>
    504a:	0e f4       	brtc	.+2      	; 0x504e <__addsf3+0x1e>
    504c:	e0 95       	com	r30
    504e:	e7 fb       	bst	r30, 7
    5050:	b1 c1       	rjmp	.+866    	; 0x53b4 <__fp_inf>

00005052 <__addsf3x>:
    5052:	e9 2f       	mov	r30, r25
    5054:	35 d2       	rcall	.+1130   	; 0x54c0 <__fp_split3>
    5056:	80 f3       	brcs	.-32     	; 0x5038 <__addsf3+0x8>
    5058:	ba 17       	cp	r27, r26
    505a:	62 07       	cpc	r22, r18
    505c:	73 07       	cpc	r23, r19
    505e:	84 07       	cpc	r24, r20
    5060:	95 07       	cpc	r25, r21
    5062:	18 f0       	brcs	.+6      	; 0x506a <__addsf3x+0x18>
    5064:	71 f4       	brne	.+28     	; 0x5082 <__addsf3x+0x30>
    5066:	9e f5       	brtc	.+102    	; 0x50ce <__addsf3x+0x7c>
    5068:	4d c2       	rjmp	.+1178   	; 0x5504 <__fp_zero>
    506a:	0e f4       	brtc	.+2      	; 0x506e <__addsf3x+0x1c>
    506c:	e0 95       	com	r30
    506e:	0b 2e       	mov	r0, r27
    5070:	ba 2f       	mov	r27, r26
    5072:	a0 2d       	mov	r26, r0
    5074:	0b 01       	movw	r0, r22
    5076:	b9 01       	movw	r22, r18
    5078:	90 01       	movw	r18, r0
    507a:	0c 01       	movw	r0, r24
    507c:	ca 01       	movw	r24, r20
    507e:	a0 01       	movw	r20, r0
    5080:	11 24       	eor	r1, r1
    5082:	ff 27       	eor	r31, r31
    5084:	59 1b       	sub	r21, r25
    5086:	99 f0       	breq	.+38     	; 0x50ae <__addsf3x+0x5c>
    5088:	59 3f       	cpi	r21, 0xF9	; 249
    508a:	50 f4       	brcc	.+20     	; 0x50a0 <__addsf3x+0x4e>
    508c:	50 3e       	cpi	r21, 0xE0	; 224
    508e:	68 f1       	brcs	.+90     	; 0x50ea <__addsf3x+0x98>
    5090:	1a 16       	cp	r1, r26
    5092:	f0 40       	sbci	r31, 0x00	; 0
    5094:	a2 2f       	mov	r26, r18
    5096:	23 2f       	mov	r18, r19
    5098:	34 2f       	mov	r19, r20
    509a:	44 27       	eor	r20, r20
    509c:	58 5f       	subi	r21, 0xF8	; 248
    509e:	f3 cf       	rjmp	.-26     	; 0x5086 <__addsf3x+0x34>
    50a0:	46 95       	lsr	r20
    50a2:	37 95       	ror	r19
    50a4:	27 95       	ror	r18
    50a6:	a7 95       	ror	r26
    50a8:	f0 40       	sbci	r31, 0x00	; 0
    50aa:	53 95       	inc	r21
    50ac:	c9 f7       	brne	.-14     	; 0x50a0 <__addsf3x+0x4e>
    50ae:	7e f4       	brtc	.+30     	; 0x50ce <__addsf3x+0x7c>
    50b0:	1f 16       	cp	r1, r31
    50b2:	ba 0b       	sbc	r27, r26
    50b4:	62 0b       	sbc	r22, r18
    50b6:	73 0b       	sbc	r23, r19
    50b8:	84 0b       	sbc	r24, r20
    50ba:	ba f0       	brmi	.+46     	; 0x50ea <__addsf3x+0x98>
    50bc:	91 50       	subi	r25, 0x01	; 1
    50be:	a1 f0       	breq	.+40     	; 0x50e8 <__addsf3x+0x96>
    50c0:	ff 0f       	add	r31, r31
    50c2:	bb 1f       	adc	r27, r27
    50c4:	66 1f       	adc	r22, r22
    50c6:	77 1f       	adc	r23, r23
    50c8:	88 1f       	adc	r24, r24
    50ca:	c2 f7       	brpl	.-16     	; 0x50bc <__addsf3x+0x6a>
    50cc:	0e c0       	rjmp	.+28     	; 0x50ea <__addsf3x+0x98>
    50ce:	ba 0f       	add	r27, r26
    50d0:	62 1f       	adc	r22, r18
    50d2:	73 1f       	adc	r23, r19
    50d4:	84 1f       	adc	r24, r20
    50d6:	48 f4       	brcc	.+18     	; 0x50ea <__addsf3x+0x98>
    50d8:	87 95       	ror	r24
    50da:	77 95       	ror	r23
    50dc:	67 95       	ror	r22
    50de:	b7 95       	ror	r27
    50e0:	f7 95       	ror	r31
    50e2:	9e 3f       	cpi	r25, 0xFE	; 254
    50e4:	08 f0       	brcs	.+2      	; 0x50e8 <__addsf3x+0x96>
    50e6:	b3 cf       	rjmp	.-154    	; 0x504e <__addsf3+0x1e>
    50e8:	93 95       	inc	r25
    50ea:	88 0f       	add	r24, r24
    50ec:	08 f0       	brcs	.+2      	; 0x50f0 <__addsf3x+0x9e>
    50ee:	99 27       	eor	r25, r25
    50f0:	ee 0f       	add	r30, r30
    50f2:	97 95       	ror	r25
    50f4:	87 95       	ror	r24
    50f6:	08 95       	ret
    50f8:	8b d1       	rcall	.+790    	; 0x5410 <__fp_pscA>
    50fa:	58 f0       	brcs	.+22     	; 0x5112 <__addsf3x+0xc0>
    50fc:	80 e8       	ldi	r24, 0x80	; 128
    50fe:	91 e0       	ldi	r25, 0x01	; 1
    5100:	09 f4       	brne	.+2      	; 0x5104 <__addsf3x+0xb2>
    5102:	9e ef       	ldi	r25, 0xFE	; 254
    5104:	8c d1       	rcall	.+792    	; 0x541e <__fp_pscB>
    5106:	28 f0       	brcs	.+10     	; 0x5112 <__addsf3x+0xc0>
    5108:	40 e8       	ldi	r20, 0x80	; 128
    510a:	51 e0       	ldi	r21, 0x01	; 1
    510c:	59 f4       	brne	.+22     	; 0x5124 <atan2+0xe>
    510e:	5e ef       	ldi	r21, 0xFE	; 254
    5110:	09 c0       	rjmp	.+18     	; 0x5124 <atan2+0xe>
    5112:	56 c1       	rjmp	.+684    	; 0x53c0 <__fp_nan>
    5114:	f7 c1       	rjmp	.+1006   	; 0x5504 <__fp_zero>

00005116 <atan2>:
    5116:	e9 2f       	mov	r30, r25
    5118:	e0 78       	andi	r30, 0x80	; 128
    511a:	d2 d1       	rcall	.+932    	; 0x54c0 <__fp_split3>
    511c:	68 f3       	brcs	.-38     	; 0x50f8 <__addsf3x+0xa6>
    511e:	09 2e       	mov	r0, r25
    5120:	05 2a       	or	r0, r21
    5122:	c1 f3       	breq	.-16     	; 0x5114 <__addsf3x+0xc2>
    5124:	26 17       	cp	r18, r22
    5126:	37 07       	cpc	r19, r23
    5128:	48 07       	cpc	r20, r24
    512a:	59 07       	cpc	r21, r25
    512c:	38 f0       	brcs	.+14     	; 0x513c <atan2+0x26>
    512e:	0e 2e       	mov	r0, r30
    5130:	07 f8       	bld	r0, 7
    5132:	e0 25       	eor	r30, r0
    5134:	69 f0       	breq	.+26     	; 0x5150 <atan2+0x3a>
    5136:	e0 25       	eor	r30, r0
    5138:	e0 64       	ori	r30, 0x40	; 64
    513a:	0a c0       	rjmp	.+20     	; 0x5150 <atan2+0x3a>
    513c:	ef 63       	ori	r30, 0x3F	; 63
    513e:	07 f8       	bld	r0, 7
    5140:	00 94       	com	r0
    5142:	07 fa       	bst	r0, 7
    5144:	db 01       	movw	r26, r22
    5146:	b9 01       	movw	r22, r18
    5148:	9d 01       	movw	r18, r26
    514a:	dc 01       	movw	r26, r24
    514c:	ca 01       	movw	r24, r20
    514e:	ad 01       	movw	r20, r26
    5150:	ef 93       	push	r30
    5152:	4a d0       	rcall	.+148    	; 0x51e8 <__divsf3_pse>
    5154:	93 d1       	rcall	.+806    	; 0x547c <__fp_round>
    5156:	0a d0       	rcall	.+20     	; 0x516c <atan>
    5158:	5f 91       	pop	r21
    515a:	55 23       	and	r21, r21
    515c:	31 f0       	breq	.+12     	; 0x516a <atan2+0x54>
    515e:	2b ed       	ldi	r18, 0xDB	; 219
    5160:	3f e0       	ldi	r19, 0x0F	; 15
    5162:	49 e4       	ldi	r20, 0x49	; 73
    5164:	50 fd       	sbrc	r21, 0
    5166:	49 ec       	ldi	r20, 0xC9	; 201
    5168:	63 cf       	rjmp	.-314    	; 0x5030 <__addsf3>
    516a:	08 95       	ret

0000516c <atan>:
    516c:	df 93       	push	r29
    516e:	dd 27       	eor	r29, r29
    5170:	b9 2f       	mov	r27, r25
    5172:	bf 77       	andi	r27, 0x7F	; 127
    5174:	40 e8       	ldi	r20, 0x80	; 128
    5176:	5f e3       	ldi	r21, 0x3F	; 63
    5178:	16 16       	cp	r1, r22
    517a:	17 06       	cpc	r1, r23
    517c:	48 07       	cpc	r20, r24
    517e:	5b 07       	cpc	r21, r27
    5180:	10 f4       	brcc	.+4      	; 0x5186 <atan+0x1a>
    5182:	d9 2f       	mov	r29, r25
    5184:	ca d1       	rcall	.+916    	; 0x551a <inverse>
    5186:	9f 93       	push	r25
    5188:	8f 93       	push	r24
    518a:	7f 93       	push	r23
    518c:	6f 93       	push	r22
    518e:	77 d2       	rcall	.+1262   	; 0x567e <square>
    5190:	e4 e5       	ldi	r30, 0x54	; 84
    5192:	f0 e0       	ldi	r31, 0x00	; 0
    5194:	18 d1       	rcall	.+560    	; 0x53c6 <__fp_powser>
    5196:	72 d1       	rcall	.+740    	; 0x547c <__fp_round>
    5198:	2f 91       	pop	r18
    519a:	3f 91       	pop	r19
    519c:	4f 91       	pop	r20
    519e:	5f 91       	pop	r21
    51a0:	cf d1       	rcall	.+926    	; 0x5540 <__mulsf3x>
    51a2:	dd 23       	and	r29, r29
    51a4:	49 f0       	breq	.+18     	; 0x51b8 <atan+0x4c>
    51a6:	90 58       	subi	r25, 0x80	; 128
    51a8:	a2 ea       	ldi	r26, 0xA2	; 162
    51aa:	2a ed       	ldi	r18, 0xDA	; 218
    51ac:	3f e0       	ldi	r19, 0x0F	; 15
    51ae:	49 ec       	ldi	r20, 0xC9	; 201
    51b0:	5f e3       	ldi	r21, 0x3F	; 63
    51b2:	d0 78       	andi	r29, 0x80	; 128
    51b4:	5d 27       	eor	r21, r29
    51b6:	4d df       	rcall	.-358    	; 0x5052 <__addsf3x>
    51b8:	df 91       	pop	r29
    51ba:	60 c1       	rjmp	.+704    	; 0x547c <__fp_round>

000051bc <__cmpsf2>:
    51bc:	d7 d0       	rcall	.+430    	; 0x536c <__fp_cmp>
    51be:	08 f4       	brcc	.+2      	; 0x51c2 <__cmpsf2+0x6>
    51c0:	81 e0       	ldi	r24, 0x01	; 1
    51c2:	08 95       	ret

000051c4 <cos>:
    51c4:	34 d1       	rcall	.+616    	; 0x542e <__fp_rempio2>
    51c6:	e3 95       	inc	r30
    51c8:	6a c1       	rjmp	.+724    	; 0x549e <__fp_sinus>

000051ca <__divsf3>:
    51ca:	0c d0       	rcall	.+24     	; 0x51e4 <__divsf3x>
    51cc:	57 c1       	rjmp	.+686    	; 0x547c <__fp_round>
    51ce:	27 d1       	rcall	.+590    	; 0x541e <__fp_pscB>
    51d0:	40 f0       	brcs	.+16     	; 0x51e2 <__divsf3+0x18>
    51d2:	1e d1       	rcall	.+572    	; 0x5410 <__fp_pscA>
    51d4:	30 f0       	brcs	.+12     	; 0x51e2 <__divsf3+0x18>
    51d6:	21 f4       	brne	.+8      	; 0x51e0 <__divsf3+0x16>
    51d8:	5f 3f       	cpi	r21, 0xFF	; 255
    51da:	19 f0       	breq	.+6      	; 0x51e2 <__divsf3+0x18>
    51dc:	eb c0       	rjmp	.+470    	; 0x53b4 <__fp_inf>
    51de:	51 11       	cpse	r21, r1
    51e0:	92 c1       	rjmp	.+804    	; 0x5506 <__fp_szero>
    51e2:	ee c0       	rjmp	.+476    	; 0x53c0 <__fp_nan>

000051e4 <__divsf3x>:
    51e4:	6d d1       	rcall	.+730    	; 0x54c0 <__fp_split3>
    51e6:	98 f3       	brcs	.-26     	; 0x51ce <__divsf3+0x4>

000051e8 <__divsf3_pse>:
    51e8:	99 23       	and	r25, r25
    51ea:	c9 f3       	breq	.-14     	; 0x51de <__divsf3+0x14>
    51ec:	55 23       	and	r21, r21
    51ee:	b1 f3       	breq	.-20     	; 0x51dc <__divsf3+0x12>
    51f0:	95 1b       	sub	r25, r21
    51f2:	55 0b       	sbc	r21, r21
    51f4:	bb 27       	eor	r27, r27
    51f6:	aa 27       	eor	r26, r26
    51f8:	62 17       	cp	r22, r18
    51fa:	73 07       	cpc	r23, r19
    51fc:	84 07       	cpc	r24, r20
    51fe:	38 f0       	brcs	.+14     	; 0x520e <__divsf3_pse+0x26>
    5200:	9f 5f       	subi	r25, 0xFF	; 255
    5202:	5f 4f       	sbci	r21, 0xFF	; 255
    5204:	22 0f       	add	r18, r18
    5206:	33 1f       	adc	r19, r19
    5208:	44 1f       	adc	r20, r20
    520a:	aa 1f       	adc	r26, r26
    520c:	a9 f3       	breq	.-22     	; 0x51f8 <__divsf3_pse+0x10>
    520e:	33 d0       	rcall	.+102    	; 0x5276 <__divsf3_pse+0x8e>
    5210:	0e 2e       	mov	r0, r30
    5212:	3a f0       	brmi	.+14     	; 0x5222 <__divsf3_pse+0x3a>
    5214:	e0 e8       	ldi	r30, 0x80	; 128
    5216:	30 d0       	rcall	.+96     	; 0x5278 <__divsf3_pse+0x90>
    5218:	91 50       	subi	r25, 0x01	; 1
    521a:	50 40       	sbci	r21, 0x00	; 0
    521c:	e6 95       	lsr	r30
    521e:	00 1c       	adc	r0, r0
    5220:	ca f7       	brpl	.-14     	; 0x5214 <__divsf3_pse+0x2c>
    5222:	29 d0       	rcall	.+82     	; 0x5276 <__divsf3_pse+0x8e>
    5224:	fe 2f       	mov	r31, r30
    5226:	27 d0       	rcall	.+78     	; 0x5276 <__divsf3_pse+0x8e>
    5228:	66 0f       	add	r22, r22
    522a:	77 1f       	adc	r23, r23
    522c:	88 1f       	adc	r24, r24
    522e:	bb 1f       	adc	r27, r27
    5230:	26 17       	cp	r18, r22
    5232:	37 07       	cpc	r19, r23
    5234:	48 07       	cpc	r20, r24
    5236:	ab 07       	cpc	r26, r27
    5238:	b0 e8       	ldi	r27, 0x80	; 128
    523a:	09 f0       	breq	.+2      	; 0x523e <__divsf3_pse+0x56>
    523c:	bb 0b       	sbc	r27, r27
    523e:	80 2d       	mov	r24, r0
    5240:	bf 01       	movw	r22, r30
    5242:	ff 27       	eor	r31, r31
    5244:	93 58       	subi	r25, 0x83	; 131
    5246:	5f 4f       	sbci	r21, 0xFF	; 255
    5248:	2a f0       	brmi	.+10     	; 0x5254 <__divsf3_pse+0x6c>
    524a:	9e 3f       	cpi	r25, 0xFE	; 254
    524c:	51 05       	cpc	r21, r1
    524e:	68 f0       	brcs	.+26     	; 0x526a <__divsf3_pse+0x82>
    5250:	b1 c0       	rjmp	.+354    	; 0x53b4 <__fp_inf>
    5252:	59 c1       	rjmp	.+690    	; 0x5506 <__fp_szero>
    5254:	5f 3f       	cpi	r21, 0xFF	; 255
    5256:	ec f3       	brlt	.-6      	; 0x5252 <__divsf3_pse+0x6a>
    5258:	98 3e       	cpi	r25, 0xE8	; 232
    525a:	dc f3       	brlt	.-10     	; 0x5252 <__divsf3_pse+0x6a>
    525c:	86 95       	lsr	r24
    525e:	77 95       	ror	r23
    5260:	67 95       	ror	r22
    5262:	b7 95       	ror	r27
    5264:	f7 95       	ror	r31
    5266:	9f 5f       	subi	r25, 0xFF	; 255
    5268:	c9 f7       	brne	.-14     	; 0x525c <__divsf3_pse+0x74>
    526a:	88 0f       	add	r24, r24
    526c:	91 1d       	adc	r25, r1
    526e:	96 95       	lsr	r25
    5270:	87 95       	ror	r24
    5272:	97 f9       	bld	r25, 7
    5274:	08 95       	ret
    5276:	e1 e0       	ldi	r30, 0x01	; 1
    5278:	66 0f       	add	r22, r22
    527a:	77 1f       	adc	r23, r23
    527c:	88 1f       	adc	r24, r24
    527e:	bb 1f       	adc	r27, r27
    5280:	62 17       	cp	r22, r18
    5282:	73 07       	cpc	r23, r19
    5284:	84 07       	cpc	r24, r20
    5286:	ba 07       	cpc	r27, r26
    5288:	20 f0       	brcs	.+8      	; 0x5292 <__divsf3_pse+0xaa>
    528a:	62 1b       	sub	r22, r18
    528c:	73 0b       	sbc	r23, r19
    528e:	84 0b       	sbc	r24, r20
    5290:	ba 0b       	sbc	r27, r26
    5292:	ee 1f       	adc	r30, r30
    5294:	88 f7       	brcc	.-30     	; 0x5278 <__divsf3_pse+0x90>
    5296:	e0 95       	com	r30
    5298:	08 95       	ret

0000529a <__fixunssfsi>:
    529a:	1a d1       	rcall	.+564    	; 0x54d0 <__fp_splitA>
    529c:	88 f0       	brcs	.+34     	; 0x52c0 <__fixunssfsi+0x26>
    529e:	9f 57       	subi	r25, 0x7F	; 127
    52a0:	90 f0       	brcs	.+36     	; 0x52c6 <__fixunssfsi+0x2c>
    52a2:	b9 2f       	mov	r27, r25
    52a4:	99 27       	eor	r25, r25
    52a6:	b7 51       	subi	r27, 0x17	; 23
    52a8:	a0 f0       	brcs	.+40     	; 0x52d2 <__fixunssfsi+0x38>
    52aa:	d1 f0       	breq	.+52     	; 0x52e0 <__fixunssfsi+0x46>
    52ac:	66 0f       	add	r22, r22
    52ae:	77 1f       	adc	r23, r23
    52b0:	88 1f       	adc	r24, r24
    52b2:	99 1f       	adc	r25, r25
    52b4:	1a f0       	brmi	.+6      	; 0x52bc <__fixunssfsi+0x22>
    52b6:	ba 95       	dec	r27
    52b8:	c9 f7       	brne	.-14     	; 0x52ac <__fixunssfsi+0x12>
    52ba:	12 c0       	rjmp	.+36     	; 0x52e0 <__fixunssfsi+0x46>
    52bc:	b1 30       	cpi	r27, 0x01	; 1
    52be:	81 f0       	breq	.+32     	; 0x52e0 <__fixunssfsi+0x46>
    52c0:	21 d1       	rcall	.+578    	; 0x5504 <__fp_zero>
    52c2:	b1 e0       	ldi	r27, 0x01	; 1
    52c4:	08 95       	ret
    52c6:	1e c1       	rjmp	.+572    	; 0x5504 <__fp_zero>
    52c8:	67 2f       	mov	r22, r23
    52ca:	78 2f       	mov	r23, r24
    52cc:	88 27       	eor	r24, r24
    52ce:	b8 5f       	subi	r27, 0xF8	; 248
    52d0:	39 f0       	breq	.+14     	; 0x52e0 <__fixunssfsi+0x46>
    52d2:	b9 3f       	cpi	r27, 0xF9	; 249
    52d4:	cc f3       	brlt	.-14     	; 0x52c8 <__fixunssfsi+0x2e>
    52d6:	86 95       	lsr	r24
    52d8:	77 95       	ror	r23
    52da:	67 95       	ror	r22
    52dc:	b3 95       	inc	r27
    52de:	d9 f7       	brne	.-10     	; 0x52d6 <__fixunssfsi+0x3c>
    52e0:	3e f4       	brtc	.+14     	; 0x52f0 <__fixunssfsi+0x56>
    52e2:	90 95       	com	r25
    52e4:	80 95       	com	r24
    52e6:	70 95       	com	r23
    52e8:	61 95       	neg	r22
    52ea:	7f 4f       	sbci	r23, 0xFF	; 255
    52ec:	8f 4f       	sbci	r24, 0xFF	; 255
    52ee:	9f 4f       	sbci	r25, 0xFF	; 255
    52f0:	08 95       	ret

000052f2 <__floatunsisf>:
    52f2:	e8 94       	clt
    52f4:	09 c0       	rjmp	.+18     	; 0x5308 <__floatsisf+0x12>

000052f6 <__floatsisf>:
    52f6:	97 fb       	bst	r25, 7
    52f8:	3e f4       	brtc	.+14     	; 0x5308 <__floatsisf+0x12>
    52fa:	90 95       	com	r25
    52fc:	80 95       	com	r24
    52fe:	70 95       	com	r23
    5300:	61 95       	neg	r22
    5302:	7f 4f       	sbci	r23, 0xFF	; 255
    5304:	8f 4f       	sbci	r24, 0xFF	; 255
    5306:	9f 4f       	sbci	r25, 0xFF	; 255
    5308:	99 23       	and	r25, r25
    530a:	a9 f0       	breq	.+42     	; 0x5336 <__floatsisf+0x40>
    530c:	f9 2f       	mov	r31, r25
    530e:	96 e9       	ldi	r25, 0x96	; 150
    5310:	bb 27       	eor	r27, r27
    5312:	93 95       	inc	r25
    5314:	f6 95       	lsr	r31
    5316:	87 95       	ror	r24
    5318:	77 95       	ror	r23
    531a:	67 95       	ror	r22
    531c:	b7 95       	ror	r27
    531e:	f1 11       	cpse	r31, r1
    5320:	f8 cf       	rjmp	.-16     	; 0x5312 <__floatsisf+0x1c>
    5322:	fa f4       	brpl	.+62     	; 0x5362 <__floatsisf+0x6c>
    5324:	bb 0f       	add	r27, r27
    5326:	11 f4       	brne	.+4      	; 0x532c <__floatsisf+0x36>
    5328:	60 ff       	sbrs	r22, 0
    532a:	1b c0       	rjmp	.+54     	; 0x5362 <__floatsisf+0x6c>
    532c:	6f 5f       	subi	r22, 0xFF	; 255
    532e:	7f 4f       	sbci	r23, 0xFF	; 255
    5330:	8f 4f       	sbci	r24, 0xFF	; 255
    5332:	9f 4f       	sbci	r25, 0xFF	; 255
    5334:	16 c0       	rjmp	.+44     	; 0x5362 <__floatsisf+0x6c>
    5336:	88 23       	and	r24, r24
    5338:	11 f0       	breq	.+4      	; 0x533e <__floatsisf+0x48>
    533a:	96 e9       	ldi	r25, 0x96	; 150
    533c:	11 c0       	rjmp	.+34     	; 0x5360 <__floatsisf+0x6a>
    533e:	77 23       	and	r23, r23
    5340:	21 f0       	breq	.+8      	; 0x534a <__floatsisf+0x54>
    5342:	9e e8       	ldi	r25, 0x8E	; 142
    5344:	87 2f       	mov	r24, r23
    5346:	76 2f       	mov	r23, r22
    5348:	05 c0       	rjmp	.+10     	; 0x5354 <__floatsisf+0x5e>
    534a:	66 23       	and	r22, r22
    534c:	71 f0       	breq	.+28     	; 0x536a <__floatsisf+0x74>
    534e:	96 e8       	ldi	r25, 0x86	; 134
    5350:	86 2f       	mov	r24, r22
    5352:	70 e0       	ldi	r23, 0x00	; 0
    5354:	60 e0       	ldi	r22, 0x00	; 0
    5356:	2a f0       	brmi	.+10     	; 0x5362 <__floatsisf+0x6c>
    5358:	9a 95       	dec	r25
    535a:	66 0f       	add	r22, r22
    535c:	77 1f       	adc	r23, r23
    535e:	88 1f       	adc	r24, r24
    5360:	da f7       	brpl	.-10     	; 0x5358 <__floatsisf+0x62>
    5362:	88 0f       	add	r24, r24
    5364:	96 95       	lsr	r25
    5366:	87 95       	ror	r24
    5368:	97 f9       	bld	r25, 7
    536a:	08 95       	ret

0000536c <__fp_cmp>:
    536c:	99 0f       	add	r25, r25
    536e:	00 08       	sbc	r0, r0
    5370:	55 0f       	add	r21, r21
    5372:	aa 0b       	sbc	r26, r26
    5374:	e0 e8       	ldi	r30, 0x80	; 128
    5376:	fe ef       	ldi	r31, 0xFE	; 254
    5378:	16 16       	cp	r1, r22
    537a:	17 06       	cpc	r1, r23
    537c:	e8 07       	cpc	r30, r24
    537e:	f9 07       	cpc	r31, r25
    5380:	c0 f0       	brcs	.+48     	; 0x53b2 <__fp_cmp+0x46>
    5382:	12 16       	cp	r1, r18
    5384:	13 06       	cpc	r1, r19
    5386:	e4 07       	cpc	r30, r20
    5388:	f5 07       	cpc	r31, r21
    538a:	98 f0       	brcs	.+38     	; 0x53b2 <__fp_cmp+0x46>
    538c:	62 1b       	sub	r22, r18
    538e:	73 0b       	sbc	r23, r19
    5390:	84 0b       	sbc	r24, r20
    5392:	95 0b       	sbc	r25, r21
    5394:	39 f4       	brne	.+14     	; 0x53a4 <__fp_cmp+0x38>
    5396:	0a 26       	eor	r0, r26
    5398:	61 f0       	breq	.+24     	; 0x53b2 <__fp_cmp+0x46>
    539a:	23 2b       	or	r18, r19
    539c:	24 2b       	or	r18, r20
    539e:	25 2b       	or	r18, r21
    53a0:	21 f4       	brne	.+8      	; 0x53aa <__fp_cmp+0x3e>
    53a2:	08 95       	ret
    53a4:	0a 26       	eor	r0, r26
    53a6:	09 f4       	brne	.+2      	; 0x53aa <__fp_cmp+0x3e>
    53a8:	a1 40       	sbci	r26, 0x01	; 1
    53aa:	a6 95       	lsr	r26
    53ac:	8f ef       	ldi	r24, 0xFF	; 255
    53ae:	81 1d       	adc	r24, r1
    53b0:	81 1d       	adc	r24, r1
    53b2:	08 95       	ret

000053b4 <__fp_inf>:
    53b4:	97 f9       	bld	r25, 7
    53b6:	9f 67       	ori	r25, 0x7F	; 127
    53b8:	80 e8       	ldi	r24, 0x80	; 128
    53ba:	70 e0       	ldi	r23, 0x00	; 0
    53bc:	60 e0       	ldi	r22, 0x00	; 0
    53be:	08 95       	ret

000053c0 <__fp_nan>:
    53c0:	9f ef       	ldi	r25, 0xFF	; 255
    53c2:	80 ec       	ldi	r24, 0xC0	; 192
    53c4:	08 95       	ret

000053c6 <__fp_powser>:
    53c6:	df 93       	push	r29
    53c8:	cf 93       	push	r28
    53ca:	1f 93       	push	r17
    53cc:	0f 93       	push	r16
    53ce:	ff 92       	push	r15
    53d0:	ef 92       	push	r14
    53d2:	df 92       	push	r13
    53d4:	7b 01       	movw	r14, r22
    53d6:	8c 01       	movw	r16, r24
    53d8:	68 94       	set
    53da:	05 c0       	rjmp	.+10     	; 0x53e6 <__fp_powser+0x20>
    53dc:	da 2e       	mov	r13, r26
    53de:	ef 01       	movw	r28, r30
    53e0:	af d0       	rcall	.+350    	; 0x5540 <__mulsf3x>
    53e2:	fe 01       	movw	r30, r28
    53e4:	e8 94       	clt
    53e6:	a5 91       	lpm	r26, Z+
    53e8:	25 91       	lpm	r18, Z+
    53ea:	35 91       	lpm	r19, Z+
    53ec:	45 91       	lpm	r20, Z+
    53ee:	55 91       	lpm	r21, Z+
    53f0:	ae f3       	brts	.-22     	; 0x53dc <__fp_powser+0x16>
    53f2:	ef 01       	movw	r28, r30
    53f4:	2e de       	rcall	.-932    	; 0x5052 <__addsf3x>
    53f6:	fe 01       	movw	r30, r28
    53f8:	97 01       	movw	r18, r14
    53fa:	a8 01       	movw	r20, r16
    53fc:	da 94       	dec	r13
    53fe:	79 f7       	brne	.-34     	; 0x53de <__fp_powser+0x18>
    5400:	df 90       	pop	r13
    5402:	ef 90       	pop	r14
    5404:	ff 90       	pop	r15
    5406:	0f 91       	pop	r16
    5408:	1f 91       	pop	r17
    540a:	cf 91       	pop	r28
    540c:	df 91       	pop	r29
    540e:	08 95       	ret

00005410 <__fp_pscA>:
    5410:	00 24       	eor	r0, r0
    5412:	0a 94       	dec	r0
    5414:	16 16       	cp	r1, r22
    5416:	17 06       	cpc	r1, r23
    5418:	18 06       	cpc	r1, r24
    541a:	09 06       	cpc	r0, r25
    541c:	08 95       	ret

0000541e <__fp_pscB>:
    541e:	00 24       	eor	r0, r0
    5420:	0a 94       	dec	r0
    5422:	12 16       	cp	r1, r18
    5424:	13 06       	cpc	r1, r19
    5426:	14 06       	cpc	r1, r20
    5428:	05 06       	cpc	r0, r21
    542a:	08 95       	ret
    542c:	c9 cf       	rjmp	.-110    	; 0x53c0 <__fp_nan>

0000542e <__fp_rempio2>:
    542e:	50 d0       	rcall	.+160    	; 0x54d0 <__fp_splitA>
    5430:	e8 f3       	brcs	.-6      	; 0x542c <__fp_pscB+0xe>
    5432:	e8 94       	clt
    5434:	e0 e0       	ldi	r30, 0x00	; 0
    5436:	bb 27       	eor	r27, r27
    5438:	9f 57       	subi	r25, 0x7F	; 127
    543a:	f0 f0       	brcs	.+60     	; 0x5478 <__fp_rempio2+0x4a>
    543c:	2a ed       	ldi	r18, 0xDA	; 218
    543e:	3f e0       	ldi	r19, 0x0F	; 15
    5440:	49 ec       	ldi	r20, 0xC9	; 201
    5442:	06 c0       	rjmp	.+12     	; 0x5450 <__fp_rempio2+0x22>
    5444:	ee 0f       	add	r30, r30
    5446:	bb 0f       	add	r27, r27
    5448:	66 1f       	adc	r22, r22
    544a:	77 1f       	adc	r23, r23
    544c:	88 1f       	adc	r24, r24
    544e:	28 f0       	brcs	.+10     	; 0x545a <__fp_rempio2+0x2c>
    5450:	b2 3a       	cpi	r27, 0xA2	; 162
    5452:	62 07       	cpc	r22, r18
    5454:	73 07       	cpc	r23, r19
    5456:	84 07       	cpc	r24, r20
    5458:	28 f0       	brcs	.+10     	; 0x5464 <__fp_rempio2+0x36>
    545a:	b2 5a       	subi	r27, 0xA2	; 162
    545c:	62 0b       	sbc	r22, r18
    545e:	73 0b       	sbc	r23, r19
    5460:	84 0b       	sbc	r24, r20
    5462:	e3 95       	inc	r30
    5464:	9a 95       	dec	r25
    5466:	72 f7       	brpl	.-36     	; 0x5444 <__fp_rempio2+0x16>
    5468:	80 38       	cpi	r24, 0x80	; 128
    546a:	30 f4       	brcc	.+12     	; 0x5478 <__fp_rempio2+0x4a>
    546c:	9a 95       	dec	r25
    546e:	bb 0f       	add	r27, r27
    5470:	66 1f       	adc	r22, r22
    5472:	77 1f       	adc	r23, r23
    5474:	88 1f       	adc	r24, r24
    5476:	d2 f7       	brpl	.-12     	; 0x546c <__fp_rempio2+0x3e>
    5478:	90 48       	sbci	r25, 0x80	; 128
    547a:	06 c1       	rjmp	.+524    	; 0x5688 <__fp_mpack_finite>

0000547c <__fp_round>:
    547c:	09 2e       	mov	r0, r25
    547e:	03 94       	inc	r0
    5480:	00 0c       	add	r0, r0
    5482:	11 f4       	brne	.+4      	; 0x5488 <__fp_round+0xc>
    5484:	88 23       	and	r24, r24
    5486:	52 f0       	brmi	.+20     	; 0x549c <__fp_round+0x20>
    5488:	bb 0f       	add	r27, r27
    548a:	40 f4       	brcc	.+16     	; 0x549c <__fp_round+0x20>
    548c:	bf 2b       	or	r27, r31
    548e:	11 f4       	brne	.+4      	; 0x5494 <__fp_round+0x18>
    5490:	60 ff       	sbrs	r22, 0
    5492:	04 c0       	rjmp	.+8      	; 0x549c <__fp_round+0x20>
    5494:	6f 5f       	subi	r22, 0xFF	; 255
    5496:	7f 4f       	sbci	r23, 0xFF	; 255
    5498:	8f 4f       	sbci	r24, 0xFF	; 255
    549a:	9f 4f       	sbci	r25, 0xFF	; 255
    549c:	08 95       	ret

0000549e <__fp_sinus>:
    549e:	ef 93       	push	r30
    54a0:	e0 ff       	sbrs	r30, 0
    54a2:	06 c0       	rjmp	.+12     	; 0x54b0 <__fp_sinus+0x12>
    54a4:	a2 ea       	ldi	r26, 0xA2	; 162
    54a6:	2a ed       	ldi	r18, 0xDA	; 218
    54a8:	3f e0       	ldi	r19, 0x0F	; 15
    54aa:	49 ec       	ldi	r20, 0xC9	; 201
    54ac:	5f eb       	ldi	r21, 0xBF	; 191
    54ae:	d1 dd       	rcall	.-1118   	; 0x5052 <__addsf3x>
    54b0:	e5 df       	rcall	.-54     	; 0x547c <__fp_round>
    54b2:	0f 90       	pop	r0
    54b4:	03 94       	inc	r0
    54b6:	01 fc       	sbrc	r0, 1
    54b8:	90 58       	subi	r25, 0x80	; 128
    54ba:	e1 e8       	ldi	r30, 0x81	; 129
    54bc:	f0 e0       	ldi	r31, 0x00	; 0
    54be:	f7 c0       	rjmp	.+494    	; 0x56ae <__fp_powsodd>

000054c0 <__fp_split3>:
    54c0:	57 fd       	sbrc	r21, 7
    54c2:	90 58       	subi	r25, 0x80	; 128
    54c4:	44 0f       	add	r20, r20
    54c6:	55 1f       	adc	r21, r21
    54c8:	59 f0       	breq	.+22     	; 0x54e0 <__fp_splitA+0x10>
    54ca:	5f 3f       	cpi	r21, 0xFF	; 255
    54cc:	71 f0       	breq	.+28     	; 0x54ea <__fp_splitA+0x1a>
    54ce:	47 95       	ror	r20

000054d0 <__fp_splitA>:
    54d0:	88 0f       	add	r24, r24
    54d2:	97 fb       	bst	r25, 7
    54d4:	99 1f       	adc	r25, r25
    54d6:	61 f0       	breq	.+24     	; 0x54f0 <__fp_splitA+0x20>
    54d8:	9f 3f       	cpi	r25, 0xFF	; 255
    54da:	79 f0       	breq	.+30     	; 0x54fa <__fp_splitA+0x2a>
    54dc:	87 95       	ror	r24
    54de:	08 95       	ret
    54e0:	12 16       	cp	r1, r18
    54e2:	13 06       	cpc	r1, r19
    54e4:	14 06       	cpc	r1, r20
    54e6:	55 1f       	adc	r21, r21
    54e8:	f2 cf       	rjmp	.-28     	; 0x54ce <__fp_split3+0xe>
    54ea:	46 95       	lsr	r20
    54ec:	f1 df       	rcall	.-30     	; 0x54d0 <__fp_splitA>
    54ee:	08 c0       	rjmp	.+16     	; 0x5500 <__fp_splitA+0x30>
    54f0:	16 16       	cp	r1, r22
    54f2:	17 06       	cpc	r1, r23
    54f4:	18 06       	cpc	r1, r24
    54f6:	99 1f       	adc	r25, r25
    54f8:	f1 cf       	rjmp	.-30     	; 0x54dc <__fp_splitA+0xc>
    54fa:	86 95       	lsr	r24
    54fc:	71 05       	cpc	r23, r1
    54fe:	61 05       	cpc	r22, r1
    5500:	08 94       	sec
    5502:	08 95       	ret

00005504 <__fp_zero>:
    5504:	e8 94       	clt

00005506 <__fp_szero>:
    5506:	bb 27       	eor	r27, r27
    5508:	66 27       	eor	r22, r22
    550a:	77 27       	eor	r23, r23
    550c:	cb 01       	movw	r24, r22
    550e:	97 f9       	bld	r25, 7
    5510:	08 95       	ret

00005512 <__gesf2>:
    5512:	2c df       	rcall	.-424    	; 0x536c <__fp_cmp>
    5514:	08 f4       	brcc	.+2      	; 0x5518 <__gesf2+0x6>
    5516:	8f ef       	ldi	r24, 0xFF	; 255
    5518:	08 95       	ret

0000551a <inverse>:
    551a:	9b 01       	movw	r18, r22
    551c:	ac 01       	movw	r20, r24
    551e:	60 e0       	ldi	r22, 0x00	; 0
    5520:	70 e0       	ldi	r23, 0x00	; 0
    5522:	80 e8       	ldi	r24, 0x80	; 128
    5524:	9f e3       	ldi	r25, 0x3F	; 63
    5526:	51 ce       	rjmp	.-862    	; 0x51ca <__divsf3>

00005528 <__mulsf3>:
    5528:	0b d0       	rcall	.+22     	; 0x5540 <__mulsf3x>
    552a:	a8 cf       	rjmp	.-176    	; 0x547c <__fp_round>
    552c:	71 df       	rcall	.-286    	; 0x5410 <__fp_pscA>
    552e:	28 f0       	brcs	.+10     	; 0x553a <__mulsf3+0x12>
    5530:	76 df       	rcall	.-276    	; 0x541e <__fp_pscB>
    5532:	18 f0       	brcs	.+6      	; 0x553a <__mulsf3+0x12>
    5534:	95 23       	and	r25, r21
    5536:	09 f0       	breq	.+2      	; 0x553a <__mulsf3+0x12>
    5538:	3d cf       	rjmp	.-390    	; 0x53b4 <__fp_inf>
    553a:	42 cf       	rjmp	.-380    	; 0x53c0 <__fp_nan>
    553c:	11 24       	eor	r1, r1
    553e:	e3 cf       	rjmp	.-58     	; 0x5506 <__fp_szero>

00005540 <__mulsf3x>:
    5540:	bf df       	rcall	.-130    	; 0x54c0 <__fp_split3>
    5542:	a0 f3       	brcs	.-24     	; 0x552c <__mulsf3+0x4>

00005544 <__mulsf3_pse>:
    5544:	95 9f       	mul	r25, r21
    5546:	d1 f3       	breq	.-12     	; 0x553c <__mulsf3+0x14>
    5548:	95 0f       	add	r25, r21
    554a:	50 e0       	ldi	r21, 0x00	; 0
    554c:	55 1f       	adc	r21, r21
    554e:	62 9f       	mul	r22, r18
    5550:	f0 01       	movw	r30, r0
    5552:	72 9f       	mul	r23, r18
    5554:	bb 27       	eor	r27, r27
    5556:	f0 0d       	add	r31, r0
    5558:	b1 1d       	adc	r27, r1
    555a:	63 9f       	mul	r22, r19
    555c:	aa 27       	eor	r26, r26
    555e:	f0 0d       	add	r31, r0
    5560:	b1 1d       	adc	r27, r1
    5562:	aa 1f       	adc	r26, r26
    5564:	64 9f       	mul	r22, r20
    5566:	66 27       	eor	r22, r22
    5568:	b0 0d       	add	r27, r0
    556a:	a1 1d       	adc	r26, r1
    556c:	66 1f       	adc	r22, r22
    556e:	82 9f       	mul	r24, r18
    5570:	22 27       	eor	r18, r18
    5572:	b0 0d       	add	r27, r0
    5574:	a1 1d       	adc	r26, r1
    5576:	62 1f       	adc	r22, r18
    5578:	73 9f       	mul	r23, r19
    557a:	b0 0d       	add	r27, r0
    557c:	a1 1d       	adc	r26, r1
    557e:	62 1f       	adc	r22, r18
    5580:	83 9f       	mul	r24, r19
    5582:	a0 0d       	add	r26, r0
    5584:	61 1d       	adc	r22, r1
    5586:	22 1f       	adc	r18, r18
    5588:	74 9f       	mul	r23, r20
    558a:	33 27       	eor	r19, r19
    558c:	a0 0d       	add	r26, r0
    558e:	61 1d       	adc	r22, r1
    5590:	23 1f       	adc	r18, r19
    5592:	84 9f       	mul	r24, r20
    5594:	60 0d       	add	r22, r0
    5596:	21 1d       	adc	r18, r1
    5598:	82 2f       	mov	r24, r18
    559a:	76 2f       	mov	r23, r22
    559c:	6a 2f       	mov	r22, r26
    559e:	11 24       	eor	r1, r1
    55a0:	9f 57       	subi	r25, 0x7F	; 127
    55a2:	50 40       	sbci	r21, 0x00	; 0
    55a4:	8a f0       	brmi	.+34     	; 0x55c8 <__mulsf3_pse+0x84>
    55a6:	e1 f0       	breq	.+56     	; 0x55e0 <__mulsf3_pse+0x9c>
    55a8:	88 23       	and	r24, r24
    55aa:	4a f0       	brmi	.+18     	; 0x55be <__mulsf3_pse+0x7a>
    55ac:	ee 0f       	add	r30, r30
    55ae:	ff 1f       	adc	r31, r31
    55b0:	bb 1f       	adc	r27, r27
    55b2:	66 1f       	adc	r22, r22
    55b4:	77 1f       	adc	r23, r23
    55b6:	88 1f       	adc	r24, r24
    55b8:	91 50       	subi	r25, 0x01	; 1
    55ba:	50 40       	sbci	r21, 0x00	; 0
    55bc:	a9 f7       	brne	.-22     	; 0x55a8 <__mulsf3_pse+0x64>
    55be:	9e 3f       	cpi	r25, 0xFE	; 254
    55c0:	51 05       	cpc	r21, r1
    55c2:	70 f0       	brcs	.+28     	; 0x55e0 <__mulsf3_pse+0x9c>
    55c4:	f7 ce       	rjmp	.-530    	; 0x53b4 <__fp_inf>
    55c6:	9f cf       	rjmp	.-194    	; 0x5506 <__fp_szero>
    55c8:	5f 3f       	cpi	r21, 0xFF	; 255
    55ca:	ec f3       	brlt	.-6      	; 0x55c6 <__mulsf3_pse+0x82>
    55cc:	98 3e       	cpi	r25, 0xE8	; 232
    55ce:	dc f3       	brlt	.-10     	; 0x55c6 <__mulsf3_pse+0x82>
    55d0:	86 95       	lsr	r24
    55d2:	77 95       	ror	r23
    55d4:	67 95       	ror	r22
    55d6:	b7 95       	ror	r27
    55d8:	f7 95       	ror	r31
    55da:	e7 95       	ror	r30
    55dc:	9f 5f       	subi	r25, 0xFF	; 255
    55de:	c1 f7       	brne	.-16     	; 0x55d0 <__mulsf3_pse+0x8c>
    55e0:	fe 2b       	or	r31, r30
    55e2:	88 0f       	add	r24, r24
    55e4:	91 1d       	adc	r25, r1
    55e6:	96 95       	lsr	r25
    55e8:	87 95       	ror	r24
    55ea:	97 f9       	bld	r25, 7
    55ec:	08 95       	ret

000055ee <sin>:
    55ee:	9f 93       	push	r25
    55f0:	1e df       	rcall	.-452    	; 0x542e <__fp_rempio2>
    55f2:	0f 90       	pop	r0
    55f4:	07 fc       	sbrc	r0, 7
    55f6:	ee 5f       	subi	r30, 0xFE	; 254
    55f8:	52 cf       	rjmp	.-348    	; 0x549e <__fp_sinus>
    55fa:	11 f4       	brne	.+4      	; 0x5600 <sin+0x12>
    55fc:	0e f4       	brtc	.+2      	; 0x5600 <sin+0x12>
    55fe:	e0 ce       	rjmp	.-576    	; 0x53c0 <__fp_nan>
    5600:	41 c0       	rjmp	.+130    	; 0x5684 <__fp_mpack>

00005602 <sqrt>:
    5602:	66 df       	rcall	.-308    	; 0x54d0 <__fp_splitA>
    5604:	d0 f3       	brcs	.-12     	; 0x55fa <sin+0xc>
    5606:	99 23       	and	r25, r25
    5608:	d9 f3       	breq	.-10     	; 0x5600 <sin+0x12>
    560a:	ce f3       	brts	.-14     	; 0x55fe <sin+0x10>
    560c:	9f 57       	subi	r25, 0x7F	; 127
    560e:	55 0b       	sbc	r21, r21
    5610:	87 ff       	sbrs	r24, 7
    5612:	46 d0       	rcall	.+140    	; 0x56a0 <__fp_norm2>
    5614:	00 24       	eor	r0, r0
    5616:	a0 e6       	ldi	r26, 0x60	; 96
    5618:	40 ea       	ldi	r20, 0xA0	; 160
    561a:	90 01       	movw	r18, r0
    561c:	80 58       	subi	r24, 0x80	; 128
    561e:	56 95       	lsr	r21
    5620:	97 95       	ror	r25
    5622:	28 f4       	brcc	.+10     	; 0x562e <sqrt+0x2c>
    5624:	80 5c       	subi	r24, 0xC0	; 192
    5626:	66 0f       	add	r22, r22
    5628:	77 1f       	adc	r23, r23
    562a:	88 1f       	adc	r24, r24
    562c:	20 f0       	brcs	.+8      	; 0x5636 <sqrt+0x34>
    562e:	26 17       	cp	r18, r22
    5630:	37 07       	cpc	r19, r23
    5632:	48 07       	cpc	r20, r24
    5634:	30 f4       	brcc	.+12     	; 0x5642 <sqrt+0x40>
    5636:	62 1b       	sub	r22, r18
    5638:	73 0b       	sbc	r23, r19
    563a:	84 0b       	sbc	r24, r20
    563c:	20 29       	or	r18, r0
    563e:	31 29       	or	r19, r1
    5640:	4a 2b       	or	r20, r26
    5642:	a6 95       	lsr	r26
    5644:	17 94       	ror	r1
    5646:	07 94       	ror	r0
    5648:	20 25       	eor	r18, r0
    564a:	31 25       	eor	r19, r1
    564c:	4a 27       	eor	r20, r26
    564e:	58 f7       	brcc	.-42     	; 0x5626 <sqrt+0x24>
    5650:	66 0f       	add	r22, r22
    5652:	77 1f       	adc	r23, r23
    5654:	88 1f       	adc	r24, r24
    5656:	20 f0       	brcs	.+8      	; 0x5660 <sqrt+0x5e>
    5658:	26 17       	cp	r18, r22
    565a:	37 07       	cpc	r19, r23
    565c:	48 07       	cpc	r20, r24
    565e:	30 f4       	brcc	.+12     	; 0x566c <sqrt+0x6a>
    5660:	62 0b       	sbc	r22, r18
    5662:	73 0b       	sbc	r23, r19
    5664:	84 0b       	sbc	r24, r20
    5666:	20 0d       	add	r18, r0
    5668:	31 1d       	adc	r19, r1
    566a:	41 1d       	adc	r20, r1
    566c:	a0 95       	com	r26
    566e:	81 f7       	brne	.-32     	; 0x5650 <sqrt+0x4e>
    5670:	b9 01       	movw	r22, r18
    5672:	84 2f       	mov	r24, r20
    5674:	91 58       	subi	r25, 0x81	; 129
    5676:	88 0f       	add	r24, r24
    5678:	96 95       	lsr	r25
    567a:	87 95       	ror	r24
    567c:	08 95       	ret

0000567e <square>:
    567e:	9b 01       	movw	r18, r22
    5680:	ac 01       	movw	r20, r24
    5682:	52 cf       	rjmp	.-348    	; 0x5528 <__mulsf3>

00005684 <__fp_mpack>:
    5684:	9f 3f       	cpi	r25, 0xFF	; 255
    5686:	31 f0       	breq	.+12     	; 0x5694 <__fp_mpack_finite+0xc>

00005688 <__fp_mpack_finite>:
    5688:	91 50       	subi	r25, 0x01	; 1
    568a:	20 f4       	brcc	.+8      	; 0x5694 <__fp_mpack_finite+0xc>
    568c:	87 95       	ror	r24
    568e:	77 95       	ror	r23
    5690:	67 95       	ror	r22
    5692:	b7 95       	ror	r27
    5694:	88 0f       	add	r24, r24
    5696:	91 1d       	adc	r25, r1
    5698:	96 95       	lsr	r25
    569a:	87 95       	ror	r24
    569c:	97 f9       	bld	r25, 7
    569e:	08 95       	ret

000056a0 <__fp_norm2>:
    56a0:	91 50       	subi	r25, 0x01	; 1
    56a2:	50 40       	sbci	r21, 0x00	; 0
    56a4:	66 0f       	add	r22, r22
    56a6:	77 1f       	adc	r23, r23
    56a8:	88 1f       	adc	r24, r24
    56aa:	d2 f7       	brpl	.-12     	; 0x56a0 <__fp_norm2>
    56ac:	08 95       	ret

000056ae <__fp_powsodd>:
    56ae:	9f 93       	push	r25
    56b0:	8f 93       	push	r24
    56b2:	7f 93       	push	r23
    56b4:	6f 93       	push	r22
    56b6:	ff 93       	push	r31
    56b8:	ef 93       	push	r30
    56ba:	9b 01       	movw	r18, r22
    56bc:	ac 01       	movw	r20, r24
    56be:	34 df       	rcall	.-408    	; 0x5528 <__mulsf3>
    56c0:	ef 91       	pop	r30
    56c2:	ff 91       	pop	r31
    56c4:	80 de       	rcall	.-768    	; 0x53c6 <__fp_powser>
    56c6:	2f 91       	pop	r18
    56c8:	3f 91       	pop	r19
    56ca:	4f 91       	pop	r20
    56cc:	5f 91       	pop	r21
    56ce:	2c cf       	rjmp	.-424    	; 0x5528 <__mulsf3>

000056d0 <__mulsi3>:
    56d0:	db 01       	movw	r26, r22
    56d2:	8f 93       	push	r24
    56d4:	9f 93       	push	r25
    56d6:	0e 94 c2 2b 	call	0x5784	; 0x5784 <__muluhisi3>
    56da:	bf 91       	pop	r27
    56dc:	af 91       	pop	r26
    56de:	a2 9f       	mul	r26, r18
    56e0:	80 0d       	add	r24, r0
    56e2:	91 1d       	adc	r25, r1
    56e4:	a3 9f       	mul	r26, r19
    56e6:	90 0d       	add	r25, r0
    56e8:	b2 9f       	mul	r27, r18
    56ea:	90 0d       	add	r25, r0
    56ec:	11 24       	eor	r1, r1
    56ee:	08 95       	ret

000056f0 <__udivmodsi4>:
    56f0:	a1 e2       	ldi	r26, 0x21	; 33
    56f2:	1a 2e       	mov	r1, r26
    56f4:	aa 1b       	sub	r26, r26
    56f6:	bb 1b       	sub	r27, r27
    56f8:	fd 01       	movw	r30, r26
    56fa:	0d c0       	rjmp	.+26     	; 0x5716 <__udivmodsi4_ep>

000056fc <__udivmodsi4_loop>:
    56fc:	aa 1f       	adc	r26, r26
    56fe:	bb 1f       	adc	r27, r27
    5700:	ee 1f       	adc	r30, r30
    5702:	ff 1f       	adc	r31, r31
    5704:	a2 17       	cp	r26, r18
    5706:	b3 07       	cpc	r27, r19
    5708:	e4 07       	cpc	r30, r20
    570a:	f5 07       	cpc	r31, r21
    570c:	20 f0       	brcs	.+8      	; 0x5716 <__udivmodsi4_ep>
    570e:	a2 1b       	sub	r26, r18
    5710:	b3 0b       	sbc	r27, r19
    5712:	e4 0b       	sbc	r30, r20
    5714:	f5 0b       	sbc	r31, r21

00005716 <__udivmodsi4_ep>:
    5716:	66 1f       	adc	r22, r22
    5718:	77 1f       	adc	r23, r23
    571a:	88 1f       	adc	r24, r24
    571c:	99 1f       	adc	r25, r25
    571e:	1a 94       	dec	r1
    5720:	69 f7       	brne	.-38     	; 0x56fc <__udivmodsi4_loop>
    5722:	60 95       	com	r22
    5724:	70 95       	com	r23
    5726:	80 95       	com	r24
    5728:	90 95       	com	r25
    572a:	9b 01       	movw	r18, r22
    572c:	ac 01       	movw	r20, r24
    572e:	bd 01       	movw	r22, r26
    5730:	cf 01       	movw	r24, r30
    5732:	08 95       	ret

00005734 <__divmodsi4>:
    5734:	05 2e       	mov	r0, r21
    5736:	97 fb       	bst	r25, 7
    5738:	16 f4       	brtc	.+4      	; 0x573e <__divmodsi4+0xa>
    573a:	00 94       	com	r0
    573c:	07 d0       	rcall	.+14     	; 0x574c <__divmodsi4_neg1>
    573e:	57 fd       	sbrc	r21, 7
    5740:	0d d0       	rcall	.+26     	; 0x575c <__divmodsi4_neg2>
    5742:	0e 94 78 2b 	call	0x56f0	; 0x56f0 <__udivmodsi4>
    5746:	07 fc       	sbrc	r0, 7
    5748:	09 d0       	rcall	.+18     	; 0x575c <__divmodsi4_neg2>
    574a:	7e f4       	brtc	.+30     	; 0x576a <__divmodsi4_exit>

0000574c <__divmodsi4_neg1>:
    574c:	90 95       	com	r25
    574e:	80 95       	com	r24
    5750:	70 95       	com	r23
    5752:	61 95       	neg	r22
    5754:	7f 4f       	sbci	r23, 0xFF	; 255
    5756:	8f 4f       	sbci	r24, 0xFF	; 255
    5758:	9f 4f       	sbci	r25, 0xFF	; 255
    575a:	08 95       	ret

0000575c <__divmodsi4_neg2>:
    575c:	50 95       	com	r21
    575e:	40 95       	com	r20
    5760:	30 95       	com	r19
    5762:	21 95       	neg	r18
    5764:	3f 4f       	sbci	r19, 0xFF	; 255
    5766:	4f 4f       	sbci	r20, 0xFF	; 255
    5768:	5f 4f       	sbci	r21, 0xFF	; 255

0000576a <__divmodsi4_exit>:
    576a:	08 95       	ret

0000576c <__umulhisi3>:
    576c:	a2 9f       	mul	r26, r18
    576e:	b0 01       	movw	r22, r0
    5770:	b3 9f       	mul	r27, r19
    5772:	c0 01       	movw	r24, r0
    5774:	a3 9f       	mul	r26, r19
    5776:	01 d0       	rcall	.+2      	; 0x577a <__umulhisi3+0xe>
    5778:	b2 9f       	mul	r27, r18
    577a:	70 0d       	add	r23, r0
    577c:	81 1d       	adc	r24, r1
    577e:	11 24       	eor	r1, r1
    5780:	91 1d       	adc	r25, r1
    5782:	08 95       	ret

00005784 <__muluhisi3>:
    5784:	0e 94 b6 2b 	call	0x576c	; 0x576c <__umulhisi3>
    5788:	a5 9f       	mul	r26, r21
    578a:	90 0d       	add	r25, r0
    578c:	b4 9f       	mul	r27, r20
    578e:	90 0d       	add	r25, r0
    5790:	a4 9f       	mul	r26, r20
    5792:	80 0d       	add	r24, r0
    5794:	91 1d       	adc	r25, r1
    5796:	11 24       	eor	r1, r1
    5798:	08 95       	ret

0000579a <__mulshisi3>:
    579a:	b7 ff       	sbrs	r27, 7
    579c:	0c 94 c2 2b 	jmp	0x5784	; 0x5784 <__muluhisi3>

000057a0 <__mulohisi3>:
    57a0:	0e 94 c2 2b 	call	0x5784	; 0x5784 <__muluhisi3>
    57a4:	82 1b       	sub	r24, r18
    57a6:	93 0b       	sbc	r25, r19
    57a8:	08 95       	ret

000057aa <memcpy>:
    57aa:	fb 01       	movw	r30, r22
    57ac:	dc 01       	movw	r26, r24
    57ae:	02 c0       	rjmp	.+4      	; 0x57b4 <memcpy+0xa>
    57b0:	01 90       	ld	r0, Z+
    57b2:	0d 92       	st	X+, r0
    57b4:	41 50       	subi	r20, 0x01	; 1
    57b6:	50 40       	sbci	r21, 0x00	; 0
    57b8:	d8 f7       	brcc	.-10     	; 0x57b0 <memcpy+0x6>
    57ba:	08 95       	ret

000057bc <__eerd_dword_m32a>:
    57bc:	a6 e1       	ldi	r26, 0x16	; 22
    57be:	b0 e0       	ldi	r27, 0x00	; 0
    57c0:	44 e0       	ldi	r20, 0x04	; 4
    57c2:	50 e0       	ldi	r21, 0x00	; 0
    57c4:	0c 94 f3 2b 	jmp	0x57e6	; 0x57e6 <__eerd_blraw_m32a>

000057c8 <__eewr_dword_m32a>:
    57c8:	24 2f       	mov	r18, r20
    57ca:	0e 94 02 2c 	call	0x5804	; 0x5804 <__eewr_r18_m32a>
    57ce:	25 2f       	mov	r18, r21
    57d0:	0e 94 02 2c 	call	0x5804	; 0x5804 <__eewr_r18_m32a>
    57d4:	0c 94 ec 2b 	jmp	0x57d8	; 0x57d8 <__eewr_word_m32a>

000057d8 <__eewr_word_m32a>:
    57d8:	0e 94 01 2c 	call	0x5802	; 0x5802 <__eewr_byte_m32a>
    57dc:	27 2f       	mov	r18, r23
    57de:	0c 94 02 2c 	jmp	0x5804	; 0x5804 <__eewr_r18_m32a>

000057e2 <__eerd_block_m32a>:
    57e2:	dc 01       	movw	r26, r24
    57e4:	cb 01       	movw	r24, r22

000057e6 <__eerd_blraw_m32a>:
    57e6:	fc 01       	movw	r30, r24
    57e8:	e1 99       	sbic	0x1c, 1	; 28
    57ea:	fe cf       	rjmp	.-4      	; 0x57e8 <__eerd_blraw_m32a+0x2>
    57ec:	06 c0       	rjmp	.+12     	; 0x57fa <__eerd_blraw_m32a+0x14>
    57ee:	ff bb       	out	0x1f, r31	; 31
    57f0:	ee bb       	out	0x1e, r30	; 30
    57f2:	e0 9a       	sbi	0x1c, 0	; 28
    57f4:	31 96       	adiw	r30, 0x01	; 1
    57f6:	0d b2       	in	r0, 0x1d	; 29
    57f8:	0d 92       	st	X+, r0
    57fa:	41 50       	subi	r20, 0x01	; 1
    57fc:	50 40       	sbci	r21, 0x00	; 0
    57fe:	b8 f7       	brcc	.-18     	; 0x57ee <__eerd_blraw_m32a+0x8>
    5800:	08 95       	ret

00005802 <__eewr_byte_m32a>:
    5802:	26 2f       	mov	r18, r22

00005804 <__eewr_r18_m32a>:
    5804:	e1 99       	sbic	0x1c, 1	; 28
    5806:	fe cf       	rjmp	.-4      	; 0x5804 <__eewr_r18_m32a>
    5808:	9f bb       	out	0x1f, r25	; 31
    580a:	8e bb       	out	0x1e, r24	; 30
    580c:	2d bb       	out	0x1d, r18	; 29
    580e:	0f b6       	in	r0, 0x3f	; 63
    5810:	f8 94       	cli
    5812:	e2 9a       	sbi	0x1c, 2	; 28
    5814:	e1 9a       	sbi	0x1c, 1	; 28
    5816:	0f be       	out	0x3f, r0	; 63
    5818:	01 96       	adiw	r24, 0x01	; 1
    581a:	08 95       	ret

0000581c <_exit>:
    581c:	f8 94       	cli

0000581e <__stop_program>:
    581e:	ff cf       	rjmp	.-2      	; 0x581e <__stop_program>
